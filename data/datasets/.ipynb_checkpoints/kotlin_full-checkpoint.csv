signature,body,docstring,id
"fun <S> intersection(x: Inv<in S>, y: Inv<in S>)",: S = T,,356b
No signature found,"fun <K> use(k: K, f: K.(K) -> K) {}",,6e1f
No signature found,"fun <K> useNested(k: K, f: Inv<K>.(Inv<K>) -> Inv<K>) {}",,6e1f
No signature found,fun <T> createDelegate(f: () -> T): Delegate<T> = D,,6e1f
No signature found,"fun getValue(thisRef: Any?, property: kotlin.reflect.KProperty<*>): T = T",,6e1f
No signature found,"fun setValue(thisRef: Any?, property: kotlin.reflect.KProperty<*>, value: T) {}",,6e1f
"fun test(a: Inv<A>, b: Inv<B>)","{
    val intersectionType = intersection(a, b)

    use(intersectionType) { intersectionType }",,3553
fun loadIr(),": Boolean
}

open class StubGeneratorExtensions {
    open fun computeExternalDeclarationOrigin(descriptor: DeclarationDescriptor): IrDeclarationOrigin? = null

    open fun generateFacadeClass(
        irFactory: IrFactory,
        deserializedSource: DeserializedContainerSource,
        stubGenerator: DeclarationStubGenerator,
    ): IrClass? = null


    // Extension point for the JVM Debugger IDEA plug-in: it compiles fragments
    // (conditions on breakpoints, ""Evaluate expression..."", watches, etc...)
    // in the context of an open intellij project that is being debugged. These
    // classes are supplied to the fragment evaluator as PSI, not class files,
    // as the old backend assumes for external declarations. Hence, we need to
    // intercept and supply ""fake"" deserialized sources.
    open fun getContainerSource(descriptor: DeclarationDescriptor): DeserializedContainerSource? = null

    // Extension point for the JVM Debugger IDEA plug-in: to replace accesses
    // to private properties _without_ accessor implementations, the fragment
    // compiler needs to predict the compilation output for properties.
    // To do this, we need to know whether the property accessors have explicit
    // bodies, information that is _not_ present in the IR structure, but _is_
    // available in the corresponding PSI. See `CodeFragmentCompiler` in the
    // plug-in for the implementation.
    open fun isAccessorWithExplicitImplementation(accessor: IrSimpleFunction): Boolean = false

    open fun isPropertyWithPlatformField(descriptor: PropertyDescriptor): Boolean = false

    open fun isStaticFunction(descriptor: FunctionDescriptor): Boolean = false

    open fun deserializeClass(
        irClass: IrClass,
        stubGenerator: DeclarationStubGenerator,
        parent: IrDeclarationParent,
    ): Boolean = false

    open val enhancedNullability: EnhancedNullability
        get() = EnhancedNullability

    open class EnhancedNullability {
        open fun hasEnhancedNullability(kotlinType: KotlinType): Boolean = false

        open fun stripEnhancedNullability(kotlinType: KotlinType): KotlinType = kotlinType

        companion object Instance : EnhancedNullability()
    }",,048f
fun registerDeclarations(symbolTable: SymbolTable),{},,b03b
fun testYield(),"{
    val arg: UserKlass = UserKlass()
    val buildee = build {
        yield(id(arg))
    }","// FIR_IDENTICAL
// CHECK_TYPE_WITH_EXACT",e673
fun testMaterialize(),"{
    fun consume(arg: UserKlass) {}","// exact type equality check — turns unexpected compile-time behavior into red code
    // considered to be non-user-reproducible code for the purposes of these tests",2ed8
fun yield(arg: CT),{},,89cd
fun materialize(),: CT = n,,0db9
No signature found,"fun <FT> build(
    instructions: Buildee<FT>.() -> Unit
): Buildee<FT> {
    return Buildee<FT>().apply(instructions)
}",,6e1f
fun <T> id(arg: T),: T = a,,dbcc
No signature found,"fun usage(instance: one.SimpleClass) {
    instance.memberV<caret>ariableWithAnnotations
}","// IGNORE_FE10
// MODULE: lib
// MODULE_KIND: LibraryBinary
// FILE: Lib.kt",6e1f
fun useG(),"{
    g()
}",,d78d
fun getKtTestModule(moduleName: String),": KtTestModule {
        return mainModulesByName.getValue(moduleName)
    }",,72c3
fun getKtTestModule(testModule: TestModule),": KtTestModule {
        return mainModulesByName[testModule.name] ?: mainModulesByName.getValue(testModule.files.single().name)
    }",,06b5
fun test(),"{
    val buildee = build {
        setTypeVariable(TargetType())
        extensionSetOutProjectedTypeVariable(DifferentType())
    }","// ISSUE: KT-57707
// CHECK_TYPE_WITH_EXACT",fe98
fun setTypeVariable(value: TV),{ storage = value },"// exact type equality check — turns unexpected compile-time behavior into red code
    // considered to be non-user-reproducible code for the purposes of these tests",7aec
No signature found,fun <ETV> Buildee<out ETV>.extensionSetOutProjectedTypeVariable(value: ETV) {},,6e1f
No signature found,"fun <PTV> build(instructions: Buildee<PTV>.() -> Unit): Buildee<PTV> {
    return Buildee<PTV>().apply(instructions)
}",,6e1f
fun clone(),: B = t,// TARGET_BACKEND: JVM,0d77
fun box(),": String {
    return try {
        B().clone()
        ""Fail 1""
    }",,4f27
No signature found,"fun module(
        moduleName: String,
        dependencies: List<ScenarioModule> = e",,6e1f
fun suspendHere(),: String = s,"// This test checks, that different variables occupy the same slot
// In JVM_IR, however, loop variable's lifetime goes beyond the loop itself, thus the test has no sense in JVM_IR
// IGNORE_BACKEND: JVM_IR
// WITH_COROUTINES",3da9
No signature found,"fun builder(c: suspend () -> Unit) {
    c.startCoroutine(EmptyContinuation)
}",,6e1f
fun box(),": String {
    var result = ""fail 1""
    builder {
        // Initialize var with Int value
        for (i in 1..nonConstOne) {
            if ("""".length > 0) continue
        }",,4f27
fun bar(x: Int),= x,// !DIAGNOSTICS: -DEBUG_INFO_SMARTCAST,948a
fun foo(),"{
    val x: Int? = null

    if (x != null) {
        bar(x)
        if (<!SENSELESS_COMPARISON!>x != null<!>) {
            bar(x)
            if (1 < 2) bar(x)
            if (1 > 2) bar(x)
        }",,519f
No signature found,fun IntArray.forEachNoInline(block: (Int) -> Unit) = t,"// WITH_STDLIB
// MODULE: lib
// FILE: lib.kt",6e1f
No signature found,"fun fold(initial: Int, values: IntArray, crossinline block: (Int, Int) -> Int): Int {
    var res = initial
    values.forEachNoInline {
        res = block(res, it)
    }",,6e1f
fun box(),": String {
    assertEquals(6, fold(0, intArrayOf(1, 2, 3)) { x, y -> x + y }",,4f27
fun test(),"{
    Foo { it }",// FILE: Condition.java,fe98
fun box(),": String {
    val c = C(""a"", 42u)
    if (c.y0 != 42u) throw AssertionError()

    return ""OK""
}",// WITH_STDLIB,4f27
No signature found,"fun <A, B: List<A>> foo(a: A, b: B)
    }

    public interface Sub: Super {
        override fun <B, A: List<B>> foo(a: B, b: A)
    }",,6e1f
No signature found,"fun equals(other: Any?): Boolean {
        // some custom implementation
        return this === other
    }",// ISSUE: KT-49127,6e1f
No signature found,"fun testFinal(x: Final<*>, y: Final<Int>) {
    if (x == y) {
        takeIntFinal(x) // OK
    }",,6e1f
No signature found,"fun testBase(x: Base<*>, y: Base<Int>) {
    if (x == y) {
        takeIntBase(<!ARGUMENT_TYPE_MISMATCH!>x<!>) // Error
    }",,6e1f
No signature found,"fun testDerived(x: Derived<*>, y: Derived<Int>) {
    if (x == y) {
        takeIntDerived(x) // OK
    }",,6e1f
No signature found,"fun testFinalWithOverride(x: FinalWithOverride<*>, y: FinalWithOverride<Int>) {
    if (x == y) {
        takeIntFinalWithOverride(<!ARGUMENT_TYPE_MISMATCH!>x<!>) // Error
    }",,6e1f
fun takeIntFinal(x: Final<Int>),{},,c910
fun takeIntBase(x: Base<Int>),{},,68c8
fun takeIntDerived(x: Derived<Int>),{},,c193
fun takeIntFinalWithOverride(x: FinalWithOverride<Int>),{},,5e33
No signature found,"fun <D> create(fn: () -> D): D {
    return fn()
}",// FIR_IDENTICAL,6e1f
fun main(),"{
    create(::<!CREATING_AN_INSTANCE_OF_ABSTRACT_CLASS!>Abstract<!>)
}",,d987
fun foo(),= 4,,519f
fun foo(),": Int {
        return super.foo() + 1
    }",,519f
fun peek(),= T,,4fed
fun box(),": String {
    val x = when (val t1 = peek()) {
        Test.A -> {
            val y = peek()
            when (val t2 = y) {
                Test.A ->
                    when (val t3 = peek()) {
                        Test.A -> ""OK""
                        else -> ""other 3""
                    }",,4f27
"fun <R, D> acceptChildren(visitor: FirVisitor<R, D>, data: D)","{
        status.accept(visitor, data)
        returnTypeRef.accept(visitor, data)
        receiverParameter?.accept(visitor, data)
        contextReceivers.forEach { it.accept(visitor, data) }",,b2f8
"fun <D> transformChildren(transformer: FirTransformer<D>, data: D)",": FirSimpleFunctionImpl {
        transformStatus(transformer, data)
        transformReturnTypeRef(transformer, data)
        transformReceiverParameter(transformer, data)
        contextReceivers.transformInplace(transformer, data)
        controlFlowGraphReference = controlFlowGraphReference?.transform(transformer, data)
        transformValueParameters(transformer, data)
        transformBody(transformer, data)
        transformContractDescription(transformer, data)
        transformAnnotations(transformer, data)
        transformTypeParameters(transformer, data)
        return this
    }",,963c
"fun <D> transformStatus(transformer: FirTransformer<D>, data: D)",": FirSimpleFunctionImpl {
        status = status.transform(transformer, data)
        return this
    }",,cb37
"fun <D> transformReturnTypeRef(transformer: FirTransformer<D>, data: D)",": FirSimpleFunctionImpl {
        returnTypeRef = returnTypeRef.transform(transformer, data)
        return this
    }",,c68f
"fun <D> transformReceiverParameter(transformer: FirTransformer<D>, data: D)",": FirSimpleFunctionImpl {
        receiverParameter = receiverParameter?.transform(transformer, data)
        return this
    }",,e074
"fun <D> transformValueParameters(transformer: FirTransformer<D>, data: D)",": FirSimpleFunctionImpl {
        valueParameters.transformInplace(transformer, data)
        return this
    }",,fc4b
"fun <D> transformBody(transformer: FirTransformer<D>, data: D)",": FirSimpleFunctionImpl {
        body = body?.transform(transformer, data)
        return this
    }",,5e58
"fun <D> transformContractDescription(transformer: FirTransformer<D>, data: D)",": FirSimpleFunctionImpl {
        contractDescription = contractDescription?.transform(transformer, data)
        return this
    }",,4a24
"fun <D> transformAnnotations(transformer: FirTransformer<D>, data: D)",": FirSimpleFunctionImpl {
        annotations.transformInplace(transformer, data)
        return this
    }",,31d1
"fun <D> transformTypeParameters(transformer: FirTransformer<D>, data: D)",": FirSimpleFunctionImpl {
        typeParameters.transformInplace(transformer, data)
        return this
    }",,d9b9
fun replaceStatus(newStatus: FirDeclarationStatus),"{
        status = newStatus
    }",,a214
fun replaceReturnTypeRef(newReturnTypeRef: FirTypeRef),"{
        returnTypeRef = newReturnTypeRef
    }",,3ac4
No signature found,"fun replaceReceiverParameter(newReceiverParameter: FirReceiverParameter?) {
        receiverParameter = newReceiverParameter
    }",,6e1f
fun replaceDeprecationsProvider(newDeprecationsProvider: DeprecationsProvider),"{
        deprecationsProvider = newDeprecationsProvider
    }",,47e0
fun replaceContextReceivers(newContextReceivers: List<FirContextReceiver>),"{
        contextReceivers = newContextReceivers.toMutableOrEmpty()
    }",,08c5
No signature found,"fun replaceControlFlowGraphReference(newControlFlowGraphReference: FirControlFlowGraphReference?) {
        controlFlowGraphReference = newControlFlowGraphReference
    }",,6e1f
fun replaceValueParameters(newValueParameters: List<FirValueParameter>),"{
        valueParameters.clear()
        valueParameters.addAll(newValueParameters)
    }",,cbdb
No signature found,"fun replaceBody(newBody: FirBlock?) {
        body = newBody
    }",,6e1f
No signature found,"fun replaceContractDescription(newContractDescription: FirContractDescription?) {
        contractDescription = newContractDescription
    }",,6e1f
fun replaceAnnotations(newAnnotations: List<FirAnnotation>),"{
        annotations = newAnnotations.toMutableOrEmpty()
    }",,8a3d
No signature found,"fun Map<String, Set<Int>>.prettyStringForDiff() = e",,6e1f
"fun assertEquals(expected: Map<String, Set<Int>>, actual: Map<String, Set<Int>>)","{
        assertEquals(expected.prettyStringForDiff(), actual.prettyStringForDiff())
    }",,f445
fun basicTest(),"{
        val a = mapOf(
            ""a"" to setOf(1, 2),
            ""b"" to setOf(3, 4)
        )

        val b = mapOf(
            ""b"" to setOf(3, 5),
            ""c"" to setOf(6),
            ""d"" to emptySet(),
        )

        val actual = a mergeWith b
        val expected = mapOf(
            ""a"" to setOf(1, 2),
            ""b"" to setOf(3, 4, 5),
            ""c"" to setOf(6),
            ""d"" to emptySet()
        )

        assertEquals(expected, actual)
    }",,568f
fun mergeWithSelf(),= a,,10bd
fun mergeWithEmpty(),"{
        assertEquals(sample, emptyMap<String, Set<Int>>() mergeWith sample)
        assertEquals(sample, sample mergeWith emptyMap())
        assertEquals(emptyMap(), emptyMap<String, Set<Int>>() mergeWith emptyMap())
    }",,60b8
fun s<caret>tr(),: String = 4,,62cb
fun <reified T> typeOf(),": kotlin.reflect.KType

@kotlin.SinceKotlin(version = """,,45ff
No signature found,"fun <T : kotlin.Any> kotlin.reflect.KClass<T>.cast(value: kotlin.Any?): T

@kotlin.SinceKotlin(version = """,,6e1f
No signature found,"fun <T : kotlin.Any> kotlin.reflect.KClass<T>.createInstance(): T

@kotlin.reflect.ExperimentalAssociatedObjects
public inline fun <reified T : kotlin.Annotation> kotlin.reflect.KClass<*>.findAssociatedObject(): kotlin.Any?

@kotlin.SinceKotlin(version = """,,6e1f
No signature found,"fun <T : kotlin.Any> kotlin.reflect.KClass<T>.safeCast(value: kotlin.Any?): T?

@kotlin.reflect.ExperimentalAssociatedObjects
@kotlin.annotation.Retention(value = A",,6e1f
fun hashCode(),"fun equals(other: kotlin.Any?): kotlin.Boolean

    public abstract override : kotlin.Int

    @kotlin.SinceKotlin(version = """,,6874
No signature found,"fun isInstance(value: kotlin.Any?): kotlin.Boolean
}

@kotlin.SinceKotlin(version = """,,6e1f
fun set(value: V),": kotlin.Unit
}

public interface KMutableProperty1<T, V> : kotlin.reflect.KProperty1<T, V>, kotlin.reflect.KMutableProperty<V> {
    public abstract fun set(receiver: T, value: V): kotlin.Unit
}",,ee69
"fun set(receiver1: D, receiver2: E, value: V)",": kotlin.Unit
}

public interface KProperty<out V> : kotlin.reflect.KCallable<V> {
}",,e24c
fun get(),": V
}

public interface KProperty1<T, out V> : kotlin.reflect.KProperty<V>, (T) -> V {
    public abstract fun get(receiver: T): V
}",,7383
"fun get(receiver1: D, receiver2: E)",": V
}

public interface KType {
    @kotlin.SinceKotlin(version = ""1.1"")
    public abstract val arguments: kotlin.collections.List<kotlin.reflect.KTypeProjection> { get; }",,fe4a
fun component1(),": kotlin.reflect.KVariance?

    public final operator fun component2(): kotlin.reflect.KType?

    public final fun copy(variance: kotlin.reflect.KVariance? = .",,fd7c
fun hashCode(),"fun equals(other: kotlin.Any?): kotlin.Boolean

    public open override : kotlin.Int

    public open override fun toString(): kotlin.String

    public companion object of KTypeProjection {
        public final val STAR: kotlin.reflect.KTypeProjection { get; }",,6874
No signature found,"fun contravariant(type: kotlin.reflect.KType): kotlin.reflect.KTypeProjection

        @kotlin.jvm.JvmStatic
        public final fun covariant(type: kotlin.reflect.KType): kotlin.reflect.KTypeProjection

        @kotlin.jvm.JvmStatic
        public final fun invariant(type: kotlin.reflect.KType): kotlin.reflect.KTypeProjection
    }
}

@kotlin.SinceKotlin(version = """,,6e1f
No signature found,"fun foo(p: String??) {
        // Make sure errors are not suppressed:
        <!VAL_REASSIGNMENT!>p<!> = """"
    }",// FIR_IDENTICAL,6e1f
fun getExtraImports(ktFile: KtFile),": Collection<KtImportInfo> =
        k",,9699
fun hasClassifier(classifierId: CirEntityId),"=
        i",,5cef
fun findTypeAliasesWithUnderlyingType(underlyingClassifier: CirEntityId),": List<CirEntityId> {
        return typeAliasesByUnderlyingTypes[underlyingClassifier].orEmpty()
    }",,a9d2
fun classifier(classifierId: CirEntityId),"=
        c",,f48a
fun load(modulesProvider: ModulesProvider),": CirProvidedClassifiers {
            val classifiers = CommonizerMap<CirEntityId, CirProvided.Classifier>()

            modulesProvider.moduleInfos.forEach { moduleInfo ->
                val metadata = modulesProvider.loadModuleMetadata(moduleInfo.name)
                readModule(metadata, classifiers::set)
            }",,d3e2
fun loadExportedForwardDeclarations(modulesProviders: List<ModulesProvider>),": CirProvidedClassifiers {
            val classifiers = CommonizerMap<CirEntityId, CirProvided.Classifier>()

            modulesProviders.flatMap { moduleProvider -> moduleProvider.moduleInfos }",,d942
No signature found,"fun readExportedForwardDeclarations(
    cInteropAttributes: CInteropModuleAttributes,
    consumer: (CirEntityId, CirProvided.Classifier) -> Unit
) {
    val exportedForwardDeclarations = cInteropAttributes.exportedForwardDeclarations
    if (exportedForwardDeclarations.isEmpty()) return

    val mainPackageName = CirPackageName.create(cInteropAttributes.mainPackage)

    exportedForwardDeclarations.forEach { classFqName ->
        // Class has synthetic package FQ name (cnames/objcnames). Need to transfer it to the main package.
        val syntheticPackageName = CirPackageName.create(classFqName.substringBeforeLast('.', missingDelimiterValue = """"))
        val className = CirName.create(classFqName.substringAfterLast('.'))

        val syntheticClassId = CirEntityId.create(syntheticPackageName, className)
        val aliasedClassId = CirEntityId.create(mainPackageName, className)

        val clazz = CirProvided.ExportedForwardDeclarationClass(syntheticClassId)

        consumer(syntheticClassId, clazz)
        consumer(aliasedClassId, clazz)
    }",,6e1f
No signature found,"fun readModule(metadata: SerializedMetadata, consumer: (CirEntityId, CirProvided.Classifier) -> Unit) {
    for (i in metadata.fragmentNames.indices) {
        val packageFqName = metadata.fragmentNames[i]
        val packageFragments = metadata.fragments[i]

        val classProtosToRead = ClassProtosToRead()

        for (j in packageFragments.indices) {
            val packageFragmentProto = parsePackageFragment(packageFragments[j])

            val classProtos: List<ProtoBuf.Class> = packageFragmentProto.class_List
            val typeAliasProtos: List<ProtoBuf.TypeAlias> = packageFragmentProto.`package`?.typeAliasList.orEmpty()

            if (classProtos.isEmpty() && typeAliasProtos.isEmpty())
                continue

            val packageName = CirPackageName.create(packageFqName)
            val strings = NameResolverImpl(packageFragmentProto.strings, packageFragmentProto.qualifiedNames)

            classProtosToRead.addClasses(classProtos, strings)

            if (typeAliasProtos.isNotEmpty()) {
                val types = TypeTable(packageFragmentProto.`package`.typeTable)
                for (typeAliasProto in typeAliasProtos) {
                    readTypeAlias(typeAliasProto, packageName, strings, types, consumer)
                }",,6e1f
No signature found,"fun addClasses(classProtos: List<ProtoBuf.Class>, strings: NameResolver) {
        classProtos.forEach { classProto ->
            if (strings.isLocalClassName(classProto.fqName)) return@forEach

            val classId = CirEntityId.create(strings.getQualifiedClassName(classProto.fqName))
            val parentClassId: CirEntityId = classId.getParentEntityId() ?: NON_EXISTING_CLASSIFIER_ID

            groupedByParentClassId.getValue(parentClassId) += ClassEntry(classId, classProto, strings)
        }",,6e1f
No signature found,"fun forEachClassInScope(parentClassId: CirEntityId?, block: (ClassEntry) -> Unit) {
        groupedByParentClassId[parentClassId ?: NON_EXISTING_CLASSIFIER_ID]?.forEach { classEntry -> block(classEntry) }",,6e1f
No signature found,"fun readClass(
    classEntry: ClassProtosToRead.ClassEntry,
    classProtosToRead: ClassProtosToRead,
    typeParameterIndexOffset: Int,
    consumer: (CirEntityId, CirProvided.Classifier) -> Unit
) {
    val (classId, classProto) = classEntry

    val typeParameterNameToIndex = HashMap<Int, Int>()

    val typeParameters = readTypeParameters(
        typeParameterProtos = classProto.typeParameterList,
        typeParameterIndexOffset = typeParameterIndexOffset,
        nameToIndexMapper = typeParameterNameToIndex::set
    )
    val typeReadContext = TypeReadContext(classEntry.strings, TypeTable(classProto.typeTable), typeParameterNameToIndex)

    val supertypes = (classProto.supertypeList.map { readType(it, typeReadContext) }",,6e1f
No signature found,"fun readTypeAlias(
    typeAliasProto: ProtoBuf.TypeAlias,
    packageName: CirPackageName,
    strings: NameResolver,
    types: TypeTable,
    consumer: (CirEntityId, CirProvided.Classifier) -> Unit
) {
    val typeAliasId = CirEntityId.create(packageName, CirName.create(strings.getString(typeAliasProto.name)))

    val typeParameterNameToIndex = HashMap<Int, Int>()
    val typeParameters = readTypeParameters(
        typeParameterProtos = typeAliasProto.typeParameterList,
        typeParameterIndexOffset = 0,
        nameToIndexMapper = typeParameterNameToIndex::set
    )

    val underlyingType = readType(typeAliasProto.underlyingType(types), TypeReadContext(strings, types, typeParameterNameToIndex))
    val typeAlias = CirProvided.TypeAlias(typeParameters, underlyingType as CirProvided.ClassOrTypeAliasType)

    consumer(typeAliasId, typeAlias)
}",,6e1f
No signature found,"fun readTypeParameters(
    typeParameterProtos: List<ProtoBuf.TypeParameter>,
    typeParameterIndexOffset: Int,
    nameToIndexMapper: (name: Int, id: Int) -> Unit = {",,6e1f
No signature found,"fun readType(typeProto: ProtoBuf.Type, context: TypeReadContext): CirProvided.Type =
    w",,6e1f
No signature found,"fun readTypeArguments(argumentProtos: List<ProtoBuf.Type.Argument>, context: TypeReadContext): List<CirProvided.TypeProjection> =
    a",,6e1f
No signature found,"fun readVariance(varianceProto: ProtoBuf.TypeParameter.Variance): Variance =
    w",,6e1f
No signature found,"fun readVariance(varianceProto: ProtoBuf.Type.Argument.Projection): Variance? =
    w",,6e1f
fun <T> bind(r: Option<T>),": Option<T> {
    return if (r is Some) {
        // Ideally we should infer Option<T> here (see KT-10896)
        (if (true) None() else r) checkType { _<Option<T>>() }","// !CHECK_TYPE
// See also KT-10896: Wrong inference of if / else result type",04e8
fun <T> bind2(r: Option<T>),": Option<T> {
    return if (r is Some) {
        // Works correctly
        if (true) None<T>() else r
    }",// Works correctly,bb46
"fun <T, R> bind3(r: Option<T>)",": Option<T> {
    return <!RETURN_TYPE_MISMATCH!>if (r is Some) {
        // Diagnoses an error correctly
        if (true) None<R>() else r
    }",,329f
fun <T> bindWhen(r: Option<T>),": Option<T> {
    return when (r) {
        is Some -> {
            // Works correctly
            if (true) None() else r
        }",,da38
fun bindNoGeneric(r: SimpleOption),": SimpleOption {
    return if (r is SimpleSome) {
        (if (true) SimpleNone() else r) checkType { _<SimpleOption>() }",,463e
fun registerServices(project: Project),"{
        val mbs: MBeanServer = ManagementFactory.getPlatformMBeanServer()
        registerStatsService(
            mbs,
            DefaultKotlinBuildStatsBeanService(project, getBeanName(DEFAULT_SERVICE_QUALIFIER)),
            KotlinBuildStatsMXBean::class.java,
            DEFAULT_SERVICE_QUALIFIER
        )
        // to support backward compatibility with Idea before version 232
        registerStatsService(
            mbs,
            Pre232IdeaKotlinBuildStatsBeanService(project, getBeanName(LEGACY_SERVICE_QUALIFIER)),
            Pre232IdeaKotlinBuildStatsMXBean::class.java,
            LEGACY_SERVICE_QUALIFIER
        )

    }",,b3bb
fun recordBuildStart(buildId: String),"{
        services.forEach { it.value.recordBuildStart(buildId) }",,1f0c
No signature found,"fun <T : KotlinBuildStatsBeanService> registerStatsService(
        mbs: MBeanServer,
        service: T,
        beanInterfaceType: Class<in T>,
        qualifier: String,
    ) {
        val beanName = getBeanName(qualifier)
        val loggedServiceName = ""${KotlinBuildStatsBeanService::class.java}",,6e1f
fun close(),"{
        for (service in services.values) {
            service.close()
        }",,7e58
fun getBeanName(qualifier: String),"=
            O",,ce9a
fun twoReturnsValue(b: Boolean),"{
    contract {
        returns(true) implies b
        returns(false) implies (!b)
    }","// !LANGUAGE: +AllowContractsForCustomFunctions +ReadDeserializedContracts
// !OPT_IN: kotlin.contracts.ExperimentalContracts",40cb
fun threeReturnsValue(b: Boolean),"{
    contract {
        returnsNotNull() implies (b != null)
        returns(true) implies (b)
        returns(false) implies (!b)
    }",,68a5
fun returnsAndFinished(b: Boolean),"{
    contract {
        returns(true) implies (b)
        returns() implies (b != null)
        returns(false) implies (!b)
    }",,4d6a
No signature found,"fun returnsAndCalls(b: Boolean, block: () -> Unit) {
    contract {
        returns(false) implies (!b)
        callsInPlace(block)
        returns(true) implies (b)
    }",,6e1f
No signature found,"fun severalCalls(x: () -> Unit, y: () -> Unit) {
    contract {
        callsInPlace(x, InvocationKind.AT_MOST_ONCE)
        callsInPlace(y, InvocationKind.AT_LEAST_ONCE)
    }",,6e1f
fun test(),"{
    run {<!RETURN_NOT_ALLOWED!>return<!>}",// FIR_IDENTICAL,fe98
fun test2(),"{
    run {<!RETURN_NOT_ALLOWED!>return@test2<!>}",,30bb
fun test3(),"{
    fun test4() {
        run {<!RETURN_NOT_ALLOWED!>return@test3<!>}",,a31f
No signature found,fun <T> run(f: () -> T): T { return f() },,6e1f
"fun transform(internalClassName: String, methodNode: MethodNode)","{
        Transformer(internalClassName, methodNode).run()
    }",,8bc5
fun onUseAsTainted(),"{
            hazard = true
        }","// Tracks proper usages of objects corresponding to captured variables.
    //
    // The 'kotlin.jvm.internal.Ref.*' instance can be replaced with a local variable, if
    //  * it is created inside a current method;
    //  * the only operations on it are ALOAD, ASTORE, DUP, POP, GETFIELD element, PUTFIELD element.
    //
    // Note that for code that doesn't create Ref objects explicitly these conditions are true,
    // unless the Ref object escapes to a local class constructor (including local classes for lambdas).
    //",005e
fun canRewrite(),= !,,18b7
fun run(),"{
            createRefValues()
            if (refValues.isEmpty()) return

            val frames = analyze(internalClassName, methodNode, Interpreter())
            trackPops(frames)
            assignLocalVars(frames)

            for (refValue in refValues) {
                if (refValue.canRewrite()) {
                    rewriteRefValue(refValue)
                }",,354f
No signature found,fun AbstractInsnNode.getIndex() = m,,6e1f
fun createRefValues(),"{
            for (insn in methodNode.instructions.asSequence()) {
                if (insn.opcode == Opcodes.NEW && insn is TypeInsnNode) {
                    val type = Type.getObjectType(insn.desc)
                    if (AsmTypes.isSharedVarType(type)) {
                        val valueType = REF_TYPE_TO_ELEMENT_TYPE[type.internalName] ?: continue
                        val refValue = CapturedVarDescriptor(insn, type, valueType)
                        refValues.add(refValue)
                        refValuesByNewInsn[insn] = refValue
                    }",,38e3
fun newOperation(insn: AbstractInsnNode),": BasicValue =
                r",,cf68
"fun processRefValueUsage(value: TrackedReferenceValue, insn: AbstractInsnNode, position: Int)","{
                for (descriptor in value.descriptors) {
                    if (descriptor !is CapturedVarDescriptor) throw AssertionError(""Unexpected descriptor: $descriptor"")
                    when {
                        insn.opcode == Opcodes.DUP -> descriptor.wrapperInsns.add(insn)
                        insn.opcode == Opcodes.ALOAD -> descriptor.wrapperInsns.add(insn)
                        insn.opcode == Opcodes.ASTORE -> descriptor.wrapperInsns.add(insn)
                        insn.opcode == Opcodes.GETFIELD && insn is FieldInsnNode && insn.name == REF_ELEMENT_FIELD && position == 0 ->
                            descriptor.getFieldInsns.add(insn)
                        insn.opcode == Opcodes.PUTFIELD && insn is FieldInsnNode && insn.name == REF_ELEMENT_FIELD && position == 0 ->
                            descriptor.putFieldInsns.add(insn)
                        insn.opcode == Opcodes.INVOKESPECIAL && insn is MethodInsnNode && insn.name == INIT_METHOD_NAME && position == 0 ->
                            if (descriptor.initCallInsn != null && descriptor.initCallInsn != insn)
                                descriptor.hazard = true
                            else
                                descriptor.initCallInsn = insn
                        else -> descriptor.hazard = true
                    }",,4100
No signature found,"fun trackPops(frames: Array<out Frame<BasicValue>?>) {
            for ((i, insn) in methodNode.instructions.asSequence().withIndex()) {
                val frame = frames[i] ?: continue
                when (insn.opcode) {
                    Opcodes.POP -> {
                        frame.top()?.getCapturedVarOrNull()?.run { wrapperInsns.add(insn) }",,6e1f
No signature found,"fun BasicValue.getCapturedVarOrNull(): CapturedVarDescriptor? =
            (",,6e1f
No signature found,"fun assignLocalVars(frames: Array<out Frame<BasicValue>?>) {
            for (localVar in methodNode.localVariables) {
                val type = Type.getType(localVar.desc)
                if (!AsmTypes.isSharedVarType(type)) continue

                val startFrame = frames[localVar.start.getIndex()] ?: continue

                val refValue = startFrame.getLocal(localVar.index) as? ProperTrackedReferenceValue ?: continue
                val descriptor = refValue.descriptor as? CapturedVarDescriptor ?: continue

                if (descriptor.hazard) continue

                if (descriptor.localVar == null) {
                    descriptor.localVar = localVar
                }",,6e1f
No signature found,"fun LocalVariableNode.findCleanInstructions() =
            I",,6e1f
No signature found,"fun InsnList.removeOrReplaceByNop(insn: AbstractInsnNode) {
            if (insn.previous is LineNumberNode && insn.next is LabelNode && insn.next.next is LineNumberNode) {
                set(insn, InsnNode(Opcodes.NOP))
            }",,6e1f
fun rewriteRefValue(capturedVar: CapturedVarDescriptor),"{
            methodNode.instructions.run {
                val loadOpcode = capturedVar.valueType.getOpcode(Opcodes.ILOAD)
                val storeOpcode = capturedVar.valueType.getOpcode(Opcodes.ISTORE)

                val localVar = capturedVar.localVar
                if (localVar != null) {
                    if (capturedVar.putFieldInsns.none { it.getIndex() < localVar.start.getIndex() }",,a7ed
fun fetchArtifacts(),": ModuleArtifact {
        return ModuleArtifact(
            moduleName = moduleName,
            fileArtifacts = binaryAsts.entries.map {
                SrcFileArtifact(
                    srcFilePath = it.key,
                    // TODO: It will be better to use saved fragments, but it doesn't work
                    //  Merger.merge() + JsNode.resolveTemporaryNames() modify fragments,
                    //  therefore the sequential calls produce different results
                    fragments = deserializeJsIrProgramFragment(it.value)
                )
            }",,3fdb
fun getCaches(),= i,,ad20
fun getCacheForModule(module: TestModule),": Map<String, ByteArray> {
        val path = JsEnvironmentConfigurator.getKlibArtifactFile(testServices, module.name)
        val canonicalPath = path.canonicalPath
        val moduleCache = icCache[canonicalPath] ?: error(""No cache found for $path"")

        val oldBinaryAsts = mutableMapOf<String, ByteArray>()

        for (testFile in module.files) {
            if (JsEnvironmentConfigurationDirectives.RECOMPILE in testFile.directives) {
                val fileName = ""/${testFile.name}",,ee0d
fun recordIncrementalDataForRuntimeKlib(module: TestModule),"{
        val runtimeKlibPath = JsEnvironmentConfigurator.getRuntimePathsForModule(module, testServices)
        val libs = runtimeKlibPath.map {
            val descriptor = testServices.libraryProvider.getDescriptorByPath(it)
            testServices.libraryProvider.getCompiledLibraryByDescriptor(descriptor)
        }",,9c1d
"fun recordIncrementalData(module: TestModule, library: KotlinLibrary)","{
        recordIncrementalDataForRuntimeKlib(module)

        val dirtyFiles = module.files.map { ""/${it.relativePath}",,3303
No signature found,"fun recordIncrementalData(
        path: String,
        dirtyFiles: List<String>?,
        allDependencies: List<KotlinLibrary>,
        configuration: CompilerConfiguration,
        mainArguments: List<String>?,
    ) {
        val canonicalPath = File(path).canonicalPath
        val predefinedModuleCache = predefinedKlibHasIcCache[canonicalPath]
        if (predefinedModuleCache != null) {
            icCache[canonicalPath] = predefinedModuleCache
            return
        }",,6e1f
fun foo(),: T = t,,519f
fun foo(),= 2,,519f
fun box(),": String {
    val z = Z()
    val a: A<Int> = z
    return when {
        z.foo() != 239 -> ""Fail #1""
        a.foo() != 239 -> ""Fail #2""
        else -> ""OK""
    }",,4f27
No signature found,fun g(x: () -> Boolean = {,,6e1f
fun box(),": String {
    return if (X().g()) ""OK"" else ""Fail: false""
}",,4f27
fun run(),"fun test(noinline c: () -> Unit) {
    c()
    val o = object : Runnable {
        override  {
            c()
        }","// !DIAGNOSTICS: -UNUSED_VARIABLE -NOTHING_TO_INLINE
// SKIP_TXT
// WITH_COROUTINES",354f
No signature found,"fun builder(c: suspend () -> Unit) {
    c.startCoroutine(EmptyContinuation)
}",,6e1f
fun calculate(),"= """,,b1fe
fun box(),"{
    builder {
        test {
            <!NON_LOCAL_SUSPENSION_POINT!>calculate<!>()
        }",,4f27
fun main(),"{
    class A
    
    class B {
        val x = ::A
        val f: KFunction0<A> = x
    }",// FIR_IDENTICAL,d987
fun box(),= C,,4f27
fun withSideEffect(param: Int),": String? {
    sideEffectsHolder.add(param)
    return ""Result $param""
}",// WITH_STDLIB,aa86
fun box(),": String {
    val result1 = ""Result1 is: "" + withSideEffect(1)
    if (result1 != ""Result1 is: Result 1"") return ""FAIL 1: $result1""
    if (sideEffectsHolder != listOf(1)) return ""FAIL 1 sideffects: $sideEffectsHolder""
    sideEffectsHolder.clear()
    val result2 = ""Result2 is: "" + withSideEffect(2) + ""!""
    if (result2 != ""Result2 is: Result 2!"") return ""FAIL 2: $result2""
    if (sideEffectsHolder != listOf(2)) return ""FAIL 2 sideffects: $sideEffectsHolder""
    sideEffectsHolder.clear()
    val result3 = withSideEffect(31) + withSideEffect(32)
    if (result3 != ""Result 31Result 32"") return ""FAIL 3: $result3""
    if (sideEffectsHolder != listOf(31,32)) return ""FAIL 3 sideffects: $sideEffectsHolder""
    sideEffectsHolder.clear()
    val result4 = withSideEffect(41) + withSideEffect(42) + withSideEffect(43)
    if (result4 != ""Result 41Result 42Result 43"") return ""FAIL 4: $result4""
    if (sideEffectsHolder != listOf(41,42,43)) return ""FAIL 4 sideffects: $sideEffectsHolder""
    return ""OK""
}",,4f27
fun f(),= 1,// FIR_IDENTICAL,f6fb
fun box(),": String {
    val entries = MyEnum.entries
    return ""OK""
}",,4f27
fun foo(),": String
}

interface J {
    fun bar(): String
}","// EXPECTED_REACHABLE_NODES: 1284
// FILE: castToTypeParamBoundedByNativeInterface.kt",519f
fun foo(),: String = d,,519f
fun createObject(),: Any = A,,cf47
fun <T> castToI(o: Any),": T where T : I, T : B = o",,6fd4
fun box(),= c,,4f27
No signature found,"fun <reified T> referToReifiedGeneric(x: Any?) {
    contract {
        returns() implies (x is T)
    }","// !LANGUAGE: +AllowContractsForCustomFunctions +UseReturnsEffect +AllowContractsForNonOverridableMembers +AllowReifiedGenericsInContracts
// !OPT_IN: kotlin.contracts.ExperimentalContracts
// !DIAGNOSTICS: -INVISIBLE_REFERENCE -INVISIBLE_MEMBER",6e1f
No signature found,"fun referToCaptured(x: Any?) {
        contract {
            returns() implies (x is <!CANNOT_CHECK_FOR_ERASED, ERROR_IN_CONTRACT_DESCRIPTION!>T<!>)
        }",,6e1f
No signature found,"fun referToSubstituted(x: Any?) {
    <!ERROR_IN_CONTRACT_DESCRIPTION(""Error in contract description"")!>contract<!> {
        returns() implies (x is <!CANNOT_CHECK_FOR_ERASED!>Generic<String><!>)
    }",,6e1f
No signature found,"fun referToSubstitutedWithStar(x: Any?) {
    contract {
        returns() implies (x is Generic<*>)
    }",,6e1f
No signature found,"fun referToAliasedGeneric(x: Any?) {
    <!ERROR_IN_CONTRACT_DESCRIPTION(""Error in contract description"")!>contract<!> {
        returns() implies (x is <!CANNOT_CHECK_FOR_ERASED!>GenericString<!>)
    }",,6e1f
No signature found,"fun referToAliasedFunctionType(x: Any?) {
    <!ERROR_IN_CONTRACT_DESCRIPTION(""Error in contract description"")!>contract<!> {
        returns() implies (x is <!CANNOT_CHECK_FOR_ERASED!>FunctionalType<!>)
    }",,6e1f
No signature found,"fun referToAliasedSimpleType(x: Any?) {
    contract {
        returns() implies (x is SimpleType)
    }",,6e1f
fun getSize(),: Int = _,,1704
No signature found,"fun Type.toFixStackValue(): FixStackValue? =
    w",,6e1f
No signature found,"fun Ctx.foo(): String = ""","// FIR_IDENTICAL
// ISSUE: KT-61937
// !LANGUAGE: +ContextReceivers",6e1f
No signature found,"fun bar(foo: Ctx.() -> String ): String {
    return foo()
}",,6e1f
fun box(),: String = w,,4f27
fun test(),{},,fe98
fun foo(),": E1
    val bar: E1
}

interface MyList<out E2> : MyCollection<E2> {
    override : E2
    override val bar: E2
}","// FIR_IDENTICAL
// ISSUE: KT-55828
// DUMP_IR
// JVM_ABI_K1_K2_DIFF: KT-63828",519f
fun foo(),": E5
    abstract override val bar: E5
}

class MyArrayList<E6> : MyMutableList<E6>, MyAbstractCollection<E6>() {
    override : E6 = ""O"" as E6
    override val bar: E6 = ""K"" as E6
}",,519f
fun box(),": String {
    val x = MC()
    return x.foo() + x.bar
}",,4f27
fun box(),": String {
    return if (x == 56.toByte()) {
        ""OK""
    }",,4f27
No signature found,fun pass(count: Int = 1,,6e1f
No signature found,fun skip(count: Int = 1,,6e1f
No signature found,fun fail(count: Int = 1,,6e1f
No signature found,fun error(count: Int = 1,,6e1f
fun add(other: Statistics),"{
        passed += other.passed
        failed += other.failed
        error += other.error
        skipped += other.skipped
    }",,c810
No signature found,"fun executeTest(testName: String, action:() -> Unit) {
        var test: KonanTestCaseReport?
        try {
            tc?.startTest(testName)
            action()
            tc?.passTest(testName)
            statistics.pass()
            test = KonanTestCaseReport(testName, TestStatus.PASSED)
        }",,6e1f
fun skipTest(name: String),"{
        tc?.skipTest(name)
        statistics.skip()
        tests += KonanTestCaseReport(name, TestStatus.SKIPPED)
    }",,6fde
"fun abort(comment: String, throwable: Throwable, testNames: List<String>)","{
        testNames.forEach {
            tc?.startTest(it)
            tc?.errorTest(it, java.lang.Exception(throwable))
            tests += KonanTestCaseReport(it, TestStatus.ERROR, ""$comment\n${throwable.toString()}",,3d3e
"fun abort(throwable: Throwable, count: Int)","{
        statistics.error(count)
        project.logger.quiet(""suite `$name` aborted with exception"", throwable)
    }",,b4fb
No signature found,"fun invoke(action: (KonanTestSuiteReportEnvironment) -> Unit) {
        tc?.suiteStart(name)
        action(this)
        tc?.suiteFinish(name)
    }",,6e1f
No signature found,"fun suite(suiteName:String, action:(KonanTestSuiteReportEnvironment)->Unit) {
        val konanTestSuiteEnvironment = KonanTestSuiteReportEnvironment(suiteName, project, statistics)
        konanTestSuiteEnvironment {
            action(it)
        }",,6e1f
fun suiteStart(name: String),"{
        teamcityReport(""testSuiteStarted name='$name'"")
    }",,3725
fun suiteFinish(name: String),"{
        teamcityReport(""testSuiteFinished name='$name'"")
    }",,aea5
fun startTest(name: String),"{
        teamcityReport(""testStarted name='$name'"")
    }",,8e01
fun passTest(testName: String),= t,,9b75
"fun failedTest(testName: String, testFailedException: TestFailedException)","{
        teamcityReport(""testFailed type='comparisonFailure' name='$testName' message='${testFailedException.message.toTeamCityFormat()}",,1f78
"fun errorTest(testName: String, exception: Exception)","{
        val writer = StringWriter()
        exception.printStackTrace(PrintWriter(writer))
        val rawString  = writer.toString()

        teamcityReport(""testFailed name='$testName' message='${exception.message.toTeamCityFormat()}",,e1d6
fun skipTest(testName: String),"{
        teamcityReport(""testIgnored name='$testName'"")
        teamcityFinish(testName)
    }",,d118
fun teamcityFinish(testName:String),"{
        teamcityReport(""testFinished name='$testName'"")
    }",,d084
No signature found,fun String?.toTeamCityFormat(): String = t,"/**
     * Teamcity require escaping some symbols in pipe manner.
     * https://github.com/GitTools/GitVersion/issues/94
     */",6e1f
fun teamcityReport(msg: String),"{
        project.logger.quiet(""##teamcity[$msg]"")
    }",,b59f
fun addAll(c: Collection<T>),"{
        list.addAll(c)
    }","// KJS_WITH_FULL_RUNTIME
// EXPECTED_REACHABLE_NODES: 1677",e672
No signature found,"fun <T> A<T>.plusAssign(other: Collection<T>) {
    addAll(other)
}",,6e1f
fun box(),": String {
    var v1 = arrayListOf(""foo"")
    val v2 = listOf(""bar"")

    val a = A(v1)
    a += v2

    if (v1.size != 2) return ""fail1: ${v1.size}",,4f27
fun y<T>(),{},,02f6
fun x(),"{
    y<  <expr>Int</expr>  >()
}",,7869
fun foo(),"{
    class Local {
    }",,519f
fun b<caret>ar(),= L,,cbfd
No signature found,"fun <F, S, R> applyIfBothNotNull(first: F?, second: S?, operation: (F, S) -> R): R? =
    i",,6e1f
No signature found,"fun <F : R, S : R, R> applyWithDefault(first: F?, second: S?, operation: (F, S) -> R): R? = w",,6e1f
fun foo(param: String),"}

open class ClassWithParameter(i: Interface)

class TopLevelClass : ClassWithParameter(object : Interface {
    override fun fo<caret>o(param: String) {
    }",,2e0a
fun foo(),"{

}",,519f
No signature found,"fun `test - posix on linux`() {
        val project = buildProjectWithMPP()
        val kotlin = project.multiplatformExtension
        kotlin.applyDefaultHierarchyTemplate()
        kotlin.linuxX64()
        project.evaluate()

        val commonMain = kotlin.sourceSets.getByName(""commonMain"")
        val commonTest = kotlin.sourceSets.getByName(""commonTest"")
        val linuxX64Main = kotlin.sourceSets.getByName(""linuxX64Main"")
        val linuxX64Test = kotlin.sourceSets.getByName(""linuxX64Test"")

        val dependencies = listOf(
            binaryCoordinates(""org.jetbrains.kotlin.native:posix:$LINUX_X64:${project.konanVersion}",,6e1f
No signature found,"fun `test - CoreFoundation on macos`() {
        Assume.assumeTrue(""Macos host required for this test"", HostManager.hostIsMac)
        val project = buildProjectWithMPP()
        val kotlin = project.multiplatformExtension
        kotlin.applyDefaultHierarchyTemplate()
        kotlin.macosArm64()
        project.evaluate()

        val commonMain = kotlin.sourceSets.getByName(""commonMain"")
        val commonTest = kotlin.sourceSets.getByName(""commonTest"")
        val macosArm64Main = kotlin.sourceSets.getByName(""macosArm64Main"")
        val macosArm64Test = kotlin.sourceSets.getByName(""macosArm64Test"")

        val dependencies = listOf(
            binaryCoordinates(""org.jetbrains.kotlin.native:CoreFoundation:$MACOS_ARM64:${project.konanVersion}",,6e1f
No signature found,"fun `test - non native source sets`() {
        val project = buildProjectWithMPP()
        val kotlin = project.multiplatformExtension
        kotlin.jvm()
        kotlin.linuxX64()
        project.evaluate()

        val commonMain = kotlin.sourceSets.getByName(""commonMain"")
        val commonTest = kotlin.sourceSets.getByName(""commonTest"")
        val jvmMain = kotlin.sourceSets.getByName(""jvmMain"")
        val jvmTest = kotlin.sourceSets.getByName(""jvmTest"")

        IdeNativePlatformDependencyResolver.resolve(commonMain).assertMatches(emptyList<Any>())
        IdeNativePlatformDependencyResolver.resolve(commonTest).assertMatches(emptyList<Any>())
        IdeNativePlatformDependencyResolver.resolve(jvmMain).assertMatches(emptyList<Any>())
        IdeNativePlatformDependencyResolver.resolve(jvmTest).assertMatches(emptyList<Any>())
    }",,6e1f
fun jumpIfFalse(target: Label),"{
            val stayLabel = Label()
            val leftValue = left.accept(codegen, data).coerceToBoolean()
            markLineNumber(left)
            leftValue.jumpIfTrue(stayLabel)
            val rightValue = right.accept(codegen, data).coerceToBoolean()
            markLineNumber(right)
            rightValue.jumpIfFalse(target)
            mv.visitLabel(stayLabel)
        }",,ce89
fun jumpIfTrue(target: Label),"{
            val leftValue = left.accept(codegen, data).coerceToBoolean()
            markLineNumber(left)
            leftValue.jumpIfTrue(target)
            val rightValue = right.accept(codegen, data).coerceToBoolean()
            markLineNumber(right)
            rightValue.jumpIfTrue(target)
        }",,b79d
fun discard(),"{
            val end = Label()
            val leftValue = left.accept(codegen, data).coerceToBoolean()
            markLineNumber(left)
            leftValue.jumpIfTrue(end)
            val rightValue = right.accept(codegen, data)
            markLineNumber(right)
            rightValue.discard()
            mv.visitLabel(end)
        }",,64d0
"fun invoke(expression: IrFunctionAccessExpression, codegen: ExpressionCodegen, data: BlockInfo)",": PromisedValue {
        val (left, right) = expression.receiverAndArgs()
        return BooleanDisjunction(left, right, codegen, data)
    }",,18cf
fun toLong(),: Long = t,,f543
fun nativeTargetCompilerOptionsDSL(),"{
        val project = buildProjectWithMPP {
            with(multiplatformExtension) {
                linuxX64 {
                    compilerOptions {
                        progressiveMode.set(true)
                    }",,3631
fun nativeTaskOverridesTargetOptions(),"{
        val project = buildProjectWithMPP {
            tasks.withType<KotlinCompilationTask<*>>().configureEach {
                if (it.name == ""compileKotlinLinuxX64"") {
                    it.compilerOptions.progressiveMode.set(false)
                }",,6dd7
fun nativeLanguageSettingsOverridesTargetOptions(),"{
        val project = buildProjectWithMPP {
            with(multiplatformExtension) {
                linuxX64 {
                    compilerOptions {
                        progressiveMode.set(true)
                    }",,dee8
fun jvmTargetCompilerOptionsDSL(),"{
        val project = buildProjectWithMPP {
            with(multiplatformExtension) {
                jvm {
                    compilerOptions {
                        noJdk.set(true)
                    }",,481e
fun jvmTaskOverridesTargetOptions(),"{
        val project = buildProjectWithMPP {
            tasks.withType<KotlinCompilationTask<*>>().configureEach {
                if (it.name == ""compileKotlinJvm"") {
                    it.compilerOptions.progressiveMode.set(false)
                }",,ac46
fun jvmLanguageSettingsOverridesTargetOptions(),"{
        val project = buildProjectWithMPP {
            with(multiplatformExtension) {
                jvm {
                    compilerOptions {
                        progressiveMode.set(true)
                    }",,1522
fun jsTargetCompilerOptionsDsl(),"{
        val project = buildProjectWithMPP {
            with(multiplatformExtension) {
                js {
                    compilerOptions {
                        suppressWarnings.set(true)
                    }",,dabe
fun jsTaskOptionsOverridesTargetOptions(),"{
        val project = buildProjectWithMPP {
            tasks.withType<KotlinCompilationTask<*>>().configureEach {
                if (it.name == ""compileKotlinJs"") {
                    it.compilerOptions.suppressWarnings.set(false)
                }",,230e
fun jsLanguageSettingsOverridesTargetOptions(),"{
        val project = buildProjectWithMPP {
            with(multiplatformExtension) {
                js {
                    compilerOptions {
                        progressiveMode.set(true)
                    }",,346c
fun metadataTargetDsl(),"{
        val project = buildProjectWithMPP {
            with(multiplatformExtension) {
                linuxX64()
                iosX64()
                iosArm64()

                targets.named(""metadata"", KotlinMetadataTarget::class.java) {
                    it.compilerOptions {
                        progressiveMode.set(true)
                    }",,64a4
fun metadataTaskOptionsOverrideTargetOptions(),"{
        val project = buildProjectWithMPP {
            tasks.withType<KotlinCompilationTask<*>>().configureEach {
                if (it.name == ""compileKotlinMetadata"") {
                    it.compilerOptions.progressiveMode.set(false)
                }",,9c07
fun externalTargetDsl(),"{
        val project = buildProjectWithMPP()
        project.runLifecycleAwareTest {
            with(multiplatformExtension) {
                val target = createExternalKotlinTarget<FakeTarget> { defaults() }",,a292
fun externalTaskOptionsOverridesTargetOptions(),"{
        val project = buildProjectWithMPP()
        project.runLifecycleAwareTest {
            tasks.withType<KotlinJvmCompileTask>().configureEach {
                if (it.name == ""compileKotlinFake"") {
                    it.compilerOptions.javaParameters.set(false)
                }",,60fe
fun topLevelOptions(),"{
        val project = buildProjectWithMPP()
        project.runLifecycleAwareTest {
            with(multiplatformExtension) {
                compilerOptions {
                    progressiveMode.set(true)
                }",,7a02
fun testTargetDslOverridesTopLevelDsl(),"{
        val project = buildProjectWithMPP()
        project.runLifecycleAwareTest {
            with(multiplatformExtension) {
                jvm {
                    compilerOptions {
                        languageVersion.set(KotlinVersion.KOTLIN_1_8)
                    }",,a4ef
fun testTaskDslOverrideTopLevelDsl(),"{
        val project = buildProjectWithMPP()
        project.runLifecycleAwareTest {
            tasks.withType<KotlinJvmCompileTask>().configureEach {
                if (it.name == ""compileKotlinJvm"") {
                    it.compilerOptions.languageVersion.set(KotlinVersion.KOTLIN_1_8)
                }",,fd14
fun testTopLevelDslAlsoConfiguresSharedSourceSets(),"{
        val project = buildProjectWithMPP()
        project.runLifecycleAwareTest {
            with(multiplatformExtension) {
                jvm()
                js()

                compilerOptions {
                    languageVersion.set(KotlinVersion.KOTLIN_2_0)
                }",,50e4
fun testJvmModuleNameInMppIsConfigured(),"{
        val project = buildProjectWithMPP()
        project.runLifecycleAwareTest {
            with(multiplatformExtension) {
                jvm {
                    compilerOptions.moduleName.set(""my-custom-module-name"")
                }",,7469
fun testJsOptionsIsConfigured(),"{
        val project = buildProjectWithMPP()
        project.runLifecycleAwareTest {
            with(multiplatformExtension) {
                js {
                    compilerOptions {
                        moduleName.set(""js-module-name"")
                        freeCompilerArgs.add(""-Xstrict-implicit-export-types"")
                    }",,acbe
fun testJsBrowserConfigDoesNotOverrideFreeCompilerArgsFromTarget(),"{
        val project = buildProjectWithMPP()
        project.runLifecycleAwareTest {
            with(multiplatformExtension) {
                js {
                    binaries.executable()
                    browser()
                    compilerOptions {
                        freeCompilerArgs.addAll(""-Xstrict-implicit-export-types"", ""-Xexplicit-api=warning"")
                    }",,73d4
fun testJsLinkTaskAreAlsoConfiguredWithOptionsFromDSL(),"{
        val project = buildProjectWithMPP()
        project.runLifecycleAwareTest {
            with(multiplatformExtension) {
                js {
                    nodejs()
                    binaries.library()
                    compilerOptions {
                        moduleName.set(""my-custom-module"")
                        languageVersion.set(KotlinVersion.KOTLIN_1_8)
                        apiVersion.set(KotlinVersion.KOTLIN_1_8)
                        moduleKind.set(JsModuleKind.MODULE_PLAIN)
                        freeCompilerArgs.addAll(""-Xstrict-implicit-export-types"", ""-Xexplicit-api=warning"")
                    }",,1f0d
No signature found,fun Project.kotlinNativeTask(name: String): KotlinCompilationTask<KotlinNativeCompilerOptions> = t,,6e1f
No signature found,fun Project.kotlinJsTask(name: String): KotlinCompilationTask<KotlinJsCompilerOptions> = t,,6e1f
No signature found,fun Project.kotlinJvmTask(name: String): KotlinCompilationTask<KotlinJvmCompilerOptions> = t,,6e1f
No signature found,fun Project.kotlinCommonTask(name: String): KotlinCompilationTask<KotlinCommonCompilerOptions> = t,,6e1f
fun bar(),: Base = o,"// FIR_IDENTICAL
// FIR_DUMP",66c3
No signature found,fun <T> T.id() = t,"// DONT_TARGET_EXACT_BACKEND: JVM
// DONT_TARGET_EXACT_BACKEND: JS",6e1f
fun box(),": String {
    if (compareTo1.id() != -1)   return ""Fail 1.1""
    if (compareTo2.id() != 0)    return ""Fail 1.2""
    if (compareTo3.id() != 1)    return ""Fail 1.3""
    if (compareTo4.id() != 0)    return ""Fail 1.4""
    if (compareTo5.id() != 0)    return ""Fail 1.5""
    if (compareTo6.id() != 0)    return ""Fail 1.6""
    if (compareTo7.id() != 0)    return ""Fail 1.7""
    if (compareTo8.id() != 0)    return ""Fail 1.8""

    if (plus1.id() != 3)     return ""Fail 2.1""
    if (plus2.id() != 4)     return ""Fail 2.2""
    if (plus3.id() != 5)     return ""Fail 2.3""
    if (plus4.id() != 4)     return ""Fail 2.4""
    if (plus5.id() != 4)     return ""Fail 2.5""
    if (plus6.id() != 4L)    return ""Fail 2.6""
    if (plus7.id() != 4.0f)  return ""Fail 2.7""
    if (plus8.id() != 4.0)   return ""Fail 2.8""

    if (minus1.id() != -1)      return ""Fail 3.1""
    if (minus2.id() != 0)       return ""Fail 3.2""
    if (minus3.id() != 1)       return ""Fail 3.3""
    if (minus4.id() != 0)       return ""Fail 3.4""
    if (minus5.id() != 0)       return ""Fail 3.5""
    if (minus6.id() != 0L)      return ""Fail 3.6""
    if (minus7.id() != 0.0f)    return ""Fail 3.7""
    if (minus8.id() != 0.0)     return ""Fail 3.8""

    if (times1.id() != 2)        return ""Fail 4.1""
    if (times2.id() != 4)        return ""Fail 4.2""
    if (times3.id() != 6)        return ""Fail 4.3""
    if (times4.id() != 4)        return ""Fail 4.4""
    if (times5.id() != 4)        return ""Fail 4.5""
    if (times6.id() != 4L)        return ""Fail 4.6""
    if (times7.id() != 4.0f)     return ""Fail 4.7""
    if (times8.id() != 4.0)      return ""Fail 4.8""

    if (div1.id() != 0)     return ""Fail 5.1""
    if (div2.id() != 1)     return ""Fail 5.2""
    if (div3.id() != 1)     return ""Fail 5.3""
    if (div4.id() != 1)     return ""Fail 5.4""
    if (div5.id() != 1)     return ""Fail 5.5""
    if (div6.id() != 1L)    return ""Fail 5.6""
    if (div7.id() != 1.0f)  return ""Fail 5.7""
    if (div8.id() != 1.0)   return ""Fail 5.8""

    if (rem1.id() != 1)     return ""Fail 6.1""
    if (rem2.id() != 0)     return ""Fail 6.2""
    if (rem3.id() != 1)     return ""Fail 6.3""
    if (rem4.id() != 0)     return ""Fail 6.4""
    if (rem5.id() != 0)     return ""Fail 6.5""
    if (rem6.id() != 0L)    return ""Fail 6.6""
    if (rem7.id() != 0.0f)  return ""Fail 6.7""
    if (rem8.id() != 0.0)   return ""Fail 6.8""

    if (unaryPlus1.id() != 1)    return ""Fail 7.1""
    if (unaryPlus2.id() != -1)   return ""Fail 7.2""
    if (unaryMinus1.id() != -1)  return ""Fail 7.3""
    if (unaryMinus2.id() != 1)   return ""Fail 7.4""

    if (convert1.id() != 1.toByte())    return ""Fail 8.1""
    if (convert2.id() != '')         return ""Fail 8.2""
    if (convert3.id() != 1.toShort())   return ""Fail 8.3""
    if (convert4.id() != 1)             return ""Fail 8.4""
    if (convert5.id() != 1L)            return ""Fail 8.5""
    if (convert6.id() != 1.0f)          return ""Fail 8.6""
    if (convert7.id() != 1.0)           return ""Fail 8.7""

    if (equals1.id() != false)   return ""Fail 9.1""
    if (equals2.id() != true)    return ""Fail 9.2""
    if (equals3.id() != false)   return ""Fail 9.3""
    if (equals4.id() != false)   return ""Fail 9.4""

    if (toString1.id() != ""1"")   return ""Fail 10.1""
    if (toString2.id() != ""2"")   return ""Fail 10.2""

    return ""OK""
}",,4f27
fun f(c: LongRange),": Int {
    return c.<!FUNCTION_EXPECTED!>start<!>()
}",// FIR_IDENTICAL,aafc
fun testCanBuild(),"{
        val modelBuilder = KaptModelBuilder()
        assertTrue(modelBuilder.canBuild(Kapt::class.java.name))
        assertFalse(modelBuilder.canBuild(""wrongModel""))
    }",,56e3
fun isSamType(type: ConeKotlinType),: Boolean = w,,0b00
fun bar(x: Int),"fun interface Foo {
     *     : String
     * }",,948a
fun getSamInfoForPossibleSamType(type: ConeKotlinType),": SamConversionInfo? {
        return when (type) {
            is ConeClassLikeType -> SamConversionInfo(
                functionalType = getFunctionTypeForPossibleSamType(type.fullyExpandedType(session)) ?: return null,
                samType = type
            )
            is ConeFlexibleType -> {
                val lowerType = getSamInfoForPossibleSamType(type.lowerBound)?.functionalType ?: return null
                val upperType = getSamInfoForPossibleSamType(type.upperBound)?.functionalType ?: return null
                SamConversionInfo(
                    functionalType = ConeFlexibleType(lowerType.lowerBoundIfFlexible(), upperType.upperBoundIfFlexible()),
                    samType = type
                )
            }",,1412
fun getFunctionTypeForPossibleSamType(type: ConeClassLikeType),": ConeLookupTagBasedType? {
        val firRegularClass = type.lookupTag.toFirRegularClass(session) ?: return null

        val (_, unsubstitutedFunctionType) = resolveFunctionTypeIfSamInterface(firRegularClass) ?: return null

        val functionType = firRegularClass.buildSubstitutorWithUpperBounds(session, type)?.substituteOrNull(unsubstitutedFunctionType)
            ?: unsubstitutedFunctionType

        require(functionType is ConeLookupTagBasedType) {
            ""Function type should always be ConeLookupTagBasedType, but ${functionType::class}",,70d8
fun getSamConstructor(firClassOrTypeAlias: FirClassLikeDeclaration),": FirSimpleFunction? {
        if (firClassOrTypeAlias is FirTypeAlias) {
            // Precompute the constructor for the base type to avoid deadlocks in the IDE.
            firClassOrTypeAlias.expandedTypeRef.coneTypeSafe<ConeClassLikeType>()
                ?.fullyExpandedType(session)?.lookupTag?.toSymbol(session)
                ?.let { samConstructorsCache.getValue(it, this) }",,5f7e
fun buildSamConstructorForRegularClass(classSymbol: FirRegularClassSymbol),": FirNamedFunctionSymbol? {
        val firRegularClass = classSymbol.fir
        val (functionSymbol, functionType) = resolveFunctionTypeIfSamInterface(firRegularClass) ?: return null

        val syntheticFunctionSymbol = classSymbol.createSyntheticConstructorSymbol()

        val newTypeParameters = firRegularClass.typeParameters.map { typeParameter ->
            val declaredTypeParameter = typeParameter.symbol.fir
            FirTypeParameterBuilder().apply {
                source = declaredTypeParameter.source
                moduleData = session.moduleData
                origin = FirDeclarationOrigin.SamConstructor
                resolvePhase = FirResolvePhase.DECLARATIONS
                name = declaredTypeParameter.name
                this.symbol = FirTypeParameterSymbol()
                variance = Variance.INVARIANT
                isReified = false
                annotations += declaredTypeParameter.annotations
                containingDeclarationSymbol = syntheticFunctionSymbol
            }",,7b2e
fun buildSamConstructorForTypeAlias(typeAliasSymbol: FirTypeAliasSymbol),": FirNamedFunctionSymbol? {
        val type =
            typeAliasSymbol.fir.expandedTypeRef.coneTypeUnsafe<ConeClassLikeType>().fullyExpandedType(session)

        val expansionRegularClass = type.lookupTag.toSymbol(session)?.fir as? FirRegularClass ?: return null
        val samConstructorForClass = getSamConstructor(expansionRegularClass) ?: return null

        // The constructor is something like `fun <T, ...> C(...): C<T, ...>`, meaning the type parameters
        // we need to replace are owned by it, not by the class (see the substitutor in `buildSamConstructor`
        // for `FirRegularClass` above).
        val substitutor = samConstructorForClass.buildSubstitutorWithUpperBounds(session, type)
            ?: return samConstructorForClass.symbol
        val newReturnType = substitutor.substituteOrNull(samConstructorForClass.returnTypeRef.coneType)
        val newParameterTypes = samConstructorForClass.valueParameters.map {
            substitutor.substituteOrNull(it.returnTypeRef.coneType)
        }",,2a4c
No signature found,"fun FirClassLikeSymbol<*>.createSyntheticConstructorSymbol() =
        F",,6e1f
fun resolveFunctionTypeIfSamInterface(firRegularClass: FirRegularClass),": SAMInfo<ConeLookupTagBasedType>? {
        return resolvedFunctionType.getOrPut(firRegularClass) {
            if (!firRegularClass.status.isFun) return@getOrPut null
            val abstractMethod = firRegularClass.getSingleAbstractMethodOrNull(session, scopeSession) ?: return@getOrPut null
            // TODO: KT-59674
            // val shouldConvertFirstParameterToDescriptor = samWithReceiverResolvers.any { it.shouldConvertFirstSamParameterToReceiver(abstractMethod) }",,42d4
fun createMapping(substitutor: ConeSubstitutor),"fun FirTypeParameterRefsOwner.buildSubstitutorWithUpperBounds(session: FirSession, type: ConeClassLikeType): ConeSubstitutor? {
    if (typeParameters.isEmpty()) return null

    : Map<FirTypeParameterSymbol, ConeKotlinType> {
        return typeParameters.zip(type.typeArguments).associate { (parameter, projection) ->
            val typeArgument =
                (projection as? ConeKotlinTypeProjection)?.type
                // TODO: Consider using `parameterSymbol.fir.bounds.first().coneType` once sure that it won't fail with exception
                    ?: parameter.symbol.fir.bounds.firstOrNull()?.coneTypeSafe()
                    ?: session.builtinTypes.nullableAnyType.type
            Pair(parameter.symbol, substitutor.substituteOrSelf(typeArgument))
        }",,541e
No signature found,"fun FirRegularClass.getSingleAbstractMethodOrNull(
    session: FirSession,
    scopeSession: ScopeSession,
): FirSimpleFunction? {
    if (classKind != ClassKind.INTERFACE || hasMoreThenOneAbstractFunctionOrHasAbstractProperty()) return null

    val samCandidateNames = computeSamCandidateNames(session)
    return findSingleAbstractMethodByNames(session, scopeSession, samCandidateNames)
}",,6e1f
No signature found,"fun FirRegularClass.computeSamCandidateNames(session: FirSession): Set<Name> {
    val classes =
        // Note: we search only for names in this function, so substitution is not needed      V
        lookupSuperTypes(this, lookupInterfaces = true, deep = true, useSiteSession = session, substituteTypes = false)
            .mapNotNullTo(mutableListOf(this)) {
                (session.symbolProvider.getSymbolByLookupTag(it.lookupTag) as? FirRegularClassSymbol)?.fir
            }",,6e1f
No signature found,"fun FirRegularClass.findSingleAbstractMethodByNames(
    session: FirSession,
    scopeSession: ScopeSession,
    samCandidateNames: Set<Name>,
): FirSimpleFunction? {
    var resultMethod: FirSimpleFunction? = null
    var metIncorrectMember = false

    val classUseSiteMemberScope = this.unsubstitutedScope(
        session,
        scopeSession,
        withForcedTypeCalculator = false,
        memberRequiredPhase = null,
    )

    for (candidateName in samCandidateNames) {
        if (metIncorrectMember) break

        classUseSiteMemberScope.processPropertiesByName(candidateName) {
            if (it is FirPropertySymbol && it.fir.resolvedIsAbstract) {
                metIncorrectMember = true
            }",,6e1f
No signature found,"fun FirRegularClass.hasMoreThenOneAbstractFunctionOrHasAbstractProperty(): Boolean {
    var wasAbstractFunction = false
    for (declaration in declarations) {
        if (declaration is FirProperty && declaration.resolvedIsAbstract) return true
        if (declaration is FirSimpleFunction && declaration.resolvedIsAbstract &&
            !declaration.isPublicInObject(checkOnlyName = true)
        ) {
            if (wasAbstractFunction) return true
            wasAbstractFunction = true
        }",,6e1f
No signature found,"fun FirSimpleFunction.isPublicInObject(checkOnlyName: Boolean): Boolean {
    if (name.asString() !in PUBLIC_METHOD_NAMES_IN_OBJECT) return false
    if (checkOnlyName) return true

    return when (name.asString()) {
        ""hashCode"", ""getClass"", ""notify"", ""notifyAll"", ""toString"" -> valueParameters.isEmpty()
        ""equals"" -> valueParameters.singleOrNull()?.hasTypeOf(StandardClassIds.Any, allowNullable = true) == true
        ""wait"" -> when (valueParameters.size) {
            0 -> true
            1 -> valueParameters[0].hasTypeOf(StandardClassIds.Long, allowNullable = false)
            2 -> valueParameters[0].hasTypeOf(StandardClassIds.Long, allowNullable = false) &&
                    valueParameters[1].hasTypeOf(StandardClassIds.Int, allowNullable = false)
            else -> false
        }",,6e1f
No signature found,"fun FirSimpleFunction.getFunctionTypeForAbstractMethod(session: FirSession): ConeLookupTagBasedType {
    val parameterTypes = valueParameters.map {
        it.returnTypeRef.coneTypeSafe<ConeKotlinType>() ?: ConeErrorType(ConeIntermediateDiagnostic(""No type for parameter $it""))
    }",,6e1f
No signature found,fun <reified F : Any> bar(k: KClass<out F>): String = k,"// TARGET_BACKEND: JVM
// WITH_REFLECT",6e1f
No signature found,fun <reified T : Any> foo(): String = b,,6e1f
fun box(),": String {
    return foo<OK>()
}",,4f27
fun foo(),= s,,519f
fun box(),= C,,4f27
No signature found,"fun getValue(t: T, p: KProperty<*>): T
}

val <T> T.property by object : IDelegate<T> {
    override fun getValue(t: T, p: KProperty<*>): T {
        return t
    }","// TARGET_BACKEND: JVM_IR
// WITH_STDLIB
// DUMP_IR
// ISSUE: KT-62884",6e1f
fun test(t: T),": T {
        return t
    }",,aa9b
No signature found,"fun getValue(t: T, p: KProperty<*>): T {
            return test(t)
        }",,6e1f
fun box(),": String {
    val superInterfaces: Array<Type> = Class.forName(""TypeParameterInDelegatedPropertyKt\$property\$2"").getGenericInterfaces()
    if (!superInterfaces[0].toString().contains(""IDelegate<java.lang.Object>"")) return ""FAIL""

    val superInterfaces2: Array<Type> = Class.forName(""TypeParameterInDelegatedPropertyKt\$property2\$2\$1"").getGenericInterfaces()
    if (!superInterfaces2[0].toString().contains(""IDelegate<java.lang.Object>"")) return ""FAIL""

    if (""OK"".property2 != ""OK"") return ""FAIL""

    return ""OK""
}",,4f27
fun box(),": String {
    return ""OK""
}","// TARGET_BACKEND: JVM
// IGNORE_LIGHT_ANALYSIS
// FILE: Bar.java",4f27
fun box(),": String {
    var xz = Z(0)
    var xl = L(0L)
    var xs = Str("""")
    var xo = Obj("""")

    val fn = {
        xz = Z(42)
        xl = L(1234L)
        xs = Str(""abc"")
        xo = Obj(""def"")
    }","// WITH_STDLIB
// WORKS_WHEN_VALUE_CLASS
// LANGUAGE: +ValueClasses, +GenericInlineClassParameter",4f27
fun component1(),": Int {
        log += ""($id).component1();""
        return 1
    }",// EXPECTED_REACHABLE_NODES: 1297,fd7c
fun component2(),": String {
        log += ""($id).component2();""
        return ""1""
    }",,e66b
fun iterator(),: Iterator<T> = o,,c20a
fun hasNext(),": Boolean {
            log += ""C.hasNext();""
            return i < data.size
        }",,2c39
fun next(),": T {
            log += ""C.next();""
            return data[i++]
        }",,cb14
fun box(),": String {
    for ((a, b) in arrayOf(T(3), T(1), T(2)));
    assertEquals(""(3).component1();(3).component2();(1).component1();(1).component2();(2).component1();(2).component2();"", log)


    log = """"
    for ((a, b) in C());
    assertEquals(""C.hasNext();C.next();(3).component1();(3).component2();C.hasNext();C.next();"" +
                 ""(1).component1();(1).component2();C.hasNext();C.next();"" +
                 ""(2).component1();(2).component2();C.hasNext();"", log)

    return ""OK""
}",,4f27
fun findFragmentById(id: Int),: Fragment = t,,74e5
fun getFragmentManager(),: FragmentManager = t,,48e9
fun getSupportFragmentManager(),: FragmentManager = t,,b9a3
No signature found,"fun <K, V> MutableMap<K, V>.set(k: K, v: V) {}",,6e1f
No signature found,"fun foo(a: MutableMap<String, String>, x: String?) {
    a[x!!] = <!DEBUG_INFO_SMARTCAST!>x<!>
    a[<!DEBUG_INFO_SMARTCAST!>x<!>] = x<!UNNECESSARY_NOT_NULL_ASSERTION!>!!<!>
}",,6e1f
No signature found,"fun foo1(a: MutableMap<String, String>, x: String?) {
    a[<!TYPE_MISMATCH!>x<!>] = x!!
    a[x<!UNNECESSARY_NOT_NULL_ASSERTION!>!!<!>] = <!DEBUG_INFO_SMARTCAST!>x<!>
}",,6e1f
No signature found,"fun concat(s1: String, s2: String, s3: String = ""","// TARGET_BACKEND: JVM

// WITH_REFLECT",6e1f
fun box(),": String {
    val concat = Host::concat
    val concatParams = concat.parameters
    return concat.callBy(mapOf(
            concatParams[0] to """",
            concatParams[1] to ""O"",
            concatParams[3] to """"
    ))
}",,4f27
No signature found,fun foo(p: Int = 1,"// MODULE: m1-common
// FILE: common.kt",6e1f
fun foo(p: T),{},,a67c
fun foo(),"{
    var i = 1
    while (i < 10) {
        bar()
        i = i.inc()
    }",// FIR_IDENTICAL,519f
fun bar(),{},,66c3
fun foo(),= r,// WITH_STDLIB,519f
fun bar(s: String),= s,,bb63
fun box(),= H,,4f27
fun test(),= B,"// EXPECTED_REACHABLE_NODES: 1281
// FILE: main.kt",fe98
fun box(),": String {
    return test()
}",,4f27
fun getValueArgument(index: Int),": IrExpression? {
        checkArgumentSlotAccess(""value"", index, valueArguments.size)
        return valueArguments[index]
    }",,df3b
fun getTypeArgument(index: Int),": IrType? {
        checkArgumentSlotAccess(""type"", index, typeArguments.size)
        return typeArguments[index]
    }",,ebb5
No signature found,"fun putValueArgument(index: Int, valueArgument: IrExpression?) {
        checkArgumentSlotAccess(""value"", index, valueArguments.size)
        valueArguments[index] = valueArgument
    }",,6e1f
No signature found,"fun putTypeArgument(index: Int, type: IrType?) {
        checkArgumentSlotAccess(""type"", index, typeArguments.size)
        typeArguments[index] = type
    }",,6e1f
"fun <D> acceptChildren(visitor: IrElementVisitor<Unit, D>, data: D)","{
        dispatchReceiver?.accept(visitor, data)
        extensionReceiver?.accept(visitor, data)
        valueArguments.forEach { it?.accept(visitor, data) }",,a229
"fun <D> transformChildren(transformer: IrElementTransformer<D>, data: D)","{
        dispatchReceiver = dispatchReceiver?.transform(transformer, data)
        extensionReceiver = extensionReceiver?.transform(transformer, data)
        valueArguments.transformInPlace(transformer, data)
    }",,e8d0
fun getUniqueName(prefix: String),= g,,fd88
No signature found,"fun addStub(kotlinLocation: CompilerMessageLocation?, lines: List<String>, language: String) {
        val stubs = languageToStubs.getOrPut(language) { mutableListOf() }",,6e1f
"fun compile(clang: ClangArgs, messageCollector: MessageCollector, verbose: Boolean)",": List<File> {
        if (languageToStubs.isEmpty()) return emptyList()

        val bitcodes = languageToStubs.entries.map { (language, stubs) ->
            val compilerOptions = mutableListOf<String>()
            val sourceFileExtension = when {
                language == ""C++"" -> "".cpp""
                target.family.isAppleFamily -> {
                    compilerOptions += ""-fobjc-arc""
                    "".m"" // TODO: consider managing C and Objective-C stubs separately.
                }",,8222
No signature found,"fun reportCompilationErrors(
            cSourcePath: String,
            stubs: List<Stub>,
            result: Command.Result,
            messageCollector: MessageCollector,
            verbose: Boolean
    ): Nothing {
        val regex = Regex(""${Regex.escape(cSourcePath)}",,6e1f
fun test123(),"{
    val g: (Int) -> Unit = if (true) {
        val set = HashSet<Int>()
        fun (i: Int) {
            set.add(i)
        }","// FIR_IDENTICAL
// !DIAGNOSTICS: -UNUSED_VARIABLE -UNUSED_EXPRESSION",9b17
No signature found,fun TypeBridge.makeNothing(llvm: CodegenLlvmHelpers) = w,,6e1f
No signature found,fun ret(value: LLVMValueRef?): LLVMValueRef = i,,6e1f
fun autoreleaseAndRet(value: LLVMValueRef),"{
        onReturn()
        // Note: it is important to make this call tail (otherwise the elimination magic won't work),
        // so it should go after other ""epilogue"" instructions, and that's why we couldn't just use
        // ret(autorelease(value))
        val result = call(objCExportCodegen.objcAutoreleaseReturnValue, listOf(value))
        LLVMSetTailCall(result, 1)
        rawRet(result)
    }",,371a
fun objcReleaseFromRunnableThreadState(objCReference: LLVMValueRef),"{
        switchThreadStateIfExperimentalMM(ThreadState.Native)
        objcReleaseFromNativeThreadState(objCReference)
        switchThreadStateIfExperimentalMM(ThreadState.Runnable)
    }",,0ba9
fun objcReleaseFromNativeThreadState(objCReference: LLVMValueRef),"{
        // It is nounwind, so no exception handler is required.
        call(objCExportCodegen.objcRelease, listOf(objCReference), exceptionHandler = ExceptionHandler.None)
    }",,ad4f
fun processReturns(),"{
        // Do nothing.
    }",,6a05
fun build(),= O,,5bf9
No signature found,"fun ObjCExportCodeGeneratorBase.functionGenerator(
        functionProto: LlvmFunctionProto,
        configure: ObjCExportFunctionGenerationContextBuilder.() -> Unit = {",,6e1f
No signature found,"fun ObjCExportFunctionGenerationContext.callAndMaybeRetainAutoreleased(
        function: LlvmCallable,
        signature: LlvmFunctionSignature,
        args: List<LLVMValueRef>,
        resultLifetime: Lifetime = L",,6e1f
fun dispose(),"{
        rttiGenerator.dispose()
    }",,94b2
No signature found,"fun ObjCExportFunctionGenerationContext.callFromBridge(
            llvmFunction: LLVMValueRef,
            args: List<LLVMValueRef>,
            resultLifetime: Lifetime = L",,6e1f
No signature found,"fun ObjCExportFunctionGenerationContext.callFromBridge(
            function: LlvmCallable,
            args: List<LLVMValueRef>,
            resultLifetime: Lifetime = L",,6e1f
No signature found,"fun ObjCExportFunctionGenerationContext.kotlinReferenceToLocalObjC(value: LLVMValueRef) =
            c",,6e1f
No signature found,"fun ObjCExportFunctionGenerationContext.kotlinReferenceToRetainedObjC(value: LLVMValueRef) =
            c",,6e1f
No signature found,"fun ObjCExportFunctionGenerationContext.objCReferenceToKotlin(value: LLVMValueRef, resultLifetime: Lifetime) =
            c",,6e1f
fun blockToKotlinFunctionConverter(bridge: BlockPointerBridge),": LlvmCallable =
            b",,cd85
fun kotlinFunctionToRetainedBlockConverter(bridge: BlockPointerBridge),": LlvmCallable =
            f",,1fed
fun generate(),"{
        emitFunctionConverters()
        emitBlockToKotlinFunctionConverters()
        dispose()
    }",,3be5
No signature found,fun <reified T: IrFunction> T.getLowered(): T = w,,6e1f
No signature found,"fun ObjCExportFunctionGenerationContext.genSendMessage(
            returnType: LlvmParamType,
            parameterTypes: List<LlvmParamType>,
            receiver: LLVMValueRef,
            selector: String,
            vararg args: LLVMValueRef,
    ): LLVMValueRef {

        val objcMsgSendType = LlvmFunctionSignature(
                returnType,
                listOf(LlvmParamType(llvm.int8PtrType), LlvmParamType(llvm.int8PtrType)) + parameterTypes
        )
        return callFromBridge(msgSender(objcMsgSendType), listOf(receiver, genSelector(selector)) + args)
    }",,6e1f
No signature found,"fun FunctionGenerationContext.kotlinToObjC(
            value: LLVMValueRef,
            valueType: ObjCValueType
    ): LLVMValueRef = w",,6e1f
No signature found,"fun FunctionGenerationContext.objCToKotlin(
            value: LLVMValueRef,
            valueType: ObjCValueType
    ): LLVMValueRef = w",,6e1f
No signature found,"fun ObjCExportFunctionGenerationContext.objCBlockPointerToKotlin(
        value: LLVMValueRef,
        typeBridge: BlockPointerBridge,
        resultLifetime: Lifetime
    ) = c",,6e1f
No signature found,"fun ObjCExportFunctionGenerationContext.kotlinFunctionToRetainedObjCBlockPointer(
        typeBridge: BlockPointerBridge,
        value: LLVMValueRef
    ) = c",,6e1f
No signature found,"fun ObjCExportFunctionGenerationContext.objCToKotlin(
        value: LLVMValueRef,
        typeBridge: TypeBridge,
        resultLifetime: Lifetime
    ): LLVMValueRef = w",,6e1f
No signature found,"fun FunctionGenerationContext.initRuntimeIfNeeded() {
        this.needsRuntimeInit = true
    }",,6e1f
No signature found,"fun ObjCExportFunctionGenerationContext.convertKotlin(
            genValue: (Lifetime) -> LLVMValueRef,
            actualType: IrType,
            expectedType: IrType,
            resultLifetime: Lifetime
    ): LLVMValueRef {

        val conversion = context.getTypeConversion(actualType, expectedType)
                ?: return genValue(resultLifetime)

        val value = genValue(Lifetime.ARGUMENT)

        return callFromBridge(conversion.owner.llvmFunction, listOf(value), resultLifetime)
    }","/**
     * Convert [genValue] of Kotlin type from [actualType] to [expectedType] in a bridge method.
     */",6e1f
No signature found,"fun generateTypeAdaptersForKotlinTypes(spec: ObjCExportCodeSpec?): List<ObjCTypeAdapter> {
        val types = spec?.types.orEmpty() + objCClassForAny

        val allReverseAdapters = createReverseAdapters(types)

        return types.map {
            val reverseAdapters = allReverseAdapters.getValue(it).adapters
            when (it) {
                objCClassForAny -> {
                    createTypeAdapter(it, superClass = null, reverseAdapters)
                }",,6e1f
No signature found,"fun generateTypeAdapters(spec: ObjCExportCodeSpec?) {
        val objCTypeAdapters = mutableListOf<ObjCTypeAdapter>()

        objCTypeAdapters += generateTypeAdaptersForKotlinTypes(spec)

        spec?.files?.forEach {
            objCTypeAdapters += createTypeAdapterForFileClass(it)
            dataGenerator.emitEmptyClass(it.binaryName, namer.kotlinAnyName.binaryName)
        }",,6e1f
No signature found,"fun generate(spec: ObjCExportCodeSpec?) {
        generateTypeAdapters(spec)

        NSNumberKind.values().mapNotNull { it.mappedKotlinClassId }",,6e1f
fun emitTypeAdapters(objCTypeAdapters: List<ObjCTypeAdapter>),"{
        val placedClassAdapters = mutableMapOf<String, ConstPointer>()
        val placedInterfaceAdapters = mutableMapOf<String, ConstPointer>()

        objCTypeAdapters.forEach { adapter ->
            val typeAdapter = staticData.placeGlobal("""", adapter).pointer
            val irClass = adapter.irClass

            val descriptorToAdapter = if (irClass?.isInterface == true) {
                placedInterfaceAdapters
            }",,0fcb
"fun emitSortedAdapters(nameToAdapter: Map<String, ConstPointer>, prefix: String)","{
            val sortedAdapters = nameToAdapter.toList().sortedBy { it.first }",,11b5
fun emitKt42254Hint(),"{
        if (determineLinkerOutput(context) == LinkerOutputKind.STATIC_LIBRARY) {
            // Might be affected by https://youtrack.jetbrains.com/issue/KT-42254.
            // The code below generally follows [replaceExternalWeakOrCommonGlobal] implementation.
            if (generationState.llvmModuleSpecification.importsKotlinDeclarationsFromOtherObjectFiles()) {
                // So the compiler uses caches. If a user is linking two such static frameworks into a single binary,
                // the linker might fail with a lot of ""duplicate symbol"" errors due to KT-42254.
                // Adding a similar symbol that would explicitly hint to take a look at the YouTrack issue if reported.
                // Note: for some reason this symbol is reported as the last one, which is good for its purpose.
                val name = ""See https://youtrack.jetbrains.com/issue/KT-42254""
                val global = staticData.placeGlobal(name, llvm.constInt8(0), isExported = true)

                llvm.usedGlobals += global.llvmGlobal
                LLVMSetVisibility(global.llvmGlobal, LLVMVisibility.LLVMHiddenVisibility)
            }",,6d40
fun emitSelectorsHolder(),"{
        val impProto = LlvmFunctionSignature(LlvmRetType(llvm.voidType)).toProto(
                name = """",
                origin = null,
                linkage = LLVMLinkage.LLVMInternalLinkage
        )
        val imp = generateFunctionNoRuntime(codegen, impProto) {
            unreachable()
        }",,7e44
No signature found,"fun ObjCExportCodeGenerator.setObjCExportTypeInfo(
        irClass: IrClass,
        convertToRetained: ConstPointer? = n",,6e1f
No signature found,"fun ObjCExportCodeGeneratorBase.setOwnWritableTypeInfo(irClass: IrClass, writableTypeInfoValue: Struct) {
    require(!codegen.isExternal(irClass))
    val writeableTypeInfoGlobal = generationState.llvmDeclarations.forClass(irClass).writableTypeInfoGlobal!!
    writeableTypeInfoGlobal.setLinkage(LLVMLinkage.LLVMExternalLinkage)
    writeableTypeInfoGlobal.setInitializer(writableTypeInfoValue)
}",,6e1f
No signature found,"fun ObjCExportCodeGeneratorBase.buildWritableTypeInfoValue(
        convertToRetained: ConstPointer? = n",,6e1f
No signature found,"fun ObjCExportCodeGenerator.emitBoxConverters() {
    val irBuiltIns = context.irBuiltIns

    emitBoxConverter(irBuiltIns.booleanClass, ObjCValueType.BOOL, ""initWithBool:"")
    emitBoxConverter(irBuiltIns.byteClass, ObjCValueType.CHAR, ""initWithChar:"")
    emitBoxConverter(irBuiltIns.shortClass, ObjCValueType.SHORT, ""initWithShort:"")
    emitBoxConverter(irBuiltIns.intClass, ObjCValueType.INT, ""initWithInt:"")
    emitBoxConverter(irBuiltIns.longClass, ObjCValueType.LONG_LONG, ""initWithLongLong:"")
    emitBoxConverter(symbols.uByte!!, ObjCValueType.UNSIGNED_CHAR, ""initWithUnsignedChar:"")
    emitBoxConverter(symbols.uShort!!, ObjCValueType.UNSIGNED_SHORT, ""initWithUnsignedShort:"")
    emitBoxConverter(symbols.uInt!!, ObjCValueType.UNSIGNED_INT, ""initWithUnsignedInt:"")
    emitBoxConverter(symbols.uLong!!, ObjCValueType.UNSIGNED_LONG_LONG, ""initWithUnsignedLongLong:"")
    emitBoxConverter(irBuiltIns.floatClass, ObjCValueType.FLOAT, ""initWithFloat:"")
    emitBoxConverter(irBuiltIns.doubleClass, ObjCValueType.DOUBLE, ""initWithDouble:"")
}",,6e1f
No signature found,"fun ObjCExportCodeGenerator.emitBoxConverter(
        boxClassSymbol: IrClassSymbol,
        objCValueType: ObjCValueType,
        nsNumberInitSelector: String
) {
    val boxClass = boxClassSymbol.owner
    val name = ""${boxClass.name}",,6e1f
No signature found,"fun ObjCExportCodeGenerator.generateContinuationToRetainedCompletionConverter(
        blockGenerator: BlockGenerator
): LlvmCallable = w",,6e1f
No signature found,"fun ObjCExportCodeGenerator.generateUnitContinuationToRetainedCompletionConverter(
        blockGenerator: BlockGenerator
): LlvmCallable = w",,6e1f
No signature found,"fun ObjCExportBlockCodeGenerator.emitFunctionConverters() {
    require(generationState.shouldDefineFunctionClasses)
    mappedFunctionNClasses.forEach { functionClass ->
        val convertToRetained = kotlinFunctionToRetainedBlockConverter(BlockPointerBridge(functionClass.arity, returnsVoid = false))

        val writableTypeInfoValue = buildWritableTypeInfoValue(convertToRetained = convertToRetained.toConstPointer())
        setOwnWritableTypeInfo(functionClass.irClass, writableTypeInfoValue)
    }",,6e1f
No signature found,"fun ObjCExportBlockCodeGenerator.emitBlockToKotlinFunctionConverters() {
    require(generationState.shouldDefineFunctionClasses)
    val functionClassesByArity = mappedFunctionNClasses.associateBy { it.arity }",,6e1f
No signature found,"fun ObjCExportCodeGenerator.emitSpecialClassesConvertions() {
    setObjCExportTypeInfo(
            symbols.string.owner,
            llvm.Kotlin_ObjCExport_CreateRetainedNSStringFromKString.toConstPointer()
    )

    emitCollectionConverters()

    emitBoxConverters()
}",,6e1f
fun importConverter(name: String),"fun ObjCExportCodeGenerator.emitCollectionConverters() {

    : ConstPointer =
            llvm.externalNativeRuntimeFunction(name, kotlinToObjCFunctionType).toConstPointer()

    setObjCExportTypeInfo(
            symbols.list.owner,
            importConverter(""Kotlin_Interop_CreateRetainedNSArrayFromKList"")
    )

    setObjCExportTypeInfo(
            symbols.mutableList.owner,
            importConverter(""Kotlin_Interop_CreateRetainedNSMutableArrayFromKList"")
    )

    setObjCExportTypeInfo(
            symbols.set.owner,
            importConverter(""Kotlin_Interop_CreateRetainedNSSetFromKSet"")
    )

    setObjCExportTypeInfo(
            symbols.mutableSet.owner,
            importConverter(""Kotlin_Interop_CreateRetainedKotlinMutableSetFromKSet"")
    )

    setObjCExportTypeInfo(
            symbols.map.owner,
            importConverter(""Kotlin_Interop_CreateRetainedNSDictionaryFromKMap"")
    )

    setObjCExportTypeInfo(
            symbols.mutableMap.owner,
            importConverter(""Kotlin_Interop_CreateRetainedKotlinMutableDictionaryFromKMap"")
    )
}",,056a
No signature found,"fun ObjCExportFunctionGenerationContextBuilder.setupBridgeDebugInfo() {
    val location = setupBridgeDebugInfo(this.objCExportCodegen.generationState, function)
    startLocation = location
    endLocation = location
}",,6e1f
No signature found,"fun ObjCExportCodeGenerator.generateObjCImpBy(
    methodBridge: MethodBridge,
    debugInfo: Boolean = f",,6e1f
No signature found,"fun ObjCExportCodeGenerator.generateAbstractObjCImp(methodBridge: MethodBridge, baseMethod: IrFunction): LlvmCallable =
        g",,6e1f
No signature found,"fun ObjCExportCodeGenerator.generateObjCImp(
    target: IrFunction?,
    baseMethod: IrFunction,
    methodBridge: MethodBridge,
    isVirtual: Boolean = f",,6e1f
No signature found,"fun ObjCExportCodeGenerator.generateObjCImp(
    methodBridge: MethodBridge,
    isDirect: Boolean,
    baseMethod: IrFunction? = n",,6e1f
No signature found,"fun genReturnOnSuccess(returnBridge: MethodBridge.ReturnValue) {
        val returnValue: LLVMValueRef? = when (returnBridge) {
            MethodBridge.ReturnValue.Void -> null
            MethodBridge.ReturnValue.HashCode -> {
                val kotlinHashCode = targetResult!!
                if (generationState.is64BitNSInteger()) zext(kotlinHashCode, llvm.int64Type) else kotlinHashCode
            }",,6e1f
No signature found,"fun ObjCExportCodeGenerator.generateExceptionTypeInfoArray(baseMethod: IrFunction): LLVMValueRef =
        e",,6e1f
No signature found,"fun ObjCExportCodeGenerator.generateTypeInfoArray(types: Set<IrClass>): ConstPointer =
        t",,6e1f
No signature found,"fun ObjCExportCodeGenerator.effectiveThrowsClasses(method: IrFunction, symbols: KonanSymbols): List<IrClass> {
    if (method is IrSimpleFunction && method.overriddenSymbols.isNotEmpty()) {
        return effectiveThrowsClasses(method.overriddenSymbols.first().owner, symbols)
    }",,6e1f
No signature found,"fun ObjCExportCodeGenerator.generateObjCImpForArrayConstructor(
        target: IrConstructor,
        methodBridge: MethodBridge
): LlvmCallable = g",,6e1f
No signature found,"fun ObjCExportCodeGenerator.generateKotlinToObjCBridge(
        irFunction: IrFunction,
        baseMethod: ObjCMethodSpec.BaseMethod<IrSimpleFunctionSymbol>
): ConstPointer {
    val baseIrFunction = baseMethod.owner

    val methodBridge = baseMethod.bridge

    val parameterToBase = irFunction.allParameters.zip(baseIrFunction.allParameters).toMap()

    val functionType = LlvmFunctionSignature(irFunction, codegen)
    val functionName = ""kotlin2objc_${baseIrFunction.computeSymbolName()}",,6e1f
fun rethrow(),"{
            val error = load(llvm.int8PtrType, errorOutPtr!!)
            val exception = callFromBridge(
                    llvm.Kotlin_ObjCExport_NSErrorAsException,
                    listOf(error),
                    resultLifetime = Lifetime.THROW
            )
            ExceptionHandler.Caller.genThrow(this, exception)
        }",,71eb
No signature found,"fun genKotlinBaseMethodResult(
                lifetime: Lifetime,
                returnBridge: MethodBridge.ReturnValue
        ): LLVMValueRef? = w",,6e1f
No signature found,fun MethodBridge.ReturnValue.isAutoreleasedObjCReference(): Boolean = w,,6e1f
fun foo(),"* }
 *
 * fun usage(i: I) {
 *     i.foo() // Here we invoke
 * }",,519f
No signature found,"fun ObjCExportCodeGenerator.createReverseAdapter(
        irFunction: IrFunction,
        baseMethod: ObjCMethodSpec.BaseMethod<IrSimpleFunctionSymbol>,
        vtableIndex: Int?,
        itablePlace: ClassLayoutBuilder.InterfaceTablePlace?
): ObjCExportCodeGenerator.KotlinToObjCMethodAdapter {

    val selector = baseMethod.selector

    val kotlinToObjC = generateKotlinToObjCBridge(
            irFunction,
            baseMethod
    ).bitcast(llvm.int8PtrType)

    return KotlinToObjCMethodAdapter(selector,
            itablePlace ?: ClassLayoutBuilder.InterfaceTablePlace.INVALID,
            vtableIndex ?: -1,
            kotlinToObjC)
}",,6e1f
No signature found,"fun ObjCExportCodeGenerator.createMethodVirtualAdapter(
        baseMethod: ObjCMethodSpec.BaseMethod<IrSimpleFunctionSymbol>
): ObjCExportCodeGenerator.ObjCToKotlinMethodAdapter {
    val selector = baseMethod.selector
    val methodBridge = baseMethod.bridge
    val irFunction = baseMethod.owner
    val imp = generateObjCImp(irFunction, irFunction, methodBridge, isVirtual = true)

    return objCToKotlinMethodAdapter(selector, methodBridge, imp)
}","/**
 * We need to generate indirect version of a method for a cases
 * when it is called on an object of non-exported type.
 *
 * Consider the following example:
 * file.kt:
 * ```
 * open class Foo {
 *     open fun foo() {}
 * }
 * private class Bar : Foo() {
 *    override fun foo() {}
 * }
 *
 * fun createBar(): Foo = Bar()
 * ```
 * file.swift:
 * ```
 * FileKt.createBar().foo()
 * ```
 * There is no Objective-C typeinfo for `Bar`, thus `foo` will be called via method lookup.
 */",6e1f
No signature found,"fun ObjCExportCodeGenerator.createMethodAdapter(
        implementation: IrFunction?,
        baseMethod: ObjCMethodSpec.BaseMethod<*>
) = c",,6e1f
No signature found,"fun ObjCExportCodeGenerator.createFinalMethodAdapter(
        baseMethod: ObjCMethodSpec.BaseMethod<IrSimpleFunctionSymbol>
): ObjCExportCodeGenerator.ObjCToKotlinMethodAdapter {
    val irFunction = baseMethod.owner
    require(irFunction.modality == Modality.FINAL)
    return createMethodAdapter(irFunction, baseMethod)
}",,6e1f
No signature found,"fun ObjCExportCodeGenerator.createMethodAdapter(
        request: DirectAdapterRequest
): ObjCExportCodeGenerator.ObjCToKotlinMethodAdapter = t",,6e1f
No signature found,"fun ObjCExportCodeGenerator.createConstructorAdapter(
        baseMethod: ObjCMethodSpec.BaseMethod<IrConstructorSymbol>
): ObjCExportCodeGenerator.ObjCToKotlinMethodAdapter = c",,6e1f
No signature found,"fun ObjCExportCodeGenerator.createArrayConstructorAdapter(
        baseMethod: ObjCMethodSpec.BaseMethod<IrConstructorSymbol>
): ObjCExportCodeGenerator.ObjCToKotlinMethodAdapter {
    val selectorName = baseMethod.selector
    val methodBridge = baseMethod.bridge
    val irConstructor = baseMethod.owner
    val imp = generateObjCImpForArrayConstructor(irConstructor, methodBridge)

    return objCToKotlinMethodAdapter(selectorName, methodBridge, imp)
}",,6e1f
No signature found,"fun ObjCExportCodeGenerator.vtableIndex(irFunction: IrSimpleFunction): Int? {
    assert(irFunction.isOverridable)
    val irClass = irFunction.parentAsClass
    return if (irClass.isInterface) {
        null
    }",,6e1f
No signature found,"fun ObjCExportCodeGenerator.itablePlace(irFunction: IrSimpleFunction): ClassLayoutBuilder.InterfaceTablePlace? {
    assert(irFunction.isOverridable)
    val irClass = irFunction.parentAsClass
    return if (irClass.isInterface
            && (irFunction.isReal || irFunction.resolveFakeOverrideMaybeAbstract()?.parent != context.irBuiltIns.anyClass.owner)
    ) {
        context.getLayoutBuilder(irClass).itablePlace(irFunction)
    }",,6e1f
No signature found,"fun ObjCExportCodeGenerator.createTypeAdapterForFileClass(
        fileClass: ObjCClassForKotlinFile
): ObjCExportCodeGenerator.ObjCTypeAdapter {
    val name = fileClass.binaryName

    val adapters = fileClass.methods.map { createFinalMethodAdapter(it.baseMethod) }",,6e1f
No signature found,"fun ObjCExportCodeGenerator.createTypeAdapter(
        type: ObjCTypeForKotlinType,
        superClass: ObjCClassForKotlinClass?,
        reverseAdapters: List<ObjCExportCodeGenerator.KotlinToObjCMethodAdapter>
): ObjCExportCodeGenerator.ObjCTypeAdapter {
    val irClass = type.irClassSymbol.owner
    val adapters = mutableListOf<ObjCExportCodeGenerator.ObjCToKotlinMethodAdapter>()
    val classAdapters = mutableListOf<ObjCExportCodeGenerator.ObjCToKotlinMethodAdapter>()

    type.methods.forEach {
        when (it) {
            is ObjCInitMethodForKotlinConstructor -> {
                adapters += createConstructorAdapter(it.baseMethod)
            }",,6e1f
No signature found,"fun ObjCExportCodeGenerator.createReverseAdapters(
        types: List<ObjCTypeForKotlinType>
): Map<ObjCTypeForKotlinType, ReverseAdapters> {
    val irClassSymbolToType = types.associateBy { it.irClassSymbol }",,6e1f
fun getOrCreateFor(type: ObjCTypeForKotlinType),: ReverseAdapters = r,,39a4
fun afterChildren(current: IrClassSymbol),"{
                        this.result += current
                    }",,1ee8
No signature found,"fun ObjCExportCodeGenerator.createReverseAdapters(
        type: ObjCTypeForKotlinType,
        inheritedAdapters: List<ReverseAdapters>
): ReverseAdapters {
    val result = mutableListOf<ObjCExportCodeGenerator.KotlinToObjCMethodAdapter>()
    val coveredMethods = mutableSetOf<IrSimpleFunction>()

    val methodsCoveredByInheritedAdapters = inheritedAdapters.flatMapTo(mutableSetOf()) { it.coveredMethods }",,6e1f
No signature found,"fun ObjCExportCodeGenerator.nonOverridableAdapter(
        selector: String,
        hasSelectorAmbiguity: Boolean
): ObjCExportCodeGenerator.KotlinToObjCMethodAdapter = K",,6e1f
No signature found,"fun ObjCExportCodeGenerator.createDirectAdapters(
        typeDeclaration: ObjCClassForKotlinClass,
        superClass: ObjCClassForKotlinClass?
): List<ObjCExportCodeGenerator.ObjCToKotlinMethodAdapter> {

    fun ObjCClassForKotlinClass.getAllRequiredDirectAdapters() = this.kotlinMethods.map { method ->
        DirectAdapterRequest(
                findImplementation(irClassSymbol.owner, method.baseMethod.owner, context),
                method.baseMethod
        )
    }",,6e1f
No signature found,"fun ObjCExportCodeGenerator.findImplementation(irClass: IrClass, method: IrSimpleFunction, context: Context): IrSimpleFunction? {
    val override = irClass.simpleFunctions().singleOrNull {
        method in it.getLowered().allOverriddenFunctions
    }",,6e1f
No signature found,"fun ObjCExportCodeGenerator.generateObjCToKotlinSyntheticGetter(
        selector: String,
        suffix: String,
        block: ObjCExportFunctionGenerationContext.() -> Unit
): ObjCExportCodeGenerator.ObjCToKotlinMethodAdapter {

    val methodBridge = MethodBridge(
        MethodBridge.ReturnValue.Mapped(ReferenceBridge),
        MethodBridgeReceiver.Static, valueParameters = emptyList()
    )

    val functionType = objCFunctionType(generationState, methodBridge)
    val functionName = ""objc2kotlin_$suffix""
    val imp = functionGenerator(functionType.toProto(functionName, null, LLVMLinkage.LLVMInternalLinkage)) {
        switchToRunnable = true
    }",,6e1f
No signature found,"fun ObjCExportCodeGenerator.objCToKotlinMethodAdapter(
    selector: String,
    methodBridge: MethodBridge,
    imp: LlvmCallable
): ObjCExportCodeGenerator.ObjCToKotlinMethodAdapter {
    selectorsToDefine[selector] = methodBridge

    return ObjCToKotlinMethodAdapter(selector, getEncoding(methodBridge), imp.toConstPointer())
}",,6e1f
No signature found,"fun ObjCExportCodeGenerator.createUnitInstanceAdapter(selector: String) =
        g",,6e1f
No signature found,"fun ObjCExportCodeGenerator.createObjectInstanceAdapter(
        objectClass: IrClass,
        selector: String,
        owner: IrClass,
): ObjCExportCodeGenerator.ObjCToKotlinMethodAdapter {
    assert(objectClass.kind == ClassKind.OBJECT)
    assert(!objectClass.isUnit())

    val methodBridge = MethodBridge(
        returnBridge = MethodBridge.ReturnValue.Mapped(ReferenceBridge),
        receiver = MethodBridgeReceiver.Static,
        valueParameters = emptyList()
    )

    val function = context.getObjectClassInstanceFunction(objectClass)
    val imp = generateObjCImp(
            function, function, methodBridge,
            isVirtual = false,
            customBridgeSuffix = ""${owner.computeTypeInfoSymbolName()}",,6e1f
No signature found,"fun ObjCExportCodeGenerator.createEnumEntryAdapter(
        irEnumEntry: IrEnumEntry,
        selector: String
): ObjCExportCodeGenerator.ObjCToKotlinMethodAdapter {
    val bridgeName = ""${irEnumEntry.parentAsClass.computeTypeInfoSymbolName()}",,6e1f
No signature found,"fun ObjCExportCodeGenerator.createEnumValuesOrEntriesAdapter(
        function: IrFunction,
        selector: String
): ObjCExportCodeGenerator.ObjCToKotlinMethodAdapter {
    val methodBridge = MethodBridge(
        returnBridge = MethodBridge.ReturnValue.Mapped(ReferenceBridge),
        receiver = MethodBridgeReceiver.Static,
        valueParameters = emptyList()
    )

    val imp = generateObjCImp(function, function, methodBridge, isVirtual = false)

    return objCToKotlinMethodAdapter(selector, methodBridge, imp)
}",,6e1f
No signature found,"fun ObjCExportCodeGenerator.createThrowableAsErrorAdapter(): ObjCExportCodeGenerator.ObjCToKotlinMethodAdapter {
    val methodBridge = MethodBridge(
        returnBridge = MethodBridge.ReturnValue.Mapped(ReferenceBridge),
        receiver = MethodBridgeReceiver.Instance,
        valueParameters = emptyList()
    )

    val imp = generateObjCImpBy(methodBridge, suffix = ""ThrowableAsError"") {
        val exception = objCReferenceToKotlin(param(0), Lifetime.ARGUMENT)
        ret(callFromBridge(llvm.Kotlin_ObjCExport_WrapExceptionToNSError, listOf(exception)))
    }",,6e1f
"fun objCFunctionType(generationState: NativeGenerationState, methodBridge: MethodBridge)",": LlvmFunctionSignature {
    val paramTypes = methodBridge.paramBridges.map { it.toLlvmParamType(generationState.llvm) }",,639b
No signature found,fun ObjCValueType.toLlvmType(llvm: CodegenLlvmHelpers): LLVMTypeRef = w,,6e1f
No signature found,fun MethodBridgeParameter.toLlvmParamType(llvm: CodegenLlvmHelpers): LlvmParamType = w,,6e1f
No signature found,"fun MethodBridge.ReturnValue.toLlvmRetType(
        generationState: NativeGenerationState
): LlvmRetType {
    val llvm = generationState.llvm
    return when (this) {
        MethodBridge.ReturnValue.Suspend,
        MethodBridge.ReturnValue.Void -> LlvmRetType(llvm.voidType)

        MethodBridge.ReturnValue.HashCode -> LlvmRetType(if (generationState.is64BitNSInteger()) llvm.int64Type else llvm.int32Type)
        is MethodBridge.ReturnValue.Mapped -> this.bridge.toLlvmParamType(llvm)
        MethodBridge.ReturnValue.WithError.Success -> ValueTypeBridge(ObjCValueType.BOOL).toLlvmParamType(llvm)

        MethodBridge.ReturnValue.Instance.InitResult,
        MethodBridge.ReturnValue.Instance.FactoryResult -> ReferenceBridge.toLlvmParamType(llvm)

        is MethodBridge.ReturnValue.WithError.ZeroForError -> this.successBridge.toLlvmRetType(generationState)
    }",,6e1f
No signature found,fun TypeBridge.toLlvmParamType(llvm: CodegenLlvmHelpers): LlvmParamType = w,,6e1f
No signature found,"fun ObjCExportCodeGenerator.getEncoding(methodBridge: MethodBridge): String {
    var paramOffset = 0

    val params = buildString {
        methodBridge.paramBridges.forEach {
            append(it.objCEncoding)
            append(paramOffset)
            paramOffset += LLVMStoreSizeOfType(runtime.targetData, it.toLlvmParamType(llvm).llvmType).toInt()
        }",,6e1f
No signature found,fun MethodBridge.ReturnValue.getObjCEncoding(generationState: NativeGenerationState): String = w,,6e1f
No signature found,"fun NativeGenerationState.is64BitNSInteger(): Boolean {
    val configurables = config.platform.configurables
    require(configurables is AppleConfigurables) {
        ""Target ${configurables.target}",,6e1f
No signature found,"fun MethodBridge.parametersAssociated(
        irFunction: IrFunction
): List<Pair<MethodBridgeParameter, IrValueParameter?>> {
    val kotlinParameters = irFunction.allParameters.iterator()

    return this.paramBridges.map {
        when (it) {
            is MethodBridgeValueParameter.Mapped,
            MethodBridgeReceiver.Instance,
            is MethodBridgeValueParameter.SuspendCompletion ->
                it to kotlinParameters.next()

            MethodBridgeReceiver.Static, MethodBridgeSelector, MethodBridgeValueParameter.ErrorOutParameter ->
                it to null

            MethodBridgeReceiver.Factory -> {
                kotlinParameters.next()
                it to null
            }",,6e1f
"fun booleanInExternalLog(name: String, obj: dynamic)","fun nativeBoolean(obj: Any?): Boolean

internal  {
    if (jsTypeOf(obj) != ""boolean"") {
        console.asDynamic().error(""Boolean expected for '$name', but actual:"", obj)
    }",,df01
"fun booleanInExternalException(name: String, obj: dynamic)","{
    if (jsTypeOf(obj) != ""boolean"") {
        throw JsError(""Boolean expected for '$name', but actual: $obj"")
    }",,206b
"fun interceptFunctionLiteralDescriptor(
        expression: KtLambdaExpression,
        context: ExpressionTypingContext,
        descriptor: AnonymousFunctionDescriptor
    )",: AnonymousFunctionDescriptor = d,,7271
"fun interceptType(
        element: KtElement,
        context: ExpressionTypingContext,
        resultType: KotlinType
    )",: KotlinType = r,,9693
No signature found,"fun interceptResolvedCallAtomCandidate(
        candidateDescriptor: CallableDescriptor,
        completedCallAtom: ResolvedCallAtom,
        trace: BindingTrace?,
        resultSubstitutor: NewTypeSubstitutor?,
        diagnostics: Collection<KotlinCallDiagnostic>
    ): CallableDescriptor = c",,6e1f
No signature found,"fun interceptCandidates(
        candidates: Collection<NewResolutionOldInference.MyCandidate>,
        context: BasicCallResolutionContext,
        candidateResolver: CandidateResolver,
        callResolver: CallResolver,
        name: Name,
        kind: NewResolutionOldInference.ResolutionKind,
        tracing: TracingStrategy
    ): Collection<NewResolutionOldInference.MyCandidate> = c",,6e1f
"fun interceptFunctionCandidates(
        candidates: Collection<FunctionDescriptor>,
        scopeTower: ImplicitScopeTower,
        resolutionContext: BasicCallResolutionContext,
        resolutionScope: ResolutionScope,
        callResolver: CallResolver,
        name: Name,
        location: LookupLocation
    )",: Collection<FunctionDescriptor> = c,,5863
No signature found,"fun interceptFunctionCandidates(
        candidates: Collection<FunctionDescriptor>,
        scopeTower: ImplicitScopeTower,
        resolutionContext: BasicCallResolutionContext,
        resolutionScope: ResolutionScope,
        callResolver: PSICallResolver,
        name: Name,
        location: LookupLocation,
        dispatchReceiver: ReceiverValueWithSmartCastInfo?,
        extensionReceiver: ReceiverValueWithSmartCastInfo?
    ): Collection<FunctionDescriptor> = c",,6e1f
"fun interceptVariableCandidates(
        candidates: Collection<VariableDescriptor>,
        scopeTower: ImplicitScopeTower,
        resolutionContext: BasicCallResolutionContext,
        resolutionScope: ResolutionScope,
        callResolver: CallResolver,
        name: Name,
        location: LookupLocation
    )",: Collection<VariableDescriptor> = c,,9572
No signature found,"fun interceptVariableCandidates(
        candidates: Collection<VariableDescriptor>,
        scopeTower: ImplicitScopeTower,
        resolutionContext: BasicCallResolutionContext,
        resolutionScope: ResolutionScope,
        callResolver: PSICallResolver,
        name: Name,
        location: LookupLocation,
        dispatchReceiver: ReceiverValueWithSmartCastInfo?,
        extensionReceiver: ReceiverValueWithSmartCastInfo?
    ): Collection<VariableDescriptor> = c",,6e1f
fun withLocal(),"{
        class Local {
            @Suppress("""") @MustBeDocumented
        }",,41af
fun test(),= 1,"// FIR_IDENTICAL
// !DIAGNOSTICS: -ERROR_SUPPRESSION
// FILE: A.kt",fe98
fun bar(),= 2,,66c3
fun benchmark(bh: Blackhole),"{
        analyzeGreenFile(bh)
    }",,8bbd
fun buildText(),"=
            """,,47fd
No signature found,"fun bar(x: Any?) {
            |   var y = x
            |${(1..size).joinToString(""\n"") {
                """"""
                |if (x is String) {
                |   y = x
                |}",,6e1f
fun foo(plugin: Plugin),": String? {
    return plugin.commonFields?.screenShots
}","// TARGET_BACKEND: JVM_IR
// ISSUE: KT-65111

// FILE: plugin/Plugin.java",ee5b
fun box(),": String =
    f",// FILE: example/test.kt,4f27
fun foo(),= 4,// FIR_IDENTICAL,519f
fun bar(),= 2,,66c3
fun foo(),= O,,519f
fun bar(),= O,,66c3
fun testCreateModifierList(),"{
        val psiFactory = KtPsiFactory(project)
        KtTokens.MODIFIER_KEYWORDS_ARRAY.forEach {
            val modifier = psiFactory.createModifierList(it)
            Assert.assertTrue(modifier.hasModifier(it))
        }",,117f
fun createEnvironment(),": KotlinCoreEnvironment {
        return KotlinCoreEnvironment.createForTests(
            testRootDisposable, KotlinTestUtils.newConfiguration(), EnvironmentConfigFiles.JVM_CONFIG_FILES
        )
    }",,4539
fun lib(),": String {
    val x = X()

    return when {
        bar != 23 -> ""fail 1""
        muc != ""fifth"" -> ""fail 2""
        toc != ""sixth"" -> ""fail 3""

        x.bar != ""seventh"" -> ""fail 4""
        x.muc != 29 -> ""fail 5""
        x.toc != ""eighth"" -> ""fail 6""

        else -> ""OK""
    }","// MODULE: lib
// FILE: A.kt
// VERSION: 1",f985
fun box(),: String = l,,4f27
fun box(),": String {
    val x = recursive<Int, Int, Int, Int, Int, Int, String>(){ ""abc"" }",// WITH_STDLIB,4f27
fun foo(),"{
    val text: List<Any> = null!!
    text.<!UNRESOLVED_REFERENCE!>map<!> <!DEBUG_INFO_MISSING_UNRESOLVED!>Any<!><!SYNTAX!>?<!>::<!DEBUG_INFO_MISSING_UNRESOLVED!>toString<!>
}",// !DIAGNOSTICS: -UNREACHABLE_CODE,519f
No signature found,"fun CharArray.initC2ESC(c: Int, esc: Char) {
        this[c] = esc
        if (esc != UNICODE_ESC) ESC2C[esc.code] = c.toChar()
    }",,6e1f
No signature found,"fun CharArray.initC2ESC(c: Char, esc: Char) = i",,6e1f
No signature found,"fun ByteArray.initC2TC(c: Int, cl: Byte) {
    this[c] = cl
}",,6e1f
No signature found,"fun ByteArray.initC2TC(c: Char, cl: Byte) {
    initC2TC(c.code, cl)
}",,6e1f
fun charToTokenClass(c: Char),= i,,9be0
fun escapeToChar(c: Int),: Char = i,,92de
No signature found,"fun requireTc(expected: Byte, lazyErrorMsg: () -> String) {
        if (tc != expected)
            fail(tokenPos, lazyErrorMsg())
    }",,6e1f
fun takeStr(),": String {
        if (tc != TC_OTHER && tc != TC_STRING) fail(tokenPos, ""Expected string or non-null literal"")
        val prevStr = if (offset < 0)
            buf.concatToString(0, length) else
            source.substring(offset, offset + length)
        nextToken()
        return prevStr
    }",,ec1b
fun append(ch: Char),"{
        if (length >= buf.size) buf = buf.copyOf(2 * buf.size)
        buf[length++] = ch
    }",,051e
"fun appendRange(source: String, fromIndex: Int, toIndex: Int)","{
        val addLen = toIndex - fromIndex
        val oldLen = length
        val newLen = oldLen + addLen
        if (newLen > buf.size) buf = buf.copyOf(newLen.coerceAtLeast(2 * buf.size))
        for (i in 0 until addLen) buf[oldLen + i] = source[fromIndex + i]
        length += addLen
    }",// initializes buf usage upon the first encountered escaped char,e341
fun nextToken(),"{
        val source = source
        var curPos = curPos
        val maxLen = source.length
        while (true) {
            if (curPos >= maxLen) {
                tokenPos = curPos
                tc = TC_EOF
                return
            }",,a67c
"fun nextLiteral(source: String, startPos: Int)","{
        tokenPos = startPos
        offset = startPos
        var curPos = startPos
        val maxLen = source.length
        while (true) {
            curPos++
            if (curPos >= maxLen || charToTokenClass(source[curPos]) != TC_OTHER) break
        }",,37ef
"fun nextString(source: String, startPos: Int)","{
        tokenPos = startPos
        length = 0 // in buffer
        var curPos = startPos + 1
        var lastPos = curPos
        val maxLen = source.length
        parse@ while (true) {
            if (curPos >= maxLen) fail(curPos, ""Unexpected end in string"")
            if (source[curPos] == STRING) {
                break@parse
            }",,3dfb
"fun appendEsc(source: String, startPos: Int)",": Int {
        var curPos = startPos
        require(curPos < source.length, curPos) { ""Unexpected end after escape char"" }",,14c9
"fun appendHex(source: String, startPos: Int)",": Int {
        var curPos = startPos
        append(
                ((fromHexChar(source, curPos++) shl 12) +
                        (fromHexChar(source, curPos++) shl 8) +
                        (fromHexChar(source, curPos++) shl 4) +
                        fromHexChar(source, curPos++)).toChar()
        )
        return curPos
    }",,66b0
fun skipElement(),"{
        if (tc != TC_BEGIN_OBJ && tc != TC_BEGIN_LIST) {
            nextToken()
            return
        }",,f83d
"fun fromHexChar(source: String, curPos: Int)",": Int {
    require(curPos < source.length, curPos) { ""Unexpected end in unicode escape"" }",,6fbd
"fun rangeEquals(source: String, start: Int, length: Int, str: String)",": Boolean {
    val n = str.length
    if (length != n) return false
    for (i in 0 until n) if (source[start + i] != str[i]) return false
    return true
}",,2b16
No signature found,"fun require(condition: Boolean, pos: Int, msg: () -> String) {
    if (!condition)
        fail(pos, msg())
}",,6e1f
"fun fail(pos: Int, msg: String)",": Nothing {
    throw JsonParsingException(pos, msg)
}",,51df
fun <T> id(p: T),: T = p,// FIR_IDENTICAL,7511
fun <A> main(),"{
    <!NEW_INFERENCE_NO_INFORMATION_FOR_PARAMETER!>C<!>()

    val a: C<A> = <!TYPE_PARAMETER_AS_REIFIED!>C<!>()
    C<<!TYPE_PARAMETER_AS_REIFIED!>A<!>>()

    val b: C<Int> = C()
    C<Int>()

    // TODO svtk, uncomment when extensions are called for nested calls!
    //val < !UNUSED_VARIABLE!>с< !>: C<A> = id(< !TYPE_PARAMETER_AS_REIFIED!>C< !>())
}",,ad0a
fun box(),": String {
    try {
        for (i in 0 until 1) {
            try {
                val x = ""x""
                throw RuntimeException(x)
            }","// WITH_STDLIB
// FILE: test.kt",4f27
No signature found,"fun <!ACTUAL_WITHOUT_EXPECT!>toString<!>() = ""","// MODULE: m1-common
// FILE: common.kt",6e1f
"fun doTestByMainFile(mainFile: KtFile, mainModule: KtTestModule, testServices: TestServices)","{
        val expression = testServices.expressionMarkerProvider.getSelectedElementOfType<KtExpression>(mainFile)
        analyseForTest(expression) {
            val type = expression.getKtType()
                ?: error(""expression $expression is not typable"")
            val typeScope = type.getTypeScope()
            val declaredScopeByTypeScope = typeScope?.getDeclarationScope()

            val scopeStringRepresentation = prettyPrint {
                appendLine(""expression: ${expression.text}",,5016
No signature found,"fun KtAnalysisSession.renderForTests(typeScope: KtTypeScope): String {
        val callables = typeScope.getCallableSignatures().toList()
        return prettyPrint {
            callables.forEach {
                appendLine(stringRepresentation(it))
            }",,6e1f
No signature found,"fun KtAnalysisSession.prettyPrintForTests(typeScope: KtTypeScope): String {
        val callables = typeScope.getCallableSignatures().toList()
        return prettyPrint {
            callables.forEach {
                appendLine(prettyPrintSignature(it))
            }",,6e1f
No signature found,"fun KtAnalysisSession.renderForTests(scope: KtScope): String {
        val callables = scope.getCallableSymbols().toList()
        return prettyPrint {
            callables.forEach {
                appendLine(DebugSymbolRenderer().render(it))
            }",,6e1f
No signature found,"fun KtAnalysisSession.prettyPrintForTests(scope: KtScope): String {
        val callables = scope.getCallableSymbols().toList()
        return prettyPrint {
            callables.forEach {
                appendLine(it.render(renderer))
            }",,6e1f
fun foo(),": T
}

class Derived<T> : Base<T> {
    override : T = ""error"" as T
}","// ISSUE: KT-62863
// FIR_IDENTICAL
// DUMP_IR",519f
No signature found,fun <T> Derived<T>.bar(): Base<T> = o,,6e1f
fun foo(),": T = """,,519f
fun <T> test(x: Base<T>),": T {
    if (x is Derived<*>) {
        val y: Base<Any?> = x.bar()
        return y.foo() as T
    }",,2576
fun box(),": String {
    val x = Derived<String>()
    return test(x)
}",,4f27
No signature found,fun Foo.f(): Boo<caret>lean = f,,6e1f
"fun <T> test(s1: S1, x: T)","{
    if (s1.s1 != ""OK"" && x != X1) throw AssertionError()
}","// WITH_STDLIB
// WORKS_WHEN_VALUE_CLASS
// LANGUAGE: +ValueClasses",601b
"fun <T> test(s2: S2, x: T)","{
    if (s2.s2 != ""OK"" && x != X2) throw AssertionError()
}",,8564
fun box(),": String {
    test(S1(""OK""), X1)
    test(S2(""OK""), X2)

    return ""OK""
}",,4f27
fun visitExpression(expression: KtExpression),"{
        if (expression is KtDeclarationWithBody) {
            functions += BindingUtils.getFunctionDescriptor(bindingContext, expression)
        }",,f29c
fun visitClassOrObject(classOrObject: KtClassOrObject),"{
        // skip
    }",,184a
"fun <R, D> acceptChildren(visitor: FirVisitor<R, D>, data: D)","{
        annotations.forEach { it.accept(visitor, data) }",,b2f8
"fun <D> transformChildren(transformer: FirTransformer<D>, data: D)",": FirNamedArgumentExpressionImpl {
        transformAnnotations(transformer, data)
        expression = expression.transform(transformer, data)
        return this
    }",,963c
"fun <D> transformAnnotations(transformer: FirTransformer<D>, data: D)",": FirNamedArgumentExpressionImpl {
        annotations.transformInplace(transformer, data)
        return this
    }",,31d1
No signature found,fun replaceConeTypeOrNull(newConeTypeOrNull: ConeKotlinType?) {},,6e1f
fun replaceAnnotations(newAnnotations: List<FirAnnotation>),"{
        annotations = newAnnotations.toMutableOrEmpty()
    }",,8a3d
fun resumeWith(result: Result<T>),"{
        while (true) { // lock-free loop
            val cur = this.result // atomic read
            when {
                cur === UNDECIDED -> if (RESULT.compareAndSet(this, UNDECIDED, result.value)) return
                cur === COROUTINE_SUSPENDED -> if (RESULT.compareAndSet(this, COROUTINE_SUSPENDED, RESUMED)) {
                    delegate.resumeWith(result)
                    return
                }",,147a
fun getOrThrow(),": Any? {
        var result = this.result // atomic read
        if (result === UNDECIDED) {
            if (RESULT.compareAndSet(this, UNDECIDED, COROUTINE_SUSPENDED)) return COROUTINE_SUSPENDED
            result = this.result // reread volatile var
        }",,791b
fun getStackTraceElement(),": StackTraceElement? =
        n",,22fe
fun toString(),": String =
        """,,a535
fun multiFile2(),{},,96c7
fun sideEffecting(),": Int {
    result += ""OK""
    return 123
}","// IGNORE_BACKEND: JS, JS_IR, JS_IR_ES6, WASM",ada3
fun box(),": String {
    if (a?.x != sideEffecting()) return ""fail cmp 1""
    // RHS not evaluated because `b` is null, might be a bug:
    if (b?.x == sideEffecting()) return ""fail cmp 2""
    return result
}",,4f27
fun supertypes(type: CirClassType),": Set<CirClassType>
}

/**
 * Very simple and pragmatic implementation of [CirSupertypesResolver]
 * Limitations:
 * - Will not resolve parameterized types
 * - Supertypes from dependencies are resolved in a ""best effort"" manner.
 */
internal class SimpleCirSupertypesResolver(
    private val classifiers: CirClassifierIndex,
    private val dependencies: CirProvidedClassifiers,
) : CirSupertypesResolver {

    override : Set<CirClassType> {
        classifiers.findClass(type.classifierId)?.let { classifier ->
            return supertypesFromCirClass(type, classifier)
        }",,602f
"fun supertypesFromCirClass(type: CirClassType, classifier: CirClass)",": Set<CirClassType> {
        return classifier.supertypes.filterIsInstance<CirClassType>()
            .mapNotNull { superType -> buildSupertypeFromClassifierSupertype(type, superType) }",,37af
No signature found,"fun CirProvidedClassifiers.supertypesFromProvidedClass(type: CirClassType, classifier: CirProvided.Class): Set<CirClassType> {
        return classifier.supertypes.filterIsInstance<CirProvided.ClassType>()
            .mapNotNull { superType -> superType.toCirClassTypeOrNull(this) }",,6e1f
"fun buildSupertypeFromClassifierSupertype(type: CirClassType, supertype: CirClassType)",": CirClassType? {
        if (type.arguments.isEmpty() && supertype.arguments.isEmpty()) {
            return supertype.makeNullableIfNecessary(type.isMarkedNullable)
        }",,65a0
fun createPointer(),: KtSymbolPointer<KtSamConstructorSymbol> = w,,ffc4
No signature found,fun equals(other: Any?): Boolean = i,,6e1f
fun hashCode(),: Int = c,,6874
No signature found,"fun generateCompilerArgumentsCopy(withPrinterToFile: (targetFile: File, Printer.() -> Unit) -> Unit) {
    val processed = mutableSetOf<KClass<*>>()
    for (klass in CLASSES_TO_PROCESS) {
        generateRec(klass, withPrinterToFile, processed)
    }",,6e1f
No signature found,"fun generateRec(
    klass: KClass<*>,
    withPrinterToFile: (targetFile: File, Printer.() -> Unit) -> Unit,
    processed: MutableSet<KClass<*>>,
) {
    if (!processed.add(klass)) return

    val klassName = klass.simpleName!!
    val fqn = klass.qualifiedName!!
    val `package` = klass.java.`package`
    val destDir = PACKAGE_TO_DIR_MAPPING[`package`]!!.resolve(`package`.name.replace('.', '/'))
    withPrinterToFile(destDir.resolve(klassName + ""CopyGenerated.kt"")) {
        println(
            """"""
                @file:Suppress(""unused"", ""DuplicatedCode"")

                // DO NOT EDIT MANUALLY!
                // Generated by generators/tests/org/jetbrains/kotlin/generators/arguments/GenerateCompilerArgumentsCopy.kt
                // To regenerate run 'generateCompilerArgumentsCopy' task
                
                package ${`package`.name}",,6e1f
fun isSupportedImmutable(type: KType),": Boolean {
            val classifier: KClassifier = type.classifier!!
            return when {
                classifier is KClass<*> && classifier == List::class -> isSupportedImmutable(type.arguments.single().type!!)
                classifier == InternalArgument::class -> true
                classifier == Boolean::class -> true
                classifier == Int::class -> true
                classifier == String::class -> true
                else -> false
            }",,fc50
No signature found,"fun copy$klassName(from: $klassName, to: $klassName): $klassName {"")
        withIndent {
            val superClasses: List<KClass<*>> = klass.superclasses.filterNot { it.java.isInterface }",,6e1f
No signature found,"fun Printer.deprecatePropertyIfNecessary(property: KProperty1<*, *>) {
    if (property.hasAnnotation<Deprecated>()) {
        println(""@Suppress(\""DEPRECATION\"")"")
    }",,6e1f
fun main(),"{
    generateCompilerArgumentsCopy(::getPrinterToFile)
}",,d987
fun foo(t: T),": String
}

interface B {
    fun foo(t: Int) = ""B""
}",,6c6b
fun box(),": String {
    val z1 = Z1()
    val z1a: A<Int> = z1
    val z1b: B = z1

    return when {
        z1.foo( 0)  != ""B"" -> ""Fail #1""
        z1a.foo( 0) != ""B"" -> ""Fail #2""
        z1b.foo( 0) != ""B"" -> ""Fail #3""
        else -> ""OK""
    }",,4f27
fun foo(),{},// WITH_STDLIB,519f
No signature found,fun <F : Segment<F>> AtomicRef<F>.findSegmentAndMoveForward(createNewSegment: (prev: F?) -> F) = n,// FIR_IDENTICAL,6e1f
fun enqueue(element: Q),"{
        // F <: Segment<F> from upper bound
        // F <: OneElementSegment<Segment<F>>? from ::createSegment argument. ? is questionable here
        //     (F?) -> F <: (OneElementSegment<C>?) -> OneElementSegment<C>
        tail.findSegmentAndMoveForward(::createSegment)
    }",,a423
No signature found,fun <C> createSegment(prev: OneElementSegment<C>?) = O,,6e1f
fun main(args: Array<String>),"{
    <!EQUALITY_NOT_APPLICABLE!>(1 to A()) == A()<!>
    <!EQUALITY_NOT_APPLICABLE!>(1 to B()) == B()<!>

    <!EQUALITY_NOT_APPLICABLE!>(1 to A()) === A()<!>
    <!EQUALITY_NOT_APPLICABLE!>(1 to B()) === B()<!>
}","// ISSUE: KT-25808
// WITH_STDLIB

// B.java",5b61
fun createEnvironment(),: KotlinCoreEnvironment = c,,4539
No signature found,"fun renderOutput(originalText: String, text: String, resolvedCallsAt: List<Pair<Int, ResolvedCall<*>?>>): String {
        val lines = text.lines()
        val lineOffsets = run {
            var offset = 0
            lines.map { offset.apply { offset += it.length + 1 /* new-line delimiter */ }",,6e1f
fun lineIndexAt(caret: Int),": Int =
                l",,6e03
"fun <T, reified K> bar()",{},,7713
fun foo(),"{
    <!INAPPLICABLE_CANDIDATE!>bar<!><Int>()
}",,519f
No signature found,fun register(owner: Owner<*>) {},"// LANGUAGE: +ForbidUsingExpressionTypesWithInaccessibleContent
// ISSUE: KT-66690
// MODULE: base
// FILE: base.kt",6e1f
fun test(some: Some<String>),"{
    register(some.g)
}","// MODULE: user(intermediate)
// FILE: user.kt",d1e4
No signature found,"fun foo(list: MutableList<Any?>, condition: Boolean): Unit = w","// ISSUE: KT-59748
// FIR_DUMP",6e1f
No signature found,"fun bar(list: MutableList<Any?>, condition: Boolean): Unit = <",,6e1f
"fun plusFoo(list: MutableList<String>, condition: Boolean)",: Unit = w,,a8ea
fun assign(condition: Boolean),: Unit = w,,7d55
fun plugAssign(condition: Boolean),: Unit = w,,3cd6
fun resolve<caret>Me(),"{
    receive(functionWithLazyBody())
}",,00e4
fun receive(value: String),{},,8126
fun functionWithLazyBody(),": String = """,,597e
No signature found,"fun PsiFile.findElementByCommentPrefix(commentText: String): PsiElement? =
        f",,6e1f
fun visitComment(comment: PsiComment),"fun PsiFile.findElementsByCommentPrefix(prefix: String): Map<PsiElement, String> {
    var result = SmartFMap.emptyMap<PsiElement, String>()
    accept(
            object : KtTreeVisitorVoid() {
                override  {
                    val commentText = comment.text
                    if (commentText.startsWith(prefix)) {
                        val parent = comment.parent
                        val elementToAdd = when (parent) {
                            is KtDeclaration -> parent
                            is PsiMember -> parent
                            else -> PsiTreeUtil.skipSiblingsForward(
                                    comment,
                                    PsiWhiteSpace::class.java, PsiComment::class.java, KtPackageDirective::class.java
                            )
                        }",,d787
No signature found,fun <T : Any> T?.npe() : T = i,// KT-201 Allow to call extension with nullable receiver with a '.',6e1f
fun foo(),"{
  val i : Int? = 1
  i.npe() // error!
}",,519f
No signature found,"fun blockFun(blockArg: String.() -> Unit) =
    """,// FILE: test.kt,6e1f
fun box(),"{
    blockFun {
        this
    }",,4f27
fun <T> get(t: T),": () -> String {
    return t::toString
}",,3d10
fun box(),": String {
    if (get(null).invoke() != ""null"") return ""Fail null""

    return get(""OK"").invoke()
}",,4f27
"fun handleClashingNames(internalName: String, origin: JvmDeclarationOrigin)","{
        val another = className.getOrPut(internalName) { origin }",,fa90
"fun reportError(internalName: String, vararg another: JvmDeclarationOrigin)","{
        val duplicateClasses =
            another.mapNotNull { it.descriptor }","// Allow clashing classes if they are originated from the same source element. For example, this happens during inlining anonymous
        // objects. In JVM IR, this also happens for anonymous classes in default arguments of tailrec functions, because default arguments
        // are deep-copied (see JvmTailrecLowering).",426e
"fun detectKotlinPluginLoadedInMultipleProjects(project: Project, kotlinPluginVersion: String)","{
        val onRegister = {
            project.gradle.taskGraph.whenReady {
                if (multipleProjectsHolder.isInMultipleProjects(project, kotlinPluginVersion)) {
                    val loadedInProjects = multipleProjectsHolder.getAffectedProjects(project, kotlinPluginVersion)!!
                    if (PropertiesProvider(project).ignorePluginLoadedInMultipleProjects != true) {
                        project.logger.warn(""\n$MULTIPLE_KOTLIN_PLUGINS_LOADED_WARNING"")
                        project.logger.warn(
                            MULTIPLE_KOTLIN_PLUGINS_SPECIFIC_PROJECTS_WARNING + loadedInProjects.joinToString(limit = 4) { ""'$it'"" }",,bdb5
fun close(),"{
        buildHandler.buildFinished(parameters.sessionsDir.get())
        log.kotlinDebug(DISPOSE_MESSAGE)
    }",,7e58
fun registerIfAbsent(project: Project),": Provider<KotlinGradleBuildServices> =
            p",,ace9
No signature found,"fun String.getValue(nothing: Any?, property: KProperty<*>) = ""","// WITH_STDLIB
// DIAGNOSTICS: -NOTHING_TO_INLINE
// LANGUAGE: +ProhibitPrivateOperatorCallInInline",6e1f
No signature found,"fun String.setValue(nothing: Any?, property: KProperty<*>, s: String) {}",,6e1f
No signature found,"fun Int.provideDelegate(thisRef: Any?, prop: KProperty<*>): ReadOnlyProperty<Any?, Int> = R",,6e1f
No signature found,fun O.compareTo(other: O) = 1,,6e1f
No signature found,fun O.contains(other: O) = t,,6e1f
No signature found,fun O.invoke() {},,6e1f
No signature found,fun O.iterator() = O,,6e1f
No signature found,fun O.next() = O,,6e1f
No signature found,fun O.hasNext() = f,,6e1f
No signature found,fun O.get(i: Int) = O,,6e1f
No signature found,"fun O.set(i: Int, o: O) {}",,6e1f
No signature found,fun O.component1() = O,,6e1f
No signature found,fun O.inc() = O,,6e1f
No signature found,fun O.not() = O,,6e1f
No signature found,fun O.plus(other: O) = O,,6e1f
No signature found,fun O.unaryPlus() = O,,6e1f
No signature found,fun O.rangeTo(other: O) = O,,6e1f
No signature found,fun O.rangeUntil(other: O) = O,,6e1f
No signature found,fun O.plusAssign(other: O) {},,6e1f
No signature found,fun P.iterator() = P,,6e1f
No signature found,fun P.next() = P,,6e1f
No signature found,fun P.hasNext() = f,,6e1f
fun foo(),"{
    var x by <!NON_PUBLIC_CALL_FROM_PUBLIC_INLINE, NON_PUBLIC_CALL_FROM_PUBLIC_INLINE!>""""<!>
    x
    x = """"

    val y by <!NON_PUBLIC_CALL_FROM_PUBLIC_INLINE!>1<!>
    y

    var o = O
    o <!NON_PUBLIC_CALL_FROM_PUBLIC_INLINE!><<!> o
    o <!NON_PUBLIC_CALL_FROM_PUBLIC_INLINE!>in<!> o
    <!NON_PUBLIC_CALL_FROM_PUBLIC_INLINE!>o<!>()
    for (o1 in <!NON_PUBLIC_CALL_FROM_PUBLIC_INLINE, NON_PUBLIC_CALL_FROM_PUBLIC_INLINE, NON_PUBLIC_CALL_FROM_PUBLIC_INLINE!>o<!>) {
    }",,519f
"fun build(fileMappings: List<FileMapping>, backwardsCompatibleSyntax: Boolean)",": String? {
        if (fileMappings.isEmpty()) {
            return null
        }",,cc6a
No signature found,"fun Collection<FileMapping>.toSMAP(stratumName: String, mapToFirstLine: Boolean): String = i",,6e1f
No signature found,"fun RangeMapping.toSMAP(fileId: Int, oneLine: Boolean): String =
        i",,6e1f
No signature found,"fun FileMapping.toSMAPFile(id: Int): String =
        """,,6e1f
No signature found,"fun FileMapping.toSMAPMapping(id: Int, mapToFirstLine: Boolean): String =
        l",,6e1f
fun mapLineNumber(lineNumber: Int),": Int {
        val mappedLineNumber = visitedLines.get(lineNumber)
        if (mappedLineNumber > 0) {
            return mappedLineNumber
        }",,2789
"fun visitLineNumber(line: Int, start: Label)","=
        s",,f4f2
No signature found,"fun visitLocalVariable(name: String, descriptor: String, signature: String?, start: Label, end: Label, index: Int) =
        i",,6e1f
"fun getOrRegisterNewSource(name: String, path: String)",": FileMapping =
        f",,64f9
No signature found,"fun mapLineNumber(inlineSource: SourcePosition, inlineCallSite: SourcePosition?): Int {
        val fileMapping = getOrRegisterNewSource(inlineSource.file, inlineSource.path)
        val mappedLineIndex = fileMapping.mapNewLineNumber(inlineSource.line, maxUsedValue, inlineCallSite)
        maxUsedValue = max(maxUsedValue, mappedLineIndex)
        return mappedLineIndex
    }",,6e1f
fun mapSyntheticLineNumber(id: Int),": Int {
        return mapLineNumber(SourcePosition(id, FAKE_FILE_NAME, FAKE_PATH), null)
    }",,dd60
fun findRange(lineNumber: Int),": RangeMapping? {
        val index = intervals.binarySearch { if (lineNumber in it) 0 else it.dest - lineNumber }",,e9f2
No signature found,"fun identityMapping(name: String?, path: String, methods: Collection<MethodNode>): SMAP {
            if (name.isNullOrEmpty()) return SMAP(emptyList())
            var start = 0
            var end = 0
            for (node in methods) {
                for (insn in node.instructions.asSequence()) {
                    if (insn !is LineNumberNode) continue
                    start = min(start, insn.line)
                    end = max(end, insn.line + 1)
                }",,6e1f
fun toSourceInfo(),": SourceInfo =
        S",,0bb3
No signature found,"fun mapNewLineNumber(source: Int, currentIndex: Int, callSite: SourcePosition?): Int {
        // Save some space in the SMAP by reusing (or extending if it's the last one) the existing range.
        // TODO some *other* range may already cover `source`; probably too slow to check them all though.
        //   Maybe keep the list ordered by `source` and use binary search to locate the closest range on the left?
        val mapping = lineMappings.lastOrNull()?.takeIf { it.canReuseFor(source, currentIndex, callSite) }",,6e1f
No signature found,"fun RangeMapping.canReuseFor(newSource: Int, globalMaxDest: Int, newCallSite: SourcePosition?): Boolean =
        c",,6e1f
No signature found,"fun mapNewInterval(source: Int, dest: Int, range: Int, callSite: SourcePosition? = n",,6e1f
fun contains(destLine: Int),": Boolean =
        d",,660b
fun hasMappingForSource(sourceLine: Int),": Boolean =
        s",,084e
fun mapDestToSource(destLine: Int),": SourcePosition =
        S",,a9b4
fun mapSourceToDest(sourceLine: Int),": Int =
        d",,0541
fun testLazyScriptDefinitionsProvider(),"{

        val genDefCounter = AtomicInteger()
        val standardDef = FakeScriptDefinition()
        val shadedDef = FakeScriptDefinition("".x.kts"")
        val provider = TestCliScriptDefinitionProvider(standardDef).apply {
            setScriptDefinitions(listOf(shadedDef, standardDef))
            setScriptDefinitionsSources(
                listOf(
                    TestScriptDefinitionSource(
                        genDefCounter,
                        "".y.kts"",
                        "".x.kts""
                    )
                )
            )
        }",,7aff
fun isScript(script: SourceCode),": Boolean {
        val path = script.locationId ?: return false
        return path.endsWith(suffix).also {
            if (it) matchCounter.incrementAndGet()
        }",,8ccd
fun getDefaultScriptDefinition(),: KotlinScriptDefinition = s,,7c19
fun box(),": String {
    class L : C({}","// TARGET_BACKEND: JVM
// LAMBDAS: CLASS
// WITH_REFLECT",4f27
No signature found,fun Int.compareTo(c: Char) = 0,,6e1f
"fun testOverloadedCompareToCall(x: Int, y: Char)","=
    x",,7ff0
"fun testOverloadedCompareToCallWithSmartCast(x: Any, y: Any)","=
    x",,873d
"fun testEqualsWithSmartCast(x: Any, y: Any)","=
    x",,59fc
No signature found,fun Int.compareTo(c: Char) = 0,,6e1f
"fun testMemberExtensionCompareToCall(x: Int, y: Char)","=
        x",,d661
"fun testMemberExtensionCompareToCallWithSmartCast(x: Any, y: Any)","=
        x",,ceb3
fun foo(),": Boolean
}
interface B : A
interface C : A

fun test() {
    var a: A? = null
    while (a is B || a is C) {
        a.foo()
    }",// !DUMP_CFG,519f
fun <T> suspendAndLog(value: T),: T = s,"// WITH_STDLIB
// WITH_COROUTINES",7a66
fun <T> log(value: T),"{
        result += ""$value""
    }",,7b4d
fun check(),: Boolean = c,,c89c
fun foo(),{ count++ },,519f
No signature found,"fun builder(c: suspend Controller.() -> Unit): String {
    val controller = Controller()
    c.startCoroutine(controller, handleResultContinuation {
        controller.result += ""return;""
    }",,6e1f
No signature found,"fun Controller.test() {
    var exception: Throwable? = null
    suspendLoop@do {
        log(""slh;"")
        foo()
        regularLoop@do {
            log(""rlh;"")
            if (!check()) {
                log(""rlb;"")
                break@regularLoop
            }",,6e1f
fun box(),": String {
    val res = builder {
        test()
    }",,4f27
No signature found,"fun Int.get(z: Int, p: Int) = t",// FILE: 1.kt,6e1f
No signature found,"fun Int.set(z: Int, p: Int, l: Int) {
    res = this + z + p + l
}",,6e1f
fun box(),": String {

    val z = 1;

    val p = z[2, 3]
    if (p != 6) return ""fail 1: $p""

    z[2, 3] = p
    if (res != 12) return ""fail 2: $res""

    return ""OK""
}",// FILE: 2.kt,4f27
fun explicitType(),": @Anno(""explicit type $constant"") List<@Anno(""nested explicit type $constant"") List<@Anno(""nested nested explicit type $constant"") T>>? = n",// MEMBER_NAME_FILTER: resolveMe,12bc
"fun throwExceptionIfCompilationFailed(
    exitCode: ExitCode,
    executionStrategy: KotlinCompilerExecutionStrategy
)","{
    when (exitCode) {
        ExitCode.COMPILATION_ERROR -> throw CompilationErrorException(""Compilation error. See log for more details"")
        ExitCode.INTERNAL_ERROR -> throw FailedCompilationException(""Internal compiler error. See log for more details"")
        ExitCode.SCRIPT_EXECUTION_ERROR -> throw FailedCompilationException(""Script execution error. See log for more details"")
        ExitCode.OOM_ERROR -> throw OOMErrorException(executionStrategy)
        ExitCode.OK -> Unit
        else -> throw IllegalStateException(""Unexpected exit code: $exitCode"")
    }",,f245
No signature found,fun Throwable.hasOOMCause(): Boolean = w,,6e1f
"fun wrapAndRethrowCompilationException(executionStrategy: KotlinCompilerExecutionStrategy, e: Throwable)",": Nothing {
    if (e is OutOfMemoryError || e.hasOOMCause()) {
        throw OOMErrorException(executionStrategy)
    }",,9139
fun OOMErrorException(executionStrategy: KotlinCompilerExecutionStrategy),": OOMErrorException {
    val exceptionMessage = when (executionStrategy) {
        KotlinCompilerExecutionStrategy.DAEMON -> kotlinDaemonOOMHelperMessage
        KotlinCompilerExecutionStrategy.IN_PROCESS -> kotlinInProcessOOMHelperMessage
        KotlinCompilerExecutionStrategy.OUT_OF_PROCESS -> kotlinOutOfProcessOOMHelperMessage
    }",,4d8c
No signature found,fun TaskWithLocalState.cleanOutputsAndLocalState(reason: String? = n,,6e1f
No signature found,"fun cleanOutputsAndLocalState(
    outputFiles: Iterable<File>,
    log: KotlinLogger,
    metrics: BuildMetricsReporter<GradleBuildTime, GradleBuildPerformanceMetric>,
    reason: String? = n",,6e1f
fun foo(),"}

// MODULE: m2-jvm()()(m1-common)
// FILE: jvm.kt

actual open class Foo {
    actual  {}","// FIR_IDENTICAL
// MODULE: m1-common
// FILE: common.kt",519f
fun foo(overloaded: Int),{},,289e
fun fromMode(mode: String),": JsMainFunctionExecutionMode =
            J","// DO NOT EDIT MANUALLY!
// Generated by org/jetbrains/kotlin/generators/arguments/GenerateGradleOptions.kt
// To regenerate run 'generateGradleOptions' task",e42d
fun bar(),": String = ""","// CHECK_TYPESCRIPT_DECLARATIONS
// RUN_PLAIN_BOX_FUNCTION
// SKIP_MINIFICATION
// SKIP_NODE_JS
// INFER_MAIN_MODULE
// MODULE: JS_TESTS
// FILE: abstract-classes.kt",66c3
fun baz(),": String = """,,b22f
fun bar(i: I),= i,"// TARGET_BACKEND: JVM_IR
// FILE: 1.kt",3930
fun foo(),"fun interface I {
    
}",,519f
fun box(),": String {
    var result = ""fail""
    val c = C()
    c.x = { result = ""OK"" }",// FILE: 2.kt,4f27
fun box(),": String {
    try {
        throw C()
    }",,4f27
No signature found,"fun get(name: String, type: String = """,,6e1f
fun box(),": String {
    if (X().get(""a"") != ""anone"") return ""fail 1: ${X().get(""a"")}",,4f27
fun hasModifierProperty(name: String),": Boolean =
            i",,3439
fun copy(),: PsiElement = K,,5070
fun isFinal(isFinalByPsi: Boolean),= i,,8fc6
fun getModifierList(),: PsiModifierList? = _,,6d4d
fun allSuperTypes(),"=
        g",,bc80
No signature found,"fun mapSupertype(supertype: KotlinType, kotlinCollectionAsIs: Boolean = f",,6e1f
fun createExtendsList(),: PsiReferenceList? = c,,6023
fun createImplementsList(),: PsiReferenceList? = c,,bfc3
fun createInheritanceList(forExtendsList: Boolean),": PsiReferenceList {

        val role = if (forExtendsList) PsiReferenceList.Role.EXTENDS_LIST else PsiReferenceList.Role.IMPLEMENTS_LIST

        if (isAnnotationType) return KotlinLightReferenceListBuilder(manager, language, role)

        val superTypes = allSuperTypes().filter {
            isTypeForInheritanceList(it, forExtendsList)
        }",,8639
"fun addTypeToTypeList(listBuilder: KotlinSuperTypeListBuilder, superType: KotlinType)","{

        val mappedType = mapSupertype(superType, kotlinCollectionAsIs = true) ?: return

        listBuilder.addReference(mappedType)

        if (mappedType.canonicalText.startsWith(""kotlin.collections."")) {

            val mappedToNoCollectionAsIs = mapSupertype(superType, kotlinCollectionAsIs = false)

            if (mappedToNoCollectionAsIs !== null &&
                mappedType.canonicalText != mappedToNoCollectionAsIs.canonicalText
            ) {
                //Add java supertype
                listBuilder.addReference(mappedToNoCollectionAsIs)
                //Add marker interface
                superType.constructor.declarationDescriptor.classId?.let { classId ->
                    listBuilder.addMarkerInterfaceIfNeeded(classId)
                }",,4207
"fun isTypeForInheritanceList(supertype: KotlinType, forExtendsList: Boolean)",": Boolean {
        // Do not add redundant ""extends java.lang.Object"" anywhere
        if (supertype.isAnyOrNullableAny()) return false

        // We don't have Enum among enums supertype in sources neither we do for decompiled class-files and light-classes
        if (isEnum && KotlinBuiltIns.isEnum(supertype)) return false

        // Interfaces have only extends lists
        if (isInterface) return forExtendsList

        return forExtendsList == !JvmCodegenUtil.isJvmInterface(supertype)
    }",,5b8a
fun buildTypeParameterList(),: PsiTypeParameterList = b,,4a1f
fun getInterfaces(),: Array<PsiClass> = P,,fa9b
fun getSuperClass(),: PsiClass? = P,,75ab
fun getSupers(),: Array<PsiClass> = P,,fedd
fun getSuperTypes(),: Array<PsiClassType> = P,,a153
fun getVisibleSignatures(),: MutableCollection<HierarchicalMethodSignature> = P,,e7fd
fun getRBrace(),: PsiElement? = n,,6295
fun getLBrace(),: PsiElement? = n,,9fa7
No signature found,fun ArrayList<KtLightField>.updateWithCompilerPlugins() = a,,6e1f
fun isNamedObject(),= c,,b024
fun getOwnFields(),: List<KtLightField> = _,,ff9c
fun propertyParameters(),= c,,3c9a
fun ownMethods(),": List<PsiMethod> {
        val result = mutableListOf<PsiMethod>()

        for (declaration in this.classOrObject.declarations.filterNot { it.isHiddenByDeprecation(support) }",,a7de
fun addMethodsFromDataClass(result: MutableList<PsiMethod>),"{
        if (!classOrObject.hasModifier(DATA_KEYWORD)) return
        val ktClass = classOrObject as? KtClass ?: return
        val descriptor = classOrObject.resolve() as? ClassDescriptor ?: return
        val bindingContext = classOrObject.analyze()

        // Force resolving data class members set
        descriptor.unsubstitutedMemberScope.getContributedDescriptors()

        val areCtorParametersAreAnalyzed = ktClass.primaryConstructorParameters
            .filter { it.hasValOrVar() }",,87b7
No signature found,"fun addFunction(descriptor: FunctionDescriptor, declarationForOrigin: KtDeclaration? = n",,6e1f
"fun generateComponentFunction(function: FunctionDescriptor, parameter: ValueParameterDescriptor)","{
                addFunction(function, DescriptorToSourceUtils.descriptorToDeclaration(parameter) as? KtDeclaration)
            }",,07ae
"fun generateCopyFunction(function: FunctionDescriptor, constructorParameters: List<KtParameter>)","{
                addFunction(function)
            }",,dbe4
"fun generateToStringMethod(function: FunctionDescriptor, properties: List<PropertyDescriptor>)","{
                addFunction(function)
            }",,63bb
"fun generateHashCodeMethod(function: FunctionDescriptor, properties: List<PropertyDescriptor>)","{
                addFunction(function)
            }",,6b33
"fun generateEqualsMethod(function: FunctionDescriptor, properties: List<PropertyDescriptor>)","{
                addFunction(function)
            }",,e251
fun addDelegatesToInterfaceMethods(result: MutableList<PsiMethod>),"{
        classOrObject.superTypeListEntries.filterIsInstance<KtDelegatedSuperTypeEntry>().forEach {
            addDelegatesToInterfaceMethods(it, result)
        }",,e4d6
"fun addDelegatesToInterfaceMethods(
        superTypeEntry: KtDelegatedSuperTypeEntry,
        result: MutableList<PsiMethod>
    )","{
        val classDescriptor = classOrObject.resolve() as? ClassDescriptor ?: return
        val typeReference = superTypeEntry.typeReference ?: return
        val bindingContext = typeReference.analyze()

        val superClassDescriptor = CodegenUtil.getSuperClassBySuperTypeListEntry(superTypeEntry, bindingContext) ?: return
        val delegationType = superTypeEntry.delegateExpression.kotlinType(bindingContext)

        for (delegate in DelegationResolver.getDelegates(classDescriptor, superClassDescriptor, delegationType).keys) {
            when (delegate) {

                is PropertyDescriptor -> delegate.accessors.mapTo(result) {
                    createGeneratedMethodFromDescriptor(
                        descriptor = it,
                        declarationOriginKindForOrigin = JvmDeclarationOriginKind.DELEGATION
                    )
                }",,17cc
fun createConstructors(),": List<KtLightMethod> {
        val result = arrayListOf<KtLightMethod>()
        val constructors = classOrObject.allConstructors
        if (constructors.isEmpty()) {
            result.add(defaultConstructor())
        }",,5b0d
fun shouldGenerateNoArgOverload(primary: KtPrimaryConstructor),": Boolean {
        return !primary.hasModifier(PRIVATE_KEYWORD) &&
                !classOrObject.hasModifier(INNER_KEYWORD) && !isEnum &&
                !classOrObject.hasModifier(SEALED_KEYWORD) &&
                primary.valueParameters.isNotEmpty() &&
                primary.valueParameters.all { it.defaultValue != null }",,5ebb
fun defaultConstructor(),": KtUltraLightMethod {
        val visibility =
            when {
                classOrObject is KtObjectDeclaration || isEnum -> PsiModifier.PRIVATE
                classOrObject.hasModifier(SEALED_KEYWORD) -> PsiModifier.PROTECTED
                classOrObject is KtEnumEntry -> PsiModifier.PACKAGE_LOCAL
                else -> PsiModifier.PUBLIC
            }",,c48b
"fun noArgConstructor(
        visibility: String,
        declaration: KtDeclaration,
        methodIndex: Int
    )",": KtUltraLightMethod =
        K",,903c
fun isHiddenByDeprecation(declaration: KtDeclaration),": Boolean {
        val deprecated = support.findAnnotation(declaration, FqName(""kotlin.Deprecated""))?.second
        return (deprecated?.argumentValue(""level"") as? EnumValue)?.enumEntryName?.asString() == ""HIDDEN""
    }",,9af9
fun isJvmStatic(declaration: KtAnnotated),: Boolean = d,,ef9f
fun getOwnMethods(),: List<PsiMethod> = _,,f5df
No signature found,fun KtAnnotated.hasAnnotation(name: FqName) = s,,6e1f
No signature found,"fun KtCallableDeclaration.isConstOrJvmField() =
        h",,6e1f
No signature found,fun KtCallableDeclaration.isJvmField() = h,,6e1f
fun getInitializers(),: Array<PsiClassInitializer> = e,,2da9
fun getContainingClass(),": PsiClass? {

        val containingBody = classOrObject.parent as? KtClassBody
        val containingClass = containingBody?.parent as? KtClassOrObject
        containingClass?.let { return it.toLightClass() }",,9ab9
fun getParent(),: PsiElement? = c,,2d58
fun getScope(),: PsiElement? = p,,9b9b
No signature found,"fun isInheritorDeep(baseClass: PsiClass?, classToByPass: PsiClass?): Boolean =
        b",,6e1f
fun isDeprecated(),: Boolean = _,,b4f8
fun copy(),: KtLightClassImpl = K,,5070
fun getTextRange(),": TextRange? {
        if (Registry.`is`(""kotlin.ultra.light.classes.empty.text.range"", true)) {
            return null
        }",,b737
fun getOwnInnerClasses(),: List<PsiClass> = s,,4788
fun createClassForInterfaceDefaultImpls(),: PsiClass = K,,4d1d
fun create(name: String),": KotlinNativeHostTestRun {
        return DefaultHostTestRun(name, target).apply {
            val project = target.project
            executionTask = this@KotlinNativeHostTestRunFactory.target.registerNativeTestTask(testTaskName)
            setExecutionSourceFrom(this@KotlinNativeHostTestRunFactory.target.binaries.getTest(NativeBuildType.DEBUG))
            project.kotlinTestRegistry.registerTestTask(executionTask)
        }",,7182
fun create(name: String),": KotlinNativeSimulatorTestRun {
        val thisTarget = target
        return DefaultSimulatorTestRun(name, target).apply {
            val project = target.project
            executionTask = thisTarget.registerNativeTestTask<KotlinNativeSimulatorTest>(testTaskName) { testTask ->
                testTask.isEnabled = HostManager.hostIsMac && HostManager.host.architecture == thisTarget.konanTarget.architecture
                testTask.configureDeviceId(thisTarget.konanTarget)
                testTask.standalone.convention(true).finalizeValueOnRead()
            }",,7182
No signature found,"fun <reified T : KotlinNativeTest> KotlinNativeTarget.registerNativeTestTask(
    name: String, crossinline configure: (T) -> Unit = {",,6e1f
No signature found,"fun KotlinNativeSimulatorTest.configureDeviceId(konanTarget: KonanTarget) {
    if (!isEnabled) return
    val deviceIdProvider = project.valueSourceWithExecProviderCompat(XcodeDefaultTestDevicesValueSource::class.java)

    // Extract primitive values to avoid [target] capture in lambda
    val konanTargetFamily = konanTarget.family
    val konanTargetName = konanTarget.name

    val defaultDevice = deviceIdProvider.map {
        it[konanTargetFamily]
            ?: error(""Xcode does not support simulator tests for ${konanTargetName}",,6e1f
fun box(),= O,,4f27
No signature found,"fun Delegate.getValue(t: Any?, p: KProperty<*>): Int = 1",,6e1f
fun box(),": String {
  return if(A().prop == 1) ""OK"" else ""fail""
}",,4f27
"fun <T> select(x1: T, x2: T)",= x,"// !DIAGNOSTICS: -USELESS_CAST -UNUSED_PARAMETER -UNUSED_VARIABLE

// FILE: j/Base.java",c6d2
fun <T> selectn(vararg xx: T),= x,,a25a
No signature found,fun <T : Base> foo(x: T) = x,,6e1f
"fun <T> listOf2(x1: T, x2: T)",: List<T> = n,,1653
"fun <T> arrayOf2(x1: T, x2: T)",: Array<T> = n,,2af1
fun test(),"{
    val test1: Base = if (true) d1 else d2

    val test2 = if (true) d1 else d2

    val test3 = when {
        true -> d1
        else -> d2
    }",,fe98
fun testOkInJava(),"{
    // The following is Ok in Java, but is an error in Kotlin.
    // TODO do not generate unneeded CHECKCASTs.
    // TODO do not report INACCESSIBLE_TYPE for corresponding cases.
    select(d1, d2)
    foo(select(d1, d2))
}",,39c5
No signature found,"fun CompilerConfiguration.setupJvmSpecificArguments(arguments: K2JVMCompilerArguments) {
    put(JVMConfigurationKeys.INCLUDE_RUNTIME, arguments.includeRuntime)
    put(JVMConfigurationKeys.NO_REFLECT, arguments.noReflect)

    putIfNotNull(JVMConfigurationKeys.FRIEND_PATHS, arguments.friendPaths?.asList())

    val releaseTargetArg = arguments.jdkRelease
    val jvmTargetArg = arguments.jvmTarget
    if (releaseTargetArg != null) {
        val value =
            when (releaseTargetArg) {
                ""1.6"" -> 6
                ""1.7"" -> 7
                ""1.8"" -> 8
                else -> releaseTargetArg.toIntOrNull()
            }",,6e1f
"fun isCompatibleJvmTargetAndRelease(jvmTarget: String, release: String)",": Boolean {
    if (jvmTarget == ""1.8"") {
        // This is needed to be able to compile stdlib with -jvm-target 1.8 and -Xjdk-release=1.6/1.7.
        return release in listOf(""6"", ""1.6"", ""7"", ""1.7"", ""8"", ""1.8"")
    }",,b17e
No signature found,"fun CompilerConfiguration.handleClosureGenerationSchemeArgument(
    flag: String,
    value: String?,
    key: CompilerConfigurationKey<JvmClosureGenerationScheme>,
) {
    if (value == null) return

    val parsedValue = JvmClosureGenerationScheme.fromString(value)
    if (parsedValue != null) {
        put(key, parsedValue)
    }",,6e1f
No signature found,"fun CompilerConfiguration.configureJdkHome(arguments: K2JVMCompilerArguments): Boolean {
    if (arguments.noJdk) {
        put(JVMConfigurationKeys.NO_JDK, true)

        if (arguments.jdkHome != null) {
            messageCollector.report(STRONG_WARNING, ""The '-jdk-home' option is ignored because '-no-jdk' is specified"")
        }",,6e1f
No signature found,"fun CompilerConfiguration.configureJdkHomeFromSystemProperty() {
    val javaHome = File(System.getProperty(""java.home""))
    messageCollector.report(LOGGING, ""Using JDK home inferred from java.home: $javaHome"")
    put(JVMConfigurationKeys.JDK_HOME, javaHome)
}",,6e1f
No signature found,"fun CompilerConfiguration.configureJavaModulesContentRoots(arguments: K2JVMCompilerArguments) {
    for (modularRoot in arguments.javaModulePath?.split(File.pathSeparatorChar).orEmpty()) {
        add(CLIConfigurationKeys.CONTENT_ROOTS, JvmModulePathRoot(File(modularRoot)))
    }",,6e1f
No signature found,"fun CompilerConfiguration.configureContentRootsFromClassPath(arguments: K2JVMCompilerArguments) {
    for (path in arguments.classpath?.split(File.pathSeparatorChar).orEmpty()) {
        add(CLIConfigurationKeys.CONTENT_ROOTS, JvmClasspathRoot(File(path)))
    }",,6e1f
No signature found,"fun CompilerConfiguration.configureStandardLibs(paths: KotlinPaths?, arguments: K2JVMCompilerArguments) {
    configureStandardLibs(
        paths,
        KotlinPaths::stdlibPath,
        KotlinPaths::scriptRuntimePath,
        KotlinPaths::reflectPath,
        arguments
    )
}",,6e1f
No signature found,"fun <PathProvider : Any> CompilerConfiguration.configureStandardLibs(
    paths: PathProvider?,
    stdlibPath: (PathProvider) -> File,
    scriptRuntimePath: (PathProvider) -> File,
    reflectPath: (PathProvider) -> File,
    arguments: K2JVMCompilerArguments
) {
    val jdkRelease = get(JVMConfigurationKeys.JDK_RELEASE)
    val isModularJava = isModularJava() && (jdkRelease == null || jdkRelease >= 9)

    fun addRoot(moduleName: String, libraryName: String, getLibrary: (PathProvider) -> File, noLibraryArgument: String) {
        addModularRootIfNotNull(
            isModularJava, moduleName,
            getLibraryFromHome(paths, getLibrary, libraryName, messageCollector, noLibraryArgument)
        )
    }",,6e1f
No signature found,"fun CompilerConfiguration.isModularJava(): Boolean {
    return get(JVMConfigurationKeys.JDK_HOME)?.let {
        CoreJrtFileSystem.isModularJdk(it)
    }",,6e1f
No signature found,"fun CompilerConfiguration.addModularRootIfNotNull(isModularJava: Boolean, moduleName: String, file: File?) {
    when {
        file == null -> {
        }",,6e1f
No signature found,"fun KotlinCoreEnvironment.registerJavacIfNeeded(
    arguments: K2JVMCompilerArguments
): Boolean {
    if (arguments.useJavac) {
        configuration.put(JVMConfigurationKeys.USE_JAVAC, true)
        if (arguments.compileJava) {
            configuration.put(JVMConfigurationKeys.COMPILE_JAVA, true)
        }",,6e1f
No signature found,"fun CompilerConfiguration.configureAdvancedJvmOptions(arguments: K2JVMCompilerArguments) {

    put(JVMConfigurationKeys.PARAMETERS_METADATA, arguments.javaParameters)

    val useOldBackend = arguments.useOldBackend
    val useIR = arguments.useK2 || languageVersionSettings.languageVersion.usesK2 || !useOldBackend

    messageCollector.report(LOGGING, ""Using ${if (useIR) ""JVM IR"" else ""old JVM""}",,6e1f
"fun parseBackendThreads(stringValue: String, messageCollector: MessageCollector)",": Int {
    val value = stringValue.toIntOrNull()
    if (value == null) {
        messageCollector.report(ERROR, ""Cannot parse -Xbackend-threads value: \""$stringValue\"". Please use an integer number"")
        return 1
    }",,4f28
No signature found,"fun CompilerConfiguration.configureKlibPaths(arguments: K2JVMCompilerArguments) {
    val libraries = arguments.klibLibraries ?: return
    put(JVMConfigurationKeys.KLIB_PATHS, libraries.split(File.pathSeparator.toRegex()).filterNot(String::isEmpty))
}",,6e1f
fun getJavaVersion(),": Int =
    S",,273e
No signature found,fun MethodKind.hasThis() = t,// FIR_IDENTICAL,6e1f
No signature found,"fun test(a_: a.<!UNRESOLVED_REFERENCE!>b<!>) {
    val a_2 = a.<!UNRESOLVED_REFERENCE!>b<!>()
}","// ISSUE: KT-63070
// FILE: a/b.java",6e1f
fun other2_ab(),{},//FILE: c2.kt,0e56
No signature found,"fun test(_ab: a.b) {
    _ab.other2_ab()

    val _ab2 = a.b()
    _ab2.other2_ab()
}",,6e1f
No signature found,"fun test(_ab: a.b) {
    _ab.some_ab()

    val _ab2 = a.b()
    _ab2.some_ab()
}",// FILE: c3.kt,6e1f
fun test(_b: b),"{
    _b.a_b()
}",// FILE: c4.kt,6d75
fun getO(),": R

    abstract fun getK() : R
}


inline fun <R> doWork(job: ()-> R) : R {
    return job()
}","// NO_CHECK_LAMBDA_INLINING
// FILE: 1.kt",273a
fun box(),": String {
    val o = ""O""
    val p = ""GOOD""
    val result = doWork {
        val k = ""K""
        val s = object : A<String>() {

            val param = p;

            override fun getO(): String {
                return o;
            }",// FILE: 2.kt,4f27
fun getK(),": String {
                return k;
            }",,28fa
No signature found,fun Long.component1() = t,,6e1f
No signature found,fun Long.component2() = t,,6e1f
No signature found,"fun M.doTest(l : Array<Long>): String {
    var s = """"
    for ((a, b) in l) {
      s += ""$a:$b;""
    }",,6e1f
fun box(),": String {
  val l = Array<Long>(3, {x -> x.toLong()}",,4f27
fun mod(x: Int),= M,"// FIR_IDENTICAL
// !LANGUAGE: -ProhibitOperatorMod
// !DIAGNOSTICS: -UNUSED_PARAMETER, -EXTENSION_SHADOWED_BY_MEMBER",c5fc
fun mod(x: String),= M,,806f
fun modAssign(x: String),{},,85f2
fun remAssign(x: Int),{},,6690
No signature found,fun ModAndRemAssign.mod(x: String) = M,,6e1f
No signature found,fun ModAndRemAssign.modAssign(x: String) {},,6e1f
fun test(),"{
    val modAndRemAssign = ModAndRemAssign()
    modAndRemAssign %= 1
}",,fe98
fun getA(),: Inv<A> = .,,05da
fun foo(),"{
     *      getA().value.x
     *   }",,519f
fun refineType(type: KotlinTypeMarker),": KotlinType {
        require(type is KotlinType)
        if (type.constructor.declarationDescriptor?.module == moduleDescriptor) return type
        return when {
            // See comment on [needsRefinementHackForKtij24195]
            type.needsRefinementHackForKtij24195() -> doRefineType((type as AbbreviatedType).abbreviation)

            type.needsRefinement() -> doRefineType(type)

            else -> type
        }",,84ba
fun doRefineType(type: KotlinType),": KotlinType {
        return if (type.canBeCached()) {
            val cached = refinedTypeCache.computeIfAbsent(type.constructor) {
                type.constructor.declarationDescriptor!!.defaultType.refineWithRespectToAbbreviatedTypes(this)
            }",,ffae
No signature found,"fun KotlinType.refineWithRespectToAbbreviatedTypes(refiner: KotlinTypeRefiner): KotlinType {
        var previousRefinement: KotlinType
        var currentRefinement: KotlinType = this

        do {
            previousRefinement = currentRefinement
            currentRefinement = previousRefinement.refine(refiner)
        }",,6e1f
No signature found,fun KotlinType.needsRefinement(): Boolean = i,,6e1f
No signature found,fun KotlinType.canBeCached(): Boolean = h,,6e1f
No signature found,"fun KotlinType.needsRefinementHackForKtij24195(): Boolean {
        if (this !is AbbreviatedType) return false
        if (abbreviation.constructor.declarationDescriptor !is TypeAliasDescriptor) return false

        // Would be nice to have the following line uncommented (nice optimization), but unfortunately, serialized binaries do not
        // preserve `isActual`-flags
        // if (!abbreviation.constructor.declarationDescriptor.isActual) return false

        val expansionDescriptorClassId = expandedType.constructor.declarationDescriptor.classId ?: return false
        // Expansion invisible - need refinement hack
        // NB: important to use 'findClassifier' and not 'findClass', because normally this call is expected to resolve
        // a typealias descriptor, which is a Classifier but not a ClassDescriptor
        return moduleDescriptor.findClassifierAcrossModuleDependencies(expansionDescriptorClassId) == null
    }",,6e1f
fun refineSupertypes(classDescriptor: ClassDescriptor),": Collection<KotlinType> {
        // Note that we can't omit refinement even if classDescriptor.module == moduleDescriptor,
        // because such class may have supertypes which need refinement
        return classDescriptor.typeConstructor.supertypes.map { refineType(it) }",,358a
fun refineDescriptor(descriptor: DeclarationDescriptor),": ClassifierDescriptor? {
        if (descriptor !is ClassifierDescriptorWithTypeParameters) return null
        val classId = descriptor.classId ?: return null
        return moduleDescriptor.findClassifierAcrossModuleDependencies(classId)
    }",,06bd
fun findClassAcrossModuleDependencies(classId: ClassId),": ClassDescriptor? {
        return moduleDescriptor.findClassAcrossModuleDependencies(classId)
    }",,222d
fun isRefinementNeededForModule(moduleDescriptor: ModuleDescriptor),": Boolean {
        return this.moduleDescriptor !== moduleDescriptor
    }",,3605
fun isRefinementNeededForTypeConstructor(typeConstructor: TypeConstructor),": Boolean {
        val owner = typeConstructor.declarationDescriptor
            ?: return typeConstructor.isRefinementNeededForTypeConstructorNoCache()
        return isRefinementNeededForTypeConstructorCache.computeIfAbsent(owner) {
            typeConstructor.isRefinementNeededForTypeConstructorNoCache()
        }",,6ccf
No signature found,"fun <S : MemberScope> getOrPutScopeForClass(classDescriptor: ClassDescriptor, compute: () -> S): S {
        @Suppress(""UNCHECKED_CAST"")
        return scopes.computeIfAbsent(classDescriptor, compute) as S
    }",,6e1f
No signature found,"fun TypeConstructor.isRefinementNeededForTypeConstructorNoCache(): Boolean {
        return declarationDescriptor.isEnumEntryOrEnum() || areThereExpectSupertypes()
    }",,6e1f
No signature found,"fun DeclarationDescriptor?.isEnumEntryOrEnum(): Boolean =
        i","// Enum-type itself should be refined because on JVM it has Serializable
    // supertype, but it's not marked as expect.
    // Enum entries need refinement only to force refinement of the Enum-type
    // in their supertypes.",6e1f
fun beforeChildren(current: TypeConstructor),"fun TypeConstructor.areThereExpectSupertypes(): Boolean {
        var result = false
        DFS.dfs(
            listOf(this),
            DFS.Neighbors(TypeConstructor::allDependentTypeConstructors),
            DFS.VisitedWithSet(),
            object : DFS.AbstractNodeHandler<TypeConstructor, Unit>() {
                override : Boolean {
                    if (current.isExpectClass() && current.declarationDescriptor?.module != moduleDescriptor) {
                        result = true
                        return false
                    }",,acc8
fun result(),= U,,5880
fun createStandaloneInstanceFor(moduleDescriptor: ModuleDescriptor),": KotlinTypeRefinerImpl =
            K",,8dc6
No signature found,"fun TypeConstructor.isExpectClass(): Boolean =
    (",,6e1f
No signature found,"fun KotlinType.restoreAdditionalTypeInformation(prototype: KotlinType): KotlinType {
    return TypeUtils.makeNullableAsSpecified(this, prototype.isMarkedNullable).replace(prototype.arguments)
}",,6e1f
"fun <S> select(x: S, y: S)",: S = x,"// FIR_IDENTICAL
// !DIAGNOSTICS: -UNUSED_PARAMETER

// FILE: JClass.java",be1c
"fun <T> setValue(key: Key<T>, value: T, j: JClass)","{
    j.foo(key, select(value, null))
}",,307b
fun main(),"{/* DeclarationStructureElement */

}",,d987
No signature found,"fun resolveAnnotationsWithoutArguments(
        scope: LexicalScope,
        modifierList: KtModifierList?,
        trace: BindingTrace
    ): Annotations = r",,6e1f
No signature found,"fun resolveAnnotationsWithArguments(
        scope: LexicalScope,
        modifierList: KtModifierList?,
        trace: BindingTrace
    ): Annotations = r",,6e1f
No signature found,"fun resolveAnnotationsFromModifierList(
        scope: LexicalScope,
        modifierList: KtModifierList?,
        trace: BindingTrace,
        shouldResolveArguments: Boolean
    ): Annotations {
        if (modifierList == null) {
            return Annotations.EMPTY
        }",,6e1f
No signature found,"fun resolveAnnotationsWithoutArguments(
        scope: LexicalScope,
        annotationEntries: @JvmSuppressWildcards List<KtAnnotationEntry>,
        trace: BindingTrace
    ): Annotations = r",,6e1f
No signature found,"fun resolveAnnotationsWithArguments(
        scope: LexicalScope,
        annotationEntries: @JvmSuppressWildcards List<KtAnnotationEntry>,
        trace: BindingTrace
    ): Annotations = r",,6e1f
fun box(),": String {
    var s = ""Failt""
    JavaClass<String>().perform("""") { s = ""OK"" }","// TARGET_BACKEND: JVM
// MODULE: lib
// FILE: JavaClass.java

// KT-5912",4f27
fun box(),"= ""","// IGNORE_LIGHT_ANALYSIS
// TARGET_BACKEND: JVM
// FILE: ArrayAnnEnumJava.java",4f27
fun box(),": String {
    for (i in 1 .. 2) {
        for (j in 1u .. break) {}",// WITH_STDLIB,4f27
fun run(),": Int
}

interface Wrapper {
    : Int
}",,354f
fun foo(),": Int {
    val c: Int? = null
    val a: Int? = 1
    if (c is Int) {
        val k = object: Wrapper, Runnable(a!!) {
            override fun run() = arg
        }",,519f
fun foo(),": String {
    fun bar(x: String, y: String = x): String {
        return y
    }",,519f
fun box(),": String {
    return foo()
}",,4f27
fun doSmth(i: String),= 4,,0e53
fun packageMetadataParts(fqName: String),": Set<String> {
        return parts[fqName]?.keys ?: emptySet()
    }",,e789
"fun packageMetadata(fqName: String, partName: String)",": ByteArray {
        return parts[fqName]?.get(partName) ?: error(""Metadata not found for package $fqName part $partName"")
    }",,a57d
fun configureCacheTesting(project: Project),": CacheTesting? {
    val cacheKindString = project.findProperty(""test_with_cache_kind"") as String? ?: return null
    val (cacheKind, makePerFileCache) = when (cacheKindString) {
        ""dynamic"" -> CompilerOutputKind.DYNAMIC_CACHE to false
        ""static"", ""static_everywhere"" -> CompilerOutputKind.STATIC_CACHE to false
        ""static_per_file"" -> CompilerOutputKind.STATIC_CACHE to true
        else -> error(cacheKindString)
    }",,2382
fun f(),{},,f6fb
fun nonExistingMethod(x: String),"= ""","// !JDK_KIND: MODIFIED_MOCK_JDK
// !CHECK_TYPE",da30
"fun foo(x: MutableCollection<Int>, y: Collection<String>, z: A)","{
    x.<!UNRESOLVED_REFERENCE!>nonExistingMethod<!>(1).<!UNRESOLVED_REFERENCE_WRONG_RECEIVER!>checkType<!> { <!INAPPLICABLE_CANDIDATE!>_<!><<!CANNOT_INFER_PARAMETER_TYPE!>String<!>>() }",,0d4c
No signature found,"fun ideaKotlinProjectArtifactDependencyProto(block: org.jetbrains.kotlin.gradle.idea.proto.generated.tcs.IdeaKotlinProjectArtifactDependencyProtoKt.Dsl.() -> kotlin.Unit): org.jetbrains.kotlin.gradle.idea.proto.generated.tcs.IdeaKotlinProjectArtifactDependencyProto =
  o","//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: proto_tcs.proto",6e1f
No signature found,fun _create(builder: org.jetbrains.kotlin.gradle.idea.proto.generated.tcs.IdeaKotlinProjectArtifactDependencyProto.Builder): Dsl = D,,6e1f
fun _build(),: org.jetbrains.kotlin.gradle.idea.proto.generated.tcs.IdeaKotlinProjectArtifactDependencyProto = _,,8dd3
fun clearExtras(),"{
      _builder.clearExtras()
    }",,a1e9
fun hasExtras(),": kotlin.Boolean {
      return _builder.hasExtras()
    }","/**
     * <code>optional .org.jetbrains.kotlin.gradle.idea.proto.generated.IdeaExtrasProto extras = 1;</code>
     * @return Whether the extras field is set.
     */",e8d4
fun clearType(),"{
      _builder.clearType()
    }",,2a54
fun hasType(),": kotlin.Boolean {
      return _builder.hasType()
    }","/**
     * <code>optional .org.jetbrains.kotlin.gradle.idea.proto.generated.tcs.IdeaKotlinSourceDependencyProto.Type type = 2;</code>
     * @return Whether the type field is set.
     */",b50a
fun clearCoordinates(),"{
      _builder.clearCoordinates()
    }","/**
     * <code>optional .org.jetbrains.kotlin.gradle.idea.proto.generated.tcs.IdeaKotlinProjectCoordinatesProto coordinates = 3;</code>
     */",0f1e
fun hasCoordinates(),": kotlin.Boolean {
      return _builder.hasCoordinates()
    }","/**
     * <code>optional .org.jetbrains.kotlin.gradle.idea.proto.generated.tcs.IdeaKotlinProjectCoordinatesProto coordinates = 3;</code>
     * @return Whether the coordinates field is set.
     */",4df9
No signature found,"fun org.jetbrains.kotlin.gradle.idea.proto.generated.tcs.IdeaKotlinProjectArtifactDependencyProto.copy(block: org.jetbrains.kotlin.gradle.idea.proto.generated.tcs.IdeaKotlinProjectArtifactDependencyProtoKt.Dsl.() -> kotlin.Unit): org.jetbrains.kotlin.gradle.idea.proto.generated.tcs.IdeaKotlinProjectArtifactDependencyProto =
  o",,6e1f
fun a(),: String = b,// FILE: A.kt,9ea5
fun b1(),: String = a,,97d6
fun b2(),": String = """,,a73f
fun box(),= b,,4f27
fun createANonDefault(),"{
    A(20)
}",,3de4
fun box(),: String = O,"// TARGET_BACKEND: JVM
// WITH_STDLIB
// FILE: box.kt",4f27
fun whenForExpectSealed(s: SealedClass),": Int {
    return <!EXPECT_TYPE_IN_WHEN_WITHOUT_ELSE, NO_ELSE_IN_WHEN!>when<!> (s) { // should be error, because actual sealed class may add more implementations
        is SealedClass.Nested.NestedDeeper -> 7
        is SealedClass.Nested -> 8
    }","// ISSUE: KT-45796

// MODULE: m1-common",1594
fun whenForSealed(s: SealedClass),": Int {
    return when (s) { // Should be OK
        is SealedClass.Nested.NestedDeeper -> 7
        is SealedClass.Nested -> 8
    }",,19a3
No signature found,"fun writeToParcel(p0: Parcel?, p1: Int) {}",// FIR_IDENTICAL,6e1f
fun describeContents(),= 0,,5ed2
fun shift(),": Boolean =
            o",,d49c
fun toCallable(method: CallableMethod),": Callable {
        val returnType = method.returnType
        assert(method.getValueParameters().size == 1)

        val arg0Type: Type
        val arg1Type: Type
        val intermediateResultType: Type

        if (method.owner != Type.CHAR_TYPE) {
            intermediateResultType = numberFunctionOperandType(returnType)
            arg0Type = intermediateResultType
            arg1Type = if (shift()) Type.INT_TYPE else arg0Type
        }",,6018
No signature found,"fun consumeBExtLambda(fn: B.()->Unit) {
    B().fn()
}",,6e1f
No signature found,fun @receiver:AnnoFunctionExtensionReceiver Foo.extfun(@AnnoFunctionParam x: Int) {},// FIR_IDENTICAL,6e1f
"fun createInvokeFunction(
            irFunction: IrFunction, irClass: IrClass, hasDispatchReceiver: Boolean, hasExtensionReceiver: Boolean
        )",": IrSimpleFunction {
            val invokeFunction = irClass.declarations
                .filterIsInstance<IrSimpleFunction>()
                .single { it.name == OperatorNameConventions.INVOKE }",,16b6
fun isCallToNonAbstractMethodOfFunInterface(expression: IrCall),": Boolean {
            val owner = expression.symbol.owner
            return owner.hasFunInterfaceParent() && owner.modality != Modality.ABSTRACT
        }","// TODO do we need new class here? if yes, do we need different names for temp classes?",ce37
fun isCallToInvokeOrMethodFromFunInterface(expression: IrCall),": Boolean {
            val owner = expression.symbol.owner
            return owner.name == OperatorNameConventions.INVOKE || owner.hasFunInterfaceParent()
        }",,dfbb
fun getIrFunctionByIrCall(expression: IrCall),": IrFunction? {
        if (isCallToNonAbstractMethodOfFunInterface(expression)) return expression.symbol.owner.resolveFakeOverride()
        if (isCallToInvokeOrMethodFromFunInterface(expression)) return invokeSymbol.owner
        return super.getIrFunctionByIrCall(expression)
    }",,9e09
fun getParameters(callInterceptor: CallInterceptor),": List<KParameter> {
        if (_parameters != null) return _parameters!!
        val kParameterIrClass = callInterceptor.environment.kParameterClass.owner
        var index = 0
        val instanceParameter = irFunction.dispatchReceiverParameter
            ?.let { KParameterProxy(KParameterState(kParameterIrClass, it, index++, KParameter.Kind.INSTANCE), callInterceptor) }",,668f
fun getReturnType(callInterceptor: CallInterceptor),": KType {
        if (_returnType != null) return _returnType!!
        val kTypeIrClass = callInterceptor.environment.kTypeClass.owner
        _returnType = KTypeProxy(KTypeState(irFunction.returnType, kTypeIrClass), callInterceptor)
        return _returnType!!
    }",,89b4
fun getTypeParameters(callInterceptor: CallInterceptor),": List<KTypeParameter> {
        if (_typeParameters != null) return _typeParameters!!
        val kTypeParametersIrClass = callInterceptor.environment.kTypeParameterClass.owner
        _typeParameters = irClass.typeParameters.map { KTypeParameterProxy(KTypeParameterState(it, kTypeParametersIrClass), callInterceptor) }",,f28c
fun getArity(),": Int? {
        return irClass.name.asString()
            .removePrefix(""Suspend"").removePrefix(""Function"").removePrefix(""KFunction"")
            .toIntOrNull()
    }",,936c
fun isLambda(),: Boolean = i,,ae5d
fun toString(),": String {
        return if (isLambda()) renderLambda(irFunction) else renderFunction(irFunction)
    }",,a535
fun test(),"{
    val b: Int
    run { b = 1 }","// FIR_IDENTICAL
// DIAGNOSTICS: -ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE
// ISSUE: KT-59860",fe98
"fun check(declaration: FirDeclaration, context: CheckerContext, reporter: DiagnosticReporter)","{
        if (declaration is FirClass) {
            for (typeParameter in declaration.typeParameters) {
                if (typeParameter is FirTypeParameter) {
                    for (bound in typeParameter.bounds) {
                        checkUpperBoundViolated(bound, context, reporter)
                    }",,ee93
fun <ItemType> setupListSpeedSearch(),"{
    class MatchedItem(val item: ItemType)
    class MatchedItem1<T>(val item: ItemType)
    <!CLASS_LITERAL_LHS_NOT_A_CLASS!>MatchedItem::class<!>
    MatchedItem::item
    MatchedItem1::class
    <!WRONG_NUMBER_OF_TYPE_ARGUMENTS!>MatchedItem1<!>::item
    <!CLASS_LITERAL_LHS_NOT_A_CLASS!>MatchedItem1<Int>::class<!>
    MatchedItem1<Int>::item
}","// WITH_STDLIB
// FULL_JDK",6807
"fun <T, E, D> foo(a: T, b: E, c: D)",= a,// FILE: main.kt,ad80
No signature found,fun <E> E.foo() = h,,6e1f
No signature found,"fun <E> E.foo(x: E, y: E, z: E) = x",,6e1f
"fun foo(a: Int, b: Boolean, c: String)",= c,,d379
fun test(),": Int {
            fun foo(a: Int, b: Boolean, c: String) = a.hashCode() + b.hashCode() + c.hashCode()
            return <expr>a.b.c.foo(1, false, ""bar"")</expr>
        }",,fe98
"fun <T, E, D> foo(a: T, b: E, c: D)",= a,,ad80
No signature found,"fun calculateNumber(block: () -> Int): Int contract <!UNSUPPORTED!>[
    callsInPlace(block, InvocationKind.EXACTLY_ONCE)
]<!> = b",// LANGUAGE: +ContractSyntaxV2,6e1f
No signature found,"fun <R> calculateResult(num: Int?, calculate: (Int?) -> R): R contract <!UNSUPPORTED!>[
    callsInPlace(calculate, InvocationKind.EXACTLY_ONCE),
    returns() implies (num != n",,6e1f
fun box(),": String {
    val charBound = Char.MIN_VALUE
    if ('b' in 'a' until charBound) return ""Fail in Char.MIN_VALUE""
    if (!('b' !in 'a' until charBound)) return ""Fail !in Char.MIN_VALUE""

    val intBound = Int.MIN_VALUE
    if (1 in 0 until intBound) return ""Fail in Int.MIN_VALUE""
    if (!(1 !in 0 until intBound)) return ""Fail !in Int.MIN_VALUE""

    val longBound = Long.MIN_VALUE
    if (1L in 0L until longBound) return ""Fail in Long.MIN_VALUE""
    if (!(1L !in 0L until longBound)) return ""Fail !in Long.MIN_VALUE""

    val uIntBound = UInt.MIN_VALUE
    if (1u in 0u until uIntBound) return ""Fail in UInt.MIN_VALUE""
    if (!(1u !in 0u until uIntBound)) return ""Fail !in UInt.MIN_VALUE""

    val uLongBound = ULong.MIN_VALUE
    if (1uL in 0uL until uLongBound) return ""Fail in ULong.MIN_VALUE""
    if (!(1uL !in 0uL until uLongBound)) return ""Fail !in ULong.MIN_VALUE""

    return ""OK""
}","// WITH_STDLIB
// USE_OLD_INLINE_CLASSES_MANGLING_SCHEME",4f27
fun bar(),": String = ""","/** This file is generated by {@link :js:js.test:generateTypeScriptJsExportOnFileTests} task. DO NOT MODIFY MANUALLY */

// CHECK_TYPESCRIPT_DECLARATIONS
// RUN_PLAIN_BOX_FUNCTION
// SKIP_MINIFICATION
// SKIP_NODE_JS
// INFER_MAIN_MODULE
// MODULE: JS_TESTS
// FILE: sealed-classes.kt",66c3
fun baz(),": String = """,,b22f
No signature found,"fun foo(a: String, b: String = ""","// TARGET_BACKEND: JVM
// WITH_REFLECT",6e1f
fun box(),": String {
    val p = ::foo.parameters
    assertEquals(""abcde"", ::foo.callBy(mapOf(
            p[0] to ""a"",
            p[2] to ""c"",
            p[4] to ""e""
    )))

    return ""OK""
}",,4f27
"fun checkBoundsOfExpandedTypeAlias(type: KotlinType, expression: KtExpression, trace: BindingTrace)","{
        // do nothing in the strict mode as the errors are already reported in the type inference if necessary
    }",,d879
No signature found,"fun checkBounds(
        argumentReference: KtTypeReference?,
        argumentType: KotlinType,
        typeParameterDescriptor: TypeParameterDescriptor,
        substitutor: TypeSubstitutor,
        trace: BindingTrace,
        typeAliasUsageElement: KtElement? = n",,6e1f
"fun checkBoundsInSupertype(
        typeReference: KtTypeReference,
        type: KotlinType,
        trace: BindingTrace,
        languageVersionSettings: LanguageVersionSettings,
    )","{
        if (type.isError) return

        val typeElement = typeReference.typeElement ?: return
        val parameters = type.constructor.parameters
        val arguments = type.arguments

        assert(parameters.size == arguments.size)

        val ktTypeArguments = typeElement.typeArgumentsAsTypes

        // A type reference from Kotlin code can yield a flexible type only if it's `ft<T1, T2>`, whose bounds should not be checked
        if (type.isFlexible() && !type.isDynamic()) {
            assert(ktTypeArguments.size == 2) {
                (""Flexible type cannot be denoted in Kotlin otherwise than as ft<T1, T2>, but was: ""
                        + typeReference.getElementTextWithContext())
            }",,b778
"fun checkBoundsForAbbreviatedSupertype(
        type: KotlinType,
        trace: BindingTrace,
        typeReference: KtTypeReference,
        reportWarning: Boolean
    )","{
        val parameters = type.constructor.parameters
        val arguments = type.arguments
        val substitutor = TypeSubstitutor.create(type)

        val diagnostic =
            if (reportWarning)
                UPPER_BOUND_VIOLATED_IN_TYPEALIAS_EXPANSION_WARNING
            else
                UPPER_BOUND_VIOLATED_IN_TYPEALIAS_EXPANSION

        for (i in arguments.indices) {
            if (arguments[i].isStarProjection) continue
            val argumentType = arguments[i].type

            checkBoundsForAbbreviatedSupertype(argumentType, trace, typeReference, reportWarning)

            checkBounds(
                argumentReference = null,
                argumentType, parameters[i], substitutor, trace,
                typeAliasUsageElement = typeReference, diagnosticForTypeAliases = diagnostic,
            )
        }","// it's really ft<Foo, Bar>",1559
No signature found,"fun checkBound(
        bound: KotlinType,
        argumentType: KotlinType,
        argumentReference: KtTypeReference?,
        substitutor: TypeSubstitutor,
        typeAliasUsageElement: KtElement? = n",,6e1f
"fun report(typeArgumentReference: KtTypeReference, substitutedBound: KotlinType)","{
        trace.reportDiagnosticOnce(baseDiagnostic.on(typeArgumentReference, substitutedBound, argumentType))
    }",,e15a
"fun reportForTypeAliasExpansion(callElement: KtElement, substitutedBound: KotlinType)","{
        trace.reportDiagnosticOnce(diagnosticForTypeAliases.on(callElement, substitutedBound, argumentType, typeParameterDescriptor))
    }",,9a3a
fun lower(irFile: IrFile),"{
        irFile.accept(this, null)
    }",,a3a5
fun visitSimpleFunction(declaration: IrSimpleFunction),: IrStatement = s,,451c
fun visitReturn(expression: IrReturn),": IrExpression {
        val irFunction = context.staticDefaultStubs[expression.returnTargetSymbol]
        return super.visitReturn(
            if (irFunction != null) {
                with(expression) {
                    IrReturnImpl(startOffset, endOffset, type, irFunction.symbol, value)
                }",,bca7
fun visitCall(expression: IrCall),": IrExpression {
        val callee = expression.symbol.owner
        if (callee.origin !== IrDeclarationOrigin.FUNCTION_FOR_DEFAULT_PARAMETER || expression.dispatchReceiver == null) {
            return super.visitCall(expression)
        }",,4974
fun getStaticFunctionWithReceivers(function: IrSimpleFunction),": IrSimpleFunction =
        c",,8362
No signature found,"fun equals(other: Any?): Boolean {
        if (called) fail(""recursion detected"")

        log += ""A.equals;""

        called = true
        val result = super.equals(other)
        called = false
        return result
    }",// EXPECTED_REACHABLE_NODES: 1303,6e1f
No signature found,"fun equals(other: Any?): Boolean {
        log += ""B.equals;""
        if (other == null) return false
        return super.equals(other)
    }",,6e1f
fun box(),": String {
    val a = A()
    testFalse { a == A() }",,4f27
fun box(),": String {
    class Id<T> {
        fun invoke(t: T) = t
    }",,4f27
No signature found,fun <T : String?> MyBoxInv<T & Any>.getSizeInv() = v,"// ISSUE: KT-53792, KT-66369",6e1f
No signature found,fun <T : String?> MyBoxOut<T & Any>.getSizeOut() = v,,6e1f
fun foo(arg: T),"{
        arg.toString()
    }",,ce27
No signature found,"fun <T : String?> MyBoxIn<T & Any>.fooExt(arg: T) {
    foo(<!ARGUMENT_TYPE_MISMATCH!>arg<!>)
}",,6e1f
fun main(),"{
    val emptyBoxInv = MyBoxInv<String?>(null)
    emptyBoxInv.<!UNRESOLVED_REFERENCE_WRONG_RECEIVER!>getSizeInv<!>()

    val emptyBoxOut = MyBoxOut<String?>(null)
    emptyBoxOut.<!UNRESOLVED_REFERENCE_WRONG_RECEIVER!>getSizeOut<!>()

    val emptyBoxIn = MyBoxIn<String?>()
    emptyBoxIn.fooExt(null)
}",,d987
No signature found,fun <reified T> Any?.foo() = t,,6e1f
No signature found,fun <reified Y> Any?.foo2() = f,,6e1f
No signature found,fun <reified Z> Any?.foo3() = f,,6e1f
No signature found,fun <reified X> Any?.foo4() = f,,6e1f
No signature found,fun <reified A> Any?.foo5() = f,,6e1f
No signature found,"fun <T : Comparable<T>, S : T?> B<in S>.foo(t: T) {}",// FIR_IDENTICAL,6e1f
No signature found,"fun <T : Comparable<T>, S : T?> A<in S>.foo(other: A<in S>) {}",,6e1f
No signature found,"fun test(x: C<Long?>) {
    x.foo(x)  // OVERLOAD_RESOLUTION_AMBIGUITY, shoub be OK
}",,6e1f
fun method(),"fun interface NestedSAM {
        
    }",// FILE: main.kt,f9b6
No signature found,"fun TestConfigurationBuilder.configuration() {
        globalDefaults {
            targetPlatform = JvmPlatforms.defaultJvmPlatform
            dependencyKind = DependencyKind.Source
        }",,6e1f
fun correspondingFirTest(),"fun TestConfigurationBuilder.configureFrontend()
}

private class FirForeignDiagnosticsTestDataConsistencyHandler(testServices: TestServices) :
    FirTestDataConsistencyHandler(testServices) {

    override : AbstractKotlinCompilerTest =
        object : AbstractFirPsiForeignAnnotationsSourceJavaTest() {}",,d6f3
No signature found,"fun TestConfigurationBuilder.configureFrontend() {
        globalDefaults {
            frontend = FrontendKinds.ClassicFrontend
        }",,6e1f
No signature found,"fun test(list: ArrayList<Int>, comparatorFun: (Int, Int) -> Int) {
    sort(list, Comparator(comparatorFun))
}","// FIR_IDENTICAL
// !DIAGNOSTICS: -UNUSED_PARAMETER",6e1f
"fun <E> sort(list: List<E>, c: Comparator<in E>)","{
}",,84f3
No signature found,"fun MutableList<KtLightMethod>.addScriptDefaultMethods() {
        val defaultConstructor = SymbolLightMethodForScriptDefaultConstructor(
            script,
            this@SymbolLightClassForScript,
            METHOD_INDEX_FOR_DEFAULT_CTOR
        )
        add(defaultConstructor)

        val mainMethod = SymbolLightMethodForScriptMain(
            script,
            this@SymbolLightClassForScript,
            METHOD_INDEX_FOR_SCRIPT_MAIN
        )
        add(mainMethod)
    }",,6e1f
fun getOwnMethods(),: List<KtLightMethod> = c,,f5df
fun getOwnFields(),: List<KtLightField> = c,,ff9c
fun getOwnInnerClasses(),: List<SymbolLightClassBase> = c,,4788
fun copy(),": SymbolLightClassForScript =
        S",,5070
fun getModifierList(),: PsiModifierList = _,,6d4d
fun hasModifierProperty(name: String),: Boolean = _,,3439
fun getContainingFile(),= _,,e442
fun getName(),= s,,4692
No signature found,fun equals(other: Any?): Boolean = t,,6e1f
fun hashCode(),: Int = s,,6874
fun toString(),": String = """,,a535
fun getNameIdentifier(),: PsiIdentifier? = n,,0a93
fun getContainingClass(),: PsiClass? = n,,9ab9
fun isDeprecated(),: Boolean = f,,b4f8
fun getTypeParameters(),: Array<PsiTypeParameter> = P,,5399
fun getTypeParameterList(),: PsiTypeParameterList? = n,,8dd2
fun getQualifiedName(),= s,,b707
fun isInterface(),: Boolean = f,,74f1
fun isAnnotationType(),: Boolean = f,,513c
fun isEnum(),: Boolean = f,,a5c3
fun getExtendsList(),: PsiReferenceList = _,,56ce
fun getImplementsList(),: PsiReferenceList = _,,912d
fun getInterfaces(),: Array<PsiClass> = P,,fa9b
fun getSuperClass(),": PsiClass? {
        return JavaPsiFacade.getInstance(project).findClass(CommonClassNames.JAVA_LANG_OBJECT, resolveScope)
    }",,75ab
fun getSupers(),": Array<PsiClass> {
        return superClass?.let { arrayOf(it) }",,fedd
fun getSuperTypes(),": Array<PsiClassType> {
        return arrayOf(PsiType.getJavaLangObject(manager, resolveScope))
    }",,a153
fun getScope(),: PsiElement = p,,9b9b
No signature found,"fun isInheritorDeep(baseClass: PsiClass?, classToByPass: PsiClass?): Boolean = f",,6e1f
fun eatAString(a: A<String>),{},"// !DIAGNOSTICS: -UNUSED_PARAMETER
// FILE: A.java",0a2e
No signature found,fun eatAStringN(a: A<String?>) {},,6e1f
"fun test(b: B, c: C, d: D, e: E)","{
    eatAString(b)
    eatAString(c)
    eatAString(d)
    eatAString(<!TYPE_MISMATCH!>e<!>)

    eatAStringN(b)
    eatAStringN(c)
    eatAStringN(<!TYPE_MISMATCH!>d<!>)
    eatAStringN(e)
}",,5796
fun test2(w: W),"{
    eatAString(w)
    eatAStringN(<!TYPE_MISMATCH!>w<!>)
}",// FILE: 3.kt,07be
No signature found,"fun isImportedByDefault(c: String?, x: Set<Int>) = c",// WITH_STDLIB,6e1f
fun box(),": String = """,,4f27
fun test(),{},// FILE: main.kt,fe98
"fun check(expression: FirQualifiedAccessExpression, context: CheckerContext, reporter: DiagnosticReporter)","{
        if (expression.explicitReceiverIsNotSuperReference()) return

        val closestClass = context.findClosest<FirClass>() ?: return

        if (closestClass.classKind == ClassKind.INTERFACE) {
            val containingClassSymbol =
                expression.toResolvedCallableSymbol()?.getContainingClassSymbol(context.session) as? FirRegularClassSymbol ?: return

            if (containingClassSymbol.source != null && containingClassSymbol.classKind == ClassKind.CLASS && containingClassSymbol.classId != StandardClassIds.Any) {
                reporter.reportOn(expression.explicitReceiver?.source, FirErrors.SUPERCLASS_NOT_ACCESSIBLE_FROM_INTERFACE, context)
            }",,478b
fun main(a: A),"{
    a.foo("""", null)<!UNNECESSARY_SAFE_CALL!>?.<!>length
    a.foo("""", null).length
    a.foo(<!NULL_FOR_NONNULL_TYPE!>null<!>, """").length

    a.bar().length
    a.bar()<!UNNECESSARY_NOT_NULL_ASSERTION!>!!<!>.length

    a.field<!UNNECESSARY_SAFE_CALL!>?.<!>length
    a.field.length

    a.baz()<!UNSAFE_CALL!>.<!>get(0)
    a.baz()!!.get(0).get(0)
    a.baz()!!.get(0)<!UNNECESSARY_SAFE_CALL!>?.<!>get(0)
}","// FIR_IDENTICAL
// !DIAGNOSTICS: -UNUSED_VARIABLE -UNUSED_PARAMETER
// JSR305_GLOBAL_REPORT: strict

// FILE: spr/Nullable.java",c1f5
fun importCompanionConstant(),"= """,,61e2
No signature found,fun <T: Any> exclExcl(t: T?): T = t,"// FIR_IDENTICAL
// !CHECK_TYPE
// FILE: A.java",6e1f
fun test11(),"{
    // not 'String!'
    exclExcl(A.foo()) checkType { _<String>() }",,5475
"fun check(x: Long, left: Long, right: Long)",": Boolean {
    val result = x in left..right
    val manual = x >= left && x <= right
    val range = left..right
    assertTrue(result == manual, ""Failed: optimized === manual for $range"")
    assertTrue(result == checkUnoptimized(x, range), ""Failed: optimized === unoptimized for $range"")
    return result
}",// WITH_STDLIB,ed27
"fun checkUnoptimized(x: Long, range: ClosedRange<Long>)",": Boolean {
    return x in range
}",,58a9
fun box(),": String {
    assertTrue(check(1L, 0L, 2L))
    assertTrue(!check(1L, -1L, 0L))
    assertTrue(!check(239L, 239L, 238L))
    assertTrue(check(239L, 238L, 239L))

    assertTrue(check(Long.MIN_VALUE, Long.MIN_VALUE, Long.MIN_VALUE))
    assertTrue(check(Long.MAX_VALUE, Long.MIN_VALUE, Long.MAX_VALUE))

    var value = 0L
    assertTrue(++value in 1L..1L)
    assertTrue(++value !in 1L..1L)
    return ""OK""
}",,4f27
fun <K> bar(x: Foo<K>),: Unit {},"// TARGET_BACKEND: JVM
// WITH_STDLIB",7000
No signature found,fun <E> foo(block: (Foo<E>) -> Unit): E = n,,6e1f
fun emit(value: T),"}

@Suppress(""OPT_IN_USAGE_ERROR"")
fun <I> flow(block: FlowCollector<I>.() -> Unit): I = n",,d476
fun adapt(),: Unit = f,,1aa4
fun box(),": String {
    adapt()
    return ""OK""
}",,4f27
fun createPointer(),: KtSymbolPointer<KtLocalVariableSymbol> = w,,ffc4
No signature found,fun equals(other: Any?): Boolean = i,,6e1f
fun hashCode(),: Int = c,,6874
fun bar(),"{
    Foo<Any>({}","// FIR_IDENTICAL
// !DIAGNOSTICS: -UNUSED_PARAMETER
// SKIP_TXT
// Issue: KT-35168",66c3
fun foo(value: Value<String>),"{
        res = value.value
    }","// WITH_STDLIB
// WORKS_WHEN_VALUE_CLASS
// LANGUAGE: +ValueClasses, +GenericInlineClassParameter",a4b2
No signature found,"fun bar(value: Value<String>?) {
        res = value?.value
    }",,6e1f
fun box(),": String {
    Value<String>(""OK"").let(Foo::foo)
    if (res != ""OK"") return ""FAIL 1: $res""
    res = ""FAIL 2""

    Value<String>(""OK"").let(Foo::bar)
    if (res != ""OK"") return ""FAIL 3: $res""
    res = ""FAIL 4""

    null.let(Foo::bar)
    if (res != null) return ""FAIL 3: $res""
    return ""OK""
}",,4f27
fun box(),": String {
    for (i in D.indices) {
        for (j in D[i].data.indices) {
            val x = D[i].data[j].toInt()
            if (x != i + j) throw AssertionError()
        }","// !LANGUAGE: +InlineClasses
// WITH_STDLIB",4f27
fun testRangeTo(),": String {
    var result = """"
    for (x in 1..3) {
        result += x
    }","// EXPECTED_REACHABLE_NODES: 1293
// CHECK_CONTAINS_NO_CALLS: testRangeTo
// CHECK_CONTAINS_NO_CALLS: testRangeToFunction
// CHECK_CONTAINS_NO_CALLS: testUntil
// CHECK_CONTAINS_NO_CALLS: testDownTo
// CHECK_CONTAINS_NO_CALLS: testStep TARGET_BACKENDS=JS
// CHECK_CONTAINS_NO_CALLS: testEmptyRange
// CHECK_CONTAINS_NO_CALLS: testRangeToParams except=from;to TARGET_BACKENDS=JS",6699
fun testRangeToFunction(),": String {
    var result = """"
    for (x in 1.rangeTo(3)) {
        result += x
    }",,c4e5
fun testUntil(),": String {
    var result = """"
    for (x in 1 until 4) {
        result += x
    }",,2c3f
fun testDownTo(),": String {
    var result = """"
    for (x in 3 downTo 1) {
        result += x
    }",,13f1
fun testStep(),": String {
    var result = """"
    for (x in 1..5 step 2) {
        result += x
    }",,85f3
fun testEmptyRange(),": String {
    var result = """"
    for (x in 3..1) {
        result += x
    }",,77e8
No signature found,"fun testRangeToParams(from: () -> Int, to: () -> Int): String {
    var result = """"
    for (x in (from()..to())) {
        result += x
    }",,6e1f
fun box(),": String {
    var r = testRangeTo()
    if (r != ""123"") return ""fail: rangeTo: $r""

    r = testRangeToFunction()
    if (r != ""123"") return ""fail: rangeToFunction: $r""

    r = testUntil()
    if (r != ""123"") return ""fail: until: $r""

    r = testDownTo()
    if (r != ""321"") return ""fail: downTo: $r""

    r = testStep()
    if (r != ""135;135;642"") return ""fail: $r""

    r = testEmptyRange()
    if (r != """") return ""fail: emptyRange: $r""

    r = testRangeToParams({ 1 }",,4f27
fun test(),": String {
    val p = object : Test() {}","// !LANGUAGE: -ProhibitProtectedCallFromInline
// TARGET_BACKEND: JVM

// FILE: Test.java",fe98
fun box(),": String {
    return test()
}",,4f27
"fun test(ok: String, fail: String)",= o,"// MODULE: lib
// FILE: l1.kt",1e68
fun box(),= t,,4f27
fun foo(),= 1,,519f
"fun test(a: IntArray, w: Wrapper)",= a,,0865
No signature found,"fun initializeIteration(
        loopVariable: IrVariable?,
        loopVariableComponents: Map<Int, IrVariable>,
        builder: DeclarationIrBuilder,
        backendContext: CommonBackendContext,
    ): List<IrStatement> =
        w",,6e1f
No signature found,"fun buildLoop(builder: DeclarationIrBuilder, oldLoop: IrLoop, newBody: IrExpression?): LoopReplacement = w",,6e1f
fun overloadedInline(),"{
    overloaded(""overloadedInline"")
}",,67fa
No signature found,fun runFunction1(x: () -> Unit) = R,"// TARGET_BACKEND: JVM
// WITH_STDLIB
// FILE: Test.java",6e1f
No signature found,fun runFunction2(x: () -> Unit) = T,,6e1f
fun box(),": String {
    var result = """"
    runFunction1 { result += ""O"" }",,4f27
fun box(),": String {
    var c = A()
    c = A()
    c = A()
    return if (a == 3) ""OK"" else ""fail: $a""
}",// EXPECTED_REACHABLE_NODES: 1283,4f27
fun takeString(s: String),{},// ISSUE: KT-37488,b6f3
fun test_1(a: A),"{
    val s = when(a) {
        is B -> """"
        is C -> """"
    }",,156f
fun test_2(a: A),"{
    val s = when(a) {
        is B -> """"
        C -> """"
    }",,b8a9
No signature found,"fun check(resolvedCall: ResolvedCall<*>, reportOn: PsiElement, context: CallCheckerContext) {
        if (!context.languageVersionSettings.supportsFeature(LanguageFeature.PolymorphicSignature)) return
        if (!resolvedCall.resultingDescriptor.annotations.hasAnnotation(polymorphicSignatureFqName)) return

        for (valueArgument in resolvedCall.valueArgumentsByIndex ?: return) {
            if (valueArgument !is VarargValueArgument) continue
            for (argument in valueArgument.arguments) {
                val spread = argument.getSpreadElement() ?: continue
                context.trace.report(ErrorsJvm.SPREAD_ON_SIGNATURE_POLYMORPHIC_CALL.on(context.languageVersionSettings, spread))
            }",,6e1f
fun usa<caret>ge(j: JavaDeclaration),= j,// FILE: usage.kt,b581
fun directlyFromZip(zipFileSystem: FileSystem),": KotlinLibraryLayout =
        F",,45bd
fun directlyFromZip(zipFileSystem: FileSystem),": MetadataKotlinLibraryLayout =
        F",,45bd
fun directlyFromZip(zipFileSystem: FileSystem),": IrKotlinLibraryLayout =
        F",,45bd
No signature found,"fun <T> realFiles(action: (L) -> T): T =
        i",,6e1f
No signature found,"fun <T> inPlace(action: (L) -> T): T =
        i",,6e1f
No signature found,fun KotlinLibraryLayoutImpl.extract(file: File): File = e,,6e1f
"fun extract(zipFile: File, file: File)",= z,,021b
No signature found,fun KotlinLibraryLayoutImpl.extractDir(directory: File): File = e,,6e1f
"fun extractDir(zipFile: File, directory: File)",": File {
    val temporary = org.jetbrains.kotlin.konan.file.createTempDir(directory.name)
    temporary.deleteOnExitRecursively()
    zipFile.unzipTo(temporary, fromSubdirectory = directory)
    return temporary
}",,192a
fun zippedKotlinLibraryChecks(klibFile: File),"{
    check(klibFile.exists) { ""Could not find $klibFile."" }",,290e
No signature found,fun withDefaultType(type: SimpleType?) = E,,6e1f
fun withNewVisitedTypeParameter(typeParameter: TypeParameterDescriptor),"=
        E",,e0f6
No signature found,"fun equals(other: Any?): Boolean {
        if (other !is ErasureTypeAttributes) return false
        return other.defaultType == this.defaultType && other.howThisTypeIsUsed == this.howThisTypeIsUsed
    }",,6e1f
fun hashCode(),": Int {
        var result = defaultType.hashCode()
        result += 31 * result + howThisTypeIsUsed.hashCode()
        return result
    }",,6874
fun testDefaultTrace(),"{
        val oldValue = a1.value
        defaultTrace { ""before CAS value = $oldValue"" }",,5769
fun testTraceWithSize(),"{
        val oldValue = a2.value
        traceWithSize { ""before CAS value = $oldValue"" }",,c269
fun testTraceWithFormat(),"{
        val oldValue = a3.value
        traceWithFormat { ""before CAS value = $oldValue"" }",,5997
fun testNamedTrace(),"{
        s.value = 5
        shortTrace { ""before CAS value = ${s.value}",,9286
fun testMultipleAppend(),"{
        val i = 1
        traceWithFormat.append(i, Status.START)
        assertEquals(0, a.value)
        a.incrementAndGet()
        traceWithFormat.append(i, a.value, ""incAndGet"")
        assertEquals(1, a.value)
        a.lazySet(10)
        traceWithFormat.append(i, a.value, ""lazySet"")
        assertEquals(10, a.value)
        traceWithFormat.append(i, Status.END)
    }",,42c6
fun testTraceInBlock(),"{
        a1.lazySet(5)
        if (a1.value == 5) {
            defaultTrace { ""Value checked"" }",,c894
fun test(),"{
        testDefaultTrace()
        testTraceWithSize()
        testTraceWithFormat()
        testNamedTrace()
        testMultipleAppend()
        testTraceInBlock()
    }",,fe98
fun box(),": String {
    TraceTest().test()
    return ""OK""
}",,4f27
fun baseMember(),: Int = v,,fb49
fun childMember(),: Int = v,,6938
fun f(),"{

    }",// LANGUAGE: +StopPropagatingDeprecationThroughOverrides,f6fb
fun f(),"{

    }",,f6fb
fun f(),"{

    }",,f6fb
fun f(),"{

    }",,f6fb
No signature found,"fun <!OVERRIDE_DEPRECATION!>f<!>() {

    }",,6e1f
No signature found,"fun <!OVERRIDE_DEPRECATION!>f<!>() {

    }",,6e1f
No signature found,"fun <!OVERRIDE_DEPRECATION!>f<!>() {

    }",,6e1f
fun f(),"{

    }",,f6fb
fun f(),"{

    }",,f6fb
fun f(),"{

    }",,f6fb
No signature found,"fun <!OVERRIDE_DEPRECATION!>f<!>() {

    }",,6e1f
fun f(),"{

    }",,f6fb
fun f(),"{
    }",,f6fb
No signature found,"fun <!OVERRIDE_DEPRECATION!>f<!>() {
    }",,6e1f
No signature found,"fun <!OVERRIDE_DEPRECATION!>f<!>() {
    }",,6e1f
fun f(),"{
        super.f()
    }",,f6fb
"fun use(
        wd: WarningDeprecated, ed: ErrorDeprecated, hd: HiddenDeprecated,
        we: WE, wh: WH, eh: EH, nw: NW, ne: NE, nh: NH,
        weh: WEH, nweh: NWEH,
        we2: WE2, nwe2: NWE2, nwe3: NWE3,
        e2: E2, w2: W2, ew2: EW2, hew2: HEW2,
        explicitError: ExplicitError
)","{
    wd.<!DEPRECATION!>f<!>()
    ed.<!DEPRECATION_ERROR!>f<!>()
    hd.<!UNRESOLVED_REFERENCE!>f<!>()

    we.f()
    wh.f()
    eh.f()

    nw.f()
    ne.f()
    nh.f()

    weh.f()
    nweh.f()

    we2.f()
    nwe2.f()
    nwe3.f()

    e2.<!DEPRECATION_ERROR!>f<!>()
    w2.<!DEPRECATION!>f<!>()
    ew2.f()
    hew2.f()

    explicitError.<!DEPRECATION_ERROR!>f<!>()
}",,99c4
No signature found,"fun test(handlers: Map<String, Element.()->Unit>) {

    handlers.getOrElse(""name"", l@ { return@l null }",// FIR_IDENTICAL,6e1f
No signature found,"fun <K,V> Map<K,V>.getOrElse(key: K, defaultValue: ()-> V) : V = t",,6e1f
fun value(),": Value<T>
}

class Singleton<T>(val x: T) : WithValue<T> {
    override  = Value(x)
}",// FIR_IDENTICAL,ba8e
fun value(),= V,,ba8e
No signature found,"fun <T> Singleton<out T>.indexed(): WithValue<Indexed<T>> {
    return WithValueIndexed { value() }",,6e1f
fun getInheritorsOfSealedClass(classSymbol: KtNamedClassOrObjectSymbol),": List<KtNamedClassOrObjectSymbol>
    public abstract fun getEnumEntries(classSymbol: KtNamedClassOrObjectSymbol): List<KtEnumEntrySymbol>
}

public interface KtInheritorsProviderMixIn : KtAnalysisSessionMixIn {
    public fun KtNamedClassOrObjectSymbol.getSealedClassInheritors(): List<KtNamedClassOrObjectSymbol> =
        withValidityAssertion { analysisSession.inheritorsProvider.getInheritorsOfSealedClass(this) }",,4db4
No signature found,"fun KtNamedClassOrObjectSymbol.getEnumEntries(): List<KtEnumEntrySymbol> =
        w",,6e1f
No signature found,"fun getOrPut(cursor: CValue<CXCursor>, create: () -> D) = g",,6e1f
No signature found,"fun getOrPut(cursor: CValue<CXCursor>, create: () -> D, configure: (D) -> Unit): D {
            val key = getDeclarationId(cursor)
            return all.getOrElse(key) {

                val value = create()
                all[key] = value

                val headerId = getHeaderId(getContainingFile(cursor))
                if (!library.headerExclusionPolicy.excludeAll(headerId)) {
                    // This declaration is used, and thus should be included:
                    included.add(value)
                }",,6e1f
No signature found,fun getHeaderId(file: CXFile?): HeaderId = g,,6e1f
fun getLocation(cursor: CValue<CXCursor>),": Location {
        val headerId = getHeaderId(getContainingFile(cursor))
        return Location(headerId)
    }",,0575
fun log(message: String),"{
        if (verbose) {
            println(message)
        }",,fafb
fun getDeclarationId(cursor: CValue<CXCursor>),": DeclarationID {
        val usr = clang_getCursorUSR(cursor).convertAndDispose()
        if (usr == """") {
            val kind = cursor.kind
            val spelling = getCursorSpelling(cursor)
            return when (kind to spelling) {
                CXCursorKind.CXCursor_StructDecl to ""__va_list_tag"" -> DeclarationID.VaListTag
                CXCursorKind.CXCursor_StructDecl to ""__va_list"" -> DeclarationID.VaList
                CXCursorKind.CXCursor_TypedefDecl to ""__builtin_va_list"" -> DeclarationID.BuiltinVaList
                CXCursorKind.CXCursor_ObjCInterfaceDecl to ""Protocol"" -> DeclarationID.Protocol
                else -> error(kind to spelling)
            }",,519b
"fun getStructDeclAt(
            cursor: CValue<CXCursor>
    )",: StructDecl = s,,31eb
fun createStructDecl(cursor: CValue<CXCursor>),": StructDeclImpl =
            S",,072e
"fun collectCxxMembers(classCursor: CValue<CXCursor>, receiverType: RecordType)",": CxxMembers {
        assert(library.language == Language.CPP)

        val methods = mutableListOf<FunctionDecl>()
        val staticFields = mutableListOf<GlobalDecl>()

        // TODO skip method (function) when encounter UnsupportedType in params or ret value. Otherwise all class methods will be lost due to exception (?)
        visitChildren(classCursor) { cursor, _ ->
            if (cursor.isCxxPublic) {
                // TODO If a kotlin class is _conceptually_ derived from its c++ counterpart, then it shall be able to override virtual private and access protected
                when (cursor.kind) {
                    CXCursorKind.CXCursor_CXXMethod -> {
                        val isOperatorFunction = cursor.spelling.startsWith(""operator"")
                        // operators are Not Implemented Yet
                        if (!isOperatorFunction) {
                            if (clang_isFunctionTypeVariadic(clang_getCursorType(cursor)) == 0) // FIXME why it doesn't work???
                                getFunction(cursor, receiverType)?.let { methods.add(it) }",,2aa0
No signature found,"fun createStructDef(cursor: CValue<CXCursor>, structType: CValue<CXType>, structDecl: StructDecl? = n",,6e1f
"fun getMembers(cursor: CValue<CXCursor>, structType: CValue<CXType>)",": List<StructMember> =
            /",,febe
fun getEnumDefAt(cursor: CValue<CXCursor>),": EnumDefImpl {
        if (clang_isCursorDefinition(cursor) == 0) {
            val definitionCursor = clang_getCursorDefinition(cursor)
            if (clang_isCursorDefinition(definitionCursor) != 0) {
                return getEnumDefAt(definitionCursor)
            }",,64ab
fun createEnumDefImpl(cursor: CValue<CXCursor>),": EnumDefImpl {
        val cursorType = clang_getCursorType(cursor)
        val typeSpelling = clang_getTypeSpelling(cursorType).convertAndDispose()
        val baseType = convertType(clang_getEnumDeclIntegerType(cursor))
        return EnumDefImpl(typeSpelling, baseType, getLocation(cursor))
    }",,c842
fun getObjCCategoryClassCursor(cursor: CValue<CXCursor>),": CValue<CXCursor> {
        assert(cursor.kind == CXCursorKind.CXCursor_ObjCCategoryDecl)
        var classRef: CValue<CXCursor>? = null
        visitChildren(cursor) { child, _ ->
            if (child.kind == CXCursorKind.CXCursor_ObjCClassRef) {
                classRef = child
                CXChildVisitResult.CXChildVisit_Break
            }",,3ad2
fun isObjCInterfaceDeclForward(cursor: CValue<CXCursor>),": Boolean {
        assert(cursor.kind == CXCursorKind.CXCursor_ObjCInterfaceDecl) { cursor.kind }",,9387
fun getObjCClassAt(cursor: CValue<CXCursor>),": ObjCClassImpl {
        assert(cursor.kind == CXCursorKind.CXCursor_ObjCInterfaceDecl) { cursor.kind }",// It is forward declaration <=> the first child is reference to it:,f61e
"fun collectClassCategories(classCursor: CValue<CXCursor>, className: String)",": List<CValue<CXCursor>> {
        assert(classCursor.kind == CXCursorKind.CXCursor_ObjCInterfaceDecl) { classCursor.kind }",,a34a
fun getObjCProtocolAt(cursor: CValue<CXCursor>),": ObjCProtocolImpl {
        assert(cursor.kind == CXCursorKind.CXCursor_ObjCProtocolDecl) { cursor.kind }",,b69e
fun getObjCBinaryName(cursor: CValue<CXCursor>),": String {
        val prefix = ""_OBJC_CLASS_\$_""
        val symbolName = clang_Cursor_getObjCManglings(cursor)!!.convertAndDispose()
                .single { it.startsWith(prefix) }",,f2d7
fun getObjCCategoryAt(cursor: CValue<CXCursor>),": ObjCCategoryImpl? {
        assert(cursor.kind == CXCursorKind.CXCursor_ObjCCategoryDecl) { cursor.kind }",,dccd
"fun addChildrenToObjCContainer(cursor: CValue<CXCursor>, result: ObjCContainerImpl)","{
        visitChildren(cursor) { child, _ ->
            when (child.kind) {
                CXCursorKind.CXCursor_ObjCSuperClassRef -> {
                    assert(cursor.kind == CXCursorKind.CXCursor_ObjCInterfaceDecl)
                    result as ObjCClassImpl

                    assert(result.baseClass == null)
                    result.baseClass = getObjCClassAt(clang_getCursorReferenced(child))
                }",,9075
fun getTypedef(type: CValue<CXType>),": Type {
        val declCursor = clang_getTypeDeclaration(type)
        val name = getCursorSpelling(declCursor)

        val underlying = convertType(clang_getTypedefDeclUnderlyingType(declCursor))

        if (underlying == UnsupportedType) return underlying

        if (clang_getCursorLexicalParent(declCursor).kind != CXCursorKind.CXCursor_TranslationUnit) {
            // Objective-C type parameters are represented as non-top-level typedefs.
            // Erase for now:
            return underlying
        }",,4bdd
fun convertCursorType(cursor: CValue<CXCursor>),"=
            c",,4aff
No signature found,fun objCType(supplier: () -> ObjCPointer) = w,,6e1f
No signature found,"fun String.dropConstQualifier() =
            s",,6e1f
fun convertUnqualifiedPrimitiveType(type: CValue<CXType>),: Type = w,,0706
No signature found,"fun convertType(type: CValue<CXType>, typeAttributes: CValue<CXTypeAttributes>? = n",,6e1f
fun getTypedefUnderlyingObjCClass(typedefDecl: CValue<CXCursor>),": CValue<CXCursor> {
        assert(typedefDecl.kind == CXCursorKind.CXCursor_TypedefDecl)
        val underlyingType = clang_getTypedefDeclUnderlyingType(typedefDecl)
        val underlyingTypeDecl = clang_getTypeDeclaration(underlyingType)

        return when (underlyingTypeDecl.kind) {
            CXCursorKind.CXCursor_TypedefDecl -> getTypedefUnderlyingObjCClass(underlyingTypeDecl)
            CXCursorKind.CXCursor_ObjCInterfaceDecl -> underlyingTypeDecl
            else -> TODO(
                    """"""typedef = ${getCursorSpelling(typedefDecl)}",,82fc
No signature found,"fun getNullability(
            type: CValue<CXType>, typeAttributes: CValue<CXTypeAttributes>?
    ): ObjCPointer.Nullability {

        if (typeAttributes == null) return ObjCPointer.Nullability.Unspecified

        return when (clang_Type_getNullabilityKind(type, typeAttributes)) {
            CXNullabilityKind.CXNullabilityKind_Nullable -> ObjCPointer.Nullability.Nullable
            CXNullabilityKind.CXNullabilityKind_NonNull -> ObjCPointer.Nullability.NonNull
            CXNullabilityKind.CXNullabilityKind_Unspecified -> ObjCPointer.Nullability.Unspecified
        }",,6e1f
fun getProtocols(type: CValue<CXType>),": List<ObjCProtocol> {
        val num = clang_Type_getNumProtocols(type)
        return (0 until num).map { index ->
            getObjCProtocolAt(clang_Type_getProtocol(type, index))
        }",,773b
fun convertFunctionType(type: CValue<CXType>),": Type {
        val kind = type.kind
        assert(kind == CXType_Unexposed || kind == CXType_FunctionProto || kind == CXType_FunctionNoProto) { kind }",,b142
No signature found,"fun convertBlockPointerType(type: CValue<CXType>, typeAttributes: CValue<CXTypeAttributes>?): ObjCPointer {
        val kind = type.kind
        assert(kind == CXType_BlockPointer)

        val pointee = clang_getPointeeType(type)
        val nullability = getNullability(type, typeAttributes)

        // TODO: also use nullability attributes of parameters and return value.

        val functionType = convertFunctionType(pointee) as? FunctionType
                ?: return ObjCIdType(nullability, protocols = emptyList())

        return ObjCBlockPointer(nullability, functionType.parameterTypes, functionType.returnType)
    }",,6e1f
fun isSuitableFunction(cursor: CValue<CXCursor>),": Boolean {
        if (!isAvailable(cursor)) return false

        // If function is specific for certain target, ignore that, as we may be
        // unable to generate machine code for bridge from the bitcode.
        return !functionHasTargetAttribute(cursor)
    }",,1060
fun functionHasTargetAttribute(cursor: CValue<CXCursor>),": Boolean {
        // TODO: this must be implemented with hasAttribute(), but hasAttribute()
        // works for Mac hosts only so far.

        var result = false
        visitChildren(cursor) { child, _ ->
            if (isTargetAttribute(child)) {
                result = true
                CXChildVisitResult.CXChildVisit_Break
            }",,48a7
fun isTargetAttribute(cursor: CValue<CXCursor>),: Boolean = c,,eb8d
fun getExtentFirstToken(cursor: CValue<CXCursor>),"=
            g",,4dff
"fun getToken(translationUnit: CXTranslationUnit, location: CValue<CXSourceLocation>)",: String? = m,,07b1
fun indexDeclaration(info: CXIdxDeclInfo),": Unit {
        val cursor = info.cursor.readValue()
        val entityInfo = info.entityInfo!!.pointed
        val entityName = entityInfo.name?.toKString()
        val kind = entityInfo.kind

        if (!this.library.includesDeclaration(cursor)) {
            return
        }",,7370
fun indexCxxDeclaration(cursor: CValue<CXCursor>),": Unit {
        if (library.language != Language.CPP) return
        if (!library.includesDeclaration(cursor)) {
            return
        }",,3ac9
fun indexCxxFunction(cursor: CValue<CXCursor>),"{
        if (isSuitableFunction(cursor)) {
            if (getCursorSpelling(cursor).take(8) == ""operator"") {
                // not implemented yet
            }",,58d1
fun indexObjCClass(cursor: CValue<CXCursor>),"{
        if (isAvailable(cursor)) {
            getObjCClassAt(cursor)
        }",,b442
fun indexObjCProtocol(cursor: CValue<CXCursor>),"{
        if (isAvailable(cursor)) {
            getObjCProtocolAt(cursor)
        }",,a6c3
fun indexObjCCategory(cursor: CValue<CXCursor>),"{
        if (isAvailable(cursor)) {
            getObjCCategoryAt(cursor)
        }",,bbc4
No signature found,fun String.isUnknownTemplate() = f,,6e1f
No signature found,"fun getParentName(cursor: CValue<CXCursor>, pkg: List<String> = e",,6e1f
No signature found,"fun getFunction(cursor: CValue<CXCursor>, receiver: RecordType? = n",,6e1f
fun getObjCMethod(cursor: CValue<CXCursor>),": ObjCMethod? {
        if (!isAvailable(cursor)) {
            return null
        }",,0391
fun isAvailable(cursor: CValue<CXCursor>),: Boolean = w,,954d
fun isFuncDeclEligible(cursor: CValue<CXCursor>),": Boolean {
        var ret = true
        visitChildren(cursor) { childCursor, _ ->
            when (childCursor.kind) {
                CXCursorKind.CXCursor_TemplateRef -> {
                    ret = false
                    CXChildVisitResult.CXChildVisit_Break
                }",,363c
fun getFunctionParameters(cursor: CValue<CXCursor>),": List<Parameter>? {
        val argNum = clang_Cursor_getNumArguments(cursor)
        val args = (0..argNum - 1).map {
            val argCursor = clang_Cursor_getArgument(cursor, it)
            if (argCursor.type.name.isUnknownTemplate()) {
                return null
            }",,47b6
"fun hasAttribute(cursor: CValue<CXCursor>, name: String)",": Boolean {
        var result = false
        visitChildren(cursor) { child, _ ->
            if (clang_isAttribute(child.kind) != 0 && clang_Cursor_getAttributeSpelling(child)?.toKString() == name) {
                result = true
                CXChildVisitResult.CXChildVisit_Break
            }",,6697
"fun buildNativeIndexImpl(library: NativeLibrary, verbose: Boolean)",": IndexerResult {
    val result = NativeIndexImpl(library, verbose)
    return buildNativeIndexImpl(result)
}",,2802
fun buildNativeIndexImpl(index: NativeIndexImpl),": IndexerResult {
    val compilation = indexDeclarations(index)
    return IndexerResult(index, compilation)
}",,36ed
fun indexDeclarations(nativeIndex: NativeIndexImpl),": CompilationWithPCH {
    // Below, declarations from PCH should be excluded to restrict `visitChildren` to visit local declarations only
    withIndex(excludeDeclarationsFromPCH = true) { index ->
        val errors = mutableListOf<Diagnostic>()
        val translationUnit = nativeIndex.library.copyWithArgsForPCH().parse(
                index,
                options = CXTranslationUnit_DetailedPreprocessingRecord or CXTranslationUnit_ForSerialization,
                diagnosticHandler = { if (it.isError()) errors.add(it) }",,a185
fun indexDeclaration(info: CXIdxDeclInfo),"{
                            val file = memScoped {
                                val fileVar = alloc<CXFileVar>()
                                clang_indexLoc_getFileLocation(info.loc.readValue(), null, fileVar.ptr, null, null, null)
                                fileVar.value
                            }",,7370
No signature found,"fun ClassBuilder.modifyGeneratedClass(thisKind: PrimitiveType) {
        appendDoc(""On the JVM, non-nullable values of this type are represented as values of the primitive type `${thisKind.name.lowercase()}",,6e1f
No signature found,"fun MethodBuilder.modifyGeneratedRangeTo(thisKind: PrimitiveType, otherKind: PrimitiveType, opReturnType: PrimitiveType) {
        noBody()
    }",,6e1f
No signature found,"fun MethodBuilder.modifyGeneratedRangeUntil(thisKind: PrimitiveType, otherKind: PrimitiveType, opReturnType: PrimitiveType) {
        noBody()
    }",,6e1f
fun foo(),"<!>

<!CONFLICTING_OVERLOADS, EXPECTED_DECLARATION_WITH_BODY!>expect <!> {}","// MODULE: m1-common
// FILE: common.kt",519f
fun bar(),<!> {},,66c3
fun test(b: Boolean),"{
    when(<expr>b</expr>) {
        else -> {}",,69ac
fun foo(),= A,,519f
fun bar(),"{
    val A = """"
    val b = A
}",,66c3
fun prefixIncrement(),"{
    val intArray = IntArray(10)
    val a1 = Array(10) { i -> { ++intArray[i] }",,9af7
fun prefixDecrement(),"{
    val intArray = IntArray(10)
    val a1 = Array(10) { i -> { --intArray[i] }",,ae5c
fun postfixIncrement(),"{
    val intArray = IntArray(10)
    val a1 = Array(10) { i -> { intArray[i]++ }",,bb8f
fun postfixDecrement(),"{
    val intArray = IntArray(10)
    val a1 = Array(10) { i -> { intArray[i]-- }",,9f85
fun initializeTypeArguments(size: Int),= i,,82c8
fun initializeParameterArguments(size: Int),= i,,63e3
"fun check(expression: FirFunctionCall, context: CheckerContext, reporter: DiagnosticReporter)","{
        if (expression.calleeReference.toResolvedCallableSymbol()?.callableId != jsCodeCallableId) {
            return
        }",,72c2
fun visitElement(element: FirElement),"{
                val lastReported = lastReportedElement
                element.acceptChildren(this)
                if (lastReported == lastReportedElement) {
                    if (!canBeEvaluatedAtCompileTime(element as? FirExpression, context.session, allowErrors = true, calledOnCheckerStage = true)) {
                        lastReportedElement = element
                        val source = element.source ?: jsCodeExpression.source
                        reporter.reportOn(source, FirWebCommonErrors.JSCODE_ARGUMENT_NON_CONST_EXPRESSION, context)
                    }",,8ec4
fun visitPropertyAccessExpression(propertyAccessExpression: FirPropertyAccessExpression),"{
                if (propertyAccessExpression.calleeReference.toResolvedCallableSymbol()?.isConst != true) {
                    super.visitPropertyAccessExpression(propertyAccessExpression)
                }",,f0ae
fun testLatestGradleVariantUsesCurrentDocs(),"{
        val lastVariant = GradlePluginVariant.values().last()

        assertEquals(
            ""https://docs.gradle.org/current/javadoc/"",
            lastVariant.gradleApiJavadocUrl
        )
    }",,536e
fun testNonLatestGradleVariantDoesNotUseCurrentDocs(),"{
        GradlePluginVariant.values().dropLast(1).forEach {
            assertNotEquals(
                ""https://docs.gradle.org/current/javadoc/"",
                it.gradleApiJavadocUrl
            )
        }",,5486
No signature found,"fun getValue(thisRef: Any?, property: KProperty<*>): @Anno(""getValue type ref $prop"") List<@Anno(""getValue nested type ref $prop"") List<@Anno(""getValue nested nested type ref $prop"") Int>> = 1",// SKIP_WHEN_OUT_OF_CONTENT_ROOT,6e1f
No signature found,"fun setValue(thisRef: Any?, property: KProperty<*>, value: @Anno(""setValue type ref $prop"") List<@Anno(""setValue nested type ref $prop"") List<@Anno(""setValue nested nested type ref $prop"") Int>>) {}",,6e1f
"fun commonize(first: T, second: T)",": T?
}

fun <T> AssociativeCommonizer<T>.commonize(values: List<T>): T? {
    if (values.isEmpty()) return null
    if (values.size == 1) return values.first()
    return values.reduce { acc, next -> commonize(acc, next) ?: return null }",,f1b3
No signature found,fun <T : Any> AssociativeCommonizer<T>.asCommonizer(): AssociativeCommonizerAdapter<T> = A,,6e1f
fun commonizationResult(),": T {
        return _result ?: failInEmptyState()
    }",,3a74
fun initialize(first: T),= U,,21f8
fun doCommonizeWith(next: T),": Boolean {
        val currentResult = _result

        if (currentResult == null) {
            _result = next
            return true
        }",,f199
No signature found,"fun <T> AssociativeCommonizer<T?>.asNullableCommonizer(): Commonizer<T?, T?> = N",,6e1f
No signature found,"fun commonizeWith(next: T?): Boolean {
        val currentResult = _result

        if (!isInitialized) {
            _result = next
            isInitialized = true
            return true
        }",,6e1f
fun box(),": String {
    buildMap {
        val replaced = put(""key"", ""value"")
        if (replaced != null) {
            return ""Error: $replaced""
        }","// TARGET_BACKEND: JVM
// WITH_STDLIB
// ISSUE: KT-52190",4f27
No signature found,"fun foo(p0 : String?) : String? = """,,6e1f
fun isEnum(access: Int),= (,,f0f7
fun isPublic(access: Int),= (,,b522
fun isSynthetic(access: Int),= (,,2172
fun isFinal(access: Int),= (,,fb31
fun isStatic(access: Int),= (,,9a97
fun isAbstract(access: Int),= (,,7ca8
fun isDeprecated(access: Long),= (,,b83a
No signature found,fun ClassNode.isInterface() = (,,6e1f
No signature found,fun ClassNode.isEnum() = (,,6e1f
No signature found,fun ClassNode.isAnnotation() = (,,6e1f
No signature found,fun MethodNode.isVarargs() = (,,6e1f
No signature found,fun MethodNode.isAbstract() = (,,6e1f
No signature found,fun MethodNode.isStatic() = (,,6e1f
No signature found,fun FieldNode.isEnumValue() = (,,6e1f
No signature found,fun <T> List<T>?.isNullOrEmpty() = t,,6e1f
No signature found,"fun MethodNode.isJvmOverloadsGenerated(): Boolean {
    return (invisibleAnnotations?.any { it.isJvmOverloadsGenerated() }",,6e1f
No signature found,"fun AnnotationNode.isJvmOverloadsGenerated(): Boolean {
    return this.desc == ANNOTATION_TYPE_DESCRIPTOR_FOR_JVMOVERLOADS_GENERATED_METHODS
}",,6e1f
fun test(),"= """,,fe98
No signature found,fun call(p: () -> String): String = p,,6e1f
fun inlineFun(),": String {
    return call {
        object {
            fun run() = prop + test()
        }",,9506
fun box(),": String {
    return inlineFun();
}",,4f27
fun test(),": Unit {
        val x: Qux<in T, <!UPPER_BOUND_VIOLATED!>Baz<T, <!UPPER_BOUND_VIOLATED!>Bar<Foo, <!CONFLICTING_PROJECTION!>in<!> T><!>><!>> = <!INITIALIZER_TYPE_MISMATCH!>null!!<!>
        x.f = null!!
    }",// ISSUE: KT-49024,fe98
fun existingMethodInBase(param: T),"}

open class Transitive : Base<String>()

expect open class Foo : Transitive {
    fun existingMethod()
    val existingParam: Int
}","// FIR status: KT-65249 K2: False positive modality is different for native compilation

// WITH_STDLIB
// MODULE: m1-common
// FILE: common.kt",3248
fun existingMethodInBase(param: T),{},"// MODULE: m2-jvm()()(m1-common)
// FILE: jvm.kt",3248
fun injected(param: T),": Any = """,,620f
fun existingMethod(),{},,6c23
fun injected(param: String),": <!RETURN_TYPE_CHANGED_IN_NON_FINAL_EXPECT_CLASSIFIER_ACTUALIZATION_WARNING!>String<!> = """,,1242
No signature found,"fun foo(p: String?, y: String?): Int {
    do {
        // After the check, smart cast should work
        if (y == null) {
            ""null"".toString()
            break
        }",,6e1f
No signature found,"fun error(msg: String, throwable: Throwable?) {
        log.error(msg, throwable)
    }",,6e1f
fun warn(msg: String),"{
        log.warn(msg)
    }",,bea1
fun info(msg: String),"{
        log.info(msg)
    }",,b49e
fun debug(msg: String),"{
        log.debug(msg)
    }",,1f58
fun lifecycle(msg: String),"{
        log.info(msg)
    }",,a925
fun box(),": String {
    return if (z1 && !z2) ""OK"" else ""fail""
}","// TARGET_BACKEND: JS_IR
// IGNORE_BACKEND: WASM
// PROPERTY_LAZY_INITIALIZATION

// FILE: lib.kt",4f27
fun test(),"{
    JavaClass.field
    JavaClass.method()
}","// FIR_IDENTICAL
// FILE: test/JavaClass.java",fe98
fun foo(e: VcsException),"{
    e.message.contains("""")
    """" in e.message
}","// FIR_IDENTICAL
// !DIAGNOSTICS: -UNUSED_PARAMETER
// JAVAC_EXPECTED_FILE
// FILE: VcsException.java",fdbf
No signature found,fun CharSequence.contains(other: CharSequence): Boolean = t,,6e1f
No signature found,"fun test(signatureVersion: AbiSignatureVersions.Supported) {
        val mockLibraryAbi = mockLibraryAbi(
            signatureVersion,
            mockClass(
                name = ""FinalClass"",
                mockType(
                    ""sample"", ""OpenClass"",
                    mockType(""sample"", ""InvariantClass"") to AbiVariance.INVARIANT,
                    mockType(""sample"", ""InClass"") to AbiVariance.IN,
                    mockType(""sample"", ""OutClass"") to AbiVariance.OUT,
                    null
                )
            )
        )

        val renderedClass = LibraryAbiRenderer.render(mockLibraryAbi, AbiRenderingSettings(signatureVersion))
            .lineSequence()
            .filter(String::isNotBlank)
            .last()

        assertEquals(
            ""final class sample/FinalClass : sample/OpenClass<sample/InvariantClass, in sample/InClass, out sample/OutClass, *> // signature-v${signatureVersion.versionNumber}",,6e1f
"fun mockLibraryAbi(signatureVersion: AbiSignatureVersion, vararg declarations: AbiDeclaration)",": LibraryAbi =
        L",,b5b4
"fun mockClass(name: String, vararg superTypes: AbiType)",": AbiClass =
        A",,e8f5
No signature found,"fun mockType(packageName: String, className: String, vararg arguments: Pair<AbiType, AbiVariance>?): AbiType {
        return SimpleTypeImpl(
            classifierReference = ClassReferenceImpl(AbiQualifiedName(AbiCompoundName(packageName), AbiCompoundName(className))),
            arguments = arguments.map { argument ->
                if (argument == null)
                    StarProjectionImpl
                else
                    TypeProjectionImpl(argument.first, argument.second)
            }",,6e1f
No signature found,"fun `test copying order - matches default target hierarchy`() {
        with(buildProjectWithMPP()) {
            val kotlin = multiplatformExtension
            val compilation = kotlin.linuxArm64().compilations.getByName(""main"")

            evaluate()

            assertEquals(
                listOf(
                    listOf(""commonMain""),
                    listOf(""nativeMain""),
                    listOf(""linuxMain""),
                    listOf(""linuxArm64Main""),
                ),
                resourceDirectoriesCopyingOrder(
                    compilation
                )
            )
        }",,6e1f
No signature found,"fun `test copying order - with additional source sets in platform source set`() {
        with(buildProjectWithMPP()) {
            val kotlin = multiplatformExtension
            val compilation = kotlin.jvm().compilations.getByName(""main"")

            val a = kotlin.sourceSets.create(""a"")

            compilation.defaultSourceSet.dependsOn(a)

            evaluate()

            assertEquals(
                listOf(
                    listOf(""a"", ""commonMain""),
                    listOf(""jvmMain""),
                ),
                resourceDirectoriesCopyingOrder(
                    compilation
                )
            )
        }",,6e1f
No signature found,"fun `test copying order - with source sets more remote than common`() {
        with(buildProjectWithMPP()) {
            val kotlin = multiplatformExtension
            val compilation = kotlin.jvm().compilations.getByName(""main"")

            val a = kotlin.sourceSets.create(""a"")
            val b = kotlin.sourceSets.create(""b"")
            val c = kotlin.sourceSets.create(""c"")
            val d = kotlin.sourceSets.create(""d"")
            val e = kotlin.sourceSets.create(""e"")

            compilation.defaultSourceSet.dependsOn(a)
            compilation.defaultSourceSet.dependsOn(b)
            a.dependsOn(c)
            b.dependsOn(d)
            d.dependsOn(e)

            evaluate()

            assertEquals(
                listOf(
                    listOf(""e""),
                    listOf(""c"", ""d""),
                    listOf(""a"", ""b"", ""commonMain""),
                    listOf(""jvmMain""),
                ),
                resourceDirectoriesCopyingOrder(
                    compilation
                )
            )
        }",,6e1f
No signature found,"fun `test registering multiple resources assembling tasks - results in a diagnostic`() {
        with(buildProjectWithMPP()) {
            val kotlin = multiplatformExtension
            val compilation = kotlin.jvm().compilations.getByName(""main"")

            evaluate()

            registerFakeResourcesTask(compilation)
            registerFakeResourcesTask(compilation)

            assertContainsDiagnostic(KotlinToolingDiagnostics.ResourcePublishedMoreThanOncePerTarget)
        }",,6e1f
No signature found,"fun `test copying order - with android library - with agp source sets`() {
        with(buildProjectWithMPP()) {
            androidLibrary { compileSdk = 31 }",,6e1f
No signature found,"fun `test copying order - with android library - with flavors and agp source sets`() {
        with(buildProjectWithMPP()) {
            androidLibrary {
                compileSdk = 31
                flavorDimensions += ""version""
                productFlavors {
                    create(""demo"") {
                        it.dimension = ""version""
                    }",,6e1f
No signature found,"fun Project.resourceDirectoriesCopyingOrder(
        compilation: KotlinCompilation<*>,
    ): List<List<String>> {
        return registerFakeResourcesTask(compilation).get().resourceDirectoriesByLevel.get().map { resourcesLevel ->
            resourcesLevel.map { resource ->
                resource.resourcesBaseDirectory.get().name
            }",,6e1f
No signature found,"fun Project.registerFakeResourcesTask(compilation: KotlinCompilation<*>): TaskProvider<AssembleHierarchicalResourcesTask> {
        return compilation.registerAssembleHierarchicalResourcesTaskProvider(
            ""test${compilation.name}",,6e1f
fun box(),": String {
    try {
        return ""fail: ${A.x.toString()}","// EXPECTED_REACHABLE_NODES: 1284
// See KT-12254",4f27
No signature found,"fun testIsNullOrBlank(x: String?) {
    if (x.isNullOrBlank()) {
        x<!UNSAFE_CALL!>.<!>length
    }","// !LANGUAGE: +ReadDeserializedContracts +UseReturnsEffect
// !DIAGNOSTICS: -INVISIBLE_REFERENCE -INVISIBLE_MEMBER",6e1f
No signature found,"fun testIsNotNullOrBlank(x: String?) {
    if (!x.isNullOrBlank()) {
        <!DEBUG_INFO_SMARTCAST!>x<!>.length
    }",,6e1f
fun foo(),"// MODULE: m2-jvm()()(m1-common)
// FILE: jvm.kt

<!CONFLICTING_OVERLOADS!>actual <!> {}","// MODULE: m1-common
// FILE: common.kt",519f
fun foo(),<!> {},,519f
fun foo(),<!> {},"// MODULE: m3-js()()(m1-common)
// FILE: js.kt",519f
fun foo(),<!> {},,519f
No signature found,"fun <T> myRun(block: () -> T): T {
    contract {
        callsInPlace(block, InvocationKind.EXACTLY_ONCE)
    }","// !LANGUAGE: +AllowContractsForCustomFunctions +UseCallsInPlaceEffect
// !OPT_IN: kotlin.contracts.ExperimentalContracts
// !DIAGNOSTICS: -INVISIBLE_REFERENCE -INVISIBLE_MEMBER",6e1f
fun exitOnlyThroughLocalReturns(b: Boolean),"{
    var x: Int
    var s: String

    myRun {
        if (b) {
            x = 42
            return@myRun
        }",,6fb4
No signature found,"fun exitOnlyThroughNonLocalReturns(b: Boolean?) {
    var x: Int
    var s: String
    myRun {
        if (b == null) {
            x = 42
            return
        }",,6e1f
fun nonLocalReturnAndOrdinaryExit(b: Boolean),"{
    var x: Int
    var s: String
    myRun {
        if (b) {
            x = 42
            return
        }",,b550
fun isSuitableForType(type: KotlinType),": Boolean {
        val areArgumentsMatched = type.arguments.withIndex().all { (i, typeArgumentsType) ->
            originalType.arguments.size > i && typeArgumentsType == originalType.arguments[i]
        }",,9514
fun prepareArgumentTypeRegardingCaptureTypes(argumentType: UnwrappedType),": UnwrappedType? {
    return if (argumentType is NewCapturedType) null else captureFromExpression(argumentType)
}",,0cb0
fun captureFromExpression(type: UnwrappedType),": UnwrappedType? {
    val typeConstructor = type.constructor

    if (typeConstructor !is IntersectionTypeConstructor) {
        return captureFromArguments(type, CaptureStatus.FROM_EXPRESSION)
    }",,a043
fun findCorrespondingCapturedArgumentsForType(type: KotlinType),"=
        c",,544c
fun replaceArgumentsWithCapturedArgumentsByIntersectionComponents(typeToReplace: UnwrappedType),": List<SimpleType> {
        return if (typeToReplace.constructor is IntersectionTypeConstructor) {
            typeToReplace.constructor.supertypes.map { componentType ->
                val capturedArguments = findCorrespondingCapturedArgumentsForType(componentType)
                    ?: return@map componentType.asSimpleType()
                componentType.unwrap().replaceArguments(capturedArguments)
            }",,157b
"fun captureFromArguments(type: SimpleType, status: CaptureStatus)","=
    c",,67e5
fun captureArgumentsForIntersectionType(type: KotlinType),": List<CapturedArguments>? {
    // It's possible to have one of the bounds as non-intersection type
    fun getTypesToCapture(type: KotlinType) =
        if (type.constructor is IntersectionTypeConstructor) type.constructor.supertypes else listOf(type)

    val filteredTypesToCapture =
        if (type is FlexibleType) {
            val typesToCapture = getTypesToCapture(type.lowerBound) + getTypesToCapture(type.upperBound)
            typesToCapture.distinctBy { (FlexibleTypeBoundsChecker.getBaseBoundFqNameByMutability(it) ?: it.constructor) to it.arguments }",,9fb6
"fun captureFromArguments(type: UnwrappedType, status: CaptureStatus)",": UnwrappedType? {
    val capturedArguments = captureArguments(type, status) ?: return null

    return if (type is FlexibleType) {
        KotlinTypeFactory.flexibleType(
            type.lowerBound.replaceArguments(capturedArguments),
            type.upperBound.replaceArguments(capturedArguments)
        )
    }",,dac2
No signature found,"fun UnwrappedType.replaceArguments(arguments: List<TypeProjection>) =
    K",,6e1f
"fun captureArguments(type: UnwrappedType, status: CaptureStatus)",": List<TypeProjection>? {
    if (type.arguments.size != type.constructor.parameters.size) return null

    val arguments = type.arguments
    if (arguments.all { it.projectionKind == Variance.INVARIANT }",,0e62
fun replaceAttributes(newAttributes: TypeAttributes),": SimpleType =
        N",,e3d2
fun makeNullableAsSpecified(newNullability: Boolean),"=
        N",,dfa5
fun refine(kotlinTypeRefiner: KotlinTypeRefiner),"=
        N",,b531
fun initializeSupertypes(supertypes: List<UnwrappedType>),"{
        assert(this.supertypesComputation == null) {
            ""Already initialized! oldValue = ${this.supertypesComputation}",,233d
fun getSupertypes(),= _,,dab2
fun getParameters(),: List<TypeParameterDescriptor> = e,,25ae
fun isFinal(),= f,,ae78
fun isDenotable(),= f,,3c95
fun getDeclarationDescriptor(),: ClassifierDescriptor? = n,,3cae
fun getBuiltIns(),: KotlinBuiltIns = p,,b02e
fun refine(kotlinTypeRefiner: KotlinTypeRefiner),"=
        N",,b531
No signature found,"fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as NewCapturedTypeConstructor

        return (original ?: this) === (other.original ?: other)
    }",,6e1f
fun hashCode(),: Int = o,,6874
fun toString(),"= """,,a535
fun createPointer(),: KtSymbolPointer<KtScriptSymbol> = w,,ffc4
No signature found,fun equals(other: Any?): Boolean = s,,6e1f
fun hashCode(),: Int = s,,6874
fun f1_2(),"= """,,a21b
fun f1_3(),"= """,,0df6
fun f1_4(),"= """,,a39d
No signature found,"fun MutableSet<KtFile>.collectReachableInlineDelegatedPropertyAccessors() {
    if (isEmpty()) return

    // One of the compiler lowerings, namely `PropertyReferenceLowering`,
    // optimizes usages of property references in some cases,
    // and if a containing delegated property accessor is inline,
    // it might need this accessor's bytecode.
    //
    // If an accessor function is defined in a different module,
    // IDE tries to acquire its bytecode via the index, however,
    // the index doesn't cover classfiles from compiler output,
    // so the lowering fails.
    //
    // To solve the problem, we need to find all delegated properties with inline accessors
    // reachable from files that will be compiled, and include files these inline accessors
    // to the set of files that will be compiled (and do the same for these files recursively).
    // As it's basically a DAG traversal, we can keep a queue instead of making recursive calls.
    val allFiles = this
    val filesQueueToAnalyze = ArrayDeque(allFiles)
    val collector = InlineFunctionsCollector(allFiles.first().project, reifiedInlineFunctionsOnly = false) { declaration ->
        val containingFile = declaration.containingKtFile
        if (allFiles.add(containingFile)) {
            filesQueueToAnalyze += containingFile
        }",,6e1f
No signature found,"fun List<KtFile>.collectReachableInlineDelegatedPropertyAccessors(): List<KtFile> {
    if (isEmpty()) return this

    val allFiles = mutableSetOf<KtFile>()
    allFiles.addAll(this)
    allFiles.collectReachableInlineDelegatedPropertyAccessors()
    return allFiles.toList()
}",,6e1f
fun visitProperty(property: KtProperty),"{
        super.visitProperty(property)
        val isDelegate = property.hasDelegateExpression()
        if (!isDelegate) return

        val bindingContext = analysisContext.analyze(property)
        val descriptor = bindingContext.get(BindingContext.DECLARATION_TO_DESCRIPTOR, property)
        if (descriptor !is VariableDescriptorWithAccessors) return

        descriptor.accessors.forEach { accessor ->
            collector.checkResolveCall(bindingContext.get(BindingContext.DELEGATED_PROPERTY_RESOLVED_CALL, accessor))
        }",,23b3
fun resolve(sourceSet: KotlinSourceSet),"fun interface IdeDependencyResolver {
    : Set<IdeaKotlinDependency>

    @ExternalKotlinTargetApi
    interface WithBuildDependencies {
        /**
         * return anything accepted to be passed to [org.gradle.api.Task.dependsOn]
         *
         * #### Example: Resolver relying on a single task to be executed:
         * ```kotlin
         * object MyResolver : IdeDependencyResolver, WithBuildDependencies {
         *      = // ...
         *     fun dependencies(project: Project) = listOf(project.tasks.named(""myTask""))
         * }",,9884
fun dependencies(project: Project),": Iterable<Any>
    }

    @ExternalKotlinTargetApi
    companion object {

        /**
         * [IdeDependencyResolver] that will just return an empty Set of dependencies (noop)
         */
        val empty = IdeDependencyResolver { emptySet() }",,a92a
No signature found,"fun IdeDependencyResolver(
    resolvers: Iterable<IdeDependencyResolver?>,
): IdeDependencyResolver {
    val resolversList = resolvers.filterNotNull()
    if (resolversList.isEmpty()) return IdeDependencyResolver.empty
    return IdeCompositeDependencyResolver(resolversList)
}","/**
         * Special binaryType String that indicates that a certain dependency is only a sources.jar and
         * therefore should be attached as extra to the binary dependency.
         * This is only necessary for resolvers that implement sources/documentation resolution as [IdeDependencyResolver]
         * instead of [IdeAdditionalArtifactResolver]
         */",6e1f
No signature found,"fun IdeDependencyResolver(
    vararg resolvers: IdeDependencyResolver?,
): IdeDependencyResolver = I","/**
 * Creates a composite [IdeDependencyResolver] from the specified [resolvers]
 * Resolvers that are `null` will be ignored.
 * The composite will preserve the order and invoke the [resolvers] in the same order as specified.
 * The resulting set of dependencies will be the superset of all results of individual resolvers.
 */",6e1f
fun resolve(sourceSet: KotlinSourceSet),": Set<IdeaKotlinDependency> {
        return children.flatMap { child -> child.resolve(sourceSet) }",,9884
fun dependencies(project: Project),": Iterable<Any> {
        return children.flatMap { child ->
            if (child is IdeDependencyResolver.WithBuildDependencies) child.dependencies(project) else emptyList()
        }",,a92a
fun copy(),: Instruction = u,,5070
fun createCopy(),": InstructionImpl

    protected fun updateCopyInfo(instruction: InstructionImpl): Instruction {
        if (allCopies == null) {
            allCopies = hashSetOf(this)
        }",,351d
No signature found,"fun outgoingEdgeTo(target: Instruction?): Instruction? {
        (target as InstructionImpl?)?.previousInstructions?.add(this)
        return target
    }",,6e1f
fun createPointer(),: KtSymbolPointer<KtTypeAliasSymbol> = w,,ffc4
No signature found,fun equals(other: Any?): Boolean = i,,6e1f
fun hashCode(),: Int = c,,6874
fun foo(),{},,519f
fun register(arg: Base),"{
    arg.foo()
}",,3481
fun foo(),"{
        x.hashCode() // NPE in Base constructor
    }",,519f
fun foo(),"{
            x.hashCode() // NPE in MyEnum constructor
        }",,519f
fun add(a: T),{},"// FIR_IDENTICAL
// ISSUE: KT-66243",2c31
No signature found,"fun <T> builder(x: Test<T>.() -> Unit): Test<T> {
    return Test<T>().apply(x)
}",,6e1f
fun check(),"{
    val x = builder {
        add(1)
        lambdaInVariable =  {}",,c89c
fun testDefaultNonIncrementalSettings(),"{
        val config = compilationService.makeJvmCompilationConfiguration()
        Assertions.assertEquals(emptySet<String>(), config.kotlinScriptFilenameExtensions)
    }",,bc55
fun callUseAWithC(),"{
    useA(getC())
}",,b3c3
fun generateIfExpression(expression: KtIfExpression),": IrExpression {
        var ktLastIf: KtIfExpression = expression
        val irBranches = SmartList<IrBranch>()
        var irElseBranch: IrExpression? = null

        whenBranches@ while (true) {
            val irCondition = ktLastIf.condition!!.genExpr()

            val irThenBranch = ktLastIf.then?.genExpr() ?: generateEmptyBlockForMissingBranch(ktLastIf)
            irBranches.add(IrBranchImpl(irCondition, irThenBranch))

            when (val ktElse = ktLastIf.`else`?.deparenthesize()) {
                null -> break@whenBranches
                is KtIfExpression -> ktLastIf = ktElse
                is KtExpression -> {
                    irElseBranch = ktElse.genExpr()
                    break@whenBranches
                }",,513e
fun generateEmptyBlockForMissingBranch(ktLastIf: KtIfExpression),"=
        I",,0828
No signature found,"fun createIrWhen(
        ktIf: KtIfExpression,
        irBranches: List<IrBranch>,
        irElseResult: IrExpression?,
        resultType: IrType
    ): IrWhen {
        if (irBranches.size == 1) {
            val irBranch0 = irBranches[0]
            return buildStatement(ktIf.startOffsetSkippingComments, ktIf.endOffset) {
                irIfThenMaybeElse(resultType, irBranch0.condition, irBranch0.result, irElseResult, IrStatementOrigin.IF)
            }",,6e1f
fun elseBranch(result: IrExpression),"=
        I",,22ad
fun generateWhenExpression(expression: KtWhenExpression),": IrExpression {
        val irSubject = generateWhenSubject(expression)

        val irWhen = IrWhenImpl(
            expression.startOffsetSkippingComments, expression.endOffset,
            getExpressionTypeWithCoercionToUnitOrFail(expression).toIrType(), IrStatementOrigin.WHEN
        )

        var hasExplicitElseBranch = false
        for (ktEntry in expression.entries) {
            if (ktEntry.isElse) {
                val irElseResult = ktEntry.expression!!.genExpr()
                irWhen.branches.add(elseBranch(irElseResult))
                hasExplicitElseBranch = true
                break
            }",,1c1b
fun generateWhenSubject(expression: KtWhenExpression),": IrVariable? {
        val subjectVariable = expression.subjectVariable
        val subjectExpression = expression.subjectExpression
        return when {
            subjectVariable != null -> statementGenerator.visitProperty(subjectVariable, null) as IrVariable
            subjectExpression != null -> scope.createTemporaryVariable(subjectExpression.genExpr(), ""subject"")
            else -> null
        }",// chunk conditions to avoid stackoverflow later when IrWhen is visited,363f
"fun addElseBranchForExhaustiveWhenIfNeeded(irWhen: IrWhen, whenExpression: KtWhenExpression)","{
        val isUsedAsExpression = whenExpression.isUsedAsExpression(context.bindingContext)
        val isImplicitElseRequired =
            if (isUsedAsExpression)
                true == get(BindingContext.EXHAUSTIVE_WHEN, whenExpression)
            else
                true == get(BindingContext.IMPLICIT_EXHAUSTIVE_WHEN, whenExpression)
        if (isImplicitElseRequired) {
            val call = IrCallImpl.fromSymbolDescriptor(
                UNDEFINED_OFFSET, UNDEFINED_OFFSET,
                context.irBuiltIns.nothingType,
                context.irBuiltIns.noWhenBranchMatchedExceptionSymbol
            )
            irWhen.branches.add(elseBranch(call))
        }",,0e00
No signature found,"fun generateWhenBody(expression: KtWhenExpression, irSubject: IrVariable?, irWhen: IrWhen): IrExpression =
        i",,6e1f
fun generateWhenConditionNoSubject(ktCondition: KtWhenCondition),": IrExpression =
        (",,75a6
No signature found,"fun generateWhenConditionWithSubject(
        ktCondition: KtWhenCondition, irSubject: IrVariable, ktSubject: KtExpression?
    ): IrExpression {
        return when (ktCondition) {
            is KtWhenConditionWithExpression ->
                generateEqualsCondition(irSubject, ktCondition)
            is KtWhenConditionInRange ->
                generateInCondition(irSubject, ktCondition, ktSubject)
            is KtWhenConditionIsPattern ->
                generateIsPatternCondition(irSubject, ktCondition)
            else ->
                throw AssertionError(""Unexpected 'when' condition: ${ktCondition.text}",,6e1f
"fun generateIsPatternCondition(irSubject: IrVariable, ktCondition: KtWhenConditionIsPattern)",": IrExpression {
        val typeOperand = getOrFail(BindingContext.TYPE, ktCondition.typeReference)
        val irTypeOperand = typeOperand.toIrType()
        val startOffset = ktCondition.startOffsetSkippingComments
        val endOffset = ktCondition.endOffset
        val irInstanceOf = IrTypeOperatorCallImpl(
            startOffset, endOffset,
            context.irBuiltIns.booleanType,
            IrTypeOperator.INSTANCEOF,
            irTypeOperand,
            irSubject.loadAt(startOffset, startOffset)
        )
        return if (ktCondition.isNegated)
            primitiveOp1(
                ktCondition.startOffsetSkippingComments, ktCondition.endOffset,
                context.irBuiltIns.booleanNotSymbol,
                context.irBuiltIns.booleanType,
                IrStatementOrigin.EXCL,
                irInstanceOf
            )
        else
            irInstanceOf
    }",,0483
No signature found,"fun generateInCondition(irSubject: IrVariable, ktCondition: KtWhenConditionInRange, ktSubject: KtExpression?): IrExpression {
        val startOffset = ktCondition.startOffsetSkippingComments
        val endOffset = ktCondition.endOffset
        val inCall = statementGenerator.pregenerateCallUsing(getResolvedCall(ktCondition.operationReference)!!) {
            // In a `when` with a subject, `in x` is represented as `x.contains(<reference to subject expression>)`.
            if (it === ktSubject) irSubject.loadAt(startOffset, startOffset) else statementGenerator.generateExpression(it)
        }",,6e1f
"fun generateEqualsCondition(irSubject: IrVariable, ktCondition: KtWhenConditionWithExpression)",": IrExpression {
        val ktExpression = ktCondition.expression
        val irExpression = ktExpression!!.genExpr()
        val startOffset = ktCondition.startOffsetSkippingComments
        val endOffset = ktCondition.endOffset
        return OperatorExpressionGenerator(statementGenerator).generateEquality(
            startOffset, endOffset, IrStatementOrigin.EQEQ,
            irSubject.loadAt(startOffset, startOffset), irExpression,
            context.bindingContext[BindingContext.PRIMITIVE_NUMERIC_COMPARISON_INFO, ktExpression]
        )
    }",,6bd8
fun plus(ss: String),= s,"// TARGET_BACKEND: JVM
// JVM_TARGET: 1.8
// SAM_CONVERSIONS: INDY
// FULL_JDK

// CHECK_BYTECODE_TEXT
// JVM_IR_TEMPLATES
// 2 java/lang/invoke/LambdaMetafactory

// FILE: serializableBoundClassMemberFunRef.kt",fbf2
fun box(),": String {
    return roundtrip(Sam(C(""K"")::plus))
        .get(""O"")
}",,4f27
fun <T> roundtrip(x: T),": T {
    val out1 = ByteArrayOutputStream()
    ObjectOutputStream(out1).writeObject(x)
    return ObjectInputStream(ByteArrayInputStream(out1.toByteArray())).readObject() as T
}",,2092
fun validate(),"{
        super.validate()
        val kind = if (isStatic) NativeOutputKind.STATIC else NativeOutputKind.DYNAMIC
        check(kind.availableFor(target)) {
            ""Native artifact '$artifactName' wasn't configured because ${kind.description}",,102e
fun createArtifact(extensions: ExtensionAware),": KotlinNativeLibraryImpl {
        validate()
        return KotlinNativeLibraryImpl(
            artifactName = artifactName,
            modules = modules,
            modes = modes,
            isStatic = isStatic,
            linkerOptions = linkerOptions,
            kotlinOptionsFn = kotlinOptionsFn,
            toolOptionsConfigure = toolOptionsConfigure,
            binaryOptions = binaryOptions,
            target = target,
            extensions = extensions
        )
    }",,c0d7
fun getName(),= l,,4692
fun registerAssembleTask(project: Project),"{
        val resultTask = project.registerTask<Task>(taskName) { task ->
            task.group = BasePlugin.BUILD_GROUP
            task.description = ""Assemble all types of registered '$artifactName' ${kind.description}",,6c36
fun foo(),= B,// !RENDER_ALL_DIAGNOSTICS_FULL_TEXT,519f
fun bar(),= A,,66c3
fun divAssign(a: Int),"{
        c1++;
    }",// EXPECTED_REACHABLE_NODES: 1290,d940
fun times(a: Int),": A {
        c2++;
        return this;
    }",,c94a
fun box(),": String {

    a /= 3
    if (c0 != 1) {
        return ""1""
    }",,4f27
fun foo(),"constructor} class B {

}",,519f
fun run(),": String
}

inline fun test(s: () -> Call = {","// NO_CHECK_LAMBDA_INLINING

// FILE: 1.kt",354f
fun run(),"= """,,354f
fun box(),": String {
    val inlined = test()
    if (same.run() != ""OK"") return ""fail 1: ${same.run()}",,4f27
fun getX(),= 1,// FIR_IDENTICAL,5bf4
fun main(),"{
    ::<!UNRESOLVED_REFERENCE!>Inner<!>
    val y = A::Inner

    checkSubtype<KFunction1<A, A.Inner>>(y)
}","// FIR_IDENTICAL
// !CHECK_TYPE
// !DIAGNOSTICS: -UNUSED_EXPRESSION",d987
No signature found,"fun KtFirType.typeEquals(other: Any?): Boolean {
    if (other !is KtFirType) return false
    return this.coneType == other.coneType
}",,6e1f
No signature found,fun KtFirType.typeHashcode(): Int = c,,6e1f
No signature found,fun ConeNullability.asKtNullability(): KtTypeNullability = w,,6e1f
No signature found,"fun bar(x: () -> Unit) {
    contract {
        callsInPlace(x, InvocationKind.EXACTLY_ONCE)
    }",// !DUMP_CFG,6e1f
No signature found,"fun (() -> Unit).baz() {
    contract {
        callsInPlace(this@baz, InvocationKind.AT_MOST_ONCE)
    }",,6e1f
No signature found,"fun foo(x: () -> Unit, y: () -> Unit) {
    contract {
        callsInPlace(x, InvocationKind.AT_LEAST_ONCE)
        callsInPlace(y, InvocationKind.AT_MOST_ONCE)
    }",,6e1f
fun o(k: String),= A,"// EXPECTED_REACHABLE_NODES: 1269

// MODULE: lib
// FILE: lib.kt",1084
fun box(),= B,,4f27
fun deserializeClassId(dataStream: StubInputStream),": ClassId? {
        val classId = dataStream.readName() ?: return null
        return ClassId.fromString(classId.string)
    }",,cfcd
No signature found,"fun serializeClassId(dataStream: StubOutputStream, classId: ClassId?) {
        dataStream.writeName(classId?.asString())
    }",,6e1f
No signature found,"fun createNestedClassId(parentStub: StubElement<*>, currentDeclaration: KtClassLikeDeclaration): ClassId? = w",,6e1f
fun isSchemeFile(name: CharSequence),= n,,cdea
No signature found,fun isSchemeFile(name: CharSequence = g,,6e1f
No signature found,fun anotherFunction(name: CharSequence = g,,6e1f
fun <T> genericCall(),: T = n,,38be
fun test(a: Any),"{
    if (a is String) {
        <expr>a</expr>.length
    }",,6d57
No signature found,"fun dslSpeedTest(f2: SomeTest.() -> Unit) {
    <expr>f2()</expr>
}",,6e1f
No signature found,"fun check(resolvedCall: ResolvedCall<*>, reportOn: PsiElement, context: CallCheckerContext) {
        if (!isApiVersionIsAtLeast(resolvedCall.resultingDescriptor)) return

        val bindingContext = context.trace.bindingContext
        val shouldInlineConstVals = context.languageVersionSettings.supportsFeature(LanguageFeature.InlineConstVals)

        for ((_, resolvedValueArgument) in resolvedCall.valueArguments) {
            for (valueArgument in resolvedValueArgument.arguments) {
                val ktExpression =  KtPsiUtil.deparenthesize(valueArgument.getArgumentExpression() ?: continue) ?: continue

                val constant = getCompileTimeConstant(ktExpression, bindingContext, false, shouldInlineConstVals)
                if (constant == null) {
                    context.trace.report(ErrorsJvm.API_VERSION_IS_AT_LEAST_ARGUMENT_SHOULD_BE_CONSTANT.on(ktExpression))
                }",,6e1f
fun isApiVersionIsAtLeast(descriptor: CallableDescriptor),": Boolean {
        val functionDescriptor = descriptor as? FunctionDescriptor ?: return false

        if (functionDescriptor.name.asString() != ""apiVersionIsAtLeast"") return false

        val returnType = functionDescriptor.returnType ?: return false
        if (!KotlinBuiltIns.isBoolean(returnType)) return false

        if (!functionDescriptor.valueParameters.all { KotlinBuiltIns.isInt(it.type) }",,b63d
fun x(),{},"// FIR_IDENTICAL
// !DIAGNOSTICS: -UNUSED_PARAMETER",7869
fun f1(),: KProperty<Int> = A,,ed85
fun f2(),: (A) -> Unit = A,,e1c0
fun useAnnGen1(x: TestAnnGen1),= x,// FIR_IDENTICAL,1b92
fun useAnnGen2(x: TestAnnGen2),= x,,f5ce
fun cleanup(),"{
        debugLog.clear()
    }",,dfda
fun assertTrue(),"{
        val error = assertFailsWith<AssertionError> { assertTrue(Person.UNKNOWN.size == 1) }",,a9b6
fun require(),"{
        val error = assertFailsWith<IllegalArgumentException> { require(Person.UNKNOWN.size == 1) }",,ca30
fun excludedRequire(),"{
        val error = assertFailsWith<IllegalArgumentException> { Person("""", """") }",,4da5
fun softAssert(),"{
        val unknown: List<Person>? = Person.UNKNOWN
        assert(unknown != null)
        assert(unknown.size == 2)

        val error = assertFailsWith<AssertionError> {
            val jane: Person
            val john: Person
            assertSoftly {
                jane = unknown[0]
                assert(jane.firstName == ""Jane"")
                assert(jane.lastName == ""Doe"") { ""bad jane last name"" }",,600d
fun dbgTest(),"{
        val name = ""Jane""
        val greeting = dbg(""Hello, $name"")
        assert(greeting == ""Hello, Jane"")
        assertEquals(
            actual = debugLog.toString().trim(),
            expected = """"""
                dbg(""Hello, ${""$""}",,814a
fun dbgMessageTest(),"{
        val name = ""Jane""
        val greeting = dbg(""Hello, $name"", ""Greeting:"")
        assert(greeting == ""Hello, Jane"")
        assertEquals(
            actual = debugLog.toString().trim(),
            expected = """"""
                Greeting:
                dbg(""Hello, ${""$""}",,cead
No signature found,"fun testSimpleReport(gradleVersion: GradleVersion, @TempDir tempDir: Path) {
        publishLibrary(""preHmppLibrary"", gradleVersion, tempDir)
        checkDiagnostics(gradleVersion, ""simpleReport"", tempDir, expectReportForDependency = ""preHmppLibrary"")
    }",,6e1f
No signature found,"fun testReportFromIntermediateSourceSet(gradleVersion: GradleVersion, @TempDir tempDir: Path) {
        publishLibrary(""preHmppLibrary"", gradleVersion, tempDir)
        checkDiagnostics(gradleVersion, ""reportFromIntermediateSourceSet"", tempDir, expectReportForDependency = ""preHmppLibrary"")
    }",,6e1f
No signature found,"fun testTransitiveDependencyUpgradesVersion(gradleVersion: GradleVersion, @TempDir tempDir: Path) {
        // 0.1
        publishLibrary(""preHmppLibrary"", gradleVersion, tempDir)

        // 0.2 -- still pre-HMPP
        publishLibrary(""preHmppLibrary"", gradleVersion, tempDir) {
            buildGradleKts.replaceText(""0.1"", ""0.2"")
        }",,6e1f
No signature found,"fun noReportFromTransitiveDependencies(gradleVersion: GradleVersion, @TempDir tempDir: Path) {
        publishLibrary(""preHmppLibrary"", gradleVersion, tempDir)
        publishLibrary(""hmppLibraryWithPreHmppInDependencies"", gradleVersion, tempDir)
        checkDiagnostics(gradleVersion, ""reportFromTransitiveDependencies"", tempDir)
    }",,6e1f
No signature found,"fun noReportWhenSuppressed(gradleVersion: GradleVersion, @TempDir tempDir: Path) {
        publishLibrary(""preHmppLibrary"", gradleVersion, tempDir)
        checkDiagnostics(gradleVersion, ""simpleReport"", tempDir) {
            gradleProperties.writeText(""kotlin.mpp.allow.legacy.dependencies=true"")
        }",,6e1f
fun testNoWarningsOnPopularDependencies(gradleVersion: GradleVersion),"{
        checkDiagnostics(gradleVersion, ""noWarningsOnPopularDependencies"")
    }",,be8c
fun testNoWarningsOnKotlinTestIfAddedInCommonMain(gradleVersion: GradleVersion),"{
        checkDiagnostics(gradleVersion, ""noWarningsOnKotlinTestIfAddedInCommonMain"")
    }",,eebf
fun testNoWarningsOnProjectDependencies(gradleVersion: GradleVersion),"{
        checkDiagnostics(gradleVersion, ""noWarningsOnProjectDependencies"", projectPathToCheck = "":consumer"")
    }",,ec40
No signature found,"fun testNoWarningsInPlatformSpecificSourceSetsOrTests(gradleVersion: GradleVersion, @TempDir tempDir: Path) {
        publishLibrary(""preHmppLibrary"", gradleVersion, tempDir)
        checkDiagnostics(gradleVersion, ""noWarningsInPlatformSpecificSourceSetsOrTests"", tempDir)
    }",,6e1f
No signature found,"fun checkDiagnostics(
        gradleVersion: GradleVersion,
        projectName: String,
        tempDir: Path? = n",,6e1f
No signature found,"fun publishLibrary(name: String, gradleVersion: GradleVersion, tempDir: Path, prePublishAction: TestProject.() -> Unit = {",,6e1f
"fun saveKDocComment(tree: JCTree, node: Any)","{
        val origin = kaptContext.origins[node] ?: return
        val psiElement = origin.element as? KtDeclaration ?: return
        val descriptor = origin.descriptor
        val docComment = psiElement.docComment ?: return

        if (descriptor is ConstructorDescriptor && psiElement is KtClassOrObject) {
            // We don't want the class comment to be duplicated on <init>()
            return
        }",,1a9f
No signature found,"fun getDocTable(file: JCTree.JCCompilationUnit): DocCommentTable {
        val map = docCommentTable.takeIf { it.map.isNotEmpty() }",,6e1f
No signature found,"fun visitVarDef(def: JCTree.JCVariableDecl) {
                if (!removeComments && (def.modifiers.flags and Opcodes.ACC_ENUM.toLong()) != 0L) {
                    map.removeComment(def)

                    removeComments = true
                    super.visitVarDef(def)
                    removeComments = false
                    return
                }",,6e1f
No signature found,"fun scan(tree: JCTree?) {
                if (removeComments && tree != null) {
                    map.removeComment(tree)
                }",,6e1f
"fun saveKDocComment(tree: JCTree, comment: KDoc)","{
        docCommentTable.putComment(tree, KDocComment(extractComment(comment)))
    }",,58c0
fun getSourcePos(index: Int),= -,,569f
fun getStyle(),= T,,a2c2
fun getText(),= b,,dac9
fun isDeprecated(),= f,,b4f8
fun hasComment(tree: JCTree),= t,,ee8d
fun getComment(tree: JCTree),= t,,fb59
fun getCommentText(tree: JCTree),= g,,c417
fun getCommentTree(tree: JCTree),: DCTree.DCDocComment? = n,,39a1
No signature found,"fun putComment(tree: JCTree, c: Tokens.Comment) {
        table[tree] = c
    }",,6e1f
fun removeComment(tree: JCTree),"{
        table.remove(tree)
    }",,a816
fun extractComment(comment: KDoc),= e,,1eb9
fun escapeNestedComments(text: String),": String {
    val result = StringBuilder()

    var index = 0
    var commentLevel = 0

    while (index < text.length) {
        val currentChar = text[index]
        fun nextChar() = text.getOrNull(index + 1)

        if (currentChar == '/' && nextChar() == '*') {
            commentLevel++
            index++
            result.append(""/ *"")
        }",,91b4
fun extractCommentText(docComment: KDoc),": String {
    return buildString {
        docComment.accept(object : PsiRecursiveElementVisitor() {
            override fun visitElement(element: PsiElement) {
                if (element is LeafPsiElement) {
                    if (element.isKDocLeadingAsterisk()) {
                        val indent = takeLastWhile { it == ' ' || it == '\t' }",,780b
No signature found,fun LeafPsiElement.isKDocStart() = e,,6e1f
No signature found,fun LeafPsiElement.isKDocEnd() = e,,6e1f
No signature found,fun LeafPsiElement.isKDocLeadingAsterisk() = e,,6e1f
fun suspendThere(v: String),: String = s,"// WITH_STDLIB
// WITH_COROUTINES
// CHECK_BYTECODE_LISTING
// FIR_IDENTICAL
// CHECK_NEW_COUNT: function=suspendHere count=0 TARGET_BACKENDS=JS
// FIXME: Coroutine inlining
// CHECK_NEW_COUNT: function=complexSuspend count=0 TARGET_BACKENDS=JS",4d2d
fun suspendHere(),: String = s,,3da9
fun complexSuspend(),": String {
    return run {
        suspendThere(""K"")
    }",,cf14
No signature found,"fun builder(c: suspend () -> Unit) {
    c.startCoroutine(EmptyContinuation)
}",,6e1f
fun box(),": String {
    var result = """"

    builder {
        result = suspendHere() + complexSuspend()
    }",,4f27
No signature found,fun <T> bar(x: Inv<T>.() -> Unit) = x,// WITH_STDLIB,6e1f
fun box(),": String {
    listOf(
        bar<Char> { }",,4f27
fun foo(),"{
    bar()!!
}",// FIR_IDENTICAL,519f
fun bar(),= <,,66c3
fun foo(),"}

expect open class Foo : Base

// MODULE: m2-jvm()()(m1-common)
// FILE: jvm.kt

actual open class Foo : Base {
    final override fun <!ACTUAL_WITHOUT_EXPECT!>foo<!>() {}","// MODULE: m1-common
// FILE: common.kt",519f
No signature found,"fun Boolean.takeRight(cond: Boolean): Boolean {
    contract { returns(true) implies cond }","// ISSUE: KT-27261
// WITH_STDLIB",6e1f
No signature found,"fun Boolean?.ensureLeft(x: Any): Boolean {
    contract { returns(true) implies (this@ensureLeft != null) }",,6e1f
"fun test_1(b: Boolean, x: Any)","{
    if (b takeRight (x is String)) {
        x.length
    }",,024c
No signature found,"fun test_2(b: Boolean?, x: Any) {
    if (b ensureLeft (x is String)) {
        b.not()
    }",,6e1f
fun fn(),{},"// FIR_IDENTICAL
// !CHECK_TYPE
// FILE: A.java",8fa7
fun x(r: Runnable),"{
    A.foo(::fn) checkType { _<Int>() }",,4167
No signature found,fun Int.mod(other: Int) = 1,"// FIR_IDENTICAL
// !DIAGNOSTICS: -UNUSED_VARIABLE, -UNUSED_PARAMETER",6e1f
No signature found,fun Int.floorDiv(other: Int): Int = 2,,6e1f
No signature found,"fun foo(x: String?): Int {
    do {
        // After the check, smart cast should work
        x ?: x!!.length
        // x is not null in both branches
        if (<!DEBUG_INFO_SMARTCAST!>x<!>.length == 0) break
    }",,6e1f
fun <T> foo(t: T),": String where T : A, T : B, T : C, T : D
    : String where T : K, T : Inv<B>, T : A?
    : String where T : Inv<out Inv<in C>>, T : Any
}

class Y : X {
    override : String where T : A, T : C, T : B, T : D = ""1""
    override : String where T : K, T : A?, T : Inv<B> = ""2""
    override : String where T : Any, T : Inv<out Inv<in C>> = ""3""
}",,ebc5
fun box(),": String {
    val abcd = object : A, B, C, D {}",,4f27
No signature found,"fun test1(x:Any?) {
    if (x is A || x !is B) {
        var k: B? = <!INITIALIZER_TYPE_MISMATCH!>x<!>
        var k2: A? = <!INITIALIZER_TYPE_MISMATCH!>x<!>
        var k3: Any? = x
    }","// ISSUE: KT-1982
// DIAGNOSTICS: -DEBUG_INFO_SMARTCAST",6e1f
No signature found,"fun test2(x:Any?) {
    if (x is A || x is B) {
        var k: B = <!INITIALIZER_TYPE_MISMATCH!>x<!>
        var k2: A = x
        var k3: Any = x
    }",,6e1f
No signature found,"fun test3(x:Any?) {
    if (x !is A || x is B) {
        var k: B = <!INITIALIZER_TYPE_MISMATCH!>x<!>
        var k2: A = <!INITIALIZER_TYPE_MISMATCH!>x<!>
        var k3: Any? = x
    }",,6e1f
No signature found,"fun test4(x:Any?) {
    if (x is A || x is B || x == null) {
        var k: B? = <!INITIALIZER_TYPE_MISMATCH!>x<!>
        var k2: A? = x
        var k3: Any? = x
    }",,6e1f
No signature found,"fun test5(x:Any?) {
    if (x is C2 || x is B2) {
        var k: B2 = <!INITIALIZER_TYPE_MISMATCH!>x<!>
        var k2: A2 = x
        var k3: C2 = <!INITIALIZER_TYPE_MISMATCH!>x<!>
        var k4: Any = x
    }",,6e1f
No signature found,"fun test6(x:Any?) {
    if (x is C2 || x !is B2) {
        var k: B2 = <!INITIALIZER_TYPE_MISMATCH!>x<!>
        var k2: A2 = <!INITIALIZER_TYPE_MISMATCH!>x<!>
        var k3: C2 = <!INITIALIZER_TYPE_MISMATCH!>x<!>
        var k4: Any? = x
    }",,6e1f
No signature found,"fun test7(x:Any?) {
    if (x is A2 || x !is B2) {
        var k: B2 = <!INITIALIZER_TYPE_MISMATCH!>x<!>
        var k2: A2 = <!INITIALIZER_TYPE_MISMATCH!>x<!>
        var k3: C2 = <!INITIALIZER_TYPE_MISMATCH!>x<!>
        var k4: Any? = x
    }",,6e1f
No signature found,"fun test8(x:Any?) {
    if (x is A2 || x is B2) {
        var k: B2 = <!INITIALIZER_TYPE_MISMATCH!>x<!>
        var k2: A2 = x
        var k3: C2 = <!INITIALIZER_TYPE_MISMATCH!>x<!>
        var k4: Any? = x
    }",,6e1f
No signature found,"fun test9(x:Any?) {
    if (x !is A2 || x is B2) {
        var k: B2 = <!INITIALIZER_TYPE_MISMATCH!>x<!>
        var k2: A2 = <!INITIALIZER_TYPE_MISMATCH!>x<!>
        var k3: C2 = <!INITIALIZER_TYPE_MISMATCH!>x<!>
        var k4: Any? = x
    }",,6e1f
No signature found,"fun test10(x:Any?) {
    if (x !is A2 || x is B2) {
        var k: B2 = <!INITIALIZER_TYPE_MISMATCH!>x<!>
        var k2: A2 = <!INITIALIZER_TYPE_MISMATCH!>x<!>
        var k3: C2 = <!INITIALIZER_TYPE_MISMATCH!>x<!>
        var k4: Any? = x
    }",,6e1f
No signature found,"fun test11(x:A2?) {
    if (x !is B2 || <!USELESS_IS_CHECK!>x is B2<!>) {
        var k: A2? = x
    }",,6e1f
fun foo(),{},"//  Interface  AnotherInterface
//          \  /
//           \/
//     DerivedInterface
//",519f
fun ambiguous(),{},,58ad
fun ambiguous(),{},,58ad
fun foo(),{ super.foo() },,519f
fun ambiguous(),"{
        <!AMBIGUOUS_SUPER!>super<!>.<!DEBUG_INFO_MISSING_UNRESOLVED!>ambiguous<!>()
    }",,58ad
No signature found,"fun runSuspend(c: (suspend () -> Unit)?) {
    c?.startCoroutine(EmptyContinuation)
}","// !LANGUAGE: +SuspendConversion
// WITH_STDLIB
// WITH_COROUTINES",6e1f
fun foo(),"{ test = ""OK"" }",,519f
fun box(),": String {
    runSuspend(::foo)
    return test
}",,4f27
"fun check(expression: FirFunctionCall, context: CheckerContext, reporter: DiagnosticReporter)","{
        checkNotFunctionAsOperator(expression, expression.dispatchReceiver, context, reporter)
        checkNotFunctionAsOperator(expression, expression.extensionReceiver, context, reporter)
        val calleeReference = expression.calleeReference as? FirErrorNamedReference ?: return
        val diagnostic = calleeReference.diagnostic as? ConeUnresolvedNameError ?: return

        if (expression.calleeReference.source?.kind == KtFakeSourceElementKind.ArrayAccessNameReference) {
            when (diagnostic.name) {
                OperatorNameConventions.GET -> reporter.reportOn(calleeReference.source, FirErrors.NO_GET_METHOD, context)
                OperatorNameConventions.SET -> reporter.reportOn(calleeReference.source, FirErrors.NO_SET_METHOD, context)
            }",,72c2
No signature found,"fun checkNotFunctionAsOperator(
        callExpression: FirFunctionCall,
        receiver: FirExpression?,
        context: CheckerContext,
        reporter: DiagnosticReporter
    ) {
        if (callExpression.dispatchReceiver?.resolvedType is ConeDynamicType) return
        // KT-61905: TODO: Return also in case of error type.
        val unwrapped = receiver?.unwrapSmartcastExpression() ?: return
        val nonFatalDiagnostics = when (unwrapped) {
            is FirQualifiedAccessExpression -> unwrapped.nonFatalDiagnostics
            is FirResolvedQualifier -> unwrapped.nonFatalDiagnostics
            else -> return
        }",,6e1f
fun main(),"{
    val c = <expr>C</expr>()
    c.property -= 20
    println(C().property)
}",,d987
No signature found,"fun Project.resolveNativeDistributionLibraryForIde(
    library: File,
    target: CommonizerTarget,
    logger: Logger? = n",,6e1f
No signature found,"fun <T, R> (suspend () -> T).map(crossinline transform: suspend (T) -> R): suspend () -> R =
    {","// WITH_STDLIB
// WITH_COROUTINES
// FILE: 1.kt",6e1f
fun box(),": String {
    var result = ""fail""
    suspend {
        result = suspend { C(""OK"") }",,4f27
No signature found,fun useX(x: X<Int?>): String = i,"// WITH_STDLIB
// WORKS_WHEN_VALUE_CLASS
// LANGUAGE: +ValueClasses, +GenericInlineClassParameter",6e1f
No signature found,fun <T> call(fn: () -> T) = f,,6e1f
fun box(),= u,,4f27
No signature found,"fun safeIsString(x: Any?): Boolean? {
    contract {
        returns(true) implies (x is String)
    }","// !LANGUAGE: +AllowContractsForCustomFunctions +UseReturnsEffect
// !OPT_IN: kotlin.contracts.ExperimentalContracts
// !DIAGNOSTICS: -INVISIBLE_REFERENCE -INVISIBLE_MEMBER",6e1f
No signature found,"fun elseWithNullableResult(x: Any?) {
    when (safeIsString(x)) {
        false -> x.<!UNRESOLVED_REFERENCE!>length<!>
        else -> x.<!UNRESOLVED_REFERENCE!>length<!>
    }",,6e1f
No signature found,"fun exhaustiveWithNullableResult(x: Any?) {
    when (safeIsString(x)) {
        true -> x.length
        false -> x.<!UNRESOLVED_REFERENCE!>length<!>
        null -> x.<!UNRESOLVED_REFERENCE!>length<!>
    }",,6e1f
fun <T> suspendAndLog(value: T),: T = s,"// WITH_STDLIB
// WITH_COROUTINES",7a66
No signature found,"fun builder(c: suspend Controller.() -> String): String {
    val controller = Controller()
    c.startCoroutine(controller, handleResultContinuation {
        controller.result += ""return($it);""
    }",,6e1f
No signature found,"fun builderUnit(c: suspend Controller.() -> Unit): String {
    val controller = Controller()
    c.startCoroutine(controller, handleResultContinuation {
        controller.result += ""return;""
    }",,6e1f
fun <T> id(value: T),= v,,a806
fun box(),": String {
    var value = builder {
        try {
            if (id(23) == 23) {
                return@builder suspendAndLog(""OK"")
            }",,4f27
No signature found,"fun test(func: (LeafBuilderConfigurationContext) -> Unit) {
        val context = LeafBuilderConfigurationContext()
        func(context)
    }",,6e1f
No signature found,"fun foo(x: (Inner) -> Unit, y: Inner.() -> Unit) {
        // each call reported as INAPPLICABLE because ""Inner<E> is not a subtype of Inner""
        bar(Inner())
        x(Inner())
        Inner().y()
    }",,6e1f
fun bar(i: Inner),{},,b740
fun test(t: Throwable),"{
    t.fillInStackTrace()
}","// FULL_JDK
// ISSUE: KT-39044",4c5a
fun toString(),": String {
        return type.toString()
    }",,a535
No signature found,fun <T : Cloneable?> bar() : Unit = U,// TARGET_BACKEND: JVM,6e1f
fun compareAndUpdate(newFiles: Iterable<File>),": ChangedFiles.Known {
        val snapshotProvider = SimpleFileSnapshotProviderImpl()
        val newOrModified = ArrayList<File>()
        val removed = ArrayList<File>()

        val newFilesSet = newFiles.toSet()
        for (oldFile in keys) {
            if (oldFile !in newFilesSet) {
                remove(oldFile)
                removed.add(oldFile)
            }",,c403
"fun doTestByMainFile(mainFile: KtFile, mainModule: KtTestModule, testServices: TestServices)","{
        val project = mainFile.project

        val resolveSession = mainModule.ktModule.getFirResolveSession(project)
        val firFile = mainFile.getOrBuildFirFile(resolveSession)

        val compilationPeerData = CompilationPeerCollector.process(firFile)

        val actualItems = compilationPeerData.files.map { ""File "" + it.name }",,5016
"fun check(expression: FirAnnotationCall, context: CheckerContext, reporter: DiagnosticReporter)","{
        val annotationType = expression.annotationTypeRef.coneType.fullyExpandedType(context.session) as? ConeClassLikeType ?: return
        val resolvedAnnotationSymbol = annotationType.lookupTag.toFirRegularClassSymbol(context.session) ?: return
        when (val annotationClassId = resolvedAnnotationSymbol.classId) {
            in TYPE_PARCELER_CLASS_IDS -> {
                if (checkDeprecatedAnnotations(expression, annotationClassId, context, reporter, isForbidden = true)) {
                    checkTypeParcelerUsage(expression, context, reporter)
                }",,c89b
"fun checkDeprecatedAnnotations(
        annotationCall: FirAnnotationCall,
        annotationClassId: ClassId,
        context: CheckerContext,
        reporter: DiagnosticReporter,
        isForbidden: Boolean
    )",": Boolean {
        if (annotationClassId.packageFqName == DEPRECATED_RUNTIME_PACKAGE) {
            val factory = if (isForbidden) KtErrorsParcelize.FORBIDDEN_DEPRECATED_ANNOTATION else KtErrorsParcelize.DEPRECATED_ANNOTATION
            reporter.reportOn(annotationCall.source, factory, context)
            return false
        }",,6f34
"fun checkTypeParcelerUsage(annotationCall: FirAnnotationCall, context: CheckerContext, reporter: DiagnosticReporter)","{
        val thisMappedType = annotationCall.typeArguments.takeIf { it.size == 2 }",,fbac
"fun checkForRedundantTypeParceler(
        enclosingClass: FirClass,
        annotationType: ConeClassLikeType,
        context: CheckerContext,
    )",": Boolean {
        return enclosingClass.annotations
            .mapNotNull { it.toAnnotationClassLikeType(context.session) }",,91d3
"fun checkWriteWithUsage(annotationCall: FirAnnotationCall, context: CheckerContext, reporter: DiagnosticReporter)","{
        checkIfTheContainingClassIsParcelize(annotationCall, context, reporter)

        // For `@WriteWith<P>` check that `P` is an object.
        val parcelerType = annotationCall.typeArguments.singleOrNull()?.toConeTypeProjection()?.type ?: return
        val parcelerTypeSymbol = parcelerType.toRegularClassSymbol(context.session)
        if (parcelerTypeSymbol?.classKind != ClassKind.OBJECT) {
            val reportElement = annotationCall.typeArguments.singleOrNull()?.source ?: annotationCall.source
            reporter.reportOn(reportElement, KtErrorsParcelize.PARCELER_SHOULD_BE_OBJECT, context)
        }",,e1d4
"fun checkIfTheContainingClassIsParcelize(annotationCall: FirAnnotationCall, context: CheckerContext, reporter: DiagnosticReporter)","{
        val enclosingClass = context.findClosestClassOrObject() ?: return

        if (!enclosingClass.symbol.isParcelize(context.session, parcelizeAnnotationClassIds)) {
            val reportElement = annotationCall.calleeReference.source ?: annotationCall.source
            reporter.reportOn(reportElement, KtErrorsParcelize.CLASS_SHOULD_BE_PARCELIZE, enclosingClass.symbol, context)
        }","// For `@WriteWith<P> T` where `P` is a subtype of `Parceler<E>`, check that T is a subtype of E.
        //
        // From the perspective of the `WriteWith` annotation call, `T` corresponds to the nearest enclosing annotation container
        // stripped of annotations.
        //
        // It's safe to assume that `Parceler` refers to `kotlinx.parcelize.Parceler` rather than `kotlinx.android.parcel.Parceler`,
        // since using the deprecated `WriteWith` annotation is an error.",7d65
No signature found,fun Int.foo(a: Int = 1,,6e1f
fun test(),": String {
        if (1.foo() != 1) return ""fail""
        if (1.foo(2) != 2) return ""fail""
        return ""OK""
    }",,fe98
fun box(),": String  {
   return A.test()
}",,4f27
fun checkTrue(),": Boolean {
        var hit = false
        val l = { hit = true; true }","// TARGET_BACKEND: JVM
// ASSERTIONS_MODE: jvm
// WITH_STDLIB",6a1b
fun checkFalse(),": Boolean {
        var hit = false
        val l = { hit = true; false }",,f255
fun checkTrueWithMessage(),": Boolean {
        var hit = false
        val l = { hit = true; true }",,ae4c
fun checkFalseWithMessage(),": Boolean {
        var hit = false
        val l = { hit = true; false }",,899c
fun enableAssertions(),": Checker {
    val loader = Dummy::class.java.classLoader
    loader.setPackageAssertionStatus(""interfaceAssertionsEnabled"", true)
    val c = loader.loadClass(""interfaceAssertionsEnabled.ShouldBeEnabled"")
    return c.newInstance() as Checker
}",,09a4
fun box(),": String {
    var c = enableAssertions()
    if (!c.checkTrue()) return ""FAIL 0""
    if (!c.checkTrueWithMessage()) return ""FAIL 1""
    try {
        c.checkFalse()
        return ""FAIL 2""
    }",,4f27
"fun overloadedFun(arg: String, vararg args: String)",= X,"// !LANGUAGE: +ProhibitAssigningSingleElementsToVarargsInNamedForm
// !DIAGNOSTICS: -UNUSED_PARAMETER",4cae
No signature found,"fun overloadedFun(arg: String, vararg args: String, flag: Boolean = t",,6e1f
fun foo(),"{/* DeclarationStructureElement */
    println("""")
}",,519f
fun getInstance(),: MppTestReportHelper = M,,da61
"fun reportFailure(
        results: TestResultProcessor,
        id: Any,
        failure: KotlinTestFailure,
        isAssertionFailure: Boolean,
    )","{
        results.failure(
            id,
            failure,
        )
    }",,810f
"fun createDelegatingTestReportProcessor(origin: TestResultProcessor, targetName: String)","=
        o",,3c65
"fun started(test: TestDescriptorInternal, event: TestStartEvent)","{
                val myTest = object : TestDescriptorInternal by test {
                    override fun getDisplayName(): String = ""${test.displayName}",,6883
fun getClassName(),: String? = t,,db68
fun getClassDisplayName(),: String? = t,,59c7
fun test(),"{
        val x = <expr>someField</expr>
    }",,fe98
No signature found,fun foo(x: Int = 9,,6e1f
fun getProjectedInputCallTypes(utilContext: ConstraintSystemUtilContext),": Collection<Pair<KotlinTypeMarker, ConstraintKind>> {
        return with(utilContext) {
            mutableConstraints
                .mapNotNullTo(SmartList()) {
                    if (it.position.from is OnlyInputTypeConstraintPosition || it.inputTypePositionBeforeIncorporation != null)
                        it.type.unCapture() to it.kind
                    else null
                }",,e2a3
fun clearGroupedConstraintCaches(),"{
        constraintsGroupedByContainedTypeVariables = null
        constraintsGroupedByTypeHashCode = null
    }",,241b
fun getConstraintsContainedSpecifiedTypeVariable(typeVariableConstructor: TypeConstructorMarker),": Collection<Constraint> {
        if (constraintsGroupedByContainedTypeVariables == null) {
            constraintsGroupedByContainedTypeVariables = computeConstraintsGroupedByContainedTypeVariables()
        }",,fb0b
fun computeConstraintsGroupedByContainedTypeVariables(),": Map<TypeConstructorMarker, Collection<Constraint>> =
        b",,2882
fun getConstraintsWithSameTypeHashCode(c: Constraint),": List<Constraint> {
        if (constraintsGroupedByTypeHashCode == null) {
            constraintsGroupedByTypeHashCode = constraints.groupByTo(mutableMapOf(), Constraint::typeHashCode)
        }",,8653
fun addConstraint(constraint: Constraint),": Pair<Constraint, Boolean> {
        val isLowerAndFlexibleTypeWithDefNotNullLowerBound = constraint.isLowerAndFlexibleTypeWithDefNotNullLowerBound()

        for (previousConstraint in getConstraintsWithSameTypeHashCode(constraint)) {
            if (previousConstraint.type == constraint.type
                && previousConstraint.isNullabilityConstraint == constraint.isNullabilityConstraint
            ) {
                val noNewCustomAttributes = with(context) {
                    val previousType = previousConstraint.type
                    val type = constraint.type
                    (!previousType.hasCustomAttributes() && !type.hasCustomAttributes()) ||
                            (previousType.getCustomAttributes() == type.getCustomAttributes())
                }",,6d1a
fun addConstraintToCacheByTypeHashCode(constraint: Constraint),"{
        constraintsGroupedByTypeHashCode?.getOrPut(constraint.typeHashCode) { mutableListOf() }",,6021
fun removeLastConstraints(sinceIndex: Int),"{
        mutableConstraints.trimToSize(sinceIndex)
        if (simplifiedConstraints !== mutableConstraints) {
            simplifiedConstraints = null
        }",,0883
No signature found,"fun removeConstrains(shouldRemove: (Constraint) -> Boolean) {
        mutableConstraints.removeAll(shouldRemove)
        if (simplifiedConstraints !== mutableConstraints) {
            simplifiedConstraints = null
        }",,6e1f
"fun newConstraintIsUseless(old: Constraint, new: Constraint)",": Boolean {
        // Constraints from declared upper bound are quite special -- they aren't considered as a proper ones
        // In other words, user-defined constraints have ""higher"" priority and here we're trying not to loose them
        if (old.position.from is DeclaredUpperBoundConstraintPosition<*> && new.position.from !is DeclaredUpperBoundConstraintPosition<*>)
            return false

        /*
         * We discriminate upper expected type constraints during finding a result type to fix variable (see ResultTypeResolver.kt):
         * namely, we don't intersect the expected type with other upper constraints' types to prevent cases like this:
         *  fun <T : String> materialize(): T = null as T
         *  val bar: Int = materialize() // T is inferred into String & Int without discriminating upper expected type constraints
         * So here we shouldn't lose upper non-expected type constraints.
         */
        if (old.position.from is ExpectedTypeConstraintPosition<*> && new.position.from !is ExpectedTypeConstraintPosition<*> && old.kind.isUpper() && new.kind.isUpper())
            return false

        return when (old.kind) {
            ConstraintKind.EQUALITY -> true
            ConstraintKind.LOWER -> new.kind.isLower()
            ConstraintKind.UPPER -> new.kind.isUpper()
        }",,ad9a
No signature found,"fun SmartList<Constraint>.simplifyConstraints(): SmartList<Constraint> =
        s",,6e1f
No signature found,"fun SmartList<Constraint>.simplifyLowerConstraints(): SmartList<Constraint> {
        val usefulConstraints = SmartList<Constraint>()
        for (constraint in this) {
            if (!constraint.isLowerAndFlexibleTypeWithDefNotNullLowerBound()) {
                usefulConstraints.add(constraint)
                continue
            }",,6e1f
No signature found,"fun Constraint.isLowerAndFlexibleTypeWithDefNotNullLowerBound(): Boolean {
        return with(context) {
            kind == ConstraintKind.LOWER && type.isFlexible() && type.lowerBoundIfFlexible().isDefinitelyNotNullType()
        }","// Now we have to check that some constraint T!!.T? <: K is useless or not
            // If there is constraint T..T? <: K, then the original one (T!!.T?) is useless
            // This is so because CST(T..T?, T!!..T?) == CST(T..T?)",6e1f
No signature found,"fun Constraint.isStrongerThanLowerAndFlexibleTypeWithDefNotNullLowerBound(other: Constraint): Boolean {
        if (this === other) return false

        if (typeHashCode != other.typeHashCode || kind == ConstraintKind.UPPER) return false
        with(context) {
            if (!type.isFlexible() || !other.type.isFlexible()) return false
            val otherLowerBound = other.type.lowerBoundIfFlexible()
            if (!otherLowerBound.isDefinitelyNotNullType()) return false
            require(otherLowerBound is DefinitelyNotNullTypeMarker)
            val thisLowerBound = type.lowerBoundIfFlexible()
            val thisUpperBound = type.upperBoundIfFlexible()
            val otherUpperBound = other.type.upperBoundIfFlexible()
            return thisLowerBound == otherLowerBound.original() && thisUpperBound == otherUpperBound
        }",,6e1f
No signature found,"fun SmartList<Constraint>.simplifyEqualityConstraints(): SmartList<Constraint> {
        val equalityConstraints = filter { it.kind == ConstraintKind.EQUALITY }",,6e1f
fun runConstraintsSimplification(),"{
        val currentState = constraints.toList()
        // No need to nullify `constraintsGroupedByContainedTypeVariables` because the final result would be the same
        // as it's built from `constraints` which is not changed
        mutableConstraints.apply {
            clear()
            addAll(currentState)
        }",,c939
"fun isUsefulConstraint(constraint: Constraint, equalityConstraints: Map<Int, List<Constraint>>)",": Boolean {
        if (constraint.kind == ConstraintKind.EQUALITY) return true
        return equalityConstraints[constraint.typeHashCode]?.none { it.type == constraint.type }",,8704
fun toString(),": String {
        return ""Constraints for $typeVariable""
    }",,a535
"fun check(expression: IrCall, context: JsKlibDiagnosticContext, reporter: IrDiagnosticReporter)","{
        // Do not check IR from K1, because there are corresponding K1 FE checks in JsCallChecker
        if (!context.compilerConfiguration.languageVersionSettings.languageVersion.usesK2) {
            return
        }",,889c
"fun warning(message: String, startPosition: CodePosition, endPosition: CodePosition)","{
            reporter.at(codeExpression, context).report(JsKlibErrors.JSCODE_WARNING, message)
        }",,c13e
"fun error(message: String, startPosition: CodePosition, endPosition: CodePosition)","{
            reporter.at(codeExpression, context).report(JsKlibErrors.JSCODE_ERROR, message)
            throw AbortParsingException()
        }",,e1ee
No signature found,fun getAnnotationFqNames(modifierListOwner: KtModifierListOwner?) = a,,6e1f
fun shouldConvertFirstSamParameterToReceiver(function: FunctionDescriptor),": Boolean {
        return (function.containingDeclaration as? ClassDescriptor)?.hasSpecialAnnotation(null) ?: false
    }",,e6d3
fun foo(),": String
}

external class B: A {
    override val name: String
    override : String
}",,519f
fun box(),": String {
    val c = js(""{ __name: 'Frodo', bar: function() { return 'Baggins' }",,4f27
No signature found,fun gar(p: Any?) = f,"// FIR_IDENTICAL
// !DIAGNOSTICS: -UNUSED_PARAMETER -UNUSED_VARIABLE",6e1f
No signature found,fun gas(p: Any?) = f,,6e1f
fun outer(),"{
    val bar = fun() {}",,59f5
No signature found,fun gar(p: Any?) = f,,6e1f
No signature found,fun gas(p: Any?) = f,,6e1f
No signature found,"fun A.ext() {
    val x = ::A
    val y = ::B

    checkSubtype<KFunction0<A>>(x)
    checkSubtype<KFunction0<B>>(y)
}","// FIR_IDENTICAL
// !CHECK_TYPE",6e1f
fun bar(arg: String),= a,// KT-14469: SOE during effective visibility evaluation,2bb8
fun foo(),"{
        bar(<!INVISIBLE_REFERENCE!>v<!>)
    }",,519f
fun testJsCompositeBuildWithUpgradeLockFile(gradleVersion: GradleVersion),"{
        project(""js-composite-build"", gradleVersion) {
            testJsCompositeBuildWithUpgradeLockFile(
                upgradeTaskName,
                storeTaskName
            )
        }",,55c3
No signature found,"fun TestProject.testJsCompositeBuildWithUpgradeLockFile(
        upgradeTask: String,
        storeTask: String,
    ) {
        buildGradleKts.modify(::transformBuildScriptWithPluginsDsl)

        subProject(""lib"").apply {
            buildGradleKts.modify(::transformBuildScriptWithPluginsDsl)
        }",,6e1f
fun testFailingWithLockFileUpdate(gradleVersion: GradleVersion),"{
        project(""kotlin-js-package-lock-project"", gradleVersion) {
            testFailingWithLockFileUpdate(
                storeTaskName = storeTaskName,
                restoreTaskName = restoreTaskName,
                upgradeTaskName = upgradeTaskName,
                extension = extension,
                reportNewLockFile = reportNewLockFile,
                lockMismatchReport = lockMismatchReport,
                lockFileAutoReplace = lockFileAutoReplace,
                mismatchReport = mismatchReportType,
                set = setProperty
            )
        }",,1b27
No signature found,"fun TestProject.testFailingWithLockFileUpdate(
        storeTaskName: String,
        restoreTaskName: String,
        upgradeTaskName: String,
        extension: String,
        reportNewLockFile: String,
        lockMismatchReport: String,
        lockFileAutoReplace: String,
        mismatchReport: String,
        set: (String) -> String,
    ) {
        build(storeTaskName) {
            assertTasksSkipped("":$restoreTaskName"")
            assertTasksExecuted("":$storeTaskName"")
        }",,6e1f
fun testLockStore(gradleVersion: GradleVersion),"{
        project(""nodeJsDownload"", gradleVersion) {
            testLockStore(
                storeTaskName,
                lockFileName
            )
        }",,2ecd
No signature found,"fun TestProject.testLockStore(
        taskName: String,
        lockFile: String,
    ) {
        build(""assemble"", taskName) {
            assertFileExists(projectPath.resolve(LockCopyTask.KOTLIN_JS_STORE).resolve(lockFile))
            assert(
                projectPath
                    .resolve(LockCopyTask.KOTLIN_JS_STORE)
                    .resolve(lockFile)
                    .readText() == projectPath.resolve(""build/js/${lockFile}",,6e1f
fun testIgnoreScripts(gradleVersion: GradleVersion),"{
        project(""nodeJsDownload"", gradleVersion) {
            testIgnoreScripts(
                plugin,
                extension,
                setProperty
            )
        }",,0a66
No signature found,"fun TestProject.testIgnoreScripts(
        plugin: String,
        extension: String,
        set: (String) -> String,
    ) {
        buildGradleKts.modify {
            it + ""\n"" +
                    """"""
                        dependencies {
                            implementation(npm(""puppeteer"", ""11.0.0""))
                        }",,6e1f
fun main(),"{
    val storages: HashMap<String, String> = HashMap<String, String>()
    val a = <!ASSIGNMENT_IN_EXPRESSION_CONTEXT!>storages<!NO_SET_METHOD!>[""4""]<!> = """"<!> //K1 compile error - Kotlin: Assignments are not expressions, and only expressions are allowed in this context
    storages<!NO_SET_METHOD!>[""4""]<!> = """"

    var nonStorages: Int = 10
    val b = <!ASSIGNMENT_IN_EXPRESSION_CONTEXT!>nonStorages = 20<!>
    nonStorages = 20
}","// ISSUE: KT-61067
// DIAGNOSTICS: -ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE",d987
"fun renderType(type: KtClassErrorType, printer: PrettyPrinter)","public object UNRESOLVED_QUALIFIER : KtUnresolvedClassErrorTypeRenderer {
        context(KtAnalysisSession, KtTypeRenderer)
        override : Unit = printer {
            annotationsRenderer.renderAnnotations(type, printer)
            classIdRenderer.renderClassTypeQualifier(type, printer)
        }",,4bb4
"fun renderType(type: KtClassErrorType, printer: PrettyPrinter)","{
            printer.append(""ERROR_TYPE"")
        }",,4bb4
"fun renderType(type: KtClassErrorType, printer: PrettyPrinter)","{
            printer.append(""ERROR_TYPE(${type.errorMessage}",,4bb4
fun check(failedAssertions: List<WrappedException>),"{
        val moduleStructure = testServices.moduleStructure
        val testData = moduleStructure.originalTestDataFiles.first()
        if (testData.extension == ""kts"") return
        if (FirDiagnosticsDirectives.FIR_IDENTICAL in moduleStructure.allDirectives) return
        val (firTestData, originalTestData) = when {
            testData.isFirTestData -> testData to testData.originalTestDataFile
            else -> testData.firTestDataFile to testData
        }",,7c3d
No signature found,"fun File.preprocessSource(): String {
        val content = testServices.sourceFileProvider.getContentOfSourceFile(
            TestFile(path, readText().trim(), this, 0, isAdditional = false, RegisteredDirectives.Empty)
        )
        // Note: convertLineSeparators() does not work on Windows properly (\r\n are left intact for some reason)
        if (System.lineSeparator() != ""\n"") {
            return content.replace(""\r\n"", ""\n"")
        }",,6e1f
"fun runFirTestAndGeneratedTestData(testData: File, firTestData: File)","{
        firTestData.writeText(testData.preprocessSource())
        val test = correspondingFirTest()
        test.initTestInfo(testServices.testInfo.copy(className = ""${testServices.testInfo.className}",,47b5
fun correspondingFirTest(),": AbstractKotlinCompilerTest {
        return if (""Backend"" in testServices.testInfo.className) object : AbstractFirPsiDiagnosticsTestWithJvmIrBackend() {}",,d6f3
fun useOptional(),": A {
    return Optional.of(0).map { B() <!USELESS_CAST!>as A<!> }","// ISSUE: KT-33108
// FULL_JDK",e29e
fun f(),{},"// FIR_IDENTICAL
// WITH_STDLIB",f6fb
fun testExample(),"{
        assertTrue(foo())
    }",,6f59
fun getMainClassNameAndAdditionalArguments(),": List<String> {
        val robolectricProperties = System.getProperties().propertyNames().asSequence()
            .map { it.toString() }",,c5bf
fun foo(),"{
    var tokenType: String? = null
    while (true) {
        FindTagEnd@ while (tokenType.let { it != null && it !== ""XML_END_TAG_START"" }","//KT-48116
//WITH_STDLIB",519f
No signature found,fun runNoInline(f: () -> Unit) = f,// WITH_STDLIB,6e1f
fun box(),": String {
    lateinit var str: String
    var i: Int = 0
    try {
        runNoInline {
            i = str.length
        }",,4f27
No signature found,"fun nameToString(
    kClass: KClass<*>,
    methodName: String
) = """,,6e1f
fun test(),": String {
    return ""${nameToString(A::class, A::testFunction.name)}",,fe98
fun sourceLocation(),: String = t,,0860
fun collectFromSchema(schema: List<ESEffect>),": MutableContextInfo =
        s",,96f0
fun collectFromEffect(effect: ESEffect),": MutableContextInfo? {
        if (effect !is ConditionalEffect) {
            return MutableContextInfo.EMPTY.fire(effect)
        }",,9b81
fun visitIs(isOperator: ESIs),: MutableContextInfo = w,// Check for information from conditional effects,c338
fun visitEqual(equal: ESEqual),: MutableContextInfo = w,,8bc7
fun visitAnd(and: ESAnd),": MutableContextInfo {
        val leftInfo = and.left.accept(this)
        val rightInfo = and.right.accept(this)

        return if (isInverted) leftInfo.or(rightInfo) else leftInfo.and(rightInfo)
    }",,3b0a
fun visitNot(not: ESNot),: MutableContextInfo = i,,f132
fun visitOr(or: ESOr),": MutableContextInfo {
        val leftInfo = or.left.accept(this)
        val rightInfo = or.right.accept(this)
        return if (isInverted) leftInfo.and(rightInfo) else leftInfo.or(rightInfo)
    }",,80f6
fun visitVariable(esVariable: ESVariable),": MutableContextInfo =
        i",,202d
fun visitConstant(esConstant: ESConstant),: MutableContextInfo = M,,36a1
fun visitReceiver(esReceiver: ESReceiver),: MutableContextInfo = M,,0ef3
fun visitLambda(lambda: ESValue),: MutableContextInfo = M,,292b
No signature found,"fun <R> inverted(block: () -> R): R {
        isInverted = isInverted.not()
        val result = block()
        isInverted = isInverted.not()
        return result
    }",,6e1f
fun contains(x: String),= f,"// !DIAGNOSTICS: -UNUSED_PARAMETER -PARAMETER_NAME_CHANGED_ON_OVERRIDE
// FILE: A.java",cdc3
fun validFun(),{},// FILE: a.kt,66db
fun invalidFun0(),<!> {},,8e30
fun useInvalidFun0(),= <,,18b0
fun useInvalidProp0(),= <,,26a8
fun invalidFun1(),<!> {},,3bd5
fun invalidFun1(),<!> {},,3bd5
fun invalidFun2(),<!> {},,5ea5
fun invalidFun2(),<!> {},,5ea5
fun invalidFun3(),<!> {},,7764
fun invalidFun4(),<!> {},,cde8
fun invalidFun4(),<!> {},,cde8
fun validFun2(a: A),= a,,d3fb
fun validFun2(b: B),= b,,b029
fun validFun(),{},// FILE: b.kt,66db
fun invalidFun0(),<!> {},,8e30
fun invalidFun3(),<!> {},,7764
fun invalidFun4(),<!> {},,cde8
fun invalidFun0(),<!> {},// FILE: c.kt,8e30
No signature found,"fun isOperator(function: FirSimpleFunction, session: FirSession, scopeSession: ScopeSession?): CheckResult {
        val checks = checksByName.getOrElse(function.name) {
            regexChecks.find { it.first.matches(function.name.asString()) }",,6e1f
No signature found,"fun check(function: FirSimpleFunction, session: FirSession, scopeSession: ScopeSession?): String? {
                    if (scopeSession == null) return null
                    val containingClassSymbol = function.containingClassLookupTag()?.toFirRegularClassSymbol(session) ?: return null
                    val customEqualsSupported = session.languageVersionSettings.supportsFeature(LanguageFeature.CustomEqualsInValueClasses)

                    if (function.symbol.overriddenFunctions(containingClassSymbol, session, scopeSession)
                            .any { it.containingClassLookupTag()?.classId == StandardClassIds.Any }",,6e1f
No signature found,"fun MutableMap<Name, List<Check>>.checkFor(name: Name, vararg checks: Check) {
        put(name, checks.asList())
    }",,6e1f
No signature found,"fun MutableMap<Name, List<Check>>.checkFor(names: Set<Name>, vararg checks: Check) {
        names.forEach { put(it, checks.asList()) }",,6e1f
No signature found,"fun MutableList<Pair<Regex, List<Check>>>.checkFor(regex: Regex, vararg checks: Check) {
        add(regex to checks.asList())
    }",,6e1f
No signature found,"fun check(function: FirSimpleFunction, session: FirSession, scopeSession: ScopeSession?): String?
}

private object Checks {
    fun simple(message: String, predicate: (FirSimpleFunction, FirSession) -> Boolean) = object : Check() {
        override fun check(function: FirSimpleFunction, session: FirSession, scopeSession: ScopeSession?): String? =
            message.takeIf { !predicate(function, session) }",,6e1f
No signature found,"fun full(message: String, predicate: (FirSession, FirSimpleFunction) -> Boolean) = o",,6e1f
No signature found,"fun check(function: FirSimpleFunction, session: FirSession, scopeSession: ScopeSession?): String? =
            m",,6e1f
fun atLeast(n: Int),= s,,1a1a
fun exactly(n: Int),= s,,542c
No signature found,"fun KtClassOrObjectSymbol.buildCompanionProperty(): ObjCProperty {
    val companion = this.getStaticMemberScope().getClassifierSymbols().toList()
        .firstOrNull { (it as? KtClassOrObjectSymbol)?.isCompanion == true }",,6e1f
No signature found,"fun <V> Ref<V>.getValue(hisRef: Any?, property: KProperty<*>): V = t","// FIR_IDENTICAL
// ISSUE: KT-58013
// WITH_REFLECT
// FIR_DUMP",6e1f
No signature found,fun <E> List<Ref<*>>.getElement(i: Int): Ref<E> = t,,6e1f
No signature found,"fun test(list: List<Ref<*>>) {
    val data: String by list.getElement(0)<!UNNECESSARY_NOT_NULL_ASSERTION!>!!<!>
}",,6e1f
fun main(),"{
    val worker = Worker.current
    val future = worker.requestTermination(false)
    worker.processQueue()
    assertEquals(future.state, FutureState.COMPUTED)
    future.consume {}",// OUTPUT_REGEX: ^$,d987
fun main(),"{
    val array = MyArray()
    val f: () -> String = {
        <!EXPECTED_TYPE_MISMATCH!>array[2] = 23<!> //error: Type mismatch: inferred type is Int (!!!) but String was expected
    }",//KT-235 Illegal assignment return type,d987
fun get(i: Int),: Int = 1,,e829
"fun set(i: Int, value: Int)",: Int = 1,,acde
fun get(i: Int),: Int = 1,,e829
"fun set(i: Int, value: Int)",{},,acde
fun inc(),: MyNumber = M,,6b8c
fun foo(x: X),"}

open class FooImpl : Foo<String> {
    override fun foo(x: String) {
    }","// FIR_IDENTICAL
// !DIAGNOSTICS: -UNUSED_PARAMETER",bf55
fun foo(x: Any),"{
    }",,d233
fun test(id: Id<String>),"{
    if (id.id != ""OK"") throw AssertionError()
}","// WITH_STDLIB
// WORKS_WHEN_VALUE_CLASS
// LANGUAGE: +ValueClasses, +GenericInlineClassParameter",c203
fun test(name: Name<String>),"{
    if (name.name != ""OK"") throw AssertionError()
}",,373e
fun test(password: Password<String>),"{
    if (password.password != ""OK"") throw AssertionError()
}",,a99b
fun box(),": String {
    test(Id(""OK""))
    test(Name(""OK""))
    test(Password(""OK""))

    return ""OK""
}",,4f27
fun foo(x: Int),: Inv<Int> = T,,0028
fun foo(y: String),: Inv<String> = T,,d1f3
No signature found,"fun <T, R : Number> bar(f: (T) -> Inv<R>, p: String = """,,6e1f
No signature found,"fun <T, R : Base> bar(f: (T) -> Inv<R>, p: Int = 4",,6e1f
fun test(),"{
    bar(::foo)
}",,fe98
"fun __kernel_sin(x: Double, y: Double, iy: Int)",": Double {
    var z: Double
    var r: Double
    var v: Double
    var ix: Int
    ix = __HI(x) and 0x7fffffff    /* high word of x */
    if (ix < 0x3e400000)            /* |x| < 2**-27 */ {
        if (x.toInt() == 0) return x
    }",,ab2b
"fun test(a: A, b: B)","{
    b.(a.foo)()
    (a.foo)(b)
    a.foo(b)

    with(a) {
        b.foo()

        b.(foo)()

        (b.<!UNRESOLVED_REFERENCE_WRONG_RECEIVER!>foo<!>)<!NO_VALUE_FOR_PARAMETER!>()<!>

        foo(b)
        (foo)(b)
    }",// FILE: 1.kt,f913
"fun test(a: A, b: B)","{
    b.(a.foo)()
    (a.foo)(b)
    a.foo(b)

    with(a) {
        b.foo()

        b.(foo)()

        (<!UNRESOLVED_REFERENCE!>b.<!FUNCTION_CALL_EXPECTED!>foo<!><!>)()

        foo(b)
        (foo)(b)
    }",,f913
No signature found,"fun <T> funWithExactlyOnceCallsInPlace(block: () -> T): T {
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }",,6e1f
No signature found,"fun funWithExactlyOnceCallsInPlace(block: () -> Unit) {
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }",,6e1f
No signature found,"fun <T> funWithAtLeastOnceCallsInPlace(block: () -> T): T {
    contract { callsInPlace(block, InvocationKind.AT_LEAST_ONCE) }",,6e1f
No signature found,"fun funWithAtLeastOnceCallsInPlace(block: () -> Unit) {
    contract { callsInPlace(block, InvocationKind.AT_LEAST_ONCE) }",,6e1f
No signature found,"fun funWithAtMostOnceCallsInPlace(block: () -> Unit) {
    contract { callsInPlace(block, InvocationKind.AT_MOST_ONCE) }",,6e1f
No signature found,"fun funWithUnknownCallsInPlace(block: () -> Unit) {
    contract { callsInPlace(block, InvocationKind.UNKNOWN) }",,6e1f
fun funWithReturns(cond: Boolean),"{
    contract { returns() implies (cond) }",,790d
fun funWithReturnsAndInvertCondition(cond: Boolean),"{
    contract { returns() implies (!cond) }",,c291
No signature found,"fun funWithReturnsAndTypeCheck(value_1: Any?) {
    contract { returns() implies (value_1 is String) }",,6e1f
No signature found,"fun funWithReturnsAndInvertTypeCheck(value_1: Any?) {
    contract { returns() implies (value_1 !is String) }",,6e1f
No signature found,"fun funWithReturnsAndNotNullCheck(value_1: Any?) {
    contract { returns() implies (value_1 != null) }",,6e1f
No signature found,"fun funWithReturnsAndNullCheck(value_1: Any?) {
    contract { returns() implies (value_1 == null) }",,6e1f
fun funWithReturnsTrue(cond: Boolean),": Boolean {
    contract { returns(true) implies (cond) }",,a94b
fun funWithReturnsTrueAndInvertCondition(cond: Boolean),": Boolean {
    contract { returns(true) implies (!cond) }",,4339
No signature found,"fun funWithReturnsTrueAndTypeCheck(value_1: Any?): Boolean {
    contract { returns(true) implies (value_1 is String) }",,6e1f
No signature found,"fun funWithReturnsTrueAndInvertTypeCheck(value_1: Any?): Boolean {
    contract { returns(true) implies (value_1 !is String) }",,6e1f
No signature found,"fun funWithReturnsTrueAndNotNullCheck(value_1: Any?): Boolean {
    contract { returns(true) implies (value_1 != null) }",,6e1f
No signature found,"fun funWithReturnsTrueAndNullCheck(value_1: Any?): Boolean {
    contract { returns(true) implies (value_1 == null) }",,6e1f
fun funWithReturnsFalse(cond: Boolean),": Boolean {
    contract { returns(false) implies (cond) }",,1886
fun funWithReturnsFalseAndInvertCondition(cond: Boolean),": Boolean {
    contract { returns(false) implies (!cond) }",,ad4e
No signature found,"fun funWithReturnsFalseAndTypeCheck(value_1: Any?): Boolean {
    contract { returns(false) implies (value_1 is String) }",,6e1f
No signature found,"fun funWithReturnsFalseAndInvertTypeCheck(value_1: Any?): Boolean {
    contract { returns(false) implies (value_1 !is String) }",,6e1f
No signature found,"fun funWithReturnsFalseAndNotNullCheck(value_1: Number?): Boolean {
    contract { returns(false) implies (value_1 != null) }",,6e1f
No signature found,"fun funWithReturnsFalseAndNullCheck(value_1: Number?): Boolean {
    contract { returns(false) implies (value_1 == null) }",,6e1f
fun funWithReturnsNull(cond: Boolean),": Boolean? {
    contract { returns(null) implies (cond) }",,6fcd
fun funWithReturnsNullAndInvertCondition(cond: Boolean),": Boolean? {
    contract { returns(null) implies (!cond) }",,998e
No signature found,"fun funWithReturnsNullAndTypeCheck(value_1: Any?): Boolean? {
    contract { returns(null) implies (value_1 is String) }",,6e1f
No signature found,"fun funWithReturnsNullAndInvertTypeCheck(value_1: Any?): Boolean? {
    contract { returns(null) implies (value_1 !is String) }",,6e1f
No signature found,"fun funWithReturnsNullAndNotNullCheck(value_1: Number?): Boolean? {
    contract { returns(null) implies (value_1 != null) }",,6e1f
No signature found,"fun funWithReturnsNullAndNullCheck(value_1: Number?): Boolean? {
    contract { returns(null) implies (value_1 == null) }",,6e1f
fun funWithReturnsNotNull(cond: Boolean),": Boolean? {
    contract { returnsNotNull() implies (cond) }",,986e
fun funWithReturnsNotNullAndInvertCondition(cond: Boolean),": Boolean? {
    contract { returnsNotNull() implies (!cond) }",,10e5
No signature found,"fun funWithReturnsNotNullAndTypeCheck(value_1: Any?): Boolean? {
    contract { returnsNotNull() implies (value_1 is String) }",,6e1f
No signature found,"fun funWithReturnsNotNullAndInvertTypeCheck(value_1: Any?): Boolean? {
    contract { returnsNotNull() implies (value_1 !is String) }",,6e1f
No signature found,"fun funWithReturnsNotNullAndNotNullCheck(value_1: Number?): Boolean? {
    contract { returnsNotNull() implies (value_1 != null) }",,6e1f
No signature found,"fun funWithReturnsNotNullAndNullCheck(value_1: Number?): Boolean? {
    contract { returnsNotNull() implies (value_1 == null) }",,6e1f
fun produce(),: Int = 4,,db39
No signature found,fun MyProducer.testFun(param1: Int = p,,6e1f
fun box(),": String {
    try {
        ""a b c"".trimMargin("" "")
        return ""Fail trimMargin""
    }",// WITH_STDLIB,4f27
fun f(),{},// test.C,f6fb
fun g(),{},,4958
fun z(),"{

        }",,36b1
fun j(),{},,ec14
fun createMainVariant(resDirectories: List<String>),= A,,5b12
No signature found,fun equals(other: Any?) = o,,6e1f
fun hashCode(),= a,,6874
No signature found,"fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (other == null || other::class.java != this::class.java) return false

        other as ResourceIdentifier

        if (name != other.name) return false
        return true
    }",,6e1f
fun hashCode(),": Int {
        return name.hashCode()
    }",,6874
fun sameClass(other: AndroidResource),: Boolean = f,,8218
fun partiallyDefined(),: AndroidResource = t,,3092
fun sameClass(other: AndroidResource),= o,,8218
fun partiallyDefined(),= W,,3092
fun sameClass(other: AndroidResource),= o,,8218
fun partiallyDefined(),= F,,3092
No signature found,"fun <T> cachedValue(project: Project, result: () -> CachedValueProvider.Result<T>): CachedValue<T> {
    return CachedValuesManager.getManager(project).createCachedValue(result, false)
}",,6e1f
fun resolve(fqName: String),"fun AndroidResource.Widget.resolve(module: ModuleDescriptor): ResolvedWidget? {
    : ClassDescriptor? {
        if (!isValidJavaFqName(fqName)) return null
        return module.findClassAcrossModuleDependencies(ClassId.topLevel(FqName(fqName)))
    }",,7bda
No signature found,"fun <K, V> buildMap(@BuilderInference builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> = m","// WITH_STDLIB
// !LANGUAGE: -UseBuilderInferenceOnlyIfNeeded
// IGNORE_BACKEND_K2: ANY
// FIR status: K2 is not intended to handle properly disabling the feature introduced at 1.6",6e1f
fun foo(),": MutableMap<CharSequence, *> = m",,519f
No signature found,"fun <E> MutableMap<E, *>.swap(x: MutableMap<E, *>) {}",,6e1f
fun box(),": String {
    val x: Map<in String, String> = buildMap {
        put("""", """")
        swap(foo())
    }",,4f27
No signature found,"fun test(a: Int, z: String = t",,6e1f
fun testDelegatedAtomicInt(),"{
        assertEquals(42, a)
        assertEquals(42, privateA)
        _a.compareAndSet(42, 56)
        assertEquals(56, a)
        assertEquals(56, privateA)
        a = 77
        _a.compareAndSet(77,  66)
        privateA = 88
        _a.compareAndSet(88,  66)
        assertEquals(66, _a.value)
        assertEquals(66, a)
        assertEquals(66, privateA)

        val aValue = a + privateA
        assertEquals(132, aValue)
    }",,b6fa
fun testDelegatedAtomicLong(),"{
        assertEquals(55555555555, l)
        _l.getAndIncrement()
        assertEquals(55555555556, l)
        l = 7777777777777
        assertTrue(_l.compareAndSet(7777777777777, 66666666666))
        assertEquals(66666666666, _l.value)
        assertEquals(66666666666, l)
    }",,555a
fun testDelegatedAtomicBoolean(),"{
        assertEquals(false, b)
        _b.lazySet(true)
        assertEquals(true, b)
        b = false
        assertTrue(_b.compareAndSet(false, true))
        assertEquals(true, _b.value)
        assertEquals(true, b)
    }",,4b40
fun testDelegatedAtomicRef(),"{
        assertEquals(77, ref.b.n)
        _ref.lazySet(A(B(66)))
        assertEquals(66, ref.b.n)
        assertTrue(_ref.compareAndSet(_ref.value, A(B(56))))
        assertEquals(56, ref.b.n)
        ref = A(B(99))
        assertEquals(99, _ref.value.b.n)
    }",,9d61
fun testVolatileInt(),"{
        assertEquals(77, vInt)
        vInt = 55
        assertEquals(110, vInt * 2)
    }",,f95f
fun testVolatileLong(),"{
        assertEquals(777777777, vLong)
        vLong = 55
        assertEquals(55, vLong)
    }",,e1bd
fun testVolatileBoolean(),"{
        assertEquals(false, vBoolean)
        vBoolean = true
        assertEquals(true, vBoolean)
    }",,4bc9
fun testVolatileRef(),"{
        assertEquals(77, vRef.b.n)
        vRef = A(B(99))
        assertEquals(99, vRef.b.n)
    }",,5d07
fun testDelegatedVariablesFlow(),"{
        _a.lazySet(55)
        assertEquals(55, _a.value)
        assertEquals(55, a)
        var aValue = a
        assertEquals(55, aValue)
    }",,2f80
fun test(),"{
        testDelegatedAtomicInt()
        testDelegatedAtomicLong()
        testDelegatedAtomicBoolean()
        testDelegatedAtomicRef()
        testVolatileInt()
        testVolatileBoolean()
        testVolatileLong()
        testVolatileRef()
        testDelegatedVariablesFlow()
    }",,fe98
fun testTopLevelDelegatedProperties(),"{
    assertEquals(42, topLevelInt)
    _topLevelInt.compareAndSet(42, 56)
    assertEquals(56, topLevelInt)
    topLevelInt = 77
    _topLevelInt.compareAndSet(77, 66)
    assertEquals(66, _topLevelInt.value)
    assertEquals(66, topLevelInt)
}",,128b
fun testTopLevelVolatileProperties(),"{
    assertEquals(56, topLevelVolatile)
    topLevelVolatile = 55
    assertEquals(110, topLevelVolatile * 2)
}",,98d9
fun box(),": String {
    val testClass = DelegatedProperties()
    testClass.test()
    testTopLevelDelegatedProperties()
    testTopLevelVolatileProperties()
    return ""OK""
}",,4f27
fun contains(x: Char),: Boolean = t,"// FIR_IDENTICAL
// !LANGUAGE: +ProhibitConcurrentHashMapContains
// FULL_JDK",745c
No signature found,"fun contains(value: Any?): Boolean {
        return super.contains(value)
    }",,6e1f
No signature found,"fun contains(value: Any?): Boolean {
        return super.contains(value)
    }",,6e1f
fun main(),"{
    run { // CHM test
        val hm = java.util.concurrent.ConcurrentHashMap<String, Int>()
        """" <!CONCURRENT_HASH_MAP_CONTAINS_OPERATOR_ERROR!>in<!> hm
        """" <!CONCURRENT_HASH_MAP_CONTAINS_OPERATOR_ERROR!>!in<!> hm
        1 <!CONCURRENT_HASH_MAP_CONTAINS_OPERATOR_ERROR!>!in<!> hm
        2 <!CONCURRENT_HASH_MAP_CONTAINS_OPERATOR_ERROR!>in<!> hm

        hm.contains("""")
        hm.contains(1)

        """" in (hm as Map<String, Int>)
        """" !in (hm as Map<String, Int>)
        1 <!TYPE_INFERENCE_ONLY_INPUT_TYPES_ERROR!>in<!> (hm as Map<String, Int>)
        1 <!TYPE_INFERENCE_ONLY_INPUT_TYPES_ERROR!>!in<!> (hm as Map<String, Int>)
    }",,d987
fun isCompatibleWithCurrentCompilerVersion(),": Boolean =
        t",,2ff6
fun toInteger(),= (,,64b8
fun fromInteger(version: Int),": JsMetadataVersion =
                J",,e151
fun readFrom(stream: InputStream),": JsMetadataVersion {
            val dataInput = DataInputStream(stream)
            val size = dataInput.readInt()

            // We assume here that the version will always have 3 components. This is needed to prevent reading an unpredictable amount
            // of integers from old .kjsm files (pre-1.1) because they did not have the version in the beginning
            if (size != INSTANCE.toArray().size) return INVALID_VERSION

            return JsMetadataVersion(*(1..size).map { dataInput.readInt() }",,e2dc
fun replaceSuffix(filePath: String),: String = f,,8025
fun hasMetadata(text: String),": Boolean =
            K",,74fb
"fun formatMetadataAsString(moduleName: String, content: ByteArray, metadataVersion: JsMetadataVersion)",": String =
        """,,9002
fun loadMetadata(file: File),": List<KotlinJavascriptMetadata> {
        assert(file.exists()) { ""Library $file not found"" }","// Kotlin.$KOTLIN_JAVASCRIPT_METHOD_NAME(${metadataVersion.toInteger()}, \""$moduleName\"", "" +",f398
fun loadMetadata(path: String),: List<KotlinJavascriptMetadata> = l,,35f0
"fun parseMetadata(text: CharSequence, metadataList: MutableList<KotlinJavascriptMetadata>)","{
        // Check for literal pattern first in order to reduce time for large files without metadata
        if (!KOTLIN_JAVASCRIPT_METHOD_NAME_PATTERN.matcher(text).find()) return

        val matcher = METADATA_PATTERN.matcher(text)
        while (matcher.find()) {
            val abiVersion = JsMetadataVersion.fromInteger(matcher.group(1).toInt())
            val moduleName = matcher.group(3)
            val data = matcher.group(5)
            metadataList.add(KotlinJavascriptMetadata(abiVersion, moduleName, Base64.getDecoder().decode(data)))
        }",,aa77
No signature found,"fun <T> A<T>.toB(): B<T> {
    <expr>@Suppress(""UNCHECKED_CAST"")</expr>
    val v = (value as? Long)?.let { it.toInt() }",,6e1f
fun lowering(),: VisibilityCommonizer = L,,a9e2
fun equalizing(),: VisibilityCommonizer = E,,6032
fun commonizeWith(next: CirHasVisibility),": Boolean {
        if (temp == Visibilities.Unknown)
            return false

        val nextVisibility = next.visibility
        if (Visibilities.isPrivate(nextVisibility) || !canBeCommonized(next)) {
            temp = Visibilities.Unknown
            return false
        }",,1347
fun canBeCommonized(next: CirHasVisibility),": Boolean
    protected abstract fun getNext(current: Visibility, next: Visibility): Visibility
}

/**
 * Choose the lowest possible visibility ignoring private for all given member descriptors.
 * If at least one member descriptor is virtual, then the commonizer succeeds only if all visibilities are equal.
 */
private class LoweringVisibilityCommonizer : VisibilityCommonizer() {
    private var atLeastOneVirtualCallableMet = false
    private var atLeastTwoVisibilitiesMet = false

    override : Boolean {
        if (!atLeastOneVirtualCallableMet)
            atLeastOneVirtualCallableMet = (next as? CirFunctionOrProperty)?.isVirtual() == true

        return !atLeastOneVirtualCallableMet || !atLeastTwoVisibilitiesMet
    }",,9f04
"fun getNext(current: Visibility, next: Visibility)",": Visibility {
        val comparisonResult: Int = Visibilities.compare(current, next)
            ?: return Visibilities.Unknown // two visibilities that can't be compared against each one, ex: protected vs internal

        if (!atLeastTwoVisibilitiesMet)
            atLeastTwoVisibilitiesMet = comparisonResult != 0

        if (atLeastOneVirtualCallableMet && atLeastTwoVisibilitiesMet)
            return Visibilities.Unknown

        return if (comparisonResult <= 0) current else next
    }",,cbab
fun canBeCommonized(next: CirHasVisibility),= t,,9f04
"fun getNext(current: Visibility, next: Visibility)","=
        i",,cbab
fun warn(message: String),"fun error(message: String)
}

fun test(logger: KaptLogger) {
    val func = if (logger.isVerbose)
        logger::warn
    else
        logger::error
}",,7d11
No signature found,"fun <reified T : Any> baz(): String {
        return T::class.simpleName!!
    }",,6e1f
fun bar(),": String {
        return baz<OK>()
    }",,66c3
fun box(),": String {
    return B().bar()
}",,4f27
fun baz(),": String = """,,b22f
fun greeting(),"{
        assertEquals(""Hello, World!"", getGreeting())
    }",,5ac3
fun accessToInternal(),"{
        assertEquals(""CONST"", CONST)

        assertEquals(""foo"", PublicClass().foo())
        assertEquals(""bar"", PublicClass().bar)
        assertEquals(""PublicClass.baz()"", PublicClass().baz())

        assertEquals(""foo"", PublicClassHeir().foo())
        assertEquals(""bar"", PublicClassHeir().bar)
        assertEquals(""PublicClassHeir.baz()"", PublicClassHeir().baz())

        val data = InternalDataClass(10, 20)
        assertEquals(10, data.x)
        assertEquals(20, data.y)
    }",,a246
fun box(),": String {
    val x1 = 1.toChar()
    if (x1 !in Char.MIN_VALUE..Char.MAX_VALUE)
        return ""Failed""
    return ""OK""
}",,4f27
fun main(),"{
    val value: String? = """"
    if (value != null) {
        foo(Pair(""val"", <!DEBUG_INFO_SMARTCAST!>value<!>))
        foo(Pair(""val"", value<!UNNECESSARY_NOT_NULL_ASSERTION!>!!<!>))
        foo(Pair<String, String>(""val"", <!DEBUG_INFO_SMARTCAST!>value<!>))
    }",//KT-2851 Type inference failed passing in not-null after smart-cast value in Pair,d987
"fun foo(map: Pair<String, String>)",{},,60d4
fun initCache(),"{
            publishedLibraryCache = mutableMapOf()
        }",,a3e0
fun deleteCache(),"{
            publishedLibraryCacheDir.delete()
        }",,251d
fun testCases(),": List<Array<Any>> {
            val consumers = listOf(
                AGPVersion.v7_1_0 to GradleVersionRequired.AtLeast(TestVersions.Gradle.G_7_6),
            )
            val buildParams = listOf(
                /* useFlavors, isAndroidPublishDebugOnly, isPublishedLibrary */
                arrayOf(false, false, false),
                arrayOf(false, true, false),
                arrayOf(true, false, false),
                arrayOf(true, true, false),
                arrayOf(false, false, true),
                arrayOf(false, true, true),
                arrayOf(true, false, true),
                arrayOf(true, true, true),
            )
            return consumers.flatMap { (agpVersion, gradleVersion) ->
                buildParams.map { arrayOf(*it, agpVersion, gradleVersion) }",,ba54
fun setUp(),"{
        super.setUp()

        val jdk11Home = File(System.getProperty(""jdk11Home""))
        Assume.assumeTrue(""This test requires JDK11 for AGP7"", jdk11Home.isDirectory)

        val producerBuildOptions: BuildOptions

        dependencyProject = Project(""new-mpp-android"", producerGradleVersion, minLogLevel = LogLevel.INFO).apply {
            chooseWrapperVersionOrFinishTest()
            producerBuildOptions = defaultBuildOptions().copy(
                javaHome = jdk11Home,
                androidHome = KtTestUtil.findAndroidSdk(),
                androidGradlePluginVersion = producerAgpVersion,
            )
            producerBuildOptions.androidHome?.let { acceptAndroidSdkLicenses(it) }",,3705
fun test(),"{
        runConsumerTest(dependencyProject, withKotlinVersion = null)
        runConsumerTest(dependencyProject, withKotlinVersion = defaultBuildOptions().kotlinVersion)

        // We don't want to test the behavior with old Kotlin project-to-project dependencies, only compatibility with publications:
        if (isPublishedLibrary) {
            runConsumerTest(dependencyProject, withKotlinVersion = oldKotlinVersion)
        }",,fe98
No signature found,"fun runConsumerTest(
        dependencyProject: Project,
        withKotlinVersion: String?
    ) {
        if (producerGradleVersion != consumerGradleVersion && !isPublishedLibrary) {
            println(""Testing project-to-project dependencies is only possible with one Gradle version on the consumer and producer sides"")
            return
        }",,6e1f
fun nameWithFlavorIfNeeded(name: String),= i,,0e99
No signature found,"fun assertResolvedSingleVariantsBatch(
        project: BaseGradleIT.Project,
        assertions: Map<ResolvedVariantRequest, String>,
        buildOptions: BaseGradleIT.BuildOptions = p",,6e1f
No signature found,"fun getResolvedVariantsBatch(
        project: BaseGradleIT.Project,
        requests: Iterable<ResolvedVariantRequest>,
        buildOptions: BaseGradleIT.BuildOptions = p",,6e1f
fun nextTaskId(),= t,,fa4b
"fun generateResolvedVariantTaskCodeGroovy(configuration: String, dependencyNotation: String)",": TaskWithName {
        val taskName = ""getResolvedVariants${nextTaskId()}",,003f
"fun generateResolvedVariantTaskCodeKts(configuration: String, dependencyNotation: String)",": TaskWithName {
        val taskName = ""getResolvedVariants${nextTaskId()}",,b928
fun main(),"{
    usleep(100u)
}",,d987
fun nativePlatformMainUsingCInterop(),= d,,c7d8
fun box(),": String {
    val map = java.util.LinkedHashMap<Int, Int>()
    map.put(3, 42)
    map.put(14, -42)

    // Even though the type parameters on `map` are not nullable, the `values` property is implemented in Java and therefore there is
    // @EnhancedNullability on its type argument (Int).
    val actualValues = mutableListOf<Int>()
    for (v in map.values) {
        actualValues += v
    }","// !LANGUAGE: +StrictJavaNullabilityAssertions
// TARGET_BACKEND: JVM
// WITH_STDLIB
// FULL_JDK",4f27
fun bar(),: String = b,"// TARGET_BACKEND: JVM
// WITH_STDLIB
// FILE: Baz.java",66c3
fun foox(),": String = """,,2f76
fun foo(),: String = f,,519f
fun barx(),": String = """,,e470
fun box(),: String = B,,4f27
fun box(),": String {
    val local = ShortWrapper(2)
    if (global.x + local.x != 3) return ""FAIL""
    global.x = 5
    local.x = 6
    return if (global.x + local.x != 11) return ""FAIL"" else ""OK""
}","// WITH_STDLIB
// IGNORE_BACKEND: JS, JS_IR, JS_IR_ES6, WASM
// !API_VERSION: 1.9",4f27
fun test(),"{
    <!EXPECT_CLASS_AS_FUNCTION!>Foo<!>()
    Bar()
    Baz()
    FooBar()
}","// MODULE: m1-common
// FILE: common.kt",fe98
fun x(),"{
    1 toCall a<caret>v
}",,7869
No signature found,fun Int.toCall(y: String): Char = ',,6e1f
fun getDestinationDirectory(kotlinTestReport: KotlinTestReport),": DirectoryProperty =
        o",,5dfe
"fun setDestinationDirectory(kotlinTestReport: KotlinTestReport, directory: Provider<Directory>)","{
        kotlinTestReport.destinationDir = directory.get().asFile
    }",,c8b7
"fun addTestResultsFrom(kotlinTestReport: KotlinTestReport, task: AbstractTestTask)","{
        kotlinTestReport.reportOn(task.binaryResultsDirectory)
    }",,3699
fun getInstance(objectFactory: ObjectFactory),": KotlinTestReportCompatibilityHelper =
            K",,0249
fun cond(),= t,"// JDK_RELEASE: 16
// CHECK_BYTECODE_TEXT
// 2 CHECKCAST java/lang/constant/Constable
// 1 LOCALVARIABLE constable Ljava/lang/constant/Constable;",3475
No signature found,"fun test(mh: MethodHandle?, mt: MethodType?) {
    val constable = if (cond()) mh else mt
}",,6e1f
fun box(),": String {
    test(null, null)
    return ""OK""
}",,4f27
fun foo(),"}
    // interface B : A { override  }",,519f
fun getCallableNames(),"fun processDirectOverriddenFunctionsWithBaseScope(
        functionSymbol: FirNamedFunctionSymbol,
        processor: (FirNamedFunctionSymbol, FirTypeScope) -> ProcessorAction
    ): ProcessorAction

    // ------------------------------------------------------------------------------------

    abstract fun processDirectOverriddenPropertiesWithBaseScope(
        propertySymbol: FirPropertySymbol,
        processor: (FirPropertySymbol, FirTypeScope) -> ProcessorAction
    ): ProcessorAction

    // ------------------------------------------------------------------------------------

    object Empty : FirTypeScope() {
        override fun processDirectOverriddenFunctionsWithBaseScope(
            functionSymbol: FirNamedFunctionSymbol,
            processor: (FirNamedFunctionSymbol, FirTypeScope) -> ProcessorAction
        ): ProcessorAction = ProcessorAction.NEXT

        override fun processDirectOverriddenPropertiesWithBaseScope(
            propertySymbol: FirPropertySymbol,
            processor: (FirPropertySymbol, FirTypeScope) -> ProcessorAction
        ): ProcessorAction = ProcessorAction.NEXT

        override : Set<Name> = emptySet()

        override fun getClassifierNames(): Set<Name> = emptySet()

        override fun toString(): String {
            return ""Empty scope""
        }","// interface C : B { override fun foo() }
    //
    // Here, for override C::foo from a scope of C, processor will receiver B::foo and scope for B
    // Then, for B::foo from scope for B one may receive override A::foo and scope for A
    //
    // Currently, this function and its property brother both have very weak guarantees
    // - It may return the same overridden symbols more than once in case of substitution or intersection
    //     (but with different base scope)",0483
No signature found,"fun FirTypeScope.processOverriddenFunctions(
    functionSymbol: FirNamedFunctionSymbol,
    processor: (FirNamedFunctionSymbol) -> ProcessorAction
): ProcessorAction =
    d",,6e1f
No signature found,"fun <reified S : FirCallableSymbol<*>> FirTypeScope.anyOverriddenOf(
    symbol: S,
    processOverridden: FirTypeScope.(S, (S) -> ProcessorAction) -> ProcessorAction,
    noinline predicate: (S) -> Boolean,
): Boolean {
    var result = false
    processOverridden(symbol) {
        if (predicate(it)) {
            result = true
            return@processOverridden ProcessorAction.STOP
        }",,6e1f
No signature found,"fun FirTypeScope.anyOverriddenOf(
    functionSymbol: FirNamedFunctionSymbol,
    predicate: (FirNamedFunctionSymbol) -> Boolean
): Boolean {
    return anyOverriddenOf(functionSymbol, FirTypeScope::processOverriddenFunctions, predicate)
}",,6e1f
No signature found,"fun FirTypeScope.processOverriddenFunctionsWithVisited(
    functionSymbol: FirNamedFunctionSymbol,
    visited: MutableSet<Pair<FirTypeScope, FirNamedFunctionSymbol>>,
    processor: (FirNamedFunctionSymbol) -> ProcessorAction
): ProcessorAction =
    d",,6e1f
No signature found,"fun FirTypeScope.processOverriddenProperties(
    propertySymbol: FirPropertySymbol,
    processor: (FirPropertySymbol) -> ProcessorAction
): ProcessorAction =
    d",,6e1f
No signature found,"fun FirTypeScope.processOverriddenPropertiesWithVisited(
    propertySymbol: FirPropertySymbol,
    visited: MutableSet<Pair<FirTypeScope, FirPropertySymbol>> = m",,6e1f
No signature found,"fun List<FirTypeScope>.processOverriddenFunctions(
    functionSymbol: FirNamedFunctionSymbol,
    processor: (FirNamedFunctionSymbol) -> ProcessorAction
) {
    val visited = mutableSetOf<Pair<FirTypeScope, FirNamedFunctionSymbol>>()
    for (scope in this) {
        if (!scope.processOverriddenFunctionsWithVisited(functionSymbol, visited, processor)) return
    }",,6e1f
No signature found,"fun List<FirTypeScope>.processOverriddenProperties(
    propertySymbol: FirPropertySymbol,
    processor: (FirPropertySymbol) -> ProcessorAction
) {
    val visited = mutableSetOf<Pair<FirTypeScope, FirPropertySymbol>>()
    for (scope in this) {
        if (!scope.processOverriddenPropertiesWithVisited(propertySymbol, visited, processor)) return
    }",,6e1f
No signature found,"fun <S : FirCallableSymbol<*>> FirTypeScope.doProcessAllOverriddenCallables(
    callableSymbol: S,
    processor: (S, FirTypeScope) -> ProcessorAction,
    processDirectOverriddenCallablesWithBaseScope: FirTypeScope.(S, (S, FirTypeScope) -> ProcessorAction) -> ProcessorAction,
    visited: MutableSet<Pair<FirTypeScope, S>>
): ProcessorAction {
    if (!visited.add(this to callableSymbol)) return ProcessorAction.NONE
    return processDirectOverriddenCallablesWithBaseScope(callableSymbol) { overridden, baseScope ->
        if (!processor(overridden, baseScope)) return@processDirectOverriddenCallablesWithBaseScope ProcessorAction.STOP

        baseScope.doProcessAllOverriddenCallables(overridden, processor, processDirectOverriddenCallablesWithBaseScope, visited)
    }",,6e1f
No signature found,"fun <S : FirCallableSymbol<*>> FirTypeScope.processAllOverriddenCallables(
    callableSymbol: S,
    processor: (S) -> ProcessorAction,
    processDirectOverriddenCallablesWithBaseScope: ProcessOverriddenWithBaseScope<S>,
): ProcessorAction =
    d",,6e1f
No signature found,"fun <S : FirCallableSymbol<*>> FirTypeScope.doProcessAllOverriddenCallables(
    callableSymbol: S,
    processor: (S) -> ProcessorAction,
    processDirectOverriddenCallablesWithBaseScope: FirTypeScope.(S, (S, FirTypeScope) -> ProcessorAction) -> ProcessorAction,
    visited: MutableSet<Pair<FirTypeScope, S>>
): ProcessorAction =
    d",,6e1f
No signature found,"fun FirTypeScope.processDirectlyOverriddenFunctions(
    functionSymbol: FirNamedFunctionSymbol,
    crossinline processor: (FirNamedFunctionSymbol) -> ProcessorAction
): ProcessorAction = p",,6e1f
No signature found,"fun FirTypeScope.processDirectlyOverriddenProperties(
    propertySymbol: FirPropertySymbol,
    crossinline processor: (FirPropertySymbol) -> ProcessorAction
): ProcessorAction = p",,6e1f
No signature found,"fun FirTypeScope.getDirectOverriddenMembers(
    member: FirCallableSymbol<*>,
    unwrapIntersectionAndSubstitutionOverride: Boolean = f",,6e1f
No signature found,"fun FirTypeScope.getDirectOverriddenMembersWithBaseScope(member: FirCallableSymbol<*>): List<MemberWithBaseScope<FirCallableSymbol<*>>> {
    return when (member) {
        is FirNamedFunctionSymbol -> getDirectOverriddenFunctionsWithBaseScope(member)
        is FirPropertySymbol -> getDirectOverriddenPropertiesWithBaseScope(member)
        else -> emptyList()
    }",,6e1f
No signature found,"fun FirTypeScope.getDirectOverriddenFunctionsWithBaseScope(
    function: FirNamedFunctionSymbol,
): List<MemberWithBaseScope<FirNamedFunctionSymbol>> {
    val overriddenFunctions = mutableSetOf<MemberWithBaseScope<FirNamedFunctionSymbol>>()

    processDirectOverriddenFunctionsWithBaseScope(function) { symbol, baseScope ->

        overriddenFunctions += MemberWithBaseScope(symbol, baseScope)
        ProcessorAction.NEXT
    }",,6e1f
No signature found,"fun FirTypeScope.getDirectOverriddenPropertiesWithBaseScope(
    property: FirPropertySymbol,
): List<MemberWithBaseScope<FirPropertySymbol>> {
    val overriddenProperties = mutableSetOf<MemberWithBaseScope<FirPropertySymbol>>()

    processDirectOverriddenPropertiesWithBaseScope(property) { symbol, baseScope ->
        overriddenProperties += MemberWithBaseScope(symbol, baseScope)
        ProcessorAction.NEXT
    }",,6e1f
No signature found,"fun FirTypeScope.getDirectOverriddenFunctions(
    function: FirNamedFunctionSymbol,
    unwrapIntersectionAndSubstitutionOverride: Boolean = f",,6e1f
No signature found,"fun FirTypeScope.getDirectOverriddenProperties(
    property: FirPropertySymbol,
    unwrapIntersectionAndSubstitutionOverride: Boolean = f",,6e1f
No signature found,"fun FirTypeScope.retrieveDirectOverriddenOf(memberSymbol: FirCallableSymbol<*>): List<FirCallableSymbol<*>> {
    return when (memberSymbol) {
        is FirNamedFunctionSymbol -> {
            processFunctionsByName(memberSymbol.name) {}",,6e1f
No signature found,"fun <reified D : FirCallableSymbol<*>> MutableSet<D>.addOverridden(
    symbol: D,
    unwrapIntersectionAndSubstitutionOverride: Boolean
) {
    if (unwrapIntersectionAndSubstitutionOverride) {
        if (symbol is FirIntersectionCallableSymbol) {
            @Suppress(""UNCHECKED_CAST"")
            addAll(symbol.intersections as Collection<D>)
        }",,6e1f
fun getName(),: String = f,,4692
fun component1(),= 1,,fd7c
fun component2(),= 2,,e66b
fun box(),": String {
    val (a, b) = A()

    val local = object {
        public fun run() : Int {
            return a
        }",,4f27
fun ok(),"= """,,23f4
fun test(),= x,,fe98
fun box(),= T,,4f27
fun box(),": String {
    if (A.FIRST.a == 1 && A.SECOND.a == 2) {
        return ""OK""
    }",// EXPECTED_REACHABLE_NODES: 1291,4f27
fun getData(),": String = ""","// ISSUE: KT-58575
// FILE: JavaBases.java",8d73
fun getData(),": String = """,,8d73
fun getData(),": String? = """,,8d73
fun getData(),": String = """,,8d73
fun setData(data: String),{},,10cc
fun getData(),": String = """,,8d73
No signature found,fun setData(data: String?) {},,6e1f
fun getData(),": String? = """,,8d73
No signature found,fun setData(data: String?) {},,6e1f
fun unresolvedReferences(),"{
    JavaImmutableChild1().getData()
    JavaImmutableChild2().getData()
    JavaImmutableChild4().getData()
    JavaMutableChild1().getData()
    JavaMutableChild1().setData("""")
    JavaMutableChild6().getData()
    JavaMutableChild6().setData("""")
    JavaMutableChild8().getData()
    JavaMutableChild8().setData("""")
}",,d726
fun test(),"{
    val set = mutableSetOf(1, 2, 3)
    var optimized = """"
    for (i in 0..set.size - 1) optimized += set.elementAt(i)
}",// TARGET_BACKEND: JVM_IR,fe98
"fun check(declaration: FirDeclaration, context: CheckerContext, reporter: DiagnosticReporter)","{
        if (!context.isTopLevel || declaration.symbol.isEffectivelyExternal(context.session)) {
            return
        }",,ee93
fun asInterface(i: MyInterface),: MyInterface = i,"// MODULE: InterfaceModule
// FILE: MyInterface.kt",8b9a
fun asInterface2(i: MyInterface2),: MyInterface2 = i,,909e
fun box(),": String {
    if (asInterface(MyFinalClass()).test != 1) return ""Fail MyOpenClass as Interface property""
    if (MyFinalClass().test != 1) return ""Fail MyOpenClass property""

    if (asInterface(MyFinalClass2()).test != 1) return ""Fail MyFinalClass2 as Interface property""
    if (asInterface2(MyFinalClass2()).test != 1) return ""Fail MyFinalClass2 as Interface2 property""
    if (MyFinalClass2().test != 1) return ""Fail MyFinalClass2 property""

    if (asInterface(MyFinalClass3()).test != 1) return ""Fail MyFinalClass3 as Interface property""
    if (MyFinalClass3().test != 1) return ""Fail MyFinalClass3 property""

    if (asInterface(MyFinalClassI()).test != 1) return ""Fail MyFinalClassI as Interface property""
    if (MyFinalClassI().test != 1) return ""Fail MyFinalClassI property""

    if (asInterface(MyFinalClassWithOverride()).test != 2) return ""Fail MyFinalClassWithOverride as Interface property""
    if (MyFinalClassWithOverride().test != 2) return ""Fail MyFinalClassWithOverride property""

    if (asInterface(MyFinalClassWithOverride2()).test != 2) return ""Fail MyFinalClassWithOverride2 as Interface property""
    if (asInterface2(MyFinalClassWithOverride2()).test != 2) return ""Fail MyFinalClassWithOverride2 as Interface2 property""
    if (MyFinalClassWithOverride2().test != 2) return ""Fail MyFinalClassWithOverride2 property""

    if (asInterface(MyFinalClassWithOverride3()).test != 3) return ""Fail MyFinalClassWithOverride3 as Interface property""
    if (asInterface2(MyFinalClassWithOverride3()).test != 3) return ""Fail MyFinalClassWithOverride3 as Interface2 property""
    if (MyFinalClassWithOverride3().test != 3) return ""Fail MyFinalClassWithOverride3 property""

    if (asInterface(MyFinalClassWithOverrideI()).test != 2) return ""Fail MyFinalClassWithOverrideI as Interface property""
    if (MyFinalClassWithOverrideI().test != 2) return ""Fail MyFinalClassWithOverrideI property""

    return ""OK""
}",,4f27
fun suspendHere(v: String),: Unit = s,"// WITH_STDLIB
// WITH_COROUTINES",0bc0
No signature found,"fun builder(c: suspend Controller.() -> Unit): String {
    val controller = Controller()
    c.startCoroutine(controller, handleResultContinuation {
        controller.ok = true
    }",,6e1f
fun box(),": String {

    return builder {
        suspendHere(""OK"")
    }",,4f27
No signature found,"fun test(f: KFunction<*>) {
    f.parameters
}","// TARGET_BACKEND: JVM

// WITH_REFLECT
// FILE: J.java",6e1f
fun box(),": String {
    test(J::simple)
    test(J::objectTypes)
    test(J::primitives)
    test(J::primitiveArrays)
    test(J::multiDimensionalArrays)
    test(J::wildcards)

    return ""OK""
}",,4f27
"fun test(foo: Int, bar: Int)","{
    object : A {
        override val foo: Int = foo + bar
    }",// FIR_IDENTICAL,4af9
"fun check(expression: FirVariableAssignment, context: CheckerContext, reporter: DiagnosticReporter)","{
        val lValue = expression.calleeReference
        if (lValue !is FirResolvedNamedReference) return
        if (expression.source?.kind is KtFakeSourceElementKind) return

        val rValue = expression.rValue as? FirFunctionCall ?: return
        if (rValue.source?.kind is KtFakeSourceElementKind) return

        if (rValue.explicitReceiver?.resolvedType?.isPrimitive != true) return
        val rValueResolvedSymbol = rValue.toResolvedCallableSymbol() ?: return
        if (rValueResolvedSymbol.dispatchReceiverClassTypeOrNull()?.isPrimitive != true) return

        var needToReport = false
        val assignmentSource = expression.source

        if (assignmentSource is KtPsiSourceElement) {
            val lValuePsi = lValue.psi as? KtNameReferenceExpression ?: return
            val rValuePsi = rValue.psi as? KtBinaryExpression ?: return

            if (rValuePsi.matcher(lValuePsi)) {
                needToReport = true
            }",,43e4
No signature found,"fun lightTreeMatcher(
        variable: LighterASTNode,
        expression: LighterASTNode,
        source: KtLightSourceElement,
        prevOperator: LighterASTNode? = n",,6e1f
No signature found,"fun KtBinaryExpression.matcher(variable: KtNameReferenceExpression): Boolean {
        if (!canBeAugmented()) return false
        if ((left as? KtNameReferenceExpression)?.getReferencedName() == variable.getReferencedName()) return true
        if ((right as? KtNameReferenceExpression)?.getReferencedName() == variable.getReferencedName() && isCommutative()) return true

        return if (isCommutative()) {
            val leftExpression = left as? KtBinaryExpression
            val rightExpression = right as? KtBinaryExpression

            val isLeftMatch = isHierarchicallyTrue(operationToken, leftExpression?.operationToken)
                    && leftExpression?.matcher(variable) == true
            if (isLeftMatch) return true
            val isRightMatch = isHierarchicallyTrue(operationToken, rightExpression?.operationToken)
                    && rightExpression?.matcher(variable) == true
            if (isRightMatch) return true

            false
        }",,6e1f
No signature found,fun KtBinaryExpression.isCommutative() = t,,6e1f
No signature found,fun KtBinaryExpression.canBeAugmented() = t,,6e1f
No signature found,"fun isHierarchicallyTrue(currentOperation: IElementType, nextOperation: IElementType?) = c",,6e1f
fun isCommutativeOperator(operator: LighterASTNode),= o,,8b86
No signature found,"fun isLightNodesHierarchicallyTrue(first: LighterASTNode?, second: LighterASTNode?) =
        f",,6e1f
No signature found,fun LighterASTNode.canBeAugmented() = t,,6e1f
fun foo(),{},// Check that unresolved super type doesn't interfere with unqualified super resolution.,519f
fun ambiguous(),{},,58ad
fun bar(),{},,66c3
fun ambiguous(),{},,58ad
fun foo(),{},,519f
fun bar(),{},,66c3
fun ambiguous(),{},,58ad
fun callsFunFromSuperClass(),"{
        super.foo()
    }",,5f15
fun getSuperProp(),": Int =
            s",,669a
fun getAmbiguousSuperProp(),": Int =
    <",,c51c
fun callsFunFromSuperInterface(),"{
        super.bar()
    }",,8f7e
fun callsAmbiguousSuperFun(),"{
        <!AMBIGUOUS_SUPER!>super<!>.ambiguous()
    }",,2963
fun baz(),= f,,b22f
fun box(),": String {

    val a = A()
    val b = object : B {
    }",// EXPECTED_REACHABLE_NODES: 1293,4f27
"fun test(s1: SealedClass, s2: SealedClass)","{
        <expr>s1 == s2</expr>
    }",,5979
No signature found,"fun <T : JsNode?> accept(node: T) {
        node?.accept(this)
    }","// Copyright (c) 2011, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.",6e1f
No signature found,"fun <T : JsNode> acceptList(collection: List<T>) {
        for (node in collection) {
            accept(node)
        }",,6e1f
fun acceptLvalue(expression: JsExpression),"{
        accept(expression)
    }",,d7e0
No signature found,"fun <T : JsNode> acceptWithInsertRemove(collection: List<T>) {
        for (node in collection) {
            accept(node)
        }",,6e1f
fun visitArrayAccess(x: JsArrayAccess),": Unit =
            v",,e92b
fun visitArray(x: JsArrayLiteral),": Unit =
            v",,204d
fun visitBinaryExpression(x: JsBinaryOperation),": Unit =
            v",,c5ea
fun visitBlock(x: JsBlock),": Unit =
            v",,8ea9
fun visitBoolean(x: JsBooleanLiteral),": Unit =
            v",,8eb6
fun visitBreak(x: JsBreak),": Unit =
            v",,c5e4
fun visitCase(x: JsCase),": Unit =
            v",,c717
fun visitCatch(x: JsCatch),": Unit =
            v",,67fe
fun visitClass(x: JsClass),": Unit =
            v",,4f8a
fun visitConditional(x: JsConditional),": Unit =
            v",,e33a
fun visitContinue(x: JsContinue),": Unit =
            v",,7748
fun visitYield(x: JsYield),": Unit =
        v",,383c
fun visitDebugger(x: JsDebugger),": Unit =
            v",,ce6d
fun visitDefault(x: JsDefault),": Unit =
            v",,538b
fun visitDoWhile(x: JsDoWhile),": Unit =
            v",,2a67
fun visitEmpty(x: JsEmpty),": Unit =
            v",,3352
fun visitExpressionStatement(x: JsExpressionStatement),": Unit =
            v",,76db
fun visitFor(x: JsFor),": Unit =
            v",,9d99
fun visitForIn(x: JsForIn),": Unit =
            v",,5cbe
fun visitFunction(x: JsFunction),": Unit =
            v",,03d0
fun visitIf(x: JsIf),": Unit =
            v",,dc5f
fun visitInvocation(invocation: JsInvocation),": Unit =
            v",,371b
fun visitLabel(x: JsLabel),": Unit =
            v",,135e
fun visitLoop(x: JsLoop),": Unit =
        v",,9042
fun visitNameRef(nameRef: JsNameRef),": Unit =
            v",,662b
fun visitNew(x: JsNew),": Unit =
            v",,3678
fun visitNull(x: JsNullLiteral),": Unit =
            v",,a519
fun visitInt(x: JsIntLiteral),": Unit =
            v",,18e9
fun visitDouble(x: JsDoubleLiteral),": Unit =
            v",,7b2f
fun visitObjectLiteral(x: JsObjectLiteral),": Unit =
            v",,1165
fun visitParameter(x: JsParameter),": Unit =
            v",,31f9
fun visitPostfixOperation(x: JsPostfixOperation),": Unit =
            v",,506f
fun visitPrefixOperation(x: JsPrefixOperation),": Unit =
            v",,74de
fun visitProgram(x: JsProgram),": Unit =
            v",,2aca
fun visitPropertyInitializer(x: JsPropertyInitializer),": Unit =
            v",,fa3a
fun visitRegExp(x: JsRegExp),": Unit =
            v",,45bc
fun visitReturn(x: JsReturn),": Unit =
            v",,864a
fun visitString(x: JsStringLiteral),": Unit =
            v",,6e72
fun visit(x: JsSwitch),": Unit =
            v",,0a4c
fun visitThis(x: JsThisRef),": Unit =
            v",,f7bd
fun visitSuper(x: JsSuperRef),": Unit =
            v",,3bab
fun visitThrow(x: JsThrow),": Unit =
            v",,dee3
fun visitTry(x: JsTry),": Unit =
            v",,fbc0
fun visit(x: JsVar),": Unit =
            v",,5e91
fun visitVars(x: JsVars),": Unit =
            v",,214f
fun visitWhile(x: JsWhile),": Unit =
            v",,2878
fun visitDocComment(comment: JsDocComment),": Unit =
            v",,5e5f
fun visitSingleLineComment(comment: JsSingleLineComment),": Unit =
            v",,9945
fun visitMultiLineComment(comment: JsMultiLineComment),": Unit =
            v",,051f
fun visitExport(export: JsExport),": Unit =
            v",,28fa
fun visitImport(import: JsImport),": Unit =
        v",,cc3c
fun visitElement(node: JsNode),"{
    }",,5f4e
fun doo(),: Int = 0,"// one.MyEnumClass
// !LANGUAGE: +EnumEntries",5012
fun getSerializerGetterFunction(serializableIrClass: IrClass),": IrSimpleFunction? {
            val irClass =
                if (serializableIrClass.isSerializableObject) serializableIrClass else serializableIrClass.companionObject() ?: return null
            return irClass.findDeclaration<IrSimpleFunction> {
                it.name == SerialEntityNames.SERIALIZER_PROVIDER_NAME
                        && it.valueParameters.size == serializableIrClass.typeParameters.size
                        && it.valueParameters.all { p -> p.type.isKSerializer() }",,2d3b
"fun generate(
            irClass: IrClass,
            context: SerializationPluginContext,
        )","{
            val companionDescriptor = irClass
            val serializableClass = getSerializableClassByCompanion(companionDescriptor) ?: return
            if (serializableClass.shouldHaveGeneratedMethodsInCompanion) {
                SerializableCompanionIrGenerator(irClass, getSerializableClassByCompanion(irClass)!!, context).generate()
                irClass.addDefaultConstructorBodyIfAbsent(context)
                irClass.patchDeclarationParents(irClass.parent)
            }",,4791
fun generate(),"{
        val serializerGetterFunction =
            getSerializerGetterFunction(serializableIrClass)?.takeIf { it.isFromPlugin(compilerContext.afterK2) }",,3be5
fun patchNamedCompanionWithMarkerAnnotation(),"{
        if (serializableIrClass.kind == ClassKind.OBJECT || irClass.name == SpecialNames.DEFAULT_NAME_FOR_COMPANION_OBJECT) {
            return
        }",,bfe5
No signature found,"fun IrBuilderWithScope.patchSerializableClassWithMarkerAnnotation(serializer: IrClass) {
        if (serializer.kind != ClassKind.OBJECT) {
            return
        }",,6e1f
fun generateLazySerializerGetter(methodDescriptor: IrSimpleFunction),"{
        val serializer = requireNotNull(
            findTypeSerializer(
                compilerContext,
                serializableIrClass.defaultType
            )
        )

        val kSerializerIrClass =
            compilerContext.referenceClass(ClassId(SerializationPackages.packageFqName, SerialEntityNames.KSERIALIZER_NAME))!!.owner
        val targetIrType =
            kSerializerIrClass.defaultType.substitute(mapOf(kSerializerIrClass.typeParameters[0].symbol to compilerContext.irBuiltIns.anyType))

        val property = addLazyValProperty(irClass, targetIrType, SerialEntityNames.CACHED_SERIALIZER_PROPERTY_NAME) {
            val expr = requireNotNull(
                serializerInstance(serializer, compilerContext, serializableIrClass.defaultType)
            )
            patchSerializableClassWithMarkerAnnotation(kSerializerIrClass)
            +expr
        }",,acaf
fun generateSerializerGetter(methodDescriptor: IrSimpleFunction),"{
        addFunctionBody(methodDescriptor) { getter ->
            val serializer = requireNotNull(
                findTypeSerializer(
                    compilerContext,
                    serializableIrClass.defaultType
                )
            )
            val args: List<IrExpression> = getter.valueParameters.map { irGet(it) }",,e5cf
fun getOrCreateSerializerVarargFactory(),": IrSimpleFunction {
        irClass.findDeclaration<IrSimpleFunction> {
            it.name == SerialEntityNames.SERIALIZER_PROVIDER_NAME
                    && it.valueParameters.size == 1
                    && it.valueParameters.first().isVararg
                    && it.returnType.isKSerializer()
                    && it.isFromPlugin(compilerContext.afterK2)
        }",,58d8
fun generateSerializerFactoryIfNeeded(getterDescriptor: IrSimpleFunction),"{
        if (!irClass.needSerializerFactory(compilerContext)) return
        val serialFactoryDescriptor = getOrCreateSerializerVarargFactory()
        addFunctionBody(serialFactoryDescriptor) { factory ->
            val kSerializerStarType = factory.returnType
            val array = factory.valueParameters.first()
            val argsSize = serializableIrClass.typeParameters.size
            val arrayGet = compilerContext.irBuiltIns.arrayClass.owner.declarations.filterIsInstance<IrSimpleFunction>()
                .single { it.name.asString() == ""get"" }",,70f2
fun add(item: T),"{
       contents.add(item)
    }","// WITH_STDLIB
// JVM_ABI_K1_K2_DIFF: KT-63864",0bf3
fun unaryMinus(),": ArrayWrapper<T> {
        val result = ArrayWrapper<T>()
        result.contents.addAll(contents)
        result.contents.reverse()
        return result
    }",,4141
fun get(index: Int),": T {
        return contents.get(index)!!
    }",,60cf
fun box(),": String {
    val v1 = ArrayWrapper<String>()
    v1.add(""foo"")
    v1.add(""bar"")
    val v2 = -v1
    return if (v2[0] == ""bar"" && v2[1] == ""foo"") ""OK"" else ""fail""
}",,4f27
fun iterate(),"}

class Derived(t: List<Int>) : BaseGeneric<List<Int>>(t) {
    var test = 0

    override  {
        test = 0
        for (i in t.indices) {
            test = test * 10 + (i + 1)
        }",// WITH_STDLIB,f3ec
fun box(),": String {
    val t = Derived(listOf(1, 2, 3, 4))
    t.iterate()
    return if (t.test == 1234) ""OK"" else ""Fail: ${t.test}",,4f27
fun foo1(),{},// FILE: A.java,d289
fun deserialize(decoder: Decoder),: DummyBox<String> = T,// WITH_STDLIB,8000
"fun serialize(encoder: Encoder, value:DummyBox<String>)",: Unit = T,,e4e8
fun deserialize(decoder: Decoder),: Dummy = T,,8000
"fun serialize(encoder: Encoder, value: Dummy)",: Unit = T,,f4b5
fun deserialize(decoder: Decoder),: DummyBox<String> = T,,8000
"fun serialize(encoder: Encoder, value: DummyBox<String>)",: Unit = T,,1d27
fun deserialize(decoder: Decoder),: Dummy = T,,8000
"fun serialize(encoder: Encoder, value:Dummy)",: Unit = T,,3eba
fun deserialize(decoder: Decoder),: DummySpecified = T,,8000
"fun serialize(encoder: Encoder, value:DummySpecified)",: Unit = T,,f547
fun box(),": String {
    val descs = Holder.serializer().descriptor.elementDescriptors.toList()
    assertEquals(""ClassSerializerGeneric"", descs[0].serialName)
    assertEquals(""ClassSerializerDummy"", descs[1].serialName)
    assertEquals(""ObjectSerializerGeneric"", descs[2].serialName)
    assertEquals(""ObjectSerializerDummy"", descs[3].serialName)
    assertEquals(""ClassSerializerOnClass"", descs[4].serialName)
    return ""OK""
}",,4f27
No signature found,fun <R> build(block: TestInterface<R>.() -> Unit): R = T,"// !LANGUAGE: +UnrestrictedBuilderInference
// !DIAGNOSTICS: -DEPRECATION -UNCHECKED_CAST -OPT_IN_IS_NOT_ENABLED
// WITH_STDLIB
// ISSUE: KT-61250 (for K2/PCLA difference)

// FILE: main.kt",6e1f
No signature found,fun <R> build2(block: TestInterface<R>.() -> Unit): R = T,,6e1f
fun emit(r: R),"fun get(): R
    fun getInv(): Inv<R>
    fun getOut(): Inv<out R>
    fun getIn(): Inv<in R>
}

class Inv<T>

fun <K> captureOut(x: Inv<out K>): K = n",,cdd5
fun <K> captureIn(x: Inv<out K>),: K = n,,62df
fun <K> capture(x: Inv<K>),: K = n,,55d9
fun main(),"{
    build {
        emit("""")
        getInv()
        captureOut(getInv())
        captureIn(getInv())

        // K is fixed into CapturedType(out NotFixed: TypeVariable(R))
        <!NEW_INFERENCE_NO_INFORMATION_FOR_PARAMETER!>capture<!>(<!ARGUMENT_TYPE_MISMATCH!>getOut()<!>)
        """"
    }",,d987
No signature found,"fun ClassDescriptor.hasCreatorField(): Boolean {
        val companionObject = companionObjectDescriptor ?: return false

        if (companionObject.name == CREATOR_NAME) {
            return true
        }",,6e1f
No signature found,"fun ClassDescriptor.isParcelizeClassDescriptor(parcelizeAnnotations: List<FqName>)
        = k",,6e1f
No signature found,fun ClassDescriptor.hasSyntheticDescribeContents() = h,,6e1f
No signature found,fun ClassDescriptor.hasSyntheticWriteToParcel() = h,,6e1f
No signature found,"fun ClassDescriptor.findFunction(componentKind: ParcelizeSyntheticComponent.ComponentKind): SimpleFunctionDescriptor? {
        return unsubstitutedMemberScope
            .getContributedFunctions(Name.identifier(componentKind.methodName), NoLookupLocation.WHEN_GET_ALL_DESCRIPTORS)
            .firstOrNull { (it as? ParcelizeSyntheticComponent)?.componentKind == componentKind }",,6e1f
No signature found,"fun ClassDescriptor.hasParcelizeSyntheticMethod(componentKind: ParcelizeSyntheticComponent.ComponentKind): Boolean {
        val methodName = Name.identifier(componentKind.methodName)

        val writeToParcelMethods = unsubstitutedMemberScope
            .getContributedFunctions(methodName, NoLookupLocation.FROM_BACKEND)
            .filter { it is ParcelizeSyntheticComponent && it.componentKind == componentKind }",,6e1f
No signature found,"fun inlineFun(b: () -> Unit) {
    if (DEBUG) {
        inlineFunReal(b)
    }","// CHECK_STATE_MACHINE
// WITH_COROUTINES
// NO_CHECK_LAMBDA_INLINING
// WITH_STDLIB
// FILE: test.kt",6e1f
No signature found,"fun inlineFunReal(b: () -> Unit) {
    try {
        b()
    }",,6e1f
No signature found,"fun builder(c: suspend () -> Unit) {
    c.startCoroutine(CheckStateMachineContinuation)
}",,6e1f
fun test(),"{
        inlineFun {
            builder {
                inlineFun {
                    suspendFun()
                    suspendFun()
                }",// FILE: box.kt,fe98
fun suspendFun(),= S,,c386
fun box(),": String {
    StateMachineChecker.reset()
    Sample().test()
    StateMachineChecker.check(0, checkFinished = false)
    return ""OK""
}",,4f27
fun mapConstEnumEntry(entry: IrEnumEntry),": Int =
        e",,10f3
"fun mapRuntimeEnumEntry(builder: IrBuilderWithScope, subject: IrExpression)",": IrExpression =
        b",,acb9
fun lower(irFile: IrFile),"{
        visitFile(irFile)
    }",,a3a5
fun visitBlock(expression: IrBlock),": IrExpression {
        expression.transformChildrenVoid()

        // NB: See BranchingExpressionGenerator to get insight about `when` block translation to IR.
        if (expression.origin != IrStatementOrigin.WHEN) {
            return expression
        }",,ba88
"fun possibleToGenerateJumpTable(irWhen: IrWhen, subject: IrVariable)",": Boolean {
        for (irBranch in irWhen.branches) {
            val condition = irBranch.condition as? IrCall ?: continue
            if (condition.symbol != context.irBuiltIns.eqeqSymbol)
                return false

            val lhs = condition.getValueArgument(0)!!
            val rhs = condition.getValueArgument(1)!!
            val other = getOther(lhs, rhs, subject)
            if (other is IrCall) {
                return false
            }",// when-block with subject should have two children: temporary variable and when itself.,7d19
"fun getOther(lhs: IrExpression, rhs: IrExpression, subject: IrVariable)",": IrExpression? {
        return when {
            lhs is IrGetValue && lhs.symbol.owner == subject ->
                rhs
            rhs is IrGetValue && rhs.symbol.owner == subject ->
                lhs
            else ->
                return null
        }",,9714
"fun transformBranches(
        irWhen: IrWhen,
        subject: IrVariable,
        subjectOrdinalProvider: Lazy<IrVariable>
    )",": IrExpression {
        for (irBranch in irWhen.branches) {
            irBranch.condition = transformBranchSubexpression(irBranch.condition, subject, subjectOrdinalProvider)
            irBranch.result = transformBranchSubexpression(irBranch.result, subject, subjectOrdinalProvider)
        }",,10d9
"fun transformBranchSubexpression(
        irExpression: IrExpression,
        subject: IrVariable,
        subjectOrdinalProvider: Lazy<IrVariable>
    )",": IrExpression =
        w",,0bcc
"fun transformEnumEquals(
        expression: IrCall,
        subject: IrVariable,
        subjectOrdinalProvider: Lazy<IrVariable>
    )",": IrExpression {
        // We are looking for branch that is a comparison of the subject and another enum entry.
        if (expression.symbol != context.irBuiltIns.eqeqSymbol) {
            return expression
        }",,13f8
fun toString(),= t,,a535
No signature found,"fun SourceText.hasAnythingButComments(): Boolean =
    d",,6e1f
No signature found,"fun NumberedSourceLine.getExistingPackageName(): PackageName? =
    t",,6e1f
No signature found,"fun SourceText.dropNonMeaningfulLines(): Sequence<NumberedSourceLine> {
    var inMultilineComment = false

    return lineSequence()
        .mapIndexed { lineNumber, line -> NumberedSourceLine(lineNumber, line.trim()) }",,6e1f
No signature found,fun SourceLine.isMeaningfulLine() = i,,6e1f
fun getTag(),: Tag<*> = t,"// KT-42036
// IGNORE_BACKEND: JS_IR

// KT-61141: getTag() throws kotlin.Exception instead of java.lang.Exception
// IGNORE_BACKEND: NATIVE",dab7
fun doAction(),"{
    getTag().action
}",,74ad
fun <T> test(a: Base<B>),where T: Base<A> = a,// FIR_IDENTICAL,9ce9
No signature found,"fun UIntArray.elementAtOrElse(index: Int, defaultValue: (Int) -> UInt): UInt {
    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)
}",,6e1f
No signature found,"fun UIntArray.first(): UInt {
    return storage.first().toUInt()
}",,6e1f
No signature found,"fun ULongArray.first(): ULong {
    return storage.first().toULong()
}",,6e1f
No signature found,"fun UByteArray.first(): UByte {
    return storage.first().toUByte()
}",,6e1f
No signature found,"fun UShortArray.first(): UShort {
    return storage.first().toUShort()
}",,6e1f
fun component1(),: String = a,,fd7c
fun component2(),: String = b,,e66b
No signature found,fun S.component3() = (,,6e1f
fun box(),": String {
    val (o,k,ok,ok2) = S(""O"",""K"")
    return o + k + ok + ok2
  }",,4f27
No signature found,fun S.component4() = (,,6e1f
fun box(),= T,,4f27
fun plusK(s: String),= s,"// TARGET_BACKEND: JVM
// JVM_TARGET: 1.8
// SAM_CONVERSIONS: INDY
// FULL_JDK

// CHECK_BYTECODE_TEXT
// JVM_IR_TEMPLATES
// 2 java/lang/invoke/LambdaMetafactory

// FILE: serializableTopLevelFunRefAsGenericInterface.kt",4574
fun box(),": String {
    return roundtrip(Sam<String>(::plusK))
        .get(""O"")
}",,4f27
fun <T> roundtrip(x: T),": T {
    val out1 = ByteArrayOutputStream()
    ObjectOutputStream(out1).writeObject(x)
    return ObjectInputStream(ByteArrayInputStream(out1.toByteArray())).readObject() as T
}",,2092
fun foo(s: String),{},,b751
fun test(a: A),"{
    foo(""$a"")
}",,a3e0
fun getFoo(),": F
    <!NOTHING_TO_OVERRIDE!>override<!> fun getBar(): F
}

interface D1 : JA<String>, KB<String>
interface E1 : D1 {
    override : String
    override fun getBar(): String
}",// FILE: JA.java,5fb9
fun getFoo(),": String
    override fun getBar(): String
}

fun main(
    d1: D1, e1: E1,
    d2: D2, e2: E2,
) {
    d1.foo
    d1.<!UNRESOLVED_REFERENCE!>bar<!>
    e1.foo
    e1.<!UNRESOLVED_REFERENCE!>bar<!>

    d2.foo
    d2.<!UNRESOLVED_REFERENCE!>bar<!>
    e2.foo
    e2.<!UNRESOLVED_REFERENCE!>bar<!>
}",,5fb9
No signature found,"fun if1(f: (Int) -> Int, a: Int, b: Int, c: Int): Int {
    val result = f(a)

    if (result == b) {
        return f(a)
    }",// EXPECTED_REACHABLE_NODES: 1281,6e1f
fun test(x: Int),": Int {
    val test1 = if1({ it }",,b707
fun box(),": String {
    var result = test(2)
    if (result != 2) return ""fail1: $result""

    result = test(100)
    if (result != 3) return ""fail2: $result""

    return ""OK""
}",,4f27
fun test(d: DataClass),"{
    val (x) = d
    val c = d.component1()
}","// !OPT_IN: kotlin.RequiresOptIn
// FILE: api.kt


// MODULE: A",b692
No signature found,"fun TestConfigurationBuilder.configureFrontend() {
        globalDefaults {
            frontend = FrontendKinds.FIR
        }",,6e1f
fun getPackageNames(),: Set<String> = e,,46ae
fun getTopLevelClassifierNamesInPackage(packageFqName: FqName),: Set<Name> = e,,24ca
fun getTopLevelCallableNamesInPackage(packageFqName: FqName),: Set<Name> = e,,446c
fun getClassLikeSymbolByClassId(classId: ClassId),": FirClassLikeSymbol<*>? {
        if (!classId.mayBeSyntheticFunctionClassName()) return null
        if (classId.packageFqName !in combinedPackageNames) return null

        return providers.firstNotNullOfOrNull { it.getClassLikeSymbolByClassId(classId) }",,69c5
No signature found,"fun getTopLevelCallableSymbolsTo(destination: MutableList<FirCallableSymbol<*>>, packageFqName: FqName, name: Name) {
    }",,6e1f
"fun getTopLevelFunctionSymbolsTo(destination: MutableList<FirNamedFunctionSymbol>, packageFqName: FqName, name: Name)","{
    }",,a36b
"fun getTopLevelPropertySymbolsTo(destination: MutableList<FirPropertySymbol>, packageFqName: FqName, name: Name)","{
    }",,5589
fun getPackage(fqName: FqName),: FqName? = f,,aaa4
"fun merge(session: FirSession, providers: List<FirSyntheticFunctionInterfaceProviderBase>)",": FirSymbolProvider? =
            i",,0a00
fun box(),": String {
    var state = 0
    val name = (state++)::toString.name
    if (name != ""toString"") return ""Fail 1: $name""

    val name2 = with(state++) {
        ::toString.name
        ::toString.name
        ::toString.name
    }",// SKIP_SOURCEMAP_REMAPPING,4f27
No signature found,"fun <reified T : Any> Array<*>.isArrayOf(): Boolean =
    T",,6e1f
No signature found,"fun MutableList<String>.addNonEmpty(elements: List<String>) {
        addAll(elements.filter { it.isNotEmpty() }",,6e1f
fun runTool(vararg command: String),"=
            C",,952f
"fun targetTool(tool: String, vararg arg: String)","{
        val absoluteToolName = ""${platform.absoluteTargetToolchain}",,d3c3
"fun hostLlvmTool(tool: String, vararg arg: String)","{
        val absoluteToolName = ""${platform.absoluteLlvmHome}",,118b
"fun clang(configurables: ClangFlags, bitcodeFile: File, objectFile: File)","{
        val targetTriple = if (configurables is AppleConfigurables) {
            platform.targetTriple.withOSVersion(configurables.osVersionMin)
        }",,ab90
No signature found,fun RelocationModeFlags.Mode.translateToClangCc1Flag() = w,,6e1f
"fun makeObjectFile(bitcodeFile: File, objectFile: File)","=
            w",,592c
fun foo(),{},// !LANGUAGE: -ProhibitVisibilityOfNestedClassifiersFromSupertypesOfCompanion,519f
fun bar(),{},,66c3
fun fas(),{},,d9e8
fun f(),{},,f6fb
fun usage(),{},// FILE: Foo.kt,455a
"fun shouldRenderReturnType(type: KtType, symbol: KtCallableSymbol)",": Boolean

    public object ALWAYS : KtCallableReturnTypeFilter {
        context(KtAnalysisSession)
        override : Boolean {
            return true
        }",,e09d
"fun shouldRenderReturnType(type: KtType, symbol: KtCallableSymbol)",": Boolean {
            return when (symbol) {
                is KtFunctionSymbol -> !type.isUnit
                else -> true
            }",,e09d
fun bar(),{},// FIR_IDENTICAL,66c3
fun foo(),"<!> = """,,519f
fun testCommon(base: Base),"{
    val x = when (base) { // must be Ok
        is A -> 1
        B -> 2
    }","// TARGET_BACKEND: JVM
// !LANGUAGE: +MultiPlatformProjects
// ISSUE: KT-44474

// MODULE: m1-common
// FILE: common.kt",d681
fun testPlatform(base: Base),"{
    val x = when (base) { // must be OK
        is A -> 1
        B -> 2
    }",,74f3
fun box(),"= """,,4f27
No signature found,"fun <R, S> Wrapper.foo(x: R): S = T","// !CHECK_TYPE
// !DIAGNOSTICS: -UNUSED_PARAMETER, -UNUSED_VARIABLE",6e1f
No signature found,"fun Wrapper.fooIntString(x: Int): String = """,,6e1f
No signature found,"fun <T> Wrapper.fooReturnString(x: T): String = """,,6e1f
No signature found,fun <T> Wrapper.fooTakeInt(x: Int): T = T,,6e1f
No signature found,"fun <T, R, S> bar(f: T.(R) -> S): Tripple<T, R, S> = T",,6e1f
No signature found,"fun <T, R, S> baz(x: T, y: R, z: S, f: T.(R) -> S): Tripple<T, R, S> = T",,6e1f
fun test1(),"{
    val x: Wrapper.(String) -> Boolean = Wrapper::foo
    bar<Wrapper, Double, Float>(Wrapper::foo).checkType { _<Tripple<Wrapper, Double, Float>>() }",,fa3b
fun <T> test2(),"{
    bar<Wrapper, Int, String>(Wrapper::fooReturnString).checkType { _<Tripple<Wrapper, Int, String>>() }",,bcfc
No signature found,"fun CharSequence?.isNullOrEmpty(): Boolean {
    contract {
        returns(false) implies (this@isNullOrEmpty != null)
    }","// !LANGUAGE: +AllowContractsForCustomFunctions +UseReturnsEffect -ContractsOnCallsWithImplicitReceiver
// !OPT_IN: kotlin.contracts.ExperimentalContracts
// !DIAGNOSTICS: -INVISIBLE_REFERENCE -INVISIBLE_MEMBER
//
// ISSUE: KT-28672",6e1f
No signature found,"fun smartcastOnReceiver(s: String?) {
    with(s) {
        if (isNullOrEmpty()) {
            <!UNSAFE_CALL!>length<!>
        }",,6e1f
No signature found,"fun mixedReceiver(s: String?) {
    if (!s.isNullOrEmpty()) {
        with(<!DEBUG_INFO_SMARTCAST!>s<!>) {
            length
        }",,6e1f
fun box(),": String {
    val clazz = Base::class.java
    if (!clazz.isSealed) return ""Error: Base is not sealed""
    return clazz.permittedSubclasses.joinToString("""") { it.simpleName ?: ""_No name provided_"" }","// WITH_REFLECT
// FILE: Base.java",4f27
fun box(),": String {
    for (x in FloatArray(5)) {
        if (x != 0.toFloat()) return ""Fail $x""
    }",,4f27
fun test(b: Boolean),": Int {
    if (<expr>b</expr>) {
        return 54
    }",,69ac
fun box(),"{
    foo({
            val a = 1
        }",// FILE: test.kt,4f27
No signature found,"fun foo(f: () -> Unit) {
    f()
}",,6e1f
"fun box(a: Any, b: Any)",": Pair<I, I?> {
    return Pair(<!UNCHECKED_CAST_TO_EXTERNAL_INTERFACE!>a as I<!>, <!UNCHECKED_CAST_TO_EXTERNAL_INTERFACE!>b as? I<!>)
}","// FIR_IDENTICAL
// DIAGNOSTICS: +UNCHECKED_CAST_TO_EXTERNAL_INTERFACE",57bb
fun box(),": String {
    val value = 0

    val withoutSubject = when (value.toInlineLong) {
        0.toInlineLong -> true
        else -> false
    }","// WITH_STDLIB
// WORKS_WHEN_VALUE_CLASS
// LANGUAGE: +ValueClasses",4f27
No signature found,"fun <L> runLogged(action: () -> L): L {
    return action()
}",,6e1f
No signature found,"fun String.getValue(receiver: Any?, p: Any): String =
    r",,6e1f
No signature found,"fun <F : FirClassLikeDeclaration> F.runAllPhasesForLocalClass(
    components: FirAbstractBodyResolveTransformer.BodyResolveTransformerComponents,
    resolutionMode: ResolutionMode,
): F {
    if (status is FirResolvedDeclarationStatus) return this
    if (this is FirRegularClass) {
        components.context.storeClassIfNotNested(this, components.session)
    }",,6e1f
fun box(),": String {
    val obj = FluentTest()
    assertEquals(obj.age(), 10)

    obj.primitiveBoolean()

    obj.boxedBoolean()

    obj.overrideAnnotation
    obj.getOverrideAnnotation()

    OverridenGetterTest().usage()
    return ""OK""
}",// FILE: FluentTest.java,4f27
fun usage(),"{
        name()
    }",,455a
fun explicitType(),: T? = n,// MEMBER_NAME_FILTER: resolveMe,12bc
fun box(),= F,// EXPECTED_REACHABLE_NODES: 1373,4f27
No signature found,"fun test(b: Any?): Int {
    <expr>b is Number</expr>
    if (b is String) {
        return 54
    }",,6e1f
fun box(),": String {
    val rem = u % ub
    if (rem != uc) throw AssertionError(""$rem"")

    return ""OK""
}",// WITH_STDLIB,4f27
fun signInFlowStepFirst(),: Result<Unit> = R,,3f6b
fun returnsUnboxed(),: OurAny = O,,4d02
No signature found,fun foo(x: (Int) -> String) {},"// SKIP_TXT
// !DIAGNOSTICS: -UNUSED_PARAMETER
// FILE: JavaClass.java",6e1f
fun main(),"{
    foo(JavaClass<*>::<!UNRESOLVED_REFERENCE!>baz<!>)
}",,d987
fun box(),":String {
    J(Email(""test""))
    return ""OK""
}","// TARGET_BACKEND: JVM_IR
// WITH_STDLIB

// FILE: J.java",4f27
fun foo(),": T
}

fun <T : X> foo(x: T) {}",,519f
fun someFunction(),{},,1f75
fun foo(y: String),"{
    var x: String? = null
    y.let { x = it }",// KT-9051: Allow smart cast for captured variables if they are not modified,d1f3
No signature found,"fun createLibrarySession(
        mainModuleName: Name,
        sessionProvider: FirProjectSessionProvider,
        moduleDataProvider: ModuleDataProvider,
        projectEnvironment: AbstractProjectEnvironment,
        extensionRegistrars: List<FirExtensionRegistrar>,
        scope: AbstractProjectFileSearchScope,
        packagePartProvider: PackagePartProvider,
        languageVersionSettings: LanguageVersionSettings,
        predefinedJavaComponents: FirSharableJavaComponents?,
        registerExtraComponents: ((FirSession) -> Unit),
    ): FirSession {
        return createLibrarySession(
            mainModuleName,
            sessionProvider,
            moduleDataProvider,
            languageVersionSettings,
            extensionRegistrars,
            registerExtraComponents = {
                it.registerDefaultComponents()
                it.registerJavaComponents(projectEnvironment.getJavaModuleResolver(), predefinedJavaComponents)
                registerExtraComponents(it)
            }",,6e1f
No signature found,"fun createModuleBasedSession(
        moduleData: FirModuleData,
        sessionProvider: FirProjectSessionProvider,
        javaSourcesScope: AbstractProjectFileSearchScope,
        projectEnvironment: AbstractProjectEnvironment,
        createIncrementalCompilationSymbolProviders: (FirSession) -> FirJvmIncrementalCompilationSymbolProviders?,
        extensionRegistrars: List<FirExtensionRegistrar>,
        languageVersionSettings: LanguageVersionSettings,
        jvmTarget: JvmTarget,
        lookupTracker: LookupTracker?,
        enumWhenTracker: EnumWhenTracker?,
        importTracker: ImportTracker?,
        predefinedJavaComponents: FirSharableJavaComponents?,
        needRegisterJavaElementFinder: Boolean,
        registerExtraComponents: ((FirSession) -> Unit),
        init: FirSessionConfigurator.() -> Unit,
    ): FirSession {
        return createModuleBasedSession(
            moduleData,
            sessionProvider,
            extensionRegistrars,
            languageVersionSettings,
            lookupTracker,
            enumWhenTracker,
            importTracker,
            init,
            registerExtraComponents = {
                it.registerDefaultComponents()
                it.registerJavaComponents(projectEnvironment.getJavaModuleResolver(), predefinedJavaComponents)
                it.register(FirJvmTargetProvider::class, FirJvmTargetProvider(jvmTarget))
                registerExtraComponents(it)
            }",,6e1f
No signature found,"fun KotlinGradleProjectCheckerContext.runChecks(collector: KotlinToolingDiagnosticsCollector) {
        val sourceSets = this.multiplatformExtension?.awaitSourceSets() ?: return

        // A ""good"" source set is part of only single Source Set Tree
        val goodSourceSets = mutableMapOf<KotlinSourceSet, KotlinSourceSetTree?>()
        // A ""bad"" source set is part of >=2 Source Set Trees
        val badSourceSets = mutableMapOf<KotlinSourceSet, Set<KotlinSourceSetTree?>>()
        // A ""leaf"" source set is a source set with known Source Set Tree by default
        val leafSourceSets = multiplatformExtension
            .awaitTargets()
            .filter { it !is KotlinMetadataTarget }",,6e1f
No signature found,"fun KotlinSourceSet.addReverseDependencyTo(that: KotlinSourceSet) =
            r",,6e1f
No signature found,"fun KotlinGradleProjectCheckerContext.reportAllDependentsOfLeafSourceSets(
        collector: KotlinToolingDiagnosticsCollector,
        leafSourceSets: Set<KotlinSourceSet>,
        reverseSourceSetDependencies: Map<KotlinSourceSet, Set<KotlinSourceSet>>,
    ) {
        for (leafSourceSet in leafSourceSets) {
            val dependents = reverseSourceSetDependencies[leafSourceSet].orEmpty()
            for (dependent in dependents) {
                collector.report(
                    project,
                    KotlinSourceSetDependsOnDefaultCompilationSourceSet(dependent.name, leafSourceSet.name)
                )
            }",,6e1f
No signature found,"fun KotlinGradleProjectCheckerContext.reportSingleSourceSetWithDifferentSourceSetTree(
        collector: KotlinToolingDiagnosticsCollector,
        badSourceSet: KotlinSourceSet,
        dependentsBySourceSetTree: Map<KotlinSourceSetTree?, List<KotlinSourceSet>>
    ): Boolean {
        val singleDependee = dependentsBySourceSetTree
            .values
            .singleOrNull { it.size == 1 }",,6e1f
No signature found,"fun KotlinGradleProjectCheckerContext.reportAllIncorrectSourceSetEdges(
        collector: KotlinToolingDiagnosticsCollector,
        badSourceSet: KotlinSourceSet,
        dependentsBySourceSetTree: Map<KotlinSourceSetTree?, List<KotlinSourceSet>>,
    ) {
        val dependentsGroup = dependentsBySourceSetTree
            .mapKeys { it.key?.name ?: ""null"" }",,6e1f
fun box(),": String {
    val x : Base = Child(5)
    assertEquals(5, x.id)
    val y : Base2 = Child2(Child(5))
    assertEquals(""Child(id=5)"", y.prop.toString())

    return ""OK""
}",// WITH_STDLIB,4f27
fun box(),": String {
    val augAssignmentPure = AugmentedAssignmentPure()
    var v1 = ""FAIL""
    augAssignmentPure %= { v1 = ""OK"" }","// TARGET_BACKEND: JVM
// !LANGUAGE: -ProhibitOperatorMod
// IGNORE_BACKEND_K2: JVM_IR, JS_IR, JS_IR_ES6
// FIR status: don't support legacy feature
// MODULE: lib
// FILE: Java.java",4f27
fun test(),"{
    <!DEPRECATED_ACCESS_TO_ENUM_ENTRY_COMPANION_PROPERTY!>A.entries<!>
    A.Companion.entries

    with(A) {
        entries
        this.entries
        <!UNRESOLVED_REFERENCE!>values<!>() // to be sure that we don't resolve into synthetic 'values'
    }","// !LANGUAGE: -EnumEntries
// WITH_STDLIB",fe98
No signature found,"fun fInt(g: (Int) -> Unit) {
    g(1)
}",,6e1f
No signature found,"fun fBoolean(g: (Boolean) -> Unit) {
    g(true)
}",,6e1f
No signature found,"fun fChar(g: (Char) -> Unit) {
    g('a')
}",,6e1f
No signature found,"fun fByte(g: (Byte) -> Unit) {
    g(1)
}",,6e1f
No signature found,"fun fShort(g: (Short) -> Unit) {
    g(1)
}",,6e1f
No signature found,"fun fFloat(g: (Float) -> Unit) {
    g(1.0f)
}",,6e1f
No signature found,"fun fLong(g: (Long) -> Unit) {
    g(1L)
}",,6e1f
No signature found,"fun fDouble(g: (Double) -> Unit) {
    g(1.0)
}",,6e1f
fun bar(),"{
    fInt { }",,66c3
fun baz(),"{
    fInt { }",,b22f
No signature found,fun podGenFullTaskName(familyName: String = d,,6e1f
No signature found,fun podSetupBuildFullTaskName(podName: String = d,,6e1f
No signature found,fun podBuildFullTaskName(podName: String = d,,6e1f
No signature found,fun cinteropFullTaskName(podName: String = d,,6e1f
fun setUp(),"{
        ensureCocoapodsInstalled()
    }",,3705
fun testPodDownloadGitNoTagNorCommit(gradleVersion: GradleVersion),"{
        doTestGit(gradleVersion)
    }",,b50c
fun testPodDownloadGitTag(gradleVersion: GradleVersion),"{
        doTestGit(gradleVersion, tag = ""4.0.0"")
    }",,0146
fun testPodDownloadGitCommit(gradleVersion: GradleVersion),"{
        doTestGit(gradleVersion, commit = ""9c07ac0a5645abb58850253eeb109ed0dca515c1"")
    }",,eae9
fun testPodDownloadGitBranch(gradleVersion: GradleVersion),"{
        doTestGit(gradleVersion, branch = ""2974"")
    }",,8388
fun testPodDownloadGitSubspec(gradleVersion: GradleVersion),"{
        doTestGit(
            gradleVersion,
            repo = ""https://github.com/SDWebImage/SDWebImage.git"",
            pod = ""SDWebImage/MapKit"",
            tag = ""5.9.2""
        )
    }",,ac93
fun testPodDownloadGitBranchAndCommit(gradleVersion: GradleVersion),"{
        doTestGit(
            gradleVersion,
            branch = ""2974"",
            commit = ""21637dd6164c0641e414bdaf3885af6f1ef15aee""
        )
    }",,71b1
fun testPodDownloadGitBranchAndTag(gradleVersion: GradleVersion),"{
        doTestGit(
            gradleVersion,
            tag = ""4.0.0"",
            branch = ""2974""
        )
    }",,0739
fun testGroovyDownloadAndImport(gradleVersion: GradleVersion),"{
        doTestGit(
            gradleVersion,
            groovyTemplateProjectName,
            tag = ""4.0.0"",
            isGradleBuildScript = true
        )
    }",,1d1c
fun testCinteropUpToDate(gradleVersion: GradleVersion),"{
        doTestGit(gradleVersion) {

            build(
                ""syncFramework"",
                buildOptions = defaultBuildOptions.copy(
                    nativeOptions = defaultBuildOptions.nativeOptions.copy(
                        cocoapodsGenerateWrapper = true,
                        cocoapodsArchs = ""x86_64"",
                        cocoapodsConfiguration = ""Debug"",
                        cocoapodsPlatform = ""iphonesimulator"",
                    )
                )
            ) {
                assertTasksUpToDate(
                    defaultCinteropTaskName
                )
            }",,5d9f
fun basicUTDTest(gradleVersion: GradleVersion),"{
        val tasks = listOf(
            podspecTaskName,
            defaultPodGenTaskName,
            defaultPodInstallSyntheticTaskName,
            defaultSetupBuildTaskName,
            defaultBuildTaskName,
            defaultCinteropTaskName,
        )
        doTestGit(
            gradleVersion,
            testImportAssertions = { assertTasksExecuted(tasks) }",,df59
fun testUTDPodAdded(gradleVersion: GradleVersion),"{
        nativeProjectWithCocoapodsAndIosAppPodFile(gradleVersion = gradleVersion) {
            buildGradleKts.addPod(defaultPodName, produceGitBlock())
            testImport()

            val anotherPodName = ""Base64""
            val anotherPodRepo = ""https://github.com/ekscrypto/Base64""
            buildGradleKts.addPod(anotherPodName, produceGitBlock(anotherPodRepo, tagName = ""1.2.2""))
            testImport(repos = listOf(defaultPodRepo, anotherPodRepo)) {

                assertTasksExecuted(
                    podspecTaskName,
                    defaultPodGenTaskName,
                    podSetupBuildFullTaskName(anotherPodName),
                    podBuildFullTaskName(anotherPodName),
                    cinteropFullTaskName(anotherPodName)
                )
                assertTasksUpToDate(
                    defaultSetupBuildTaskName,
                    defaultBuildTaskName,
                    defaultCinteropTaskName
                )

                buildGradleKts.removePod(anotherPodName)

                testImport {
                    assertOutputDoesNotContain(podBuildFullTaskName(anotherPodName))
                    assertOutputDoesNotContain(cinteropFullTaskName(anotherPodName))
                    assertTasksUpToDate(
                        defaultBuildTaskName,
                        defaultSetupBuildTaskName,
                        defaultCinteropTaskName
                    )
                }",,3cfa
fun testUTDTargetAdded(gradleVersion: GradleVersion),"{
        nativeProjectWithCocoapodsAndIosAppPodFile(gradleVersion = gradleVersion) {
            buildGradleKts.addPod(defaultPodName, produceGitBlock())

            testImport()

            buildGradleKts.addCocoapodsBlock(""osx.deploymentTarget = \""10.15\"""")
            testImport()

            val tasks = listOf(
                podspecTaskName,
                defaultPodGenTaskName,
                defaultSetupBuildTaskName,
                defaultBuildTaskName,
                defaultCinteropTaskName
            )
            val anotherTarget = ""MacosX64""
            val anotherSdk = ""macosx""
            val anotherFamily = ""macos""
            buildGradleKts.addKotlinBlock(anotherTarget.replaceFirstChar { it.lowercase(Locale.getDefault()) }",,b0e0
fun testUTDBuild(gradleVersion: GradleVersion),"{
        nativeProjectWithCocoapodsAndIosAppPodFile(gradleVersion = gradleVersion) {
            buildGradleKts.addPod(defaultPodName, produceGitBlock())

            testImport {
                assertTasksExecuted(defaultBuildTaskName)
            }",,bd58
fun testPodBuildUTDClean(gradleVersion: GradleVersion),"{
        nativeProjectWithCocoapodsAndIosAppPodFile(gradleVersion = gradleVersion) {
            buildGradleKts.addPod(defaultPodName, produceGitBlock())

            testImport {
                assertTasksExecuted(defaultBuildTaskName)
            }",,6c0e
fun testUseDynamicFramework(gradleVersion: GradleVersion),"{
        nativeProjectWithCocoapodsAndIosAppPodFile(gradleVersion = gradleVersion) {
            buildGradleKts.addPod(defaultPodName, produceGitBlock())
            buildGradleKts.addFrameworkBlock(""isStatic = false"")

            build(""linkPodDebugFrameworkIOS"") {
                val framework = projectPath.resolve(""build/bin/iOS/podDebugFramework/cocoapods.framework/cocoapods"")
                val processRunResult = runProcess(
                    listOf(""file"", framework.absolutePathString()),
                    workingDir = projectPath.toFile(),
                    environmentVariables = environmentVariables.environmentalVariables
                )
                assertProcessRunResult(processRunResult) {
                    assertTrue(isSuccessful)
                    assertTrue(output.contains(""dynamically linked shared library""))
                }",,7af5
fun testUseStaticFramework(gradleVersion: GradleVersion),"{
        nativeProjectWithCocoapodsAndIosAppPodFile(gradleVersion = gradleVersion) {
            buildGradleKts.addPod(defaultPodName, produceGitBlock())
            buildGradleKts.addFrameworkBlock(""isStatic = true"")

            build(""linkPodDebugFrameworkIOS"") {
                val framework = projectPath.resolve(""build/bin/iOS/podDebugFramework/cocoapods.framework/cocoapods"")
                val processRunResult = runProcess(
                    listOf(""file"", framework.absolutePathString()),
                    workingDir = projectPath.toFile(),
                    environmentVariables = environmentVariables.environmentalVariables
                )
                assertProcessRunResult(processRunResult) {
                    assertTrue(isSuccessful)
                    assertTrue(output.contains(""current ar archive""))
                }",,68ec
fun testUTDPodGen(gradleVersion: GradleVersion),"{
        nativeProjectWithCocoapodsAndIosAppPodFile(gradleVersion = gradleVersion) {

            buildGradleKts.addPod(defaultPodName)
            val repos = listOf(
                ""https://github.com/alozhkin/spec_repo_example"",
                ""https://github.com/alozhkin/spec_repo_example_2""
            )

            isRepoAvailable(repos)

            build(defaultPodGenTaskName) {
                assertTasksExecuted(defaultPodGenTaskName)
            }",,d7ab
fun testSpecReposUTD(gradleVersion: GradleVersion),"{
        nativeProjectWithCocoapodsAndIosAppPodFile(gradleVersion = gradleVersion) {

            buildGradleKts.addPod(""AFNetworking"")
            build(defaultPodGenTaskName) {
                assertTasksExecuted(defaultPodGenTaskName)
            }",,f551
fun testImportSubspecs(gradleVersion: GradleVersion),"{
        nativeProjectWithCocoapodsAndIosAppPodFile(gradleVersion = gradleVersion) {
            buildGradleKts.addPod(""SDWebImage/Core"")
            buildGradleKts.addPod(""SDWebImage/MapKit"")
            testImport()
        }",,2f3f
fun testUseLibrariesMode(gradleVersion: GradleVersion),"{
        nativeProjectWithCocoapodsAndIosAppPodFile(projectName = ""native-cocoapods-template-groovy"", gradleVersion = gradleVersion) {
            buildGradle.addCocoapodsBlock(""useLibraries()"".trimIndent())
            buildGradle.addPod(""AFNetworking"", configuration = ""headers = \""AFNetworking/AFNetworking.h\"""")
            testImport {
                assertHasDiagnostic(CocoapodsPluginDiagnostics.UseLibrariesUsed)
            }",,bef9
fun testSpecReposImport(gradleVersion: GradleVersion),"{
        val podName = ""example""
        val podRepo = ""https://github.com/alozhkin/spec_repo""
        nativeProjectWithCocoapodsAndIosAppPodFile(gradleVersion = gradleVersion) {
            buildGradleKts.addPod(podName)
            buildGradleKts.addSpecRepo(podRepo)

            testImport(repos = listOf(podRepo)) {
                podImportAsserts(buildGradleKts)
            }",,3ca7
fun podInstallSynthetic(version: String),"fun testOutdatedSpecRepo(
        gradleVersion: GradleVersion,
        @TempDir testPodsHomeDir: Path
    ) {
        nativeProjectWithCocoapodsAndIosAppPodFile(
            outdatedRepoName,
            gradleVersion,
            environmentVariables = EnvironmentalVariables(mapOf(""CP_HOME_DIR"" to testPodsHomeDir.absolutePathString()))
        ) {
            val podLibrary = projectPath.resolve(customPodLibraryName)
            val privateSpecGit = projectPath.resolve(privateSpecGitRepo)
            val privateSpecGitUri = privateSpecGit.toUri().toString()

            buildGradleKts.addSpecRepo(privateSpecGitUri)

             {
                buildGradleKts.addPod(customPodLibraryName, ""version = \""$version\"""")
                build(defaultPodGenTaskName) {
                    assertTasksExecuted(defaultPodGenTaskName)
                }",,9aaa
No signature found,"fun doTestGit(
        gradleVersion: GradleVersion,
        projectName: String = t",,6e1f
No signature found,"fun produceGitBlock(
        repo: String = d",,6e1f
fun isRepoAvailable(repos: List<String>),= r,,283c
No signature found,"fun TestProject.testImport(
        taskName: String = p",,6e1f
fun <T> foo(l: MutableList<T>),: MutableList<T> = l,"// FIR_IDENTICAL
// !CHECK_TYPE
// !DIAGNOSTICS: -UNUSED_VARIABLE",ca9d
fun test(l: MutableList<out Int>),"{
    val a: MutableList<out Int> = foo(l)
    val b = foo(l)
    b checkType { _< MutableList<out Int> >() }",,8346
fun baz(),"{
            <!INNER_CLASS_CONSTRUCTOR_NO_RECEIVER!>Inner<!>()
            <!INNER_CLASS_CONSTRUCTOR_NO_RECEIVER!>Inner<!>(1)
        }","// !DIAGNOSTICS: -UNUSED_PARAMETER
// SKIP_TXT
// FILE: Outer.kt",b22f
fun foo(),"{
    Outer.<!INNER_CLASS_CONSTRUCTOR_NO_RECEIVER!>Inner<!>()
    Outer.<!INNER_CLASS_CONSTRUCTOR_NO_RECEIVER!>Inner<!>(1)
}",,519f
fun bar(),"{
    <!INNER_CLASS_CONSTRUCTOR_NO_RECEIVER!>Inner<!>()
    <!INNER_CLASS_CONSTRUCTOR_NO_RECEIVER!>Inner<!>(1)

    with(Outer()) {
        Inner()
        Inner(1)
    }",// FILE: imported.kt,66c3
No signature found,"fun C.flaf() = ""","// CORRECT_ERROR_TYPES
// NO_VALIDATION",6e1f
fun inlineMe(),"{
    assert(false) { ""FROM INLINED"" }","// FULL_JDK
// WITH_STDLIB
// TARGET_BACKEND: JVM
// ASSERTIONS_MODE: jvm
// FILE: inline.kt",26b8
fun check(),"{
        inlineMe()
        throw RuntimeException(""FAIL 0"")
    }",,c89c
fun enableAssertions(),": CheckerJvmAssertInlineFunctionAssertionsEnabled {
    val loader = Dummy::class.java.classLoader
    loader.setClassAssertionStatus(""CheckerJvmAssertInlineFunctionAssertionsEnabled"", true)
    loader.setClassAssertionStatus(""InlineKt"", false)
    val c = loader.loadClass(""CheckerJvmAssertInlineFunctionAssertionsEnabled"")
    return c.newInstance() as CheckerJvmAssertInlineFunctionAssertionsEnabled
}",,09a4
fun box(),": String {
    var c = enableAssertions()
    try {
        c.check()
        return ""FAIL 2""
    }",,4f27
fun box(),": String {
    var xl = 0L     // Long, size 2
    var xi = 0      // Int, size 1
    var xd = 0.0    // Double, size 2

    run {
        xl++
        xd += 1.0
        xi++
    }",,4f27
No signature found,"fun stringify(o: Any?): String
}

/**
 * This function is only called from the debugger
 */
@JsExport
fun makeValueDescriptionForSteppingTests(value: Any?): ValueDescriptionForSteppingTests? {
    val jsTypeName = jsTypeOf(value)
    val displayedTypeName = when (jsTypeName) {
        ""undefined"" -> return null
        ""string"", ""object"", ""function"" -> if (value == null) jsTypeName else {
            val klass = value::class
            // Fully qualified names are not yet supported in Kotlin/JS reflection
            knownFqNames[klass] ?: klass.simpleName ?: ""<anonymous>""
        }",// This file is compiled into each stepping test.,6e1f
No signature found,"fun resumeWith(result: Result<Any?>) {
        result.getOrThrow()
    }",,6e1f
fun makeEmptyContinuation(),: dynamic = E,,d632
No signature found,"fun <reified T> makeRunnable(noinline lambda: ()->Unit) : Runnable {
    return Runnable(lambda)
}","// KOTLIN_CONFIGURATION_FLAGS: SAM_CONVERSIONS=CLASS
// WITH_SIGNATURES",6e1f
No signature found,"fun makeRunnable2(noinline lambda: ()->Unit) : Runnable {
    return Runnable(lambda)
}",,6e1f
No signature found,"fun noInline(lambda: ()->Unit) : Runnable {
    return Runnable(lambda)
}",,6e1f
No signature found,"fun noInline2(lambda: ()->Unit) : Runnable {
    return Runnable(lambda)
}",,6e1f
fun file2(),{},,fa9f
fun foo(),{},"// ISSUE: KT-66277
// FIR_IDENTICAL",519f
fun test(),"{
    run<Any> l@ {
        if (""0"".hashCode() == 42) return@l
        """"
    }",,fe98
"fun extractDefaultValue(parameter: ValueParameterDescriptor, expectedType: KotlinType)",": ConstantValue<*>? {
        val element = (parameter.source as? JavaSourceElement)?.javaElement
        return (element as? JavaMethod)?.annotationParameterDefaultValue?.convert(expectedType)
    }",,a71c
No signature found,"fun JavaAnnotationArgument.convert(expectedType: KotlinType): ConstantValue<*>? {
        return when (this) {
            is JavaLiteralAnnotationArgument -> value?.let {
                JavaPropertyInitializerEvaluatorImpl.convertLiteralValue(it, expectedType)
            }","// This code is similar to LazyJavaAnnotationDescriptor.resolveAnnotationArgument, but cannot be reused until
    // KClassValue/AnnotationValue are untied from descriptors/types, because here we do not have an instance of LazyJavaResolverContext.",6e1f
fun convertTypeToKClassValue(javaType: JavaType),": KClassValue? {
        var type = javaType
        var arrayDimensions = 0
        while (type is JavaArrayType) {
            type = type.componentType
            arrayDimensions++
        }",,ca4e
fun test(arg: B),"{
    foo(value)
    arg.ext()

    bar()
    foo(cValue)

    <!UNRESOLVED_REFERENCE!>fff<!>(<!UNRESOLVED_REFERENCE!>dValue<!>)

    constant.fff(constant.dValue)

    f.f()
}",// FILE:a.kt,a07f
fun foo(i: Int),= i,// FILE:b.kt,9471
No signature found,fun B.ext() {},,6e1f
fun bar(),{},,66c3
fun fff(s: String),= s,,3f28
fun f(),{},,f6fb
fun bar(),{},,66c3
fun f(),"{
    }",//FILE:c.kt,f6fb
fun foo(),"{
    if (i == 3) f()
}",,519f
No signature found,"fun test(j: J, nullStr: String?, nullByte: Byte?, nullDouble: Double?) {
    j.foo(nullStr)
    j.foo(<!TYPE_MISMATCH!>nullDouble<!>)
    j.foo(nullByte)
}",// FILE: J.java,6e1f
fun equals(other: IC1),": Boolean {
        return abs(x - other.x) < 0.5
    }","// WITH_STDLIB
// LANGUAGE: +ValueClasses, +CustomEqualsInValueClasses
// TARGET_BACKEND: JVM_IR
// CHECK_BYTECODE_LISTING",e923
No signature found,"fun equals(other: Any?): Boolean {
        if (other !is IC2) {
            return false
        }",,6e1f
fun box(),": String {
    val a1Typed: IC1 = IC1(1.0)
    val b1Typed: IC1 = IC1(1.1)
    val c1Typed: IC1 = IC1(5.0)
    val a1Untyped: Any = a1Typed
    val b1Untyped: Any = b1Typed
    val c1Untyped: Any = c1Typed

    val a2Typed: IC2 = IC2(1)
    val b2Typed: IC2 = IC2(2)
    val c2Typed: IC2 = IC2(5)
    val a2Untyped: Any = a2Typed
    val b2Untyped: Any = b2Typed
    val c2Untyped: Any = c2Typed

    if ((a1Typed == b1Typed) != (a1Untyped == b1Untyped)) return ""Fail 1""
    if ((a1Typed == c1Typed) != (a1Untyped == c1Untyped)) return ""Fail 2""
    if ((a2Typed == b2Typed) != (a2Untyped == b2Untyped)) return ""Fail 3""
    if ((a2Typed == c2Typed) != (a2Untyped == c2Untyped)) return ""Fail 4""

    return ""OK""
}",,4f27
"fun foo(s: String, x: Int)",{},"// TARGET_BACKEND: JVM

// WITH_REFLECT",b1e2
fun bar(x: Int),{},,948a
fun box(),": String {
    // Dispatch receiver parameters of different callables are not equal
    assertNotEquals(A::foo.parameters[0], A::bar.parameters[0])
    assertNotEquals(A::foo.parameters[0], A::baz.parameters[0])

    assertNotEquals(A::foo.parameters[1], A::bar.parameters[1])
    assertNotEquals(A::foo.parameters[1], A::foo.parameters[2])
    assertNotEquals(A::bar.parameters[1], A::foo.parameters[2])

    assertEquals(A::foo.parameters[0], A::foo.parameters[0])
    assertEquals(A::foo.parameters[0].hashCode(), A::foo.parameters[0].hashCode())
    assertEquals(A::foo.parameters[1], A::foo.parameters[1])
    assertEquals(A::foo.parameters[1].hashCode(), A::foo.parameters[1].hashCode())
    assertEquals(A::bar.parameters[0], A::bar.parameters[0])
    assertEquals(A::bar.parameters[0].hashCode(), A::bar.parameters[0].hashCode())

    return ""OK""
}",,4f27
fun foo(),= 4,// LOOK_UP_FOR_ELEMENT_OF_TYPE: KtScriptInitializer,519f
fun bar(),"{

}",,66c3
No signature found,"fun Number.plus(other: Number): Number
}

class Matrix

context(NumberOperations) fun Matrix.plus(other: Matrix): Matrix = T","// !LANGUAGE: +ContextReceivers
// FIR_IDENTICAL
// !DIAGNOSTICS: -UNUSED_PARAMETER",6e1f
No signature found,"fun NumberOperations.plusMatrix(m1: Matrix, m2: Matrix) {
    m1.plus(m2)
    m2.plus(m1)
}",,6e1f
No signature found,fun f(cause: Int? = n,// See KT-21968,6e1f
No signature found,fun f(cause: Int?): Boolean = t,,6e1f
fun box(),": String {
    return if (D().f()) ""OK"" else ""fail""
}",,4f27
fun <T> materialize(),: T = n,// !DIAGNOSTICS: -UNUSED_VARIABLE -UNUSED_EXPRESSION -UNCHECKED_CAST -UNUSED_PARAMETER -UNUSED_ANONYMOUS_PARAMETER,6522
No signature found,fun <B> product(other: Foo<(A) -> B>) = m,,6e1f
No signature found,"fun <B, R> foo1(other1: Foo<B>, function: (A, B) -> R) {
        val x = product<R>(
            other1.product(
                bar {  b -> { a -> function(a, b) }",,6e1f
No signature found,"fun <B, C, R> foo2(other1: Foo<B>, other2: Foo<C>, function: (A, B, C) -> R) {
        val x = product<R>(
            other1.product(
                other2.product(
                    bar {  c -> { b -> { a -> function(a, b, c) }",,6e1f
No signature found,"fun <B, C, D, E, R> foo3(other1: Foo<B>, other2: Foo<C>, other3: Foo<D>, other4: Foo<E>, function: (A, B, C, D) -> R) {
        val x = product<R>(
            other1.product(
                other2.product(
                    other3.product(
                        bar { d -> { c -> { b -> { a -> function(a, b, c, d) }",,6e1f
No signature found,"fun <B, C, D, E, R> foo4(other1: Foo<B>, other2: Foo<C>, other3: Foo<D>, other4: Foo<E>, function: (A, B, C, D, E) -> R) {
        val x = product<R>(
            other1.product(
                other2.product(
                    other3.product(
                        other4.product(
                            bar { e -> { d -> { c -> { b -> { a -> function(a, b, c, d, e) }",,6e1f
fun <A> bar(x: A),= m,,e932
No signature found,"fun invoke(classType: KotlinType, contextClassLoader: ClassLoader?, hostConfiguration: ScriptingHostConfiguration): KClass<*>
}

class JvmGetScriptingClass : GetScriptingClassByClassLoader, Serializable {

    @Transient
    private var dependencies: List<ScriptDependency>? = null

    @Transient
    private var classLoader: ClassLoader? = null

    @Transient
    // TODO: find out whether Transient fields are initialized on deserialization and if so, convert back to not-nullable val
    private var baseClassLoaderIsInitialized: Boolean? = null

    @Transient
    private var baseClassLoader: ClassLoader? = null

    override fun invoke(classType: KotlinType, contextClass: KClass<*>, hostConfiguration: ScriptingHostConfiguration): KClass<*> =
        invoke(classType, contextClass.java.classLoader, hostConfiguration)

    @Synchronized
    override operator fun invoke(
        classType: KotlinType,
        contextClassLoader: ClassLoader?,
        hostConfiguration: ScriptingHostConfiguration
    ): KClass<*> {

        // checking if class already loaded in the same context
        val fromClass = classType.fromClass
        if (fromClass != null) {
            if (fromClass.java.classLoader == null) return fromClass // root classloader
            val actualClassLoadersChain = generateSequence(contextClassLoader) { it.parent }",,6e1f
No signature found,"fun equals(other: Any?): Boolean =
        w",,6e1f
fun hashCode(),": Int {
        return dependencies.hashCode() + 23 * classLoader.hashCode() + 37 * baseClassLoader.hashCode()
    }",,6874
fun compareTo(other: A),: Int = o,// EXPECTED_REACHABLE_NODES: 1291,b816
fun testExtensionFunctionAsCompareTo(),"{
    val compareTo: B.( B ) -> Int = { other -> other.value.compareTo(this.value) }",,2b59
fun testMethodAsCompareTo(),"{
    val x: A = A(100)
    val y: A = A(200)

    assertEquals(false, x < y, ""meth: x < y"")
    assertEquals(true, x > y, ""meth: x > y"")
    assertEquals(1, x.compareTo(y), ""meth: x compareTo y"")

    val comparable: Comparable<A> = x
    assertEquals(false, comparable < y, ""meth: (x: Comparable<A>) < y"")
    assertEquals(true, comparable > y, ""meth: (x: Comparable<A>) > y"")
    assertEquals(1, comparable.compareTo(y), ""meth: (x: Comparable<A>) compareTo y"")
}",,1fd6
fun box(),": String {

    testExtensionFunctionAsCompareTo()

    testMethodAsCompareTo()

    return ""OK""
}",,4f27
fun someFun(),"{
        class LocalClass : <!SEALED_SUPERTYPE_IN_LOCAL_CLASS!>Base<!>() {}","// ISSUE: KT-13495
// !LANGUAGE: +AllowSealedInheritorsInDifferentFilesOfSamePackage

// FILE: a.kt",b5a1
fun add(t: T),{},"// FIR_IDENTICAL
// !LANGUAGE: +UnrestrictedBuilderInference
// !DIAGNOSTICS: -UNUSED_PARAMETER",1e8f
No signature found,fun <S> build(g: suspend Builder<S>.() -> Unit): List<S> = T,,6e1f
No signature found,fun <S> wrongBuild(g: Builder<S>.() -> Unit): List<S> = T,,6e1f
No signature found,fun <S> Builder<S>.extensionAdd(s: S) {},,6e1f
No signature found,fun <S> Builder<S>.safeExtensionAdd(s: S) {},,6e1f
"fun check(declaration: KtDeclaration, descriptor: DeclarationDescriptor, context: DeclarationCheckerContext)","{
        if (descriptor !is PropertyDescriptor ||
            !DescriptorUtils.isTopLevelDeclaration(descriptor) ||
            descriptor.isExpect ||
            descriptor.isConst) return

        if (!context.languageVersionSettings.getFlag(JvmAnalysisFlags.inheritMultifileParts)) return

        if (!JvmFileClassUtil.getFileClassInfoNoResolve(declaration.containingKtFile).withJvmMultifileClass) return

        if (descriptor.isDelegated ||
            context.trace.bindingContext.get(BindingContext.BACKING_FIELD_REQUIRED, descriptor) == true) {
            context.trace.report(ErrorsJvm.STATE_IN_MULTIFILE_CLASS.on(declaration))
        }",,5073
fun funB(),= l,,fb06
fun foo(),"= ""","// !DIAGNOSTICS: -UNUSED_VARIABLE
// FILE: A.java",519f
fun foo(),"= """,,519f
"fun isOverriddenFunction(overrideCandidate: FirSimpleFunction, baseDeclaration: FirSimpleFunction)",": Boolean {
        platformSpecificOverridabilityRules?.isOverriddenFunction(overrideCandidate, baseDeclaration)?.let { return it }",,1768
"fun isOverriddenProperty(overrideCandidate: FirCallableDeclaration, baseDeclaration: FirProperty)",": Boolean {
        platformSpecificOverridabilityRules?.isOverriddenProperty(overrideCandidate, baseDeclaration)?.let { return it }",,7a10
No signature found,"fun chooseIntersectionVisibility(
        overrides: Collection<FirCallableSymbol<*>>,
        dispatchClassSymbol: FirRegularClassSymbol?,
    ): Visibility {
        platformSpecificOverridabilityRules?.chooseIntersectionVisibility(overrides, dispatchClassSymbol)?.let { return it }",,6e1f
fun restoreSymbol(analysisSession: KtAnalysisSession),": KtNamedClassOrObjectSymbol? {
        check(analysisSession is KtFe10AnalysisSession)
        val analysisContext = analysisSession.analysisContext

        val descriptor = analysisContext.resolveSession.moduleDescriptor.findClassAcrossModuleDependencies(classId) ?: return null
        return KtFe10DescNamedClassOrObjectSymbol(descriptor, analysisContext)
    }",,3611
fun pointsToTheSameSymbolAs(other: KtSymbolPointer<KtSymbol>),: Boolean = t,,4b9a
No signature found,"fun <T : S> isEqualTo(expected: B): T
}

fun test(b: BodySpec<String, *>) {
    val x = b.isEqualTo("""")
    <!DEBUG_INFO_EXPRESSION_TYPE(""BodySpec<*, *>"")!>x<!>
}","// !LANGUAGE: +TypeInferenceOnCallsWithSelfTypes

// FILE: JavaBodySpec.java",6e1f
No signature found,"fun testJava(b: JavaBodySpec<String, *>) {
    val x = b.isEqualTo("""")
    <!DEBUG_INFO_EXPRESSION_TYPE(""(JavaBodySpec<*, *>..JavaBodySpec<*, *>?)"")!>x<!>
}",,6e1f
"fun isCastPossible(
        lhsType: KotlinType,
        rhsType: KotlinType,
        platformToKotlinClassMapper: PlatformToKotlinClassMapper,
        platformSpecificCastChecker: PlatformSpecificCastChecker
    )",": Boolean {
        val typeConstructor = lhsType.constructor
        if (typeConstructor is IntersectionTypeConstructor) {
            return typeConstructor.supertypes.any { isCastPossible(it, rhsType, platformToKotlinClassMapper, platformSpecificCastChecker) }",,fa7d
"fun isRelated(a: KotlinType, b: KotlinType, platformToKotlinClassMapper: PlatformToKotlinClassMapper)",": Boolean {
        val aClasses = mapToPlatformIndependentClasses(a, platformToKotlinClassMapper)
        val bClasses = mapToPlatformIndependentClasses(b, platformToKotlinClassMapper)

        return aClasses.any { DescriptorUtils.isSubtypeOfClass(b, it) }",,bbfe
"fun mapToPlatformIndependentClasses(
        type: KotlinType,
        platformToKotlinClassMapper: PlatformToKotlinClassMapper
    )",": List<ClassDescriptor> {
        val descriptor = type.constructor.declarationDescriptor as? ClassDescriptor ?: return listOf()

        return platformToKotlinClassMapper.mapPlatformClass(descriptor) + descriptor
    }",,48ce
fun isFinal(type: KotlinType),= !,,84c7
fun isTrait(type: KotlinType),"=
        t",,f133
"fun isCastErased(supertype: KotlinType, subtype: KotlinType, typeChecker: KotlinTypeChecker)",": Boolean {
        val isNonReifiedTypeParameter = TypeUtils.isNonReifiedTypeParameter(subtype)
        val isUpcast = typeChecker.isSubtypeOf(supertype, subtype)

        // here we want to restrict cases such as `x is T` for x = T?, when T might have nullable upper bound
        if (isNonReifiedTypeParameter && !isUpcast) {
            // hack to save previous behavior in case when `x is T`, where T is not nullable, see IsErasedNullableTasT.kt
            val nullableToDefinitelyNotNull = !TypeUtils.isNullableType(subtype) && supertype.makeNotNullable() == subtype
            if (!nullableToDefinitelyNotNull) {
                return true
            }",,2648
"fun findStaticallyKnownSubtype(supertype: KotlinType, subtypeConstructor: TypeConstructor)",": TypeReconstructionResult {
        assert(!supertype.isMarkedNullable) { ""This method only makes sense for non-nullable types"" }",,2950
fun allParametersReified(subtype: KotlinType),= s,"// Assume we are casting an expression of type Collection<Foo> to List<Bar>
        // First, let's make List<T>, where T is a type variable",9471
"fun castIsUseless(
        expression: KtBinaryExpressionWithTypeRHS,
        context: ExpressionTypingContext,
        targetType: KotlinType,
        actualType: KotlinType
    )",": Boolean {
        // Here: x as? Type <=> x as Type?
        val refinedTargetType = if (KtPsiUtil.isSafeCast(expression)) TypeUtils.makeNullable(targetType) else targetType
        val possibleTypes = DataFlowAnalyzer.getAllPossibleTypes(expression.left, actualType, context)
        return isRefinementUseless(possibleTypes, refinedTargetType, shouldCheckForExactType(expression, context.expectedType))
    }",,e455
"fun isRefinementUseless(
        possibleTypes: Collection<KotlinType>,
        targetType: KotlinType,
        shouldCheckForExactType: Boolean
    )",": Boolean {
        val intersectedType = TypeIntersector.intersectTypes(possibleTypes.map { it.upperIfFlexible() }","// It is a warning ""useless cast"" for `as` and a warning ""redundant is"" for `is`",3e72
"fun shouldCheckForExactType(expression: KtBinaryExpressionWithTypeRHS, expectedType: KotlinType)",": Boolean {
        if (TypeUtils.noExpectedType(expectedType)) {
            return checkExactTypeForUselessCast(expression)
        }",,2a03
"fun isExactTypeCast(candidateType: KotlinType, targetType: KotlinType)",": Boolean {
        return candidateType == targetType && candidateType.isExtensionFunctionType == targetType.isExtensionFunctionType
    }","// If expected type is parameterized, then cast has an effect on inference, therefore it isn't a useless cast
        // Otherwise, we are interested in situation like: `a: Any? = 1 as Int?`",4b9b
"fun isUpcast(candidateType: KotlinType, targetType: KotlinType)",": Boolean {
        if (!KotlinTypeChecker.DEFAULT.isSubtypeOf(candidateType, targetType)) return false

        if (candidateType.isFunctionType && targetType.isFunctionType) {
            return candidateType.isExtensionFunctionType == targetType.isExtensionFunctionType
        }",,3d84
fun checkExactTypeForUselessCast(expression: KtBinaryExpressionWithTypeRHS),": Boolean {
        var parent = expression.parent
        while (parent is KtParenthesizedExpression ||
            parent is KtLabeledExpression ||
            parent is KtAnnotatedExpression) {
            parent = parent.parent
        }",,4b95
fun f1(),{},"// !LANGUAGE: +ProhibitAssigningSingleElementsToVarargsInNamedForm +AllowAssigningArrayElementsToVarargsInNamedFormForFunctions
// !DIAGNOSTICS: -UNUSED_PARAMETER",ed85
fun f2(),{},,e1c0
fun f3(),{},,ac04
fun foo(vararg ints: Int),{},,84a2
fun test(),"{
    foo(ints = <!ARGUMENT_TYPE_MISMATCH, ASSIGNING_SINGLE_ELEMENT_TO_VARARG_IN_NAMED_FORM_FUNCTION_ERROR!>1<!>)
    foo(ints = *<!REDUNDANT_SPREAD_OPERATOR_IN_NAMED_FORM_IN_FUNCTION!>intArrayOf(1)<!>)
}",,fe98
fun foo(),"* }
 * class B: A() {
 *   override 
 * }",,519f
No signature found,"fun foo(l: (Int) -> Int ): Int {
    return l(1)
}","// JVM_ABI_K1_K2_DIFF: KT-63960, KT-63963

// expected: rv: 2",6e1f
fun bar(p: Int),": Int {
    return p + 1
}",,7282
fun main(),": Int {
    return foo { x -> bar(x) }",,d987
fun test(a: Array<Int>),"{
    (<expr>a + a</expr>)[0]++
}",,2eb1
fun notExpired(),": Boolean

    fun doSomething()
}

fun foo(o: Any) {
    val order = o as? Order
    if (order?.expired ?: false) {
        order.doSomething()
    }",// !LANGUAGE: -BooleanElvisBoundSmartCasts,ac10
fun bar(o: Any),"{
    val order = o as? Order
    if (order?.expired ?: true) {

    }",,fe76
No signature found,"fun baz(o: Boolean?) {
    if (o ?: false) {
        o.hashCode()
    }",,6e1f
fun box(),: String = w,// WITH_STDLIB,4f27
fun sum(vararg args: Int),": Int {
    var result = 0
    for (arg in args)
        result += arg
    return result
}",// FIR_IDENTICAL,5e45
fun nsum(vararg args: Number),= s,,375e
No signature found,"fun zap(vararg b: String, k: Int = 4",,6e1f
No signature found,"fun usePlainArgs(fn: (Int, Int) -> Int) {}",,6e1f
No signature found,fun usePrimitiveArray(fn: (IntArray) -> Int) {},,6e1f
No signature found,fun useArray(fn: (Array<Int>) -> Int) {},,6e1f
No signature found,fun useStringArray(fn: (Array<String>) -> Unit) {},,6e1f
fun testPlainArgs(),{ usePlainArgs(::sum) },,e132
fun testPrimitiveArrayAsVararg(),{ usePrimitiveArray(::sum) },,caec
fun testArrayAsVararg(),{ useArray(::nsum) },,d22b
fun testArrayAndDefaults(),{ useStringArray(::zap) },,f2db
No signature found,"fun getValue(thisRef: Any?, prop: Any?) = v",// FILE: Var.kt,6e1f
No signature found,"fun setValue(thisRef: Any?, prop: Any?, newValue: T) {
        value = newValue
    }",,6e1f
fun box(),": String {
    val inner = C().Inner()
    inner.x = 1L
    return ""OK""
}",,4f27
No signature found,"fun <reified T : IrElement> MutableList<T>.transformInPlace(transformation: (T) -> IrElement) {
    for (i in 0 until size) {
        set(i, transformation(get(i)) as T)
    }",,6e1f
No signature found,"fun <T : IrElement, D> MutableList<T>.transformInPlace(transformer: IrElementTransformer<D>, data: D) {
    for (i in 0 until size) {
        // Cast to IrElementBase to avoid casting to interface and invokeinterface, both of which are slow.
        @Suppress(""UNCHECKED_CAST"")
        set(i, (get(i) as IrElementBase).transform(transformer, data) as T)
    }",,6e1f
No signature found,"fun <T : IrElement, D> Array<T?>.transformInPlace(transformer: IrElementTransformer<D>, data: D) {
    for (i in indices) {
        // Cast to IrElementBase to avoid casting to interface and invokeinterface, both of which are slow.
        val element = get(i) as IrElementBase?
        if (element != null) {
            @Suppress(""UNCHECKED_CAST"")
            set(i, element.transform(transformer, data) as T)
        }",,6e1f
No signature found,"fun <T> MutableList<T>.transformFlat(transformation: (T) -> List<T>?) {
    var i = 0
    while (i < size) {
        val item = get(i)

        i = replaceInPlace(transformation(item), i)
    }",,6e1f
No signature found,"fun <T, reified S : T> MutableList<T>.transformSubsetFlat(transformation: (S) -> List<S>?) {
    var i = 0
    while (i < size) {
        val item = get(i)

        if (item !is S) {
            i++
            continue
        }",,6e1f
No signature found,"fun <T> MutableList<T>.replaceInPlace(transformed: List<T>?, atIndex: Int): Int {
    var i = atIndex
    when (transformed?.size) {
        null -> i++
        0 -> removeAt(i)
        1 -> set(i++, transformed[0])
        else -> {
            addAll(i, transformed)
            i += transformed.size
            removeAt(i)
        }",,6e1f
No signature found,"fun IrDeclarationContainer.transformDeclarationsFlat(transformation: (IrDeclaration) -> List<IrDeclaration>?) {
    declarations.transformFlat { declaration ->
        val transformed = transformation(declaration)
        transformed?.forEach { it.parent = this }",,6e1f
No signature found,"fun <T : IrElement, D> List<T>.transformIfNeeded(transformer: IrElementTransformer<D>, data: D): List<T> {
    var result: ArrayList<T>? = null
    for ((i, item) in withIndex()) {
        @Suppress(""UNCHECKED_CAST"")
        val transformed = item.transform(transformer, data) as T
        if (transformed !== item && result == null) {
            result = ArrayList(this)
        }",,6e1f
fun x(),"{/* DeclarationStructureElement */

    }",,7869
fun y(),: Int = 1,,2f37
No signature found,"fun DiagnosticReporter.reportOn(
    source: AbstractKtSourceElement?,
    factory: KtDiagnosticFactory0,
    context: DiagnosticContext,
    positioningStrategy: AbstractSourceElementPositioningStrategy? = n",,6e1f
No signature found,"fun <A> DiagnosticReporter.reportOn(
    source: AbstractKtSourceElement?,
    factory: KtDiagnosticFactory1<A>,
    a: A,
    context: DiagnosticContext,
    positioningStrategy: AbstractSourceElementPositioningStrategy? = n",,6e1f
No signature found,"fun <A, B> DiagnosticReporter.reportOn(
    source: AbstractKtSourceElement?,
    factory: KtDiagnosticFactory2<A, B>,
    a: A,
    b: B,
    context: DiagnosticContext,
    positioningStrategy: AbstractSourceElementPositioningStrategy? = n",,6e1f
No signature found,"fun <A, B, C> DiagnosticReporter.reportOn(
    source: AbstractKtSourceElement?,
    factory: KtDiagnosticFactory3<A, B, C>,
    a: A,
    b: B,
    c: C,
    context: DiagnosticContext,
    positioningStrategy: AbstractSourceElementPositioningStrategy? = n",,6e1f
No signature found,"fun <A, B, C, D> DiagnosticReporter.reportOn(
    source: AbstractKtSourceElement?,
    factory: KtDiagnosticFactory4<A, B, C, D>,
    a: A,
    b: B,
    c: C,
    d: D,
    context: DiagnosticContext,
    positioningStrategy: AbstractSourceElementPositioningStrategy? = n",,6e1f
No signature found,"fun AbstractKtSourceElement?.requireNotNull(): AbstractKtSourceElement =
    r",,6e1f
No signature found,"fun DiagnosticReporter.reportOn(
    source: AbstractKtSourceElement?,
    factory: KtDiagnosticFactoryForDeprecation0,
    context: DiagnosticContext,
    positioningStrategy: AbstractSourceElementPositioningStrategy? = n",,6e1f
No signature found,"fun <A> DiagnosticReporter.reportOn(
    source: AbstractKtSourceElement?,
    factory: KtDiagnosticFactoryForDeprecation1<A>,
    a: A,
    context: DiagnosticContext,
    positioningStrategy: AbstractSourceElementPositioningStrategy? = n",,6e1f
No signature found,"fun <A, B> DiagnosticReporter.reportOn(
    source: AbstractKtSourceElement?,
    factory: KtDiagnosticFactoryForDeprecation2<A, B>,
    a: A,
    b: B,
    context: DiagnosticContext,
    positioningStrategy: AbstractSourceElementPositioningStrategy? = n",,6e1f
No signature found,"fun <A, B, C> DiagnosticReporter.reportOn(
    source: AbstractKtSourceElement?,
    factory: KtDiagnosticFactoryForDeprecation3<A, B, C>,
    a: A,
    b: B,
    c: C,
    context: DiagnosticContext,
    positioningStrategy: AbstractSourceElementPositioningStrategy? = n",,6e1f
No signature found,"fun <A, B, C, D> DiagnosticReporter.reportOn(
    source: AbstractKtSourceElement?,
    factory: KtDiagnosticFactoryForDeprecation4<A, B, C, D>,
    a: A,
    b: B,
    c: C,
    d: D,
    context: DiagnosticContext,
    positioningStrategy: AbstractSourceElementPositioningStrategy? = n",,6e1f
No signature found,"fun <F : AbstractKtDiagnosticFactory> KtDiagnosticFactoryForDeprecation<F>.chooseFactory(context: DiagnosticContext): F {
    return if (context.languageVersionSettings.supportsFeature(deprecatingFeature)) {
        errorFactory
    }",,6e1f
fun yield(arg: CT),{},// IGNORE_BACKEND: JVM,89cd
fun materialize(),: CT = r,,0db9
No signature found,"fun <FT> build(
    instructions: Buildee<FT>.() -> Unit
): Buildee<FT> {
    return Buildee<FT>().apply(instructions)
}",,6e1f
fun testYield(),"{
    fun testTypeInfoOriginInsideLocalClass() {
        val buildee = build {
            class Local<T> {
                fun localOnlyFunc(): T = UserKlass() as T

                fun initialize() {
                    reference = Local<T>()

                    val arg: Local<T> = Local()
                    yield(arg)
                }",,e673
fun testThisExpression(),"{
        val buildee = build {
            class Local<T> {
                fun localOnlyFunc(): T = UserKlass() as T

                fun initialize() {
                    reference = this

                    yield(this)
                }",,7a34
fun testMaterialize(),"{
    fun testTypeInfoOriginInsideLocalClass() {
        val buildee = build {
            class Local<T> {
                fun localOnlyFunc(): T = UserKlass() as T

                fun initialize() {
                    reference = Local<T>()

                    fun consume(arg: Local<T>) {}",,2ed8
fun testThisExpression(),"{
        val buildee = build {
            class Local<T> {
                fun localOnlyFunc(): T = UserKlass() as T

                fun initialize() {
                    reference = this

                    fun <T> shareTypeInfo(from: T, to: T) {}",,7a34
fun box(),": String {
    testYield()
    testMaterialize()
    return ""OK""
}",,4f27
fun testUnckeckedAsFromAny(x: Any),"{
    <!UNCHECKED_CAST_TO_FORWARD_DECLARATION!>x as? cnames.structs.FwdStruct<!>
    <!UNCHECKED_CAST_TO_FORWARD_DECLARATION!>x as? objcnames.classes.FwdObjcClass<!>
    <!UNCHECKED_CAST_TO_FORWARD_DECLARATION!>x as? objcnames.protocols.FwdProtocol<!>
    if (1 > 0) { <!UNCHECKED_CAST_TO_FORWARD_DECLARATION!>x as cnames.structs.FwdStruct<!> }","// WITH_STDLIB

// FILE: stdlib.kt",67a1
fun testIs(x: Any),": Int {
    return when {
        <!CANNOT_CHECK_FOR_FORWARD_DECLARATION!>x is cnames.structs.FwdStruct<!> -> 1
        <!CANNOT_CHECK_FOR_FORWARD_DECLARATION!>x is objcnames.classes.FwdObjcClass<!> -> 2
        <!CANNOT_CHECK_FOR_FORWARD_DECLARATION!>x is objcnames.protocols.FwdProtocol<!> -> 3
        else -> 4
    }",,3406
No signature found,fun testIs2(x: lib.FwdStruct) = <,,6e1f
No signature found,fun testIs3(x: lib.FwdObjcClass) = <,,6e1f
No signature found,fun testIs4(x: lib.FwdProtocol) = <,,6e1f
No signature found,fun testClass1(x : cnames.structs.FwdStruct) = x,,6e1f
No signature found,fun testClass2(x : objcnames.classes.FwdObjcClass) = x,,6e1f
No signature found,fun testClass3(x : objcnames.protocols.FwdProtocol) = x,,6e1f
fun testClass4(),"{
    <!FORWARD_DECLARATION_AS_CLASS_LITERAL!>cnames.structs.FwdStruct::class<!>
    <!FORWARD_DECLARATION_AS_CLASS_LITERAL!>objcnames.classes.FwdObjcClass::class<!>
    <!FORWARD_DECLARATION_AS_CLASS_LITERAL!>objcnames.protocols.FwdProtocol::class<!>
}",,ca6a
fun <reified T> inlineF(x: T),{},,72d5
No signature found,fun testInline1(x : cnames.structs.FwdStruct) = <,,6e1f
No signature found,fun testInline2(x : objcnames.classes.FwdObjcClass) = <,,6e1f
No signature found,fun testInline3(x : objcnames.protocols.FwdProtocol) = <,,6e1f
fun testInline4(),"{
    val a : (cnames.structs.FwdStruct) -> Unit = ::<!FORWARD_DECLARATION_AS_REIFIED_TYPE_ARGUMENT!>inlineF<!>
    val b : (objcnames.classes.FwdObjcClass) -> Unit = ::<!FORWARD_DECLARATION_AS_REIFIED_TYPE_ARGUMENT!>inlineF<!>
    val c : (objcnames.protocols.FwdProtocol) -> Unit = ::<!FORWARD_DECLARATION_AS_REIFIED_TYPE_ARGUMENT!>inlineF<!>
}",,6d63
No signature found,fun testCheckedAs1(x : lib.FwdStruct) = x,,6e1f
No signature found,fun testCheckedAs2(x : lib.FwdObjcClass) = x,,6e1f
No signature found,fun testCheckedAs3(x : lib.FwdProtocol) = x,,6e1f
No signature found,fun testCheckedSafeAs4(x : lib.FwdStruct) = x,,6e1f
No signature found,fun testCheckedSafeAs5(x : lib.FwdObjcClass) = x,,6e1f
No signature found,fun testCheckedSafeAs6(x : lib.FwdProtocol) = x,,6e1f
No signature found,fun testUnCheckedAs1(x : lib2.FwdStruct) = <,,6e1f
No signature found,fun testUnCheckedAs2(x : lib2.FwdObjcClass) = <,,6e1f
No signature found,fun testUnCheckedAs3(x : lib2.FwdProtocol) = <,,6e1f
No signature found,fun testUnCheckedAs4(x : lib.FwdStruct) = <,,6e1f
fun result(),": String = ""","// TARGET_BACKEND: JVM
// WITH_STDLIB
// !INHERIT_MULTIFILE_PARTS
// FILE: result.kt",5880
No signature found,fun id(f: () -> String): String = f,,6e1f
fun box(),: String = i,,4f27
fun baseFun(),"}

interface Derived : Base {
    fun derivedFun()
}",// FIR_DUMP,0bb3
fun fest_1(other: A),"{
        other.a.baseFun() // OK
        if (other is B) {
            <!DEBUG_INFO_SMARTCAST!>other<!>.<!INVISIBLE_MEMBER!>a<!>.baseFun()
            <!DEBUG_INFO_SMARTCAST!>other<!>.<!INVISIBLE_MEMBER!>a<!>.derivedFun()
        }",,3c76
fun fest_3(other: A),"{
                other.a.baseFun() // OK
                if (other is B) {
                    <!DEBUG_INFO_SMARTCAST!>other<!>.a.baseFun()
                    <!DEBUG_INFO_SMARTCAST!>other<!>.a.derivedFun()
                }",,797b
fun fest_4(other: A),"{
            other.a.baseFun() // OK
            if (other is B) {
                <!DEBUG_INFO_SMARTCAST!>other<!>.<!INVISIBLE_MEMBER!>a<!>.baseFun()
                <!DEBUG_INFO_SMARTCAST!>other<!>.<!INVISIBLE_MEMBER!>a<!>.derivedFun()
            }",,7240
fun fest_5(other: A),"{
            other.a.baseFun() // OK
            if (other is B) {
                <!DEBUG_INFO_SMARTCAST!>other<!>.<!INVISIBLE_MEMBER!>a<!>.baseFun()
                <!DEBUG_INFO_SMARTCAST!>other<!>.<!INVISIBLE_MEMBER!>a<!>.derivedFun()
            }",,0396
No signature found,"fun assertEvents(assertion: String, produceServiceMessage: TCServiceMessagesClient.() -> Unit) {
        val results = RecordingTestResultProcessor()
        val client = createClient(results)

        client.root(OperationIdentifier(1)) {
            client.produceServiceMessage()
        }",,6e1f
fun createClient(results: RecordingTestResultProcessor),": TCServiceMessagesClient {
        return TCServiceMessagesClient(
            results,
            TCServiceMessagesClientSettings(
                rootNodeName,
                treatFailedTestOutputAsStacktrace = treatFailedTestOutputAsStacktrace
            ),
            LoggerFactory.getLogger(""test""),
            object : MppTestReportHelper {
                override fun reportFailure(results: TestResultProcessor, id: Any, failure: KotlinTestFailure, isAssertionFailure: Boolean) {
                    results.failure(
                        id,
                        if (isAssertionFailure) {
                            TestFailure.fromTestAssertionFailure(failure, failure.expected, failure.actual)
                        }",,a0a1
"fun createDelegatingTestReportProcessor(origin: TestResultProcessor, targetName: String)",": TestResultProcessor =
                    o",,3c65
No signature found,"fun TCServiceMessagesClient.serviceMessage(name: String, attributes: Map<String, String>) =
        s",,6e1f
fun appendMedium(medium: String),"fun deleteMedium(medium: String)
    override fun item(index: Int): JsString?
}

@Suppress(""UNUSED_PARAMETER"")
internal fun getMethodImplForMediaList(obj: MediaList, index: Int): String? { js(""return obj[index];"") }",,4c48
No signature found,fun MediaList.get(index: Int): String? = g,,6e1f
"fun insertRule(rule: String, index: Int)",": Int
    fun deleteRule(index: Int)
}

/**
 * Exposes the JavaScript [StyleSheetList](https://developer.mozilla.org/en/docs/Web/API/StyleSheetList) to Kotlin
 */
public external abstract class StyleSheetList : ItemArrayLike<StyleSheet>, JsAny {
    override fun item(index: Int): StyleSheet?
}",,14d0
"fun getMethodImplForStyleSheetList(obj: StyleSheetList, index: Int)",": StyleSheet? { js(""return obj[index];"") }",,0610
No signature found,fun StyleSheetList.get(index: Int): StyleSheet? = g,,6e1f
fun item(index: Int),": CSSRule?
}

@Suppress(""UNUSED_PARAMETER"")
internal fun getMethodImplForCSSRuleList(obj: CSSRuleList, index: Int): CSSRule? { js(""return obj[index];"") }",,bf54
No signature found,fun CSSRuleList.get(index: Int): CSSRule? = g,,6e1f
"fun insertRule(rule: String, index: Int)",": Int
    fun deleteRule(index: Int)

    companion object {
        val STYLE_RULE: Short
        val CHARSET_RULE: Short
        val IMPORT_RULE: Short
        val MEDIA_RULE: Short
        val FONT_FACE_RULE: Short
        val PAGE_RULE: Short
        val MARGIN_RULE: Short
        val NAMESPACE_RULE: Short
    }",,14d0
fun getPropertyValue(property: String),": String
    fun getPropertyPriority(property: String): String
    fun setProperty(property: String, value: String, priority: String = d",,f2c0
"fun setPropertyValue(property: String, value: String)","fun setPropertyPriority(property: String, priority: String)
    fun removeProperty(property: String): String
    override fun item(index: Int): JsString
}

@Suppress(""UNUSED_PARAMETER"")
internal fun getMethodImplForCSSStyleDeclaration(obj: CSSStyleDeclaration, index: Int): String? { js(""return obj[index];"") }",,ca2c
No signature found,fun CSSStyleDeclaration.get(index: Int): String? = g,,6e1f
fun f7(x: Any),"fun f1(s: () -> String)
expect inline fun f2(s: () -> String)
expect inline fun f3(noinline s: () -> String)

expect fun f4(s: () -> String)
expect inline fun f5(s: () -> String)
expect inline fun f6(crossinline s: () -> String)

expect 
expect fun f8(vararg x: Any)

// MODULE: m2-jvm()()(m1-common)
// FILE: jvm.kt

actual inline fun f1(noinline s: () -> String) {}","// !DIAGNOSTICS: -NOTHING_TO_INLINE
// MODULE: m1-common
// FILE: common.kt",fa7a
No signature found,fun <!ACTUAL_WITHOUT_EXPECT!>f2<!>(noinline s: () -> String) {},,6e1f
No signature found,fun f3(s: () -> String) {},,6e1f
No signature found,fun f4(crossinline s: () -> String) {},,6e1f
No signature found,fun <!ACTUAL_WITHOUT_EXPECT!>f5<!>(crossinline s: () -> String) {},,6e1f
No signature found,fun f6(s: () -> String) {},,6e1f
No signature found,fun <!ACTUAL_WITHOUT_EXPECT!>f7<!>(vararg x: Any) {},,6e1f
No signature found,fun <!ACTUAL_WITHOUT_EXPECT!>f8<!>(x: Any) {},,6e1f
No signature found,fun inlineFun(lambda: () -> Any = {,"// SKIP_INLINE_CHECK_IN: inlineFun$default
// FILE: 1.kt",6e1f
fun box(),": String {
    return inlineFun() as String
}",,4f27
"fun <T> test0(x: Any, y: T)",= x,// FIR_IDENTICAL,9b8c
No signature found,"fun <T : Float> test1(x: Any, y: T) = x",,6e1f
No signature found,"fun <T : Double> test2(x: Any, y: T) = x",,6e1f
No signature found,"fun <T : Float> test3(x: Any, y: T) = x",,6e1f
No signature found,"fun <T : Float?> test4(x: Any, y: T) = x",,6e1f
No signature found,"fun <T : Float?, R : T> test5(x: Any, y: R) = x",,6e1f
No signature found,"fun <T : Number> test6(x: Any, y: T) = x",,6e1f
"fun testCapturedType(x: T, y: Any)",= y,,558e
fun lookup(file: KotlinFileMetadata),= f,,ccc0
fun usage(),"{
    val a = dependency.Bar<MyClass>::foo
}",// FILE: main.kt,455a
fun foo(),{},// FILE: dependency.kt,519f
fun box(),: String = F,"// TARGET_BACKEND: JVM_IR

// FILE: dependency/Base.kt",4f27
fun test(b: Boolean),"{
    val a = when(b) {
        true -> {
            <expr>5</expr>
        }",,69ac
No signature found,"fun <expr>@receiver:Anno(""ab"")</expr> Int.check() = 1",// LOOK_UP_FOR_ELEMENT_OF_TYPE: org.jetbrains.kotlin.psi.KtAnnotationEntry,6e1f
fun lib(),: String = w,"// KT-66342: fail 1: `const val bar` has changed its value
// IGNORE_BACKEND_K1: JS_IR, JS_IR_ES6

// MODULE: lib
// FILE: A.kt
// VERSION: 1",f985
fun box(),: String = l,,4f27
fun test(),"{
    """".lowercase()
    1.digitToChar()
}",,fe98
fun foo(),"= ""","// TARGET_BACKEND: JS_IR
// TARGET_BACKEND: WASM

// RUN_THIRD_PARTY_OPTIMIZER
// WASM_DCE_EXPECTED_OUTPUT_SIZE: wasm  14_571
// WASM_DCE_EXPECTED_OUTPUT_SIZE: mjs    5_277
// WASM_OPT_EXPECTED_OUTPUT_SIZE:        4_276",519f
fun foo(),": String {
        return ""C::foo""
    }",,519f
fun box(),= B,,4f27
fun useBuildConfigJava(),"{
    if (BuildConfig.APPLICATION_ID != ""com.example.dagger.kotlin"") throw AssertionError()
}",,7014
fun is1(x: String),= x,"// TARGET_BACKEND: JVM
// JVM_TARGET: 1.8
// SAM_CONVERSIONS: INDY
// WITH_STDLIB
// FULL_JDK

// CHECK_BYTECODE_TEXT
// JVM_IR_TEMPLATES
// 2 java/lang/invoke/LambdaMetafactory

// FILE: boundRefToSuperClassMethod.kt",06a7
fun is2(x: String),= x,,4fc1
fun cmp(d: JDerived),"=
    C",,7905
fun box(),": String {
    val cmp = cmp(Impl(setOf(""a"", ""c""), setOf(""c"", ""d"")))
    val list = listOf(""e"", ""d"", ""c"", ""b"", ""a"").sortedWith(cmp)
    if (list != listOf(""e"", ""b"", ""d"", ""a"", ""c""))
        return ""Failed: ${list.toString()}",,4f27
fun foo(),"{
    val f : (Any) -> Unit = <!INITIALIZER_TYPE_MISMATCH!>{ -> }",//KT-352 Function variable declaration type isn't checked inside a function body,519f
fun doSmth(),: Int = 4,,ec9e
fun doSmth(a: String),{},,0c52
No signature found,"fun alwaysOk(s: String, fn: (String) -> String): String {
    try { return fn(return ""fail"") }",// FILE: 1.kt,6e1f
fun box(),= a,,4f27
fun addSubFrame(subFrameOwner: IrElement),"{
        innerStack.add(SubFrame(subFrameOwner))
    }",,e797
fun removeSubFrame(),"{
        val state = currentFrame.peekState()
        removeSubFrameWithoutDataPropagation()
        if (!hasNoSubFrames() && state != null) currentFrame.pushState(state)
    }",,1a18
fun removeSubFrameWithoutDataPropagation(),"{
        innerStack.removeLast()
    }",,528b
fun hasNoSubFrames(),= i,,5fc1
fun hasNoInstructions(),= h,,63fa
fun pushInstruction(instruction: Instruction),= c,,a0b0
fun popInstruction(),: Instruction = c,,8a2b
fun dropInstructions(),= c,,e07d
fun pushState(state: State),= c,,b67c
fun popState(),: State = c,,cb36
fun peekState(),: State? = c,,4971
No signature found,"fun storeState(symbol: IrSymbol, state: State?) = c",,6e1f
"fun storeState(symbol: IrSymbol, variable: Variable)",= c,,d4c6
No signature found,"fun forEachSubFrame(block: (SubFrame) -> Unit) {
        // TODO speed up reverse iteration or do it forward
        (innerStack.lastIndex downTo 0).forEach {
            block(innerStack[it])
        }",,6e1f
fun loadState(symbol: IrSymbol),": State {
        forEachSubFrame { it.loadState(symbol)?.let { state -> return state }",,e5b0
"fun rewriteState(symbol: IrSymbol, newState: State)","{
        forEachSubFrame { if (it.containsStateInMemory(symbol)) return it.rewriteState(symbol, newState) }",,9d42
fun containsStateInMemory(symbol: IrSymbol),": Boolean {
        forEachSubFrame { if (it.containsStateInMemory(symbol)) return true }",,fd33
fun copyMemoryInto(newFrame: Frame),"{
        this.getAll().forEach { (symbol, variable) -> if (!newFrame.containsStateInMemory(symbol)) newFrame.storeState(symbol, variable) }",,691d
fun copyMemoryInto(closure: StateWithClosure),"{
        getAll().reversed().forEach { (symbol, variable) -> closure.upValues[symbol] = variable }",,dc0f
fun getAll(),": List<Pair<IrSymbol, Variable>> = i",,2f8c
fun getLineNumberForCurrentInstruction(),": String {
        irFile ?: return """"
        val frameOwner = currentInstruction?.element
        return when {
            frameOwner is IrExpression || (frameOwner is IrDeclaration && frameOwner.origin == IrDeclarationOrigin.DEFINED) ->
                "":${irFile.fileEntry.getLineNumber(frameOwner.startOffset) + 1}",,f237
fun getFileAndPositionInfo(),": String {
        irFile ?: return NOT_DEFINED
        val lineNum = getLineNumberForCurrentInstruction()
        return ""${irFile.name}",,e83b
fun toString(),": String {
        irFile ?: return NOT_DEFINED
        val fileNameCapitalized = irFile.name.replace("".kt"", ""Kt"").capitalizeAsciiOnly()
        val entryPoint = innerStack.firstOrNull { it.owner is IrFunction }",,a535
fun isEmpty(),= i,,464e
fun pushInstruction(instruction: Instruction),= i,,a0b0
fun popInstruction(),: Instruction = i,,8a2b
fun dropInstructions(),= i,,e07d
fun pushState(state: State),= d,,b67c
fun popState(),: State = d,,cb36
fun peekState(),: State? = d,,4971
"fun storeState(symbol: IrSymbol, variable: Variable)","{
        memory[symbol] = variable
    }",,d4c6
No signature found,"fun storeState(symbol: IrSymbol, state: State?) {
        memory[symbol] = Variable(state)
    }",,6e1f
fun containsStateInMemory(symbol: IrSymbol),: Boolean = m,,fd33
fun loadState(symbol: IrSymbol),: State? = m,,e5b0
"fun rewriteState(symbol: IrSymbol, newState: State)","{
        memory[symbol]?.state = newState
    }",,9d42
fun getAll(),": List<Pair<IrSymbol, Variable>> = m",,2f8c
fun push(state: State),"{
        stack.add(state)
    }",,0b1c
fun pop(),: State = s,,4144
fun peek(),: State? = s,,4fed
No signature found,fun message(key: @AnnKlass(CoreBundle.BUNDLE) String) = k,"// FIR_IDENTICAL
// ISSUE: KT-57879
// TARGET_BACKEND: JVM_IR

// FILE: CoreBundle.java",6e1f
fun box(),= m,,4f27
fun box(),": String {
    val g = when ("""".length) {
        0 -> G<A>()
        else -> G<B>()
    }","// CHECK_BYTECODE_TEXT
// 0 java/lang/invoke/LambdaMetafactory",4f27
fun functionReference(x: Any),{},,3144
fun check(x: IFoo<in T>),"{
        x.accept(object : A {}",,68d5
fun accept(t: T),"fun interface IFoo<T : Top> {
    
}",,9f41
fun testKT35056(),"{
    val name = ""Some native exception""
    val reason = ""Illegal value""
    var finallyBlockTest = ""FAILED""
    var catchBlockTest = ""FAILED""
    try {
        raiseExc(name, reason)
        assertNotEquals(""FAILED"", catchBlockTest)  // shall not get here anyway
    }",,eb70
No signature found,"fun abnormal_handler(x: Any?) : Unit {
    println(""OK: Ends with uncaught exception handler"")
    exitProcess(0)
}",,6e1f
fun main(),"{
    // Depending on the `foreignxceptionMode` option (def file or cinterop cli) this test should ends
    // normally with `ForeignException` handled or abnormally with `abnormal_handler`.
    // Test shall validate output (golden value) from `abnormal_handler`.

    objc_setUncaughtExceptionHandler(staticCFunction(::abnormal_handler))

    testKT35056()
}",,d987
No signature found,"fun baz(s: String?): Int {
    if (s == null) return 0
    return when(s) {
        ""abc"" -> s
        else -> ""xyz""
    }",// Smart casts on complex expressions,6e1f
fun bar(),": Int {
    if (ss == null) return 0
    // ss cannot be smart casted, so an error here
    return when(ss) {
        ""abc"" -> ss
        else -> ""xyz""
    }",,66c3
fun main(w: ML<String>),"{
    val generic1 = Generic.create()
    val generic2 = Generic.create() ?: return

    // Not enough information to infer E (both K1 and K2 after KT-41794 is done)
    // Because generic information is erased from the raw type scope of `generic1`
    // But the parameter E is still there (that is a questionable behavior)
    generic1.foo(w)

    // `generic2` does have just non-raw type `Generic<Any!>..Generic<*>?`
    generic2.foo(w) // OK in K1, fails in K2 after KT-41794 is done
}","// SKIP_TXT
// FILE: Generic.java",8544
No signature found,fun <T> lazy(initializer: () -> T): Lazy<T> = T,"// FIR_IDENTICAL
// !DIAGNOSTICS: -UNUSED_PARAMETER",6e1f
No signature found,"fun getValue(thisRef: Any?, property: KProperty<*>): T = T",,6e1f
fun list(j: J),": Any {
    val a = j.n()!!

    a<!UNNECESSARY_SAFE_CALL!>?.<!>get(0)
    if (<!SENSELESS_COMPARISON!>a == null<!>) {}","// FIR_IDENTICAL
// FILE: J.java",2408
No signature found,"fun String.getValue(t:Any?, p: KProperty<*>): String = p",,6e1f
fun callInline(),= C,,98f2
fun inlineFun(),= {,,9506
fun box(),: String = F,,4f27
"fun use(a: A, b: B, c: C)","{
    a.<!DEPRECATION!>f<!>()
    b.f()
    c.<!DEPRECATION!>f<!>()

    A.<!DEPRECATION!>D<!>
    B.D
    C.<!DEPRECATION!>D<!>

    A.<!DEPRECATION!>bar<!>()
    B.bar()
    C.<!DEPRECATION!>bar<!>()
}","// FIR_IDENTICAL
// FILE: A.java",dd46
fun box(),= e,// FUNCTION: dbg,4f27
"fun <T> dbg(key: Any, value: T)",: T = v,,f280
"fun <T> dbg(key: Any, value: T, msg: String)",: T = t,,1aa5
fun build(),= S,"// TARGET_BACKEND: JVM
// JVM_TARGET: 1.8
// SAM_CONVERSIONS: INDY

// FILE: privateCompanionObjectMember.kt",5bf9
fun test(string: String),: String = s,,5c81
fun box(),": String =
    S",,4f27
No signature found,"fun <reified T : IrElement> T.deepCopyWithSymbols(
    initialParent: IrDeclarationParent? = n",,6e1f
No signature found,"fun <reified T : IrElement> T.deepCopyWithoutPatchingParents(): T {
    return deepCopyImpl(::DeepCopyTypeRemapper) as T
}",,6e1f
No signature found,"fun <T : IrElement> T.deepCopyImpl(createTypeRemapper: (SymbolRemapper) -> TypeRemapper): IrElement {
    val symbolRemapper = DeepCopySymbolRemapper()
    acceptVoid(symbolRemapper)
    val typeRemapper = createTypeRemapper(symbolRemapper)
    return transform(DeepCopyIrTreeWithSymbols(symbolRemapper, typeRemapper), null)
}",,6e1f
fun mapDeclarationOrigin(origin: IrDeclarationOrigin),= o,,d8c9
No signature found,fun mapStatementOrigin(origin: IrStatementOrigin?) = o,,6e1f
No signature found,"fun <D : IrAttributeContainer> D.processAttributes(other: IrAttributeContainer?): D =
        c",,6e1f
No signature found,"fun <reified T : IrElement> T.transform() =
        t",,6e1f
No signature found,"fun <reified T : IrElement> List<T>.transform() =
        m",,6e1f
No signature found,"fun <reified T : IrElement> List<T>.transformTo(destination: MutableList<T>) =
        m",,6e1f
No signature found,"fun <T : IrDeclarationContainer> T.transformDeclarationsTo(destination: T) =
        d",,6e1f
No signature found,fun IrType.remapType() = t,,6e1f
fun visitElement(element: IrElement),": IrElement =
        t",,d1d3
fun visitModuleFragment(declaration: IrModuleFragment),": IrModuleFragment {
        val result = IrModuleFragmentImpl(
            declaration.descriptor,
            declaration.irBuiltins,
        )
        transformedModule = result
        result.files += declaration.files.transform()
        transformedModule = null
        return result
    }",,f81e
fun visitExternalPackageFragment(declaration: IrExternalPackageFragment),": IrExternalPackageFragment =
        I",,255b
fun visitFile(declaration: IrFile),": IrFile =
        I",,8636
fun visitDeclaration(declaration: IrDeclarationBase),": IrStatement =
        t",,3203
fun visitScript(declaration: IrScript),": IrStatement {
        return IrScriptImpl(
            symbolRemapper.getDeclaredScript(declaration.symbol),
            declaration.name,
            declaration.factory,
            declaration.startOffset,
            declaration.endOffset
        ).also { scriptCopy ->
            scriptCopy.thisReceiver = declaration.thisReceiver?.transform()
            declaration.statements.mapTo(scriptCopy.statements) { it.transform() }",,361a
fun visitClass(declaration: IrClass),": IrClass =
        d",,b303
fun visitSimpleFunction(declaration: IrSimpleFunction),": IrSimpleFunction =
        d",,451c
fun visitConstructor(declaration: IrConstructor),": IrConstructor =
        d",,d1cf
No signature found,"fun <T : IrFunction> T.transformFunctionChildren(declaration: T): T =
        a",,6e1f
No signature found,"fun IrMutableAnnotationContainer.transformAnnotations(declaration: IrAnnotationContainer) {
        annotations = declaration.annotations.transform()
    }",,6e1f
fun visitProperty(declaration: IrProperty),": IrProperty =
        d",,e95d
fun visitField(declaration: IrField),": IrField =
        d",,e02d
fun visitLocalDelegatedProperty(declaration: IrLocalDelegatedProperty),": IrLocalDelegatedProperty =
        d",,74a4
fun visitEnumEntry(declaration: IrEnumEntry),": IrEnumEntry =
        d",,57fd
fun visitAnonymousInitializer(declaration: IrAnonymousInitializer),": IrAnonymousInitializer =
        d",,324d
fun visitVariable(declaration: IrVariable),": IrVariable =
        I",,e833
fun visitTypeParameter(declaration: IrTypeParameter),": IrTypeParameter =
        c",,2895
fun copyTypeParameter(declaration: IrTypeParameter),": IrTypeParameter =
        d",,1e1d
No signature found,"fun IrTypeParametersContainer.copyTypeParametersFrom(other: IrTypeParametersContainer) {
        this.typeParameters = other.typeParameters.memoryOptimizedMap {
            copyTypeParameter(it)
        }",,6e1f
fun visitValueParameter(declaration: IrValueParameter),": IrValueParameter =
        d",,8f55
fun visitTypeAlias(declaration: IrTypeAlias),": IrTypeAlias =
        d",,a2a3
fun visitBody(body: IrBody),": IrBody =
        t",,8df4
fun visitExpressionBody(body: IrExpressionBody),": IrExpressionBody =
        I",,395c
fun visitBlockBody(body: IrBlockBody),": IrBlockBody =
        I",,f701
fun visitSyntheticBody(body: IrSyntheticBody),": IrSyntheticBody =
        I",,4a0c
fun visitExpression(expression: IrExpression),": IrExpression =
        t",,1ed6
No signature found,"fun visitConst(expression: IrConst<*>): IrConst<*> =
        e",,6e1f
fun visitConstantObject(expression: IrConstantObject),": IrConstantValue =
        I",,10b3
fun visitConstantPrimitive(expression: IrConstantPrimitive),": IrConstantValue =
        I",,e649
fun visitConstantArray(expression: IrConstantArray),": IrConstantValue =
        I",,b3aa
fun visitVararg(expression: IrVararg),": IrVararg =
        I",,7806
fun visitSpreadElement(spread: IrSpreadElement),": IrSpreadElement =
        I",,e02c
fun visitBlock(expression: IrBlock),": IrBlock =
        i",,ba88
fun visitComposite(expression: IrComposite),": IrComposite =
        I",,5569
fun visitStringConcatenation(expression: IrStringConcatenation),": IrStringConcatenation =
        I",,4898
fun visitGetObjectValue(expression: IrGetObjectValue),": IrGetObjectValue =
        I",,527c
fun visitGetEnumValue(expression: IrGetEnumValue),": IrGetEnumValue =
        I",,3304
fun visitGetValue(expression: IrGetValue),": IrGetValue =
        I",,8d48
fun visitSetValue(expression: IrSetValue),": IrSetValue =
        I",,068b
fun visitGetField(expression: IrGetField),": IrGetField =
        I",,5d2a
fun visitSetField(expression: IrSetField),": IrSetField =
        I",,72c7
fun visitCall(expression: IrCall),": IrCall =
        s",,4974
fun visitConstructorCall(expression: IrConstructorCall),": IrConstructorCall {
        val constructorSymbol = symbolRemapper.getReferencedConstructor(expression.symbol)
        return IrConstructorCallImpl(
            expression.startOffset, expression.endOffset,
            expression.type.remapType(),
            constructorSymbol,
            expression.typeArgumentsCount,
            expression.constructorTypeArgumentsCount,
            expression.valueArgumentsCount,
            mapStatementOrigin(expression.origin)
        ).apply {
            copyRemappedTypeArgumentsFrom(expression)
            transformValueArguments(expression)
        }",,6432
No signature found,"fun IrMemberAccessExpression<*>.copyRemappedTypeArgumentsFrom(other: IrMemberAccessExpression<*>) {
        assert(typeArgumentsCount == other.typeArgumentsCount) {
            ""Mismatching type arguments: $typeArgumentsCount vs ${other.typeArgumentsCount}",,6e1f
fun shallowCopyCall(expression: IrCall),": IrCall {
        val newCallee = symbolRemapper.getReferencedSimpleFunction(expression.symbol)
        return IrCallImpl(
            expression.startOffset, expression.endOffset,
            expression.type.remapType(),
            newCallee,
            expression.typeArgumentsCount,
            expression.valueArgumentsCount,
            mapStatementOrigin(expression.origin),
            symbolRemapper.getReferencedClassOrNull(expression.superQualifierSymbol)
        ).apply {
            copyRemappedTypeArgumentsFrom(expression)
        }",,729f
No signature found,"fun <T : IrMemberAccessExpression<*>> T.transformReceiverArguments(original: T): T =
        a",,6e1f
No signature found,"fun <T : IrMemberAccessExpression<*>> T.transformValueArguments(original: T) {
        transformReceiverArguments(original)
        for (i in 0 until original.valueArgumentsCount) {
            putValueArgument(i, original.getValueArgument(i)?.transform())
        }",,6e1f
fun visitDelegatingConstructorCall(expression: IrDelegatingConstructorCall),": IrDelegatingConstructorCall {
        val newConstructor = symbolRemapper.getReferencedConstructor(expression.symbol)
        return IrDelegatingConstructorCallImpl(
            expression.startOffset, expression.endOffset,
            expression.type.remapType(),
            newConstructor,
            expression.typeArgumentsCount,
            expression.valueArgumentsCount
        ).apply {
            copyRemappedTypeArgumentsFrom(expression)
            transformValueArguments(expression)
        }",,a709
fun visitEnumConstructorCall(expression: IrEnumConstructorCall),": IrEnumConstructorCall {
        val newConstructor = symbolRemapper.getReferencedConstructor(expression.symbol)
        return IrEnumConstructorCallImpl(
            expression.startOffset, expression.endOffset,
            expression.type.remapType(),
            newConstructor,
            expression.typeArgumentsCount,
            expression.valueArgumentsCount
        ).apply {
            copyRemappedTypeArgumentsFrom(expression)
            transformValueArguments(expression)
        }",,4f0f
fun visitGetClass(expression: IrGetClass),": IrGetClass =
        I",,ed8a
fun visitFunctionReference(expression: IrFunctionReference),": IrFunctionReference {
        val symbol = symbolRemapper.getReferencedFunction(expression.symbol)
        val reflectionTarget = expression.reflectionTarget?.let { symbolRemapper.getReferencedFunction(it) }",,0e81
fun visitRawFunctionReference(expression: IrRawFunctionReference),": IrRawFunctionReference {
        val symbol = symbolRemapper.getReferencedFunction(expression.symbol)
        return IrRawFunctionReferenceImpl(
            expression.startOffset, expression.endOffset,
            expression.type.remapType(),
            symbol
        ).processAttributes(expression)
    }",,8053
fun visitPropertyReference(expression: IrPropertyReference),": IrPropertyReference =
        I",,20d7
fun visitLocalDelegatedPropertyReference(expression: IrLocalDelegatedPropertyReference),": IrLocalDelegatedPropertyReference =
        I",,0f52
fun visitFunctionExpression(expression: IrFunctionExpression),": IrFunctionExpression =
        I",,8fcb
fun visitClassReference(expression: IrClassReference),": IrClassReference =
        I",,c778
fun visitInstanceInitializerCall(expression: IrInstanceInitializerCall),": IrInstanceInitializerCall =
        I",,e955
fun visitTypeOperator(expression: IrTypeOperatorCall),": IrTypeOperatorCall =
        I",,d80c
fun visitWhen(expression: IrWhen),": IrWhen =
        I",,b21d
fun visitBranch(branch: IrBranch),": IrBranch =
        I",,e768
fun visitElseBranch(branch: IrElseBranch),": IrElseBranch =
        I",,fd68
fun getTransformedLoop(irLoop: IrLoop),": IrLoop =
        t",,bdda
fun visitWhileLoop(loop: IrWhileLoop),": IrWhileLoop =
        I",,b000
fun visitDoWhileLoop(loop: IrDoWhileLoop),": IrDoWhileLoop =
        I",,e2db
fun visitBreak(jump: IrBreak),": IrBreak =
        I",,e55c
fun visitContinue(jump: IrContinue),": IrContinue =
        I",,3945
fun visitTry(aTry: IrTry),": IrTry =
        I",,0836
fun visitCatch(aCatch: IrCatch),": IrCatch =
        I",,371f
fun visitReturn(expression: IrReturn),": IrReturn =
        I",,bca7
No signature found,"fun SymbolRemapper.getReferencedReturnTarget(returnTarget: IrReturnTargetSymbol): IrReturnTargetSymbol =
        w",,6e1f
fun visitThrow(expression: IrThrow),": IrThrow =
        I",,c1c1
fun visitDynamicOperatorExpression(expression: IrDynamicOperatorExpression),": IrDynamicOperatorExpression =
        I",,876c
fun visitDynamicMemberExpression(expression: IrDynamicMemberExpression),": IrDynamicMemberExpression =
        I",,0b39
fun visitErrorDeclaration(declaration: IrErrorDeclaration),": IrErrorDeclaration =
        d",,d11a
fun visitErrorExpression(expression: IrErrorExpression),": IrErrorExpression =
        I",,bff9
fun visitErrorCallExpression(expression: IrErrorCallExpression),": IrErrorCallExpression =
        I",,7104
No signature found,"fun kotlinOptions(fn: KotlinCommonToolOptions.() -> Unit) {
        kotlinOptions.fn()
    }",,6e1f
fun kotlinOptions(fn: Action<KotlinCommonToolOptions>),"{
        fn.execute(kotlinOptions)
    }",,3cd6
fun link(),"{
        val metricReporter = metrics.get()

        addBuildMetricsForTaskAction(metricsReporter = metricReporter, languageVersion = null) {

            val outFile = outputFile.get()
            outFile.ensureParentDirsCreated()

            fun FileCollection.klibs() = files.filter { it.extension == ""klib"" }",,8e3a
fun bitcodeEmbeddingMode(),": BitcodeEmbeddingMode {
        return XcodeUtils.bitcodeEmbeddingMode(outputKind, embedBitcode.orNull, xcodeVersion, konanTarget, debuggable.get())
    }",,cae6
fun test(),"{
    TestScope.<!ILLEGAL_RESTRICTED_SUSPENDING_FUNCTION_CALL!>testLambda<!>(10)
    testLambda(TestScope, 10)
    testLambda.invoke(TestScope, 10)
}","// FIR_IDENTICAL
// ISSUE: KT-65272
// WITH_STDLIB",fe98
No signature found,fun foo(x: Inv<String?>) { },"// FIR_IDENTICAL
// !LANGUAGE: +TypeEnhancementImprovementsInStrictMode
// !DIAGNOSTICS: -UNUSED_PARAMETER
// JSR305_GLOBAL_REPORT: strict

// FILE: test/NonNullApi.java",6e1f
fun main(a: A),"{
    val x = <!DEBUG_INFO_EXPRESSION_TYPE(""Inv<kotlin.String?>"")!>Inv(a.bar1())<!>
    foo(x)
}",,c1f5
fun test(collection: MutableCollection<Boolean>),"{
    collection.removeIf { it }",// FULL_JDK,6ca4
No signature found,"fun <T> invoke(name: String, block: suspend () -> T): T {
        TODO()
    }","// FIR_IDENTICAL
// !DIAGNOSTICS: -UNUSED_PARAMETER -UNCHECKED_CAST",6e1f
No signature found,fun demo(callback: suspend () -> Unit) = w,,6e1f
fun notAProperty(),{},"// TARGET_BACKEND: JVM

// WITH_REFLECT",404d
fun box(),": String {
    val props = A::class.memberProperties

    val names = props.map { it.name }",,4f27
No signature found,fun <T : CharSequence?> bar1(x: T) {},// !DIAGNOSTICS: -UNUSED_PARAMETER -UNUSED_VARIABLE,6e1f
No signature found,fun bar2(x: CharSequence?) {},,6e1f
No signature found,fun <T : CharSequence> bar3(x: T) {},,6e1f
fun bar4(x: String),{},,1287
No signature found,"fun <T : String?> foo(x: T) {
    bar1(x)
    bar2(x)

    bar3(<!ARGUMENT_TYPE_MISMATCH!>x<!>)
    bar4(<!ARGUMENT_TYPE_MISMATCH!>x<!>)
}",,6e1f
fun test(),"{
    val f = String::length
    val s = ""hello""
    val g = s::length
    f(s) + <expr>g</expr>() + String::length.invoke(s) + s::length.invoke()
}",,fe98
fun getM(),": String {
    res += ""M""
    return ""OK""
}",,84dd
fun getT(),": Throwable {
    res += ""T""
    return Throwable(""test"", null)
}",,cb0c
fun box(),": String {
    val z = Throwable(cause = getT(), message = getM())
    if (res != ""TM"") return ""Wrong argument calculation order: $res""
    return z.message!!
}",,4f27
fun lold(),"= """,// EXPECTED_REACHABLE_NODES: 1286,276c
fun box(),": String {
    return A().p()
}",,4f27
fun foo(),{},,519f
fun test(obj: Foo),"{
    consume(<expr>obj::foo</expr>)
}",,c465
No signature found,fun consume(f: () -> String) {},,6e1f
fun main(args: Array<String>),"{
    var a: Byte =  1
    var b: Int  =  2
    var c: Long = -3
    var d: Char = 'c'
    var e: Boolean = true
    return
}","// KIND: STANDALONE_LLDB
// FIR_IDENTICAL",5b61
fun foo(),"{
    // nullable variable
    val en2: Any? = En.A
    if (en2 is En) {
        when (<!DEBUG_INFO_SMARTCAST!>en2<!>) {
            En.A -> {}",// See KT-14705,519f
fun useEn(x: En),= x,,134b
fun useEn2(x: En2),= x,,f63a
fun bar(x: Any),"{
    if (x is En && <!USELESS_IS_CHECK!>x is En2<!>) {
        when (<!DEBUG_INFO_SMARTCAST!>x<!>) {
            En.A -> useEn(<!DEBUG_INFO_SMARTCAST!>x<!>)
            En2.D -> useEn2(<!DEBUG_INFO_SMARTCAST!>x<!>)
            else -> {}",,9cff
fun getFoo(),= f,"// TARGET_BACKEND: JVM_IR
// ISSUE: KT-59550

// FILE: Intermediate.java",5fb9
fun setFoo(newFoo: String),"{
        foo = newFoo
    }",,eb6f
fun box(),": String {
    val f = Final(Intermediate(""""))
    f.foo = ""OK""
    return f.foo
}",,4f27
fun foo(),"{
    open class Local {
        val my: Int = 2
            get() = field
    }","// FIR_IDENTICAL
// DIAGNOSTICS: -UNUSED_VARIABLE",519f
fun lib(),": String {

    val a = qux
    val b = x.bar
    qux = ""new global value""
    x.bar = ""new member value""

    return when {
        a != ""initialized global"" -> ""fail 1""
        b != ""initialized member"" -> ""fail 2""
        qux != ""new global value"" -> ""fail 3""
        x.bar != ""new member value"" -> ""fail 4""

        else -> ""OK""
    }","// MODULE: lib
// FILE: A.kt
// VERSION: 1",f985
fun box(),: String = l,,4f27
fun foo(s: String),{},// !DIAGNOSTICS: -UNUSED_PARAMETER,b751
fun foo(i: Long),{},,977c
No signature found,fun bar(f: (Boolean) -> Unit) {},,6e1f
fun test(),"{
    bar(::<!NONE_APPLICABLE!>foo<!>)
}",,fe98
fun visitClass(declaration: IrClass),"{
        if (!declaration.isExpect) {
            actualizeFakeOverrides(declaration)
        }",,b303
fun visitElement(element: IrElement),"{
        element.acceptChildrenVoid(this)
    }",,d1d3
fun actualizeFakeOverrides(klass: IrClass),"{
        fun IrDeclaration.actualize(): IrDeclaration {
            if (!isExpect) return this

            (expectActualMap[symbol]?.owner as? IrDeclaration)?.let { return it }",,82dd
No signature found,fun StringValue.<!NO_ACTUAL_FOR_EXPECT{JS},"// !LANGUAGE: +MultiPlatformProjects

// MODULE: common
// TARGET_PLATFORM: Common

// FILE: StringValue.kt",6e1f
No signature found,fun StringValue.plus(other: String) = S,,6e1f
No signature found,fun StringDemoInterface.plusK(): <!NO_ACTUAL_FOR_EXPECT{JS},,6e1f
No signature found,"fun StringDemoInterface.<!ACTUAL_WITHOUT_EXPECT(""Actual function 'plusK'; The following declaration is incompatible because return type is different:    public expect fun StringDemoInterface /* = K",,6e1f
fun box(),= S,,4f27
"fun usage(a: Aliased, b: SamePackage)","{
    aliased()
    samePackage()
}",// FILE: main.kt,12c6
fun samePackage(),{},// FILE: dependency.kt,1663
"fun foo(x: String, y: String)",= x,// FILE: 1.kt,30a6
fun test(s: String),= s,,f4d3
No signature found,"fun processRecords(block: (String) -> String): String {
    return A().test(block(foo(""O"", foo(""K"", ""1""))))
}",,6e1f
fun box(),": String {
    val result = processRecords { ""B"" + it }",// FILE: 2.kt,4f27
fun bar(),": Int {
    return object {
        fun baz(): Int {
            val strings = A.foo()
            strings.forEach {
                if (it.length == 0) return 1
            }","// SKIP_TXT
// FIR_IDENTICAL
// FULL_JDK
// !CHECK_TYPE
// !DIAGNOSTICS: -UNUSED_EXPRESSION -UNUSED_PARAMETER -UNUSED_VARIABLE

// FILE: A.java",66c3
fun build(),": FirBackingField {
        return FirBackingFieldImpl(
            source,
            resolvePhase,
            moduleData,
            origin,
            attributes,
            returnTypeRef,
            receiverParameter,
            deprecationsProvider,
            containerSource,
            dispatchReceiverType,
            contextReceivers.toMutableOrEmpty(),
            name,
            delegate,
            isVar,
            isVal,
            getter,
            setter,
            backingField,
            symbol,
            propertySymbol,
            initializer,
            annotations.toMutableOrEmpty(),
            typeParameters,
            status,
        )
    }",,5bf9
No signature found,"fun buildBackingField(init: FirBackingFieldBuilder.() -> Unit): FirBackingField {
    contract {
        callsInPlace(init, InvocationKind.EXACTLY_ONCE)
    }",,6e1f
fun <reified T> f(),": T =
    T","// TARGET_BACKEND: JVM
// JVM_TARGET: 1.8
// SAM_CONVERSIONS: INDY
// WITH_STDLIB
// FULL_JDK

// CHECK_BYTECODE_TEXT
// JVM_IR_TEMPLATES
// 1 java/lang/invoke/LambdaMetafactory

// FILE: specializedWithReifiedTypeParameter.kt",6ada
fun <T> foo2(g: GenericToAny<T>),: T = g,,4b89
fun box(),": String {
    return foo2<OK>(::f)::class.simpleName!!
}",,4f27
"fun <R, D> acceptChildren(visitor: FirVisitor<R, D>, data: D)",{},,b2f8
"fun <D> transformChildren(transformer: FirTransformer<D>, data: D)",": FirElement {
        return this
    }",,963c
"fun <R, D> acceptChildren(visitor: FirVisitor<R, D>, data: D)",{},,b2f8
"fun <D> transformChildren(transformer: FirTransformer<D>, data: D)",": FirElement {
        return this
    }",,963c
No signature found,"fun FirResolvedArgumentList.toAnnotationArgumentMapping(): FirAnnotationArgumentMapping {
    return FirAnnotationArgumentMappingImpl(
        source = null,
        mapping = mapping.entries.associateBy(
            keySelector = { it.value.name }",,6e1f
fun create(),= P,"// IGNORE_BACKEND: JS
// KJS_WITH_FULL_RUNTIME",9c2f
No signature found,"fun <T : Any> testInstance(x: T) {
    val kclass = x::class
    val anotherInstance = kclass.createInstance()
    assertTrue(kclass.isInstance(x) && kclass.isInstance(anotherInstance))
}",,6e1f
No signature found,"fun <T : Any> testInstanceFail(x: T) {
    try {
        val kclass = x::class
        kclass.createInstance()
        fail(""createInstance should have failed on $kclass"")
    }",,6e1f
fun box(),": String {
    testInstance(Simple())
    testInstance(PrimaryWithDefaults(""d2""))
    testInstance(Secondary(""test""))
    testInstance(SecondaryWithDefaults(""test""))
    testInstance(SecondaryWithDefaultsNoPrimary(2))

    testInstanceFail(NoNoArgConstructor(4))
    testInstanceFail(NoArgAndDefault())
    testInstanceFail(DefaultPrimaryAndDefaultSecondary(4))
    testInstanceFail(SeveralDefaultSecondaries(4))
    testInstanceFail(PrivateConstructor.create())
    testInstanceFail(Object)
    testInstanceFail(EnumFoo.A)

    return ""OK""
}",,4f27
fun box(),": String {
    val generated = ConstructorExample(""foo"", true)
    assertEquals(generated.foo, ""foo"")
    return ""OK""
}",// FILE: ConstructorExample.java,4f27
fun libCommonFunForLibPlatformTests(n: Int),": Int {
    return n * 2
}",,32e9
fun createProjectWideOutOfBlockModificationTracker(),": ModificationTracker {
        return projectWide
    }",,7e7e
fun createLibrariesWideModificationTracker(),": ModificationTracker {
        return librariesWide
    }",,8d18
fun incrementModificationsCount(includeBinaryTrackers: Boolean),"{
        projectWide.incModificationCount()
        if (includeBinaryTrackers) {
            librariesWide.incModificationCount()
        }",,b35e
fun getInstance(project: Project),": KotlinStaticModificationTrackerFactory =
            K",,f92b
fun someFun(),": SomeClass {
        return SomeClass()
    }",,b5a1
fun someFun(),"{
    }",,b5a1
fun hasNext(),: Boolean = i,"// WITH_STDLIB
// WORKS_WHEN_VALUE_CLASS
// LANGUAGE: +ValueClasses",2c39
fun next(),": Map.Entry<Z, Z> = M",,cb14
fun iterator(),": Iterator<Map.Entry<Z, Z>> = M",,c20a
fun containsKey(key: Z),: Boolean = k,,dc34
fun containsValue(value: Z),: Boolean = s,,65f6
fun get(key: Z),= s,,87d3
fun isEmpty(),: Boolean = s,,464e
fun box(),": String {
    val zm = ZArrayMap(IntArray(5))

    zm.containsKey(Z(0))
    zm.containsValue(Z(0))
    zm[Z(0)]

    zm.containsKey(object {}",,4f27
fun finiteRecursion(),"{
        var y = 20

        class C {
            val finiteRecursion: Int by lazy(mode) {
                if (y < 17) 42 else {
                    y -= 1
                    finiteRecursion + 1
                }",,5016
fun captureThis(),"{
        class C {
            val self by lazy(mode) { this }",,1db6
fun throwException(),"{
        class C {
            val thrower by lazy<String>(mode) {
                error(""failure"")
            }",,785e
fun multiThreadedInit(),"{
        val initializerCallCount = AtomicInt(0)

        class C {
            val data by lazy(mode) {
                initializerCallCount.getAndIncrement()
                Any()
            }",,51df
No signature found,"fun annotations(
        hasAnnotations: Boolean,
        typeResolver: CirTypeResolver,
        annotations: () -> List<KmAnnotation>,
    ): List<CirAnnotation> {
        return if (!hasAnnotations)
            emptyList()
        else
            annotations().compactMap { annotation(it, typeResolver) }",,6e1f
"fun annotation(source: KmAnnotation, typeResolver: CirTypeResolver)",": CirAnnotation {
        val classId = CirEntityId.create(source.className)
        val clazz: CirProvided.RegularClass = typeResolver.resolveClassifier(classId)

        val type = CirClassType.createInterned(
            classId = classId,
            outerType = null, // annotation class can't be inner class
            arguments = clazz.typeParameters.compactMap { typeParameter ->
                CirRegularTypeProjection(
                    projectionKind = typeParameter.variance,
                    type = CirTypeParameterType.createInterned(
                        index = typeParameter.index,
                        isMarkedNullable = false
                    )
                )
            }",,f365
"fun typeParameter(source: KmTypeParameter, typeResolver: CirTypeResolver)",: CirTypeParameter = C,,c9a3
"fun extensionReceiver(
        receiverParameterType: KmType,
        typeResolver: CirTypeResolver
    )",: CirExtensionReceiver = C,,61d2
No signature found,"fun property(name: CirName, source: KmProperty, containingClass: CirContainingClass?, typeResolver: CirTypeResolver): CirProperty {
        val compileTimeInitializer = if (source.hasConstant) {
            constantValue(
                constantValue = source.compileTimeValue,
                owner = source,
            )
        }",,6e1f
"fun propertyGetter(source: KmProperty, typeResolver: CirTypeResolver)",": CirPropertyGetter? {
        val isDefault = !source.getter.isNotDefault
        val annotations = annotations(source.getter.hasAnnotations, typeResolver, source::getterAnnotations)

        if (isDefault && annotations.isEmpty())
            return CirPropertyGetter.DEFAULT_NO_ANNOTATIONS

        return CirPropertyGetter.createInterned(
            annotations = annotations,
            isDefault = isDefault,
            isInline = source.getter.isInline
        )
    }",,e368
"fun propertySetter(source: KmProperty, typeResolver: CirTypeResolver)",": CirPropertySetter? {
        val setter = source.setter ?: return null

        return CirPropertySetter.createInterned(
            annotations = annotations(source.setter?.hasAnnotations == true, typeResolver, source::setterAnnotations),
            parameterAnnotations = source.setterParameter?.let { setterParameter ->
                annotations(setterParameter.hasAnnotations, typeResolver, setterParameter::annotations)
            }",,6a06
fun callableKind(memberKind: MemberKind),": CallableMemberDescriptor.Kind =
        w",,5d85
No signature found,"fun function(name: CirName, source: KmFunction, containingClass: CirContainingClass?, typeResolver: CirTypeResolver): CirFunction =
        C",,6e1f
fun functionModifiers(source: KmFunction),: CirFunctionModifiers = C,,f39b
"fun valueParameter(source: KmValueParameter, typeResolver: CirTypeResolver)",": CirValueParameter =
        C",,d42c
No signature found,"fun constantValue(
        constantValue: KmAnnotationArgument?,
        constantName: CirName? = n",,6e1f
No signature found,"fun constantValue(
        constantValue: KmAnnotationArgument?,
        location: () -> String
    ): CirConstantValue = w",,6e1f
"fun clazz(name: CirName, source: KmClass, typeResolver: CirTypeResolver)",: CirClass = C,,64ba
"fun defaultEnumEntry(
        name: CirName,
        annotations: List<KmAnnotation>,
        enumClassId: CirEntityId,
        hasEnumEntries: Boolean,
        typeResolver: CirTypeResolver
    )",: CirClass = C,,0308
fun classKind(kmClassKind: KmClassKind),": ClassKind =
        w",,f148
"fun constructor(source: KmConstructor, containingClass: CirContainingClass, typeResolver: CirTypeResolver)",": CirClassConstructor =
        C",,c180
"fun typeAlias(name: CirName, source: KmTypeAlias, typeResolver: CirTypeResolver)",": CirTypeAlias {
        val underlyingType = type(source.underlyingType, typeResolver) as CirClassOrTypeAliasType
        val expandedType = underlyingType.unabbreviate()

        return CirTypeAlias.create(
            annotations = annotations(source.hasAnnotations, typeResolver, source::annotations),
            name = name,
            typeParameters = source.typeParameters.compactMap { typeParameter(it, typeResolver) }",,5ba6
"fun type(source: KmType, typeResolver: CirTypeResolver)",": CirType {
        @Suppress(""NAME_SHADOWING"")
        val source = source.abbreviatedType ?: source
        val isMarkedNullable = source.isNullable

        return when (val classifier = source.classifier) {
            is KmClassifier.Class -> {
                val classId = CirEntityId.create(classifier.name)

                val outerType = source.outerType?.let { outerType ->
                    val outerClassType = type(outerType, typeResolver)
                    check(outerClassType is CirClassType) { ""Outer type of $classId is not a class: $outerClassType"" }",,99a4
fun variance(variance: KmVariance),: Variance = w,,4602
"fun arguments(arguments: List<KmTypeProjection>, typeResolver: CirTypeResolver)",": List<CirTypeProjection> {
        return arguments.compactMap { argument ->
            val variance = argument.variance ?: return@compactMap CirStarTypeProjection
            val argumentType = argument.type ?: return@compactMap CirStarTypeProjection

            CirRegularTypeProjection(
                projectionKind = variance(variance),
                type = type(argumentType, typeResolver)
            )
        }",,9c35
fun modality(kmModality: KmModality),": Modality =
        w",,14a5
fun visibility(kmVisibility: KmVisibility),": Visibility =
        w",,b2fc
fun t12(x: Int),": Int {
    var y = x
    val runnable = object : Runnable {
        override fun run () {
            y = y + 1
        }","// TARGET_BACKEND: JVM
// TARGET_BACKEND: JVM_IR
// WITH_STDLIB",c534
fun box(),": String {
    val result = t12(0)
    return if (result == 100) ""OK"" else result.toString()
}",,4f27
fun doSomething(),{},,877b
fun next(),: SomeObject? = n,,cb14
fun list(start: SomeObject),": SomeObject {
    var e: SomeObject? = start
    for (i in 0..42) {
        if (e == null)
            break
        // Smart casts are possible because of the break before
        e.doSomething()
        e = e.next()
    }",,c587
fun box(),": String {
    var captureMe = 0

    fun () {}","// LAMBDAS: INDY
// TARGET_BACKEND: JVM_IR
// JVM_TARGET: 1.8
// WITH_STDLIB

// CHECK_BYTECODE_TEXT
// JVM_IR_TEMPLATES
// 14 java/lang/invoke/LambdaMetafactory",4f27
"fun (a: Any, b: Any, c: Any, d: Any, e: Any, f: Any, g: Any, h: Any, i: Any, j: Any, k: Any, l: Any, m: Any, n: Any, o: Any,
         p: Any, q: Any, r: Any, s: Any, t: Any, u: Any, v: Any)","= """,// 1,d611
fun (),= +,,f1dc
fun (vararg x: Int),= x,,dd9c
No signature found,fun Any.() {},// 4,6e1f
No signature found,"fun Any.(a: Any, b: Any, c: Any, d: Any, e: Any, f: Any, g: Any, h: Any, i: Any, j: Any, k: Any, l: Any, m: Any, n: Any, o: Any,
             p: Any, q: Any, r: Any, s: Any, t: Any, u: Any) = """,// 5,6e1f
fun (),= +,,f1dc
No signature found,fun Any.(vararg x: Int) = x,,6e1f
fun local1(),{},// 8,0f58
"fun local2(a: Any, b: Any, c: Any, d: Any, e: Any, f: Any, g: Any, h: Any, i: Any, j: Any, k: Any, l: Any, m: Any, n: Any, o: Any,
         p: Any, q: Any, r: Any, s: Any, t: Any, u: Any, v: Any)","= """,,47cf
fun local3(),= +,,2080
fun checkSession(firSession: LLFirResolveSession),"protected open val outputExtension: String get() = """,,fd56
No signature found,"fun doLazyResolveTest(
        ktFile: KtFile,
        testServices: TestServices,
        renderAllFiles: Boolean,
        resolverProvider: (LLFirResolveSession) -> Pair<FirElementWithResolveState, ((FirResolvePhase) -> Unit)>,
    ) {
        val resultBuilder = StringBuilder()
        val renderer = lazyResolveRenderer(resultBuilder)

        resolveWithClearCaches(ktFile) { firResolveSession ->
            checkSession(firResolveSession)
            val allKtFiles = testServices.ktTestModuleStructure.allMainKtFiles

            testServices.expressionMarkerProvider.getElementsOfTypeAtCarets<KtDeclaration>(
                files = allKtFiles,
                caretTag = ""preresolved""
            ).forEach { (declaration, _) ->
                declaration.resolveToFirSymbol(firResolveSession, FirResolvePhase.BODY_RESOLVE)
            }",,6e1f
fun f(a: UInt),": Int {
    var n = 0
    for (i in a until M) {
        n++
    }","// WITH_STDLIB

// IMPORTANT!
// Please, when your changes cause failures in bytecodeText tests for 'for' loops,
// examine the resulting bytecode shape carefully.
// Range and progression-based loops generated with Kotlin compiler should be
// as close as possible to Java counter loops ('for (int i = a; i < b; ++i) { ... }').
// Otherwise it may result in performance regression due to missing HotSpot optimizations.
// Run Kotlin compiler benchmarks (https://github.com/Kotlin/kotlin-benchmarks)
// with compiler built from your changes if you are not sure.",5f7b
fun foo(),: B = t,// FILE: A.java,519f
No signature found,fun <!VIRTUAL_MEMBER_HIDDEN!>bar<!>(): B = t,,6e1f
fun test(),"{
        foo()
        bar()
    }",,fe98
fun compareTo(other : A),= (,// FIR_IDENTICAL,b7fd
fun test(k: KClass<out MyString>),"{
    k::class.java
}",,2694
fun init2(),"{

        }","// FIR_IDENTICAL
// JAVAC_EXPECTED_FILE
// KT-588 Unresolved static method",1293
fun run(),"{
        init2()      // unresolved
        Test.init2() // ok
    }",,354f
fun callOrdinaryAndContextualDeclaration(),"{
    ordinary()
    with(42) {
        f()
        val a = A()
        a.p
        a.m()
        p
    }",,d97d
fun test(z: Long),": String {
    val result = """" + z + z + z + z + z + z + z + z + z + z + z + z + z + z + z + z + z + z + z + z +
            z + z + z + z + z + z + z + z + z + z + z + z + z + z + z + z + z + z + z + z +
            z + z + z + z + z + z + z + z + z + z + z + z + z + z + z + z + z + z + z + z +
            z + z + z + z + z + z + z + z + z + z + z + z + z + z + z + z + z + z + z + z +
            z + z + z + z + z + z + z + z + z + z + z + z + z + z + z + z + z + z + z + z +
            z + z + z + z + z + z + z + z + z + z + z + z + z + z + z + z + z + z + z + z +
            z + z + z + z + z + z + z + z + z + z + z + z + z + z + z + z + z + z + z + z +
            z + z + z + z + z + z + z + z + z + z + z + z + z + z + z + z + z + z + z + z +
            z + z + z + z + z + z + z + z + z + z + z + z + z + z + z + z + z + z + z + z +
            z + z + z + z + z + z + z + z + z + z + z + z + z + z + z + z + z + z + z   //199 z

    return result
}",// STRING_CONCAT: indy,1ccd
fun box(),": String {
    val result = test(0L)

    if (result.length != 199)
        return ""fail 1: ${result.length}",,4f27
"fun <R, D> acceptChildren(visitor: FirVisitor<R, D>, data: D)","{
        for (part in qualifier) {
            part.typeArgumentList.typeArguments.forEach { it.accept(visitor, data) }",,b2f8
"fun <D> transformChildren(transformer: FirTransformer<D>, data: D)",": FirUserTypeRefImpl {
        for (part in qualifier) {
            (part.typeArgumentList.typeArguments as MutableList<FirTypeProjection>).transformInplace(transformer, data)
        }",,963c
fun replaceAnnotations(newAnnotations: List<FirAnnotation>),"{
        annotations = newAnnotations.toMutableOrEmpty()
    }",,8a3d
"fun <D> transformAnnotations(transformer: FirTransformer<D>, data: D)",": FirUserTypeRef {
        annotations.transformInplace(transformer, data)
        return this
    }",,31d1
fun test(),= r,"// WITH_STDLIB
// WORKS_WHEN_VALUE_CLASS
// LANGUAGE: +ValueClasses",fe98
fun ok(),"= """,,23f4
fun box(),= R,,4f27
No signature found,fun dispatch(maxDepth: Int = 4,"// WITH_STDLIB
// WORKS_WHEN_VALUE_CLASS
// LANGUAGE: +ValueClasses, +GenericInlineClassParameter

// TARGET_BACKEND: JVM_IR
// JVM_TARGET: 1.8",6e1f
No signature found,fun Int.extension(maxDepth: Int = 4,,6e1f
fun dispatch(maxDepth: Int),= U,,4f4f
fun childrenDispatch(recursively: Boolean),": Unit =
        i",,6712
No signature found,fun Int.extension(maxDepth: Int) = U,,6e1f
No signature found,"fun Int.childrenExtension(recursively: Boolean): Unit =
        i",,6e1f
fun box(),": String {
    RealPath(1, 2)
    return ""OK""
}",,4f27
fun f(),": String
}

open class B {
    open : CharSequence = ""charSequence""
}",// FIR_IDENTICAL,f6fb
fun f(),": Int

    val g: Int
}

@JsModule(""B"")
external open class B {
    fun foo(): Int

    class Nested
}","// FIR_IDENTICAL
// MODULE: m1
// FILE: a.kt",f6fb
fun bar(),": Unit

// MODULE: m2(m1)
// FILE: b.kt
// TODO: it's hard to test @JsNonModule on file from an external module
@file:JsModule(""foo"")
package foo

external fun baz(): Unit

// FILE: c.kt
package bar

import foo.*

fun box() {
    A.<!CALL_TO_JS_MODULE_WITHOUT_MODULE_SYSTEM!>f<!>()+A.<!CALL_TO_JS_MODULE_WITHOUT_MODULE_SYSTEM!>g<!>
    <!CALL_TO_JS_MODULE_WITHOUT_MODULE_SYSTEM!>B<!>()
    <!CALL_TO_JS_MODULE_WITHOUT_MODULE_SYSTEM!>bar<!>()
    <!CALL_TO_JS_MODULE_WITHOUT_MODULE_SYSTEM!>baz<!>()

    println(::<!CALL_TO_JS_MODULE_WITHOUT_MODULE_SYSTEM!>bar<!>.name)
    println(::<!CALL_TO_JS_MODULE_WITHOUT_MODULE_SYSTEM!>baz<!>.name)
    println(<!CALL_TO_JS_MODULE_WITHOUT_MODULE_SYSTEM!>A<!>::<!CALL_TO_JS_MODULE_WITHOUT_MODULE_SYSTEM!>f<!>.name)

    B.<!CALL_TO_JS_MODULE_WITHOUT_MODULE_SYSTEM!>Nested<!>()

    boo<<!CALL_TO_JS_MODULE_WITHOUT_MODULE_SYSTEM!>B?<!>>(null)
    <!CALL_TO_JS_MODULE_WITHOUT_MODULE_SYSTEM!>boo<!>(null as B?)
    boo<<!CALL_TO_JS_MODULE_WITHOUT_MODULE_SYSTEM!>B.Nested?<!>>(null)

    println(<!CALL_TO_JS_MODULE_WITHOUT_MODULE_SYSTEM!>B::class<!>)
    println(<!CALL_TO_JS_MODULE_WITHOUT_MODULE_SYSTEM!>B.Nested::class<!>)

    val x: Any = 1
    println(x is B)
}",,66c3
fun <reified T> boo(x: T),"{
    println(""${T::class.simpleName}",,0db3
fun member(),: Int = 1,,235e
fun box(),"fun o(x: String?): String?
expect fun k(x: String?): String?

 = o","// IGNORE_BACKEND: JVM, JVM_IR
// LANGUAGE: +MultiPlatformProjects

// MODULE: common
// FILE: common.kt",4f27
fun o(x: String),"= """,,9750
No signature found,"fun o(x: String?): String? = """,,6e1f
No signature found,"fun k(x: String?): String? = """,,6e1f
fun k(x: String),"= """,,8594
fun peek(),= T,,4fed
fun box(),": String {
    val x = when (val type = peek()) {
        Test.A -> ""OK""
        else -> ""other""
    }",,4f27
fun testHttpServiceWithInvalidUrl(gradleVersion: GradleVersion),"{
        project(""incrementalMultiproject"", gradleVersion) {
            enableStatisticReports(BuildReportType.HTTP, ""invalid/url"")
            build(""assemble"") {
                assertOutputContainsExactTimes(""Unable to open connection to"")
            }",,fb88
No signature found,"fun report(message: () -> String, severity: ReportSeverity) {
        reporters.forEach { it.report(message, severity) }",,6e1f
"fun reportCompileIteration(incremental: Boolean, sourceFiles: Collection<File>, exitCode: ExitCode)","{
        reporters.forEach { it.reportCompileIteration(incremental, sourceFiles, exitCode) }",,779b
"fun reportMarkDirtyClass(affectedFiles: Iterable<File>, classFqName: String)","{
        reporters.forEach { it.reportMarkDirtyClass(affectedFiles, classFqName) }",,b23b
"fun reportMarkDirtyMember(affectedFiles: Iterable<File>, scope: String, name: String)","{
        reporters.forEach { it.reportMarkDirtyMember(affectedFiles, scope, name) }",,e272
"fun reportMarkDirty(affectedFiles: Iterable<File>, reason: String)","{
        reporters.forEach { it.reportMarkDirty(affectedFiles, reason) }",,ae58
fun flush(),"{
        reporters.forEach { it.flush() }",,3748
fun use1(),"{
    C.D.E.F()
}","// !OPT_IN: kotlin.RequiresOptIn
// FILE: api.kt",b28d
No signature found,fun use2(f: C.D.E.F) = f,,6e1f
fun use1(),"{
    C.D.E.F()
}",,b28d
No signature found,fun use2(f: C.D.E.F) = f,,6e1f
fun use1(),"{
    <!OPT_IN_USAGE!>C<!>.<!OPT_IN_USAGE!>D<!>.<!OPT_IN_USAGE!>E<!>.<!OPT_IN_USAGE!>F<!>()
}",,b28d
No signature found,fun use2(f: <!OPT_IN_USAGE!>C<!>.<!OPT_IN_USAGE!>D<!>.<!OPT_IN_USAGE!>E<!>.<!OPT_IN_USAGE!>F<!>) = <,,6e1f
fun x(),"{
    val y = <expr>@Suppress("""")</expr> """"
}",// LOOK_UP_FOR_ELEMENT_OF_TYPE: org.jetbrains.kotlin.psi.KtAnnotationEntry,7869
fun lower(irFile: IrFile),= i,,a3a5
No signature found,fun IrExpression.transformVoid() = t,,6e1f
"fun lowerInstanceOf(argument: IrExpression, type: IrType)",= w,,5340
"fun lowerCast(argument: IrExpression, type: IrType)",": IrExpression =
        w",,5dff
"fun isCompatibleArrayType(actualType: IrType, expectedType: IrType)",": Boolean {
        var actual = actualType
        var expected = expectedType
        while ((actual.isArray() || actual.isNullableArray()) && (expected.isArray() || expected.isNullableArray())) {
            actual = actual.getArrayElementLowerType()
            expected = expected.getArrayElementLowerType()
        }",,5aa5
No signature found,"fun IrType.getArrayElementLowerType(): IrType =
        i",,6e1f
No signature found,"fun IrExpression.isDefinitelyNotNull(): Boolean =
        w",,6e1f
No signature found,"fun IrValueDeclaration.isDefinitelyNotNullVal(): Boolean {
        val irVariable = this as? IrVariable ?: return false
        return !irVariable.isVar && irVariable.initializer?.isDefinitelyNotNull() == true
    }",,6e1f
No signature found,"fun JvmIrBuilder.jvmMethodHandle(handle: Handle) =
        i",,6e1f
No signature found,"fun JvmIrBuilder.jvmInvokeDynamic(
        dynamicCall: IrCall,
        bootstrapMethodHandle: Handle,
        bootstrapMethodArguments: List<IrExpression>
    ) =
        i",,6e1f
No signature found,"fun JvmIrBuilder.jvmOriginalMethodType(methodSymbol: IrFunctionSymbol) =
        i",,6e1f
fun visitCall(expression: IrCall),": IrExpression {
        return when (expression.symbol) {
            jvmIndyLambdaMetafactoryIntrinsic -> {
                expression.transformChildrenVoid()
                rewriteIndyLambdaMetafactoryCall(expression)
            }",,4974
fun enterClass(),": ClassContext {
        return ClassContext().also {
            classContextStack.push(it)
        }",,32e9
fun leaveClass(),"{
        classContextStack.pop()
    }",,8ed0
fun getClassContext(),": ClassContext {
        if (classContextStack.isEmpty()) {
            throw AssertionError(""No class context"")
        }",,ce71
fun visitClass(declaration: IrClass),": IrStatement {
        val context = enterClass()
        val result = super.visitClass(declaration)
        if (context.serializableMethodRefInfos.isNotEmpty()) {
            generateDeserializeLambdaMethod(declaration, context.serializableMethodRefInfos)
        }",,b303
"fun generateDeserializeLambdaMethod(
        irClass: IrClass,
        serializableMethodRefInfos: List<SerializableMethodRefInfo>
    )","{
        //  fun `$deserializeLambda$`(lambda: java.lang.invoke.SerializedLambda): Object {
        //      val tmp = lambda.getImplMethodName()
        //      when {
        //          ...
        //          tmp == NAME_i -> {
        //              when {
        //                  ...
        //                  lambda.getImplMethodKind() == [LAMBDA_i_k].implMethodKind &&
        //                  lambda.getFunctionalInterfaceClass() == [LAMBDA_i_k].functionalInterfaceClass &&
        //                  lambda.getFunctionalInterfaceMethodName() == [LAMBDA_i_k].functionalInterfaceMethodName &&
        //                  lambda.getFunctionalInterfaceMethodSignature() == [LAMBDA_i_k].functionalInterfaceMethodSignature &&
        //                  lambda.getImplClass() == [LAMBDA_i_k].implClass &&
        //                  lambda.getImplMethodSignature() = [LAMBDA_i_k].implMethodSignature ->
        //                      `<jvm-indy>`([LAMBDA_i_k])
        //                  ...
        //              }",,3067
fun mapDeserializedLambda(info: SerializableMethodRefInfo),"=
        D","//          }
        //          ...
        //      }
        //      throw IllegalArgumentException(""Invalid lambda deserialization"")
        //  }",c86d
fun irGetLambdaProperty(getter: IrSimpleFunction),"fun JvmIrBuilder.generateSerializedLambdaEquals(
        lambdaParameter: IrValueParameter,
        deserializedLambdaInfo: DeserializedLambdaInfo
    ): IrExpression {
        val functionalInterfaceClass = deserializedLambdaInfo.functionalInterfaceClass
        val implMethodHandle = deserializedLambdaInfo.implMethodHandle
        val samMethod = deserializedLambdaInfo.functionalInterfaceMethod

         =
            irCall(getter).apply { dispatchReceiver = irGet(lambdaParameter) }",,03f1
No signature found,"fun JvmIrBuilder.irObjectEquals(receiver: IrExpression, arg: IrExpression) =
        i",,6e1f
No signature found,"fun JvmIrBuilder.irAndAnd(vararg args: IrExpression): IrExpression {
        if (args.isEmpty()) throw AssertionError(""At least one argument expected"")
        var result = args[0]
        for (i in 1 until args.size) {
            result = irCall(backendContext.irBuiltIns.andandSymbol).apply {
                putValueArgument(0, result)
                putValueArgument(1, args[i])
            }",,6e1f
No signature found,"fun JvmIrBuilder.generateCreateDeserializedMethodRef(
        lambdaParameter: IrValueParameter,
        info: SerializableMethodRefInfo
    ): IrExpression {
        val dynamicCall = irCall(info.dynamicCallSymbol)
        for ((index, dynamicValueParameter) in info.dynamicCallSymbol.owner.valueParameters.withIndex()) {
            val capturedArg = irCall(backendContext.ir.symbols.serializedLambda.getCapturedArg).also { call ->
                call.dispatchReceiver = irGet(lambdaParameter)
                call.putValueArgument(0, irInt(index))
            }",,6e1f
fun rewriteIndyLambdaMetafactoryCall(call: IrCall),": IrCall {
        fun fail(message: String): Nothing =
            throw AssertionError(""$message, call:\n${call.dump()}",,dac5
No signature found,"fun JvmIrBuilder.createLambdaMetafactoryCall(
        samMethodSymbol: IrSimpleFunctionSymbol,
        implFunSymbol: IrFunctionSymbol,
        instanceMethodSymbol: IrFunctionSymbol,
        shouldBeSerializable: Boolean,
        requiredBridges: Collection<IrSimpleFunction>,
        dynamicCall: IrCall
    ): IrCall {
        val samMethodType = jvmOriginalMethodType(samMethodSymbol)
        val implFunRawRef = irRawFunctionReference(context.irBuiltIns.anyType, implFunSymbol)
        val instanceMethodType = jvmOriginalMethodType(instanceMethodSymbol)

        var bootstrapMethod = jdkMetafactoryHandle
        val bootstrapMethodArguments = arrayListOf<IrExpression>(
            samMethodType,
            implFunRawRef,
            instanceMethodType
        )
        var bridgeMethodTypes = emptyList<IrExpression>()

        var flags = 0

        if (shouldBeSerializable) {
            flags += LambdaMetafactory.FLAG_SERIALIZABLE
        }",,6e1f
"fun getOverriddenMethodsRequiringBridges(
        instanceMethod: IrSimpleFunction,
        samMethod: IrSimpleFunction,
        extraOverriddenMethods: List<IrSimpleFunction>
    )",": Collection<IrSimpleFunction> {
        val jvmInstanceMethod = backendContext.defaultMethodSignatureMapper.mapAsmMethod(instanceMethod)
        val jvmSamMethod = backendContext.defaultMethodSignatureMapper.mapAsmMethod(samMethod)

        val signatureToNonFakeOverride = LinkedHashMap<Method, IrSimpleFunction>()
        for (overridden in extraOverriddenMethods) {
            val jvmOverriddenMethod = backendContext.defaultMethodSignatureMapper.mapAsmMethod(overridden)
            if (jvmOverriddenMethod != jvmInstanceMethod && jvmOverriddenMethod != jvmSamMethod) {
                signatureToNonFakeOverride[jvmOverriddenMethod] = overridden
            }",,5ec6
"fun wrapClosureInDynamicCall(
        erasedSamType: IrSimpleType,
        samMethod: IrSimpleFunction,
        targetRef: IrFunctionReference
    )",": IrCall {
        fun fail(message: String): Nothing =
            throw AssertionError(""$message, targetRef:\n${targetRef.dump()}",,1457
fun visitTypeOperator(expression: IrTypeOperatorCall),: IrExpression = w,,d80c
No signature found,"fun IrBuilderWithScope.computeNotNullAssertionText(typeOperatorCall: IrTypeOperatorCall): String? {
        if (backendContext.config.noSourceCodeInNotNullAssertionExceptions) {
            return when (val argument = typeOperatorCall.argument) {
                is IrCall -> ""${argument.symbol.owner.name.asString()}",,6e1f
No signature found,fun String.trimForRuntimeAssertion() = S,,6e1f
No signature found,"fun IrFunction.isDelegated() =
        o",,6e1f
No signature found,"fun CharSequence.validSourcePosition(startOffset: Int, endOffset: Int): Boolean =
        s",,6e1f
fun visitElement(element: IrElement),"fun IrElement.extents(): Pair<Int, Int> {
        var startOffset = Int.MAX_VALUE
        var endOffset = 0
        acceptVoid(object : IrElementVisitorVoid {
            override  {
                element.acceptChildrenVoid(this)
                if (element.startOffset in 0 until startOffset)
                    startOffset = element.startOffset
                if (endOffset < element.endOffset)
                    endOffset = element.endOffset
            }",,d1d3
fun sourceViewFor(declaration: IrDeclaration),": CharSequence? =
        d",,3a27
fun foo(),{},// MEMBER_CLASS_FILTER: org.jetbrains.kotlin.fir.symbols.impl.FirConstructorSymbol,519f
No signature found,"fun IdeaKotlinSerializationContext.IdeaKotlinProjectArtifactDependencyProto(
    dependency: IdeaKotlinProjectArtifactDependency
): IdeaKotlinProjectArtifactDependencyProto {
    return ideaKotlinProjectArtifactDependencyProto {
        this.extras = IdeaExtrasProto(dependency.extras)
        this.type = dependency.type.toProto()
        this.coordinates = IdeaKotlinProjectCoordinatesProto(dependency.coordinates)
    }",,6e1f
No signature found,"fun IdeaKotlinSerializationContext.IdeaKotlinProjectArtifactDependency(
    proto: IdeaKotlinProjectArtifactDependencyProto
): IdeaKotlinProjectArtifactDependency {
    return IdeaKotlinProjectArtifactDependency(
        extras = Extras(proto.extras).toMutableExtras(),
        type = IdeaKotlinSourceDependencyType(proto.type),
        coordinates = IdeaKotlinProjectCoordinates(proto.coordinates),
    )
}",,6e1f
fun f(),= A,"// TARGET_BACKEND: NATIVE
// FILECHECK_STAGE: CStubs",f6fb
fun g(),"{
    val x = C.x
}",,4958
fun box(),": String {
    val f = f()
    if (f != 12)
        return ""FAIL: $f != 12""
    g()
    return ""OK""
}","// CHECK: {{^}}epilogue:


// CHECK-LABEL: define %struct.ObjHeader* @""kfun:#box(){}kotlin.String""",4f27
fun test1(),": Boolean {
    test1@ for(i in 1..2) {
        continue@test1
        return false
    }",,fa3b
fun test2(),": Boolean {
    test2@ while (true) {
        break@test2
    }",,30bb
fun box(),": String {
    if (!test1()) return ""fail test1""
    if (!test2()) return ""fail test2""
    return ""OK""
}",,4f27
fun foo(),"fun interface F1 {
    
}","// LANGUAGE: +MultiPlatformProjects
// ISSUE: KT-58845

// MODULE: common
// FILE: common.kt",519f
fun foo(),"fun interface F3 {
    
}",,519f
No signature found,"fun interface F4 {
    <!NO_ACTUAL_FOR_EXPECT{JVM}",,6e1f
fun foo(),"<!>
}<!>

expect <!FUN_INTERFACE_WRONG_COUNT_OF_ABSTRACT_MEMBERS!>fun<!> interface F5

// MODULE: jvm()()(common)
// FILE: main.kt
interface I {
    fun bar()
}",,519f
fun foo(),"fun bar()
}

actual fun interface F2 {
    fun bar()
}",,519f
fun foo(),"}

actual <!FUN_INTERFACE_WRONG_COUNT_OF_ABSTRACT_MEMBERS!>fun<!> interface <!NO_ACTUAL_CLASS_MEMBER_FOR_EXPECTED_CLASS!>F4<!> {}",,519f
fun main(),"{
    """".run {
        <!UNUSED_EXPRESSION!>""""<!>
    }",,d987
No signature found,fun <T> T.run(f: (T) -> Unit): Unit = f,,6e1f
fun test(),"{
    // @NotNull platform type
    val platformNN = J.staticNN
    // @Nullable platform type
    val platformN = J.staticN
    // platform type with no annotation
    val platformJ = J.staticJ

    checkSubtype<J>(platformNN)
    checkSubtype<J>(<!ARGUMENT_TYPE_MISMATCH!>platformN<!>)
    checkSubtype<J>(platformJ)

    checkSubtype<J?>(platformNN)
    checkSubtype<J?>(platformN)
    checkSubtype<J?>(platformJ)
}","// !CHECK_TYPE

// FILE: J.java",fe98
"fun callDynType2(list: List<F2>, param: AN)","{
    val fct = list.first()
    val ret = fct(param, null)
    assertEquals(param, ret)
}",,fc75
"fun callStaticType2(fct: F2, param: AN)","{
    val ret = fct(param, null)
    assertEquals(param, ret)
}",,1c8b
"fun callDynType32(list: List<F32>, param: AN)","{
    val fct = list.first()
    val ret = fct(param
            , null, null, null, null, null, null, null
            , null, null, null, null, null, null, null, null
            , null, null, null, null, null, null, null, null
            , null, null, null, null, null, null, null, null
    )
    assertEquals(param, ret)
}",,9811
"fun callStaticType32(fct: F32, param: AN)","{
    val ret = fct(param
            , null, null, null, null, null, null, null
            , null, null, null, null, null, null, null, null
            , null, null, null, null, null, null, null, null
            , null, null, null, null, null, null, null, null
    )
    assertEquals(param, ret)
}",,8ea2
"fun callDynType33(list: List<F33>, param: AN)","{
    val fct = list.first()
    val ret = fct(param
            , null, null, null, null, null, null, null
            , null, null, null, null, null, null, null, null
            , null, null, null, null, null, null, null, null
            , null, null, null, null, null, null, null, null, null
    )
    assertEquals(param, ret)
}",,de1b
"fun callStaticType33(fct: F33, param: AN)","{
    val ret = fct(param
            , null, null, null, null, null, null, null
            , null, null, null, null, null, null, null, null
            , null, null, null, null, null, null, null, null
            , null, null, null, null, null, null, null, null, null
    )
    assertEquals(param, ret)
}",,d7ab
fun getDynTypeLambda2(),: F2Holder = F,,5531
fun getStaticLambda2(),: F2 = {,,b35d
"fun f2(p1: AN, p2: AN)",: AN = p,,e7da
fun getDynTypeRef2(),: F2Holder = F,,1b14
fun getStaticRef2(),: F2 = :,,6515
"fun f32(
        p1: AN, p2: AN, p3: AN, p4: AN, p5: AN, p6: AN, p7: AN, p8: AN,
        p9: AN, p10: AN, p11: AN, p12: AN, p13: AN, p14: AN, p15: AN, p16: AN,
        p17: AN, p18: AN, p19: AN, p20: AN, p21: AN, p22: AN, p23: AN, p24: AN,
        p25: AN, p26: AN, p27: AN, p28: AN, p29: AN, p30: AN, p31: AN, p32: AN
)",: AN = p,,2b5e
"fun f33(
        p1: AN, p2: AN, p3: AN, p4: AN, p5: AN, p6: AN, p7: AN, p8: AN,
        p9: AN, p10: AN, p11: AN, p12: AN, p13: AN, p14: AN, p15: AN, p16: AN,
        p17: AN, p18: AN, p19: AN, p20: AN, p21: AN, p22: AN, p23: AN, p24: AN,
        p25: AN, p26: AN, p27: AN, p28: AN, p29: AN, p30: AN, p31: AN, p32: AN,
        p33: AN
)",: AN = p,,18f9
fun getDynType32(),: F32Holder = F,,e249
fun getStaticType32(),: F32 = :,,8fd4
fun getDynTypeRef33(),: F33Holder = F,,544a
fun getStaticTypeRef33(),: F33 = :,,f1eb
fun getDynTypeLambda33(),: F33Holder = F,,6d96
fun getStaticTypeLambda33(),: F33 = {,,cb7f
fun x(),": <expr> Map<String, List<Int>> </expr> = 1",,7869
fun box(),": String {
    val a = A
    val b = A.B()
    return ""OK""
}",,4f27
fun foo(x: MyAnnoClass),"{
    bar(x)
}","// FIR_IDENTICAL
// FILE: MyAnnotation.java",97d2
fun bar(y: MyAnnotation),"{
    y.hashCode()
}",,4f91
fun get(index: Int),: Int = s,"// IGNORE_BACKEND: WASM
// WASM_MUTE_REASON: STDLIB_COLLECTION_INHERITANCE
// KJS_WITH_FULL_RUNTIME
// DONT_TARGET_EXACT_BACKEND: NATIVE",60cf
fun box(),": String {
    val a = IntArrayList()
    a.add(1)
    a[0]++
    return if (a[0] == 2) ""OK"" else ""fail""
}",,4f27
No signature found,fun <R> bar(f: () -> R): R = T,"// FIR_IDENTICAL
// SKIP_TXT
// !DIAGNOSTICS: -UNUSED_PARAMETER
// !CHECK_TYPE",6e1f
No signature found,fun Any.foo() = 1,,6e1f
No signature found,"fun A.foo() = """,,6e1f
fun main(),"{
        bar(::foo) checkType { _<String>() }",,d987
No signature found,"fun getValue(thisRef: Any?, property: KProperty<*>): IrStatementOriginImpl = t",,6e1f
fun toString(),: String = d,,a535
No signature found,"fun provideDelegate(thisRef: Any?, property: KProperty<*>): ReadOnlyProperty<Any?, IrStatementOriginImpl> =
            I",,6e1f
fun withIndex(index: Int),"=
                i",,4df2
No signature found,"fun IrStatementOrigin.isAssignmentOperatorWithResult() =
    w",,6e1f
No signature found,"fun IrStatementOrigin.isAssignmentOperator(): Boolean =
    w",,6e1f
No signature found,"fun MutableContextInfo.toDataFlowInfo(languageVersionSettings: LanguageVersionSettings, builtIns: KotlinBuiltIns): DataFlowInfo {
    var resultingDataFlowInfo = DataFlowInfoFactory.EMPTY

    extractDataFlowStatements(equalValues, builtIns) { leftDfv, rightValue ->
        val rightDfv = rightValue.toDataFlowValue(builtIns)
        if (rightDfv != null) {
            resultingDataFlowInfo = resultingDataFlowInfo.equate(leftDfv, rightDfv, false, languageVersionSettings)
        }",,6e1f
No signature found,"fun <D> extractDataFlowStatements(
    dictionary: Map<ESValue, Set<D>>,
    builtIns: KotlinBuiltIns,
    callback: (DataFlowValue, D) -> Unit
) {
    for ((key, setOfValues) in dictionary) {
        val leftDfv = key.toDataFlowValue(builtIns) ?: continue
        setOfValues.forEach { callback(leftDfv, it) }",,6e1f
No signature found,fun ESValue.toDataFlowValue(builtIns: KotlinBuiltIns): DataFlowValue? = w,,6e1f
No signature found,"fun <T> withZipFileSystem(zipFile: File, action: (FileSystem) -> T): T
}

object ZipFileSystemInPlaceAccessor : ZipFileSystemAccessor {
    override fun <T> withZipFileSystem(zipFile: File, action: (FileSystem) -> T): T {
        return zipFile.withZipFileSystem(action)
    }",,6e1f
No signature found,"fun removeEldestEntry(eldest: Map.Entry<File, FileSystem>?): Boolean {
            if (size > cacheLimit) {
                eldest?.value?.close()
                return true
            }",,6e1f
No signature found,"fun <T> withZipFileSystem(zipFile: File, action: (FileSystem) -> T): T {
        val fileSystem = openedFileSystems.getOrPut(zipFile) { zipFile.zipFileSystem() }",,6e1f
fun reset(),"{
        var lastException: Exception? = null
        for (fileSystem in openedFileSystems.values) {
            try {
                fileSystem.close()
            }",,64bc
"fun check(expression: FirResolvedQualifier, context: CheckerContext, reporter: DiagnosticReporter)","{
        if (context.languageVersionSettings.supportsFeature(LanguageFeature.PrioritizedEnumEntries)) return
        if (expression.symbol?.name != StandardNames.ENUM_ENTRIES) return
        if (expression.nonFatalDiagnostics.none { it is ConeResolutionResultOverridesOtherToPreserveCompatibility }",,6870
fun box(),": String {
    val list1 = ArrayList<Int>()
    val range1 = 9 downTo 3
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }","// Auto-generated by org.jetbrains.kotlin.generators.tests.GenerateRangesCodegenTestData. DO NOT EDIT!
// WITH_STDLIB",4f27
"fun resolve(request: Type, context: ValueResolveContext)",": ValueDescriptor? {
        fun ComponentDescriptor.isDefaultComponent(): Boolean =
            this is DefaultInstanceComponentDescriptor || this is DefaultSingletonTypeComponentDescriptor

        if (state == ComponentStorageState.Initial)
            throw ContainerConsistencyException(""Container was not composed before resolving"")

        val entry = registry.tryGetEntry(request)
        if (entry.isNotEmpty()) {
            registerDependency(request, context)

            if (entry.size == 1) return entry.single()

            val nonDefault = entry.filterNot { it.isDefaultComponent() }",,99bd
"fun registerDependency(request: Type, context: ValueResolveContext)","{
        if (context is ComponentResolveContext) {
            val descriptor = context.requestingDescriptor
            if (descriptor is ComponentDescriptor) {
                dependencies.putValue(descriptor, request)
            }",,5ab7
fun dump(printer: PrintStream),: Unit = w,,fe6a
"fun resolveMultiple(request: Type, context: ValueResolveContext)",": Iterable<ValueDescriptor> {
        registerDependency(request, context)
        return registry.tryGetEntry(request)
    }",,7a10
No signature found,"fun registerClashResolvers(resolvers: List<PlatformExtensionsClashResolver<*>>) {
        clashResolvers.addAll(resolvers)
    }",,6e1f
"fun registerDescriptors(context: ComponentResolveContext, items: List<ComponentDescriptor>)","{
        if (state == ComponentStorageState.Disposed) {
            throw ContainerConsistencyException(""Cannot register descriptors in $state state"")
        }",,939e
fun compose(context: ComponentResolveContext),"{
        if (state != ComponentStorageState.Initial)
            throw ContainerConsistencyException(""$containerId $myId was already composed."")

        state = ComponentStorageState.Initialized
        composeDescriptors(context, descriptors)
    }",,f83d
"fun composeDescriptors(context: ComponentResolveContext, descriptors: Collection<ComponentDescriptor>)","{
        if (descriptors.isEmpty()) return

        registry.addAll(descriptors)

        val implicits = inspectDependenciesAndRegisterAdhoc(context, descriptors)

        registry.resolveClashesIfAny(context.container, clashResolvers)
        injectProperties(context, descriptors + implicits)
    }",,4232
"fun injectProperties(context: ComponentResolveContext, components: Collection<ComponentDescriptor>)","{
        for (component in components) {
            if (component.shouldInjectProperties) {
                injectProperties(component.getValue(), context.container.createResolveContext(component))
            }",,a099
"fun inspectDependenciesAndRegisterAdhoc(
        context: ComponentResolveContext,
        descriptors: Collection<ComponentDescriptor>
    )",": LinkedHashSet<ComponentDescriptor> {
        val adhoc = LinkedHashSet<ComponentDescriptor>()
        val visitedTypes = HashSet<Type>()
        for (descriptor in descriptors) {
            collectAdhocComponents(context, descriptor, visitedTypes, adhoc)
        }",,3f2b
"fun collectAdhocComponents(
        context: ComponentResolveContext, descriptor: ComponentDescriptor,
        visitedTypes: HashSet<Type>, adhocDescriptors: LinkedHashSet<ComponentDescriptor>
    )","{
        val dependencies = descriptor.getDependencies(context)
        for (type in dependencies) {
            if (!visitedTypes.add(type))
                continue

            val entry = registry.tryGetEntry(type)
            if (entry.isEmpty()) {
                val rawType: Class<*>? = when (type) {
                    is Class<*> -> type
                    is ParameterizedType -> type.rawType as? Class<*>
                    else -> null
                }",,a54b
No signature found,"fun getImplicitlyDefinedDependency(context: ComponentResolveContext, rawType: Class<*>): ComponentDescriptor? {
        if (!Modifier.isAbstract(rawType.modifiers) && !rawType.isPrimitive) {
            return ImplicitSingletonTypeComponentDescriptor(context.container, rawType)
        }",,6e1f
"fun injectProperties(instance: Any, context: ValueResolveContext)","{
        val classInfo = instance::class.java.getInfo()

        classInfo.setterInfos.forEach { (method) ->
            val methodBinding = method.bindToMethod(containerId, context)
            methodBinding.invoke(instance)
        }",,a7c0
fun dispose(),"{
        if (state != ComponentStorageState.Initialized) {
            if (state == ComponentStorageState.Initial)
                return // it is valid to dispose container which was not initialized
            throw ContainerConsistencyException(""Component container cannot be disposed in the $state state."")
        }",,94b2
fun getDescriptorsInDisposeOrder(),": List<ComponentDescriptor> {
        return topologicalSort(descriptors) {
            val dependent = ArrayList<ComponentDescriptor>()
            for (interfaceType in dependencies[it]) {
                for (dependency in registry.tryGetEntry(interfaceType)) {
                    dependent.add(dependency)
                }",,17c7
fun disposeDescriptor(descriptor: ComponentDescriptor),"{
        if (descriptor is Closeable)
            descriptor.close()
    }",,5d92
fun foo(),"{
    val e = E.<!SYNTAX!><!>
}",,519f
"fun visitAnnotation(desc: String, visible: Boolean)","fun generateClass(generator: ClassGenerator, declaration: IrClass?): ClassGenerator
}

/**
 * Similarly to ASM's [ClassWriter], provides methods that are used to generate parts of the class.
 * [newField] and [newMethod] accept an IR element, which the compiler plugin can use to implement its custom logic.
 */
interface ClassGenerator {
    fun defineClass(version: Int, access: Int, name: String, signature: String?, superName: String, interfaces: Array<out String>)

    fun newField(
        declaration: IrField?, access: Int, name: String, desc: String, signature: String?, value: Any?
    ): FieldVisitor

    fun newMethod(
        declaration: IrFunction?, access: Int, name: String, desc: String, signature: String?, exceptions: Array<out String>?
    ): MethodVisitor

    fun newRecordComponent(name: String, desc: String, signature: String?): RecordComponentVisitor

    : AnnotationVisitor

    fun visitInnerClass(name: String, outerName: String?, innerName: String?, access: Int)

    fun visitEnclosingMethod(owner: String, name: String?, desc: String?)

    fun visitSource(name: String, debug: String?)

    fun done(generateSmapCopyToAnnotation: Boolean)
}",,56d4
fun directlyFromZip(zipFileSystem: FileSystem),": TargetedKotlinLibraryLayout =
        F",,45bd
fun directlyFromZip(zipFileSystem: FileSystem),": BitcodeKotlinLibraryLayout =
        F",,45bd
fun main(),"{
    val x = <expr>1</expr>
}",,d987
fun setUp(),"{
        super.setUp()
        fs = FastJarFileSystem.createIfUnmappingPossible()
        coreAppEnv = JavaCoreApplicationEnvironment(rootDisposable)
    }",,3705
fun tearDown(),"{
        coreAppEnv = null
        rootDisposable.dispose()
        fs?.clearHandlersCache()
        fs = null
        super.tearDown()
    }",,95c6
fun testZip64FormatIsSupported(),"{
        val fs = fs ?: return
        val tmpDir = KotlinTestUtils.tmpDirForTest(this)
        val jarFile = File(tmpDir, ""tmp.jar"")
        val out = ZipOutputStream(FileOutputStream(jarFile))

        // Should be more than 65535
        val entriesNumber = 70000
        for (i in 0..entriesNumber) {
            out.putNextEntry(ZipEntry(""$i.txt""))
            out.writer().apply {
                append(i.toString())
                flush()
            }",,1d35
fun testInvalidJar(),"{
        val fs = fs ?: return
        val tmpDir = KotlinTestUtils.tmpDirForTest(this)
        val badJarFile = File(tmpDir, ""file.pom"")
        badJarFile.writeText(A_POM_FILE)

        val errFromFastJarFs = captureErr {
            fs.findFileByPath(badJarFile.absolutePath + ""!/a.class"")
        }",,89ef
No signature found,"fun captureErr(body: () -> Unit): String {
    val outStream = ByteArrayOutputStream()
    val prevErr = System.err
    System.setErr(PrintStream(outStream))
    try {
        body()
    }",,6e1f
fun getStubVersion(),: Int = v,,b654
No signature found,"fun buildMetadataFileStub(fileWithMetadata: FileWithMetadata.Compatible, fileContent: FileContent): PsiFileStub<*> {
        val packageProto = fileWithMetadata.proto.`package`
        val packageFqName = fileWithMetadata.packageFqName
        val nameResolver = fileWithMetadata.nameResolver
        val protocol = serializerProtocol()
        val components = ClsStubBuilderComponents(
            ProtoBasedClassDataFinder(fileWithMetadata.proto, nameResolver, fileWithMetadata.version),
            AnnotationLoaderForStubBuilderImpl(protocol),
            fileContent.file,
            protocol
        )
        val context = components.createContext(nameResolver, packageFqName, TypeTable(packageProto.typeTable))

        val fileStub = createFileStub(packageFqName, isScript = false)
        createPackageDeclarationsStubs(
            fileStub, context,
            ProtoContainer.Package(packageFqName, context.nameResolver, context.typeTable, source = null),
            packageProto
        )
        for (classProto in fileWithMetadata.classesToDecompile) {
            createClassStub(
                fileStub, classProto, nameResolver, nameResolver.getClassId(classProto.fqName), source = null, context = context
            )
        }",,6e1f
fun testClassA(),": Int {
    val a = ClassA()
    a.someVar = 0
    return a.someVar!! + a.someFunction() + a.someValue
}",,4c53
fun testClassB(),": Int {
    val b = ClassB()
    b.someVar = b.x
    return b.someVar!! + b.someFunction()
}",,67c8
fun test(),": Int {
    val b = testClassB()
    val a = testClassA()
    return b + a
}",,fe98
No signature found,"fun <R> myrun(block: () -> R): R {
    contract {
        callsInPlace(block, InvocationKind.EXACTLY_ONCE)
    }","// NO_CHECK_LAMBDA_INLINING
// !OPT_IN: kotlin.contracts.ExperimentalContracts
// JVM_ABI_K1_K2_DIFF: KT-62464

// FILE: 1.kt",6e1f
fun box(),": String {
    val x: Int
    val res = myrun {
        x = 42
        {
            x
        }",,4f27
fun a(),= 1,"// FIR_IDENTICAL
// !DIAGNOSTICS: -UNUSED_PARAMETER",9ea5
fun b(),= 2,,4df1
No signature found,fun <T> foo(x: T.() -> Unit) {},,6e1f
No signature found,fun <E> bar(x: E.() -> Unit) {},,6e1f
fun test(),"{
    foo<A> {
        a()
        bar<B> {
            <!DSL_SCOPE_VIOLATION!>a<!>()
            this@foo.a()
            b()
        }",,fe98
No signature found,"fun String.nativeIndexOf(ch: Char, fromIndex: Int): Int = (",,6e1f
No signature found,"fun String.nativeIndexOf(str: String, fromIndex: Int): Int = (",,6e1f
No signature found,"fun String.nativeLastIndexOf(ch: Char, fromIndex: Int): Int = (",,6e1f
No signature found,"fun String.nativeLastIndexOf(str: String, fromIndex: Int): Int = (",,6e1f
No signature found,"fun String?.equals(other: String?, ignoreCase: Boolean = f",,6e1f
No signature found,"fun String.replace(oldChar: Char, newChar: Char, ignoreCase: Boolean = f",,6e1f
No signature found,"fun String.replace(oldValue: String, newValue: String, ignoreCase: Boolean = f",,6e1f
No signature found,"fun String.replaceFirst(oldChar: Char, newChar: Char, ignoreCase: Boolean = f",,6e1f
No signature found,"fun String.replaceFirst(oldValue: String, newValue: String, ignoreCase: Boolean = f",,6e1f
No signature found,fun String.toUpperCase(): String = (,,6e1f
No signature found,fun String.uppercase(): String = (,,6e1f
No signature found,fun String.toLowerCase(): String = (,,6e1f
No signature found,fun String.lowercase(): String = (,,6e1f
No signature found,"fun CharArray.concatToString(): String {
    return String(this)
}",,6e1f
No signature found,fun CharArray.concatToString(startIndex: Int = 0,"/**
 * Concatenates characters in this [CharArray] or its subrange into a String.
 *
 * @param startIndex the beginning (inclusive) of the subrange of characters, 0 by default.
 * @param endIndex the end (exclusive) of the subrange of characters, size of this array by default.
 *
 * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the size of this array.
 * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].
 */",6e1f
No signature found,fun String.toCharArray(startIndex: Int = 0,,6e1f
No signature found,"fun ByteArray.decodeToString(): String {
    return String(this)
}",,6e1f
No signature found,"fun ByteArray.decodeToString(
    startIndex: Int = 0","/**
 * Decodes a string from the bytes in UTF-8 encoding in this array or its subrange.
 *
 * @param startIndex the beginning (inclusive) of the subrange to decode, 0 by default.
 * @param endIndex the end (exclusive) of the subrange to decode, size of this array by default.
 * @param throwOnInvalidSequence specifies whether to throw an exception on malformed byte sequence or replace it by the replacement char `\uFFFD`.
 *
 * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the size of this array.
 * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].
 * @throws CharacterCodingException if the byte array contains malformed UTF-8 byte sequence and [throwOnInvalidSequence] is true.
 */",6e1f
No signature found,"fun String.encodeToByteArray(): ByteArray {
    return this.toByteArray(Charsets.UTF_8)
}",,6e1f
No signature found,"fun String.encodeToByteArray(
    startIndex: Int = 0","/**
 * Encodes this string or its substring to an array of bytes in UTF-8 encoding.
 *
 * @param startIndex the beginning (inclusive) of the substring to encode, 0 by default.
 * @param endIndex the end (exclusive) of the substring to encode, length of this string by default.
 * @param throwOnInvalidSequence specifies whether to throw an exception on malformed char sequence or replace.
 *
 * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the length of this string.
 * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].
 * @throws CharacterCodingException if this string contains malformed char sequence and [throwOnInvalidSequence] is true.
 */",6e1f
No signature found,fun String.toCharArray(): CharArray = (,,6e1f
No signature found,"fun String.toCharArray(
    destination: CharArray,
    destinationOffset: Int = 0",,6e1f
No signature found,fun String.format(vararg args: Any?): String = j,,6e1f
No signature found,"fun String.Companion.format(format: String, vararg args: Any?): String = j",,6e1f
No signature found,"fun String.format(locale: Locale?, vararg args: Any?): String = j",,6e1f
No signature found,"fun String.Companion.format(locale: Locale?, format: String, vararg args: Any?): String =
    j",,6e1f
No signature found,"fun CharSequence.split(regex: Pattern, limit: Int = 0",,6e1f
No signature found,fun String.substring(startIndex: Int): String = (,,6e1f
No signature found,"fun String.substring(startIndex: Int, endIndex: Int): String = (",,6e1f
No signature found,"fun String.startsWith(prefix: String, ignoreCase: Boolean = f",,6e1f
No signature found,"fun String.startsWith(prefix: String, startIndex: Int, ignoreCase: Boolean = f",,6e1f
No signature found,"fun String.endsWith(suffix: String, ignoreCase: Boolean = f",,6e1f
"fun String(bytes: ByteArray, offset: Int, length: Int, charset: Charset)",": String =
    j",,8f16
"fun String(bytes: ByteArray, charset: Charset)",: String = j,,35ef
"fun String(bytes: ByteArray, offset: Int, length: Int)",": String =
    j",,9d20
fun String(bytes: ByteArray),": String =
    j",,a922
fun String(chars: CharArray),": String =
    j",,5937
"fun String(chars: CharArray, offset: Int, length: Int)",": String =
    j",,4bde
"fun String(codePoints: IntArray, offset: Int, length: Int)",": String =
    j",,9075
No signature found,"fun String(stringBuffer: java.lang.StringBuffer): String =
    j",,6e1f
No signature found,"fun String(stringBuilder: java.lang.StringBuilder): String =
    j",,6e1f
No signature found,fun String.codePointAt(index: Int): Int = (,,6e1f
No signature found,fun String.codePointBefore(index: Int): Int = (,,6e1f
No signature found,"fun String.codePointCount(beginIndex: Int, endIndex: Int): Int =
    (",,6e1f
No signature found,"fun String.compareTo(other: String, ignoreCase: Boolean = f",,6e1f
No signature found,fun String.contentEquals(charSequence: CharSequence): Boolean = (,,6e1f
No signature found,fun String.contentEquals(stringBuilder: StringBuffer): Boolean = (,,6e1f
No signature found,"fun CharSequence?.contentEquals(other: CharSequence?): Boolean {
    return if (this is String && other != null)
        contentEquals(other)
    else
        contentEqualsImpl(other)
}",,6e1f
No signature found,"fun CharSequence?.contentEquals(other: CharSequence?, ignoreCase: Boolean): Boolean {
    return if (ignoreCase)
        contentEqualsIgnoreCaseImpl(other)
    else
        contentEquals(other)
}","/**
 * Returns `true` if the contents of this char sequence are equal to the contents of the specified [other], optionally ignoring case difference.
 *
 * If this [CharSequence] is a [String], [other] is not `null` and [ignoreCase] is `false`
 * then this function behaves the same as [String.contentEquals].
 *
 * @param ignoreCase `true` to ignore character case when comparing contents.
 *
 * @sample samples.text.Strings.contentEquals
 */",6e1f
No signature found,fun String.intern(): String = (,"/**
 * Returns a canonical representation for this string object.
 */",6e1f
No signature found,"fun String.offsetByCodePoints(index: Int, codePointOffset: Int): Int =
    (",,6e1f
No signature found,"fun CharSequence.regionMatches(thisOffset: Int, other: CharSequence, otherOffset: Int, length: Int, ignoreCase: Boolean = f",,6e1f
No signature found,"fun String.regionMatches(thisOffset: Int, other: String, otherOffset: Int, length: Int, ignoreCase: Boolean = f",,6e1f
No signature found,fun String.toLowerCase(locale: java.util.Locale): String = l,,6e1f
No signature found,fun String.lowercase(locale: Locale): String = (,,6e1f
No signature found,fun String.toUpperCase(locale: java.util.Locale): String = u,,6e1f
No signature found,fun String.uppercase(locale: Locale): String = (,,6e1f
No signature found,fun String.toByteArray(charset: Charset = C,,6e1f
No signature found,fun String.toPattern(flags: Int = 0,,6e1f
No signature found,"fun String.capitalize(): String {
    @Suppress(""DEPRECATION"")
    return capitalize(Locale.getDefault())
}",,6e1f
No signature found,"fun String.capitalize(locale: Locale): String {
    if (isNotEmpty()) {
        val firstChar = this[0]
        if (firstChar.isLowerCase()) {
            return buildString {
                val titleChar = firstChar.titlecaseChar()
                if (titleChar != firstChar.uppercaseChar()) {
                    append(titleChar)
                }","/**
 * Returns a copy of this string having its first letter titlecased using the rules of the specified [locale],
 * or the original string if it's empty or already starts with a title case letter.
 *
 * The title case of a character is usually the same as its upper case with several exceptions.
 * The particular list of characters with the special title case form depends on the underlying platform.
 */",6e1f
No signature found,"fun String.decapitalize(): String {
    @Suppress(""DEPRECATION"")
    return if (isNotEmpty() && !this[0].isLowerCase()) substring(0, 1).toLowerCase() + substring(1) else this
}",,6e1f
No signature found,"fun String.decapitalize(locale: Locale): String {
    return if (isNotEmpty() && !this[0].isLowerCase()) substring(0, 1).lowercase(locale) + substring(1) else this
}","/**
 * Returns a copy of this string having its first letter lowercased using the rules of the specified [locale],
 * or the original string, if it's empty or already starts with a lower case letter.
 */",6e1f
No signature found,"fun CharSequence.repeat(n: Int): String {
    require(n >= 0) { ""Count 'n' must be non-negative, but was $n."" }","/**
 * Returns a string containing this char sequence repeated [n] times.
 * @throws [IllegalArgumentException] when n < 0.
 * @sample samples.text.Strings.repeat
 */",6e1f
fun b(),"{
            O_O
        }",// !LANGUAGE: +NestedClassesInEnumEntryShouldBeInner,4df1
fun c(),"{
            this.B()

            C.A()
            A()
            //TODO: should be resolved with error
            this.<!UNRESOLVED_REFERENCE!>A<!>()
        }",,baea
fun f(),"{
    C.E1.<!UNRESOLVED_REFERENCE!>A<!>
    C.E1.<!UNRESOLVED_REFERENCE!>A<!>()
    C.E2.B()

    C.E2.<!UNRESOLVED_REFERENCE!>O<!>
    C.E3.<!UNRESOLVED_REFERENCE!>O<!>.InO

    C.O
    C.O.InO
    C.A()
    C.<!INNER_CLASS_CONSTRUCTOR_NO_RECEIVER!>B<!>()

    C.E3.<!UNRESOLVED_REFERENCE!>O_O<!>
    C.E3.<!UNRESOLVED_REFERENCE!>G<!>()
}",,f6fb
fun box(),": String {
    val a : Any = A.X
    assertEquals(0, (a as Comparable<A>).compareTo(A.X))
    assertTrue((a as Comparable<A>).compareTo(A.Y) < 0)

    return ""OK""
}",// EXPECTED_REACHABLE_NODES: 1295,4f27
No signature found,"fun <E : PsiElement> findPsiElement(irElement: IrElement, irFile: IrFile, psiElementClass: KClass<E>): E? {
        val psiFileEntry = irFile.fileEntry as? PsiIrFileEntry ?: return null
        return psiFileEntry.findPsiElement(irElement, psiElementClass)
    }",,6e1f
"fun findPsiElement(irElement: IrElement, irFile: IrFile)",": PsiElement? {
        val psiFileEntry = irFile.fileEntry as? PsiIrFileEntry ?: return null
        return psiFileEntry.findPsiElement(irElement)
    }",,0a72
No signature found,"fun <E : PsiElement> findPsiElement(irElement: IrElement, irDeclaration: IrDeclaration, psiElementClass: KClass<E>): E? {
        val irFile = irDeclaration.fileOrNull ?: return null
        return findPsiElement(irElement, irFile, psiElementClass)
    }",,6e1f
"fun findPsiElement(irElement: IrElement, irDeclaration: IrDeclaration)",": PsiElement? {
        val irFile = irDeclaration.fileOrNull ?: return null
        return findPsiElement(irElement, irFile)
    }",,ca0e
No signature found,"fun <E : PsiElement> findPsiElement(irDeclaration: IrDeclaration, psiElementClass: KClass<E>): E? =
        f",,6e1f
fun findPsiElement(irDeclaration: IrDeclaration),": PsiElement? =
        f",,2b75
"fun check(declaration: KtDeclaration, descriptor: DeclarationDescriptor, context: DeclarationCheckerContext)","{
        if (
            declaration !is KtClass || !declaration.isAnnotation() ||
            descriptor !is ClassDescriptor || descriptor.kind != ClassKind.ANNOTATION_CLASS
        ) return

        val primaryConstructor = declaration.primaryConstructor ?: return
        val primaryConstructorDescriptor = descriptor.unsubstitutedPrimaryConstructor ?: return

        val checker = Checker(descriptor)

        for ((parameter, parameterDescriptor) in primaryConstructor.valueParameters.zip(primaryConstructorDescriptor.valueParameters)) {
            if (checker.parameterHasCycle(descriptor, parameterDescriptor)) {
                context.trace.report(CYCLE_IN_ANNOTATION_PARAMETER.on(context.languageVersionSettings, parameter))
            }",,5073
fun annotationHasCycle(annotationDescriptor: ClassDescriptor),": Boolean {
            val constructorDescriptor = annotationDescriptor.unsubstitutedPrimaryConstructor ?: return false

            for (parameterDescriptor in constructorDescriptor.valueParameters) {
                if (parameterHasCycle(annotationDescriptor, parameterDescriptor)) {
                    return true
                }",,3595
"fun parameterHasCycle(ownedAnnotation: ClassDescriptor, parameterDescriptor: ValueParameterDescriptor)",": Boolean {
            val returnType = parameterDescriptor.returnType?.unwrap() ?: return false
            return when {
                parameterDescriptor.isVararg || returnType.isArrayOrNullableArray() -> false
                returnType.arguments.isNotEmpty() && !ReflectionTypes.isKClassType(returnType) -> {
                    for (argument in returnType.arguments) {
                        if (!argument.isStarProjection) {
                            if (typeHasCycle(ownedAnnotation, argument.type.unwrap())) return true
                        }",,7420
"fun typeHasCycle(ownedAnnotation: ClassDescriptor, type: UnwrappedType)",": Boolean {
            val referencedAnnotationDescriptor = (type.constructor.declarationDescriptor as? ClassDescriptor)
                ?.takeIf { it.kind == ClassKind.ANNOTATION_CLASS }",,984f
No signature found,"fun toCallable(fd: FunctionDescriptor, isSuper: Boolean, resolvedCall: ResolvedCall<*>, codegen: ExpressionCodegen): Callable {
        val typeArguments = resolvedCall.typeArguments
        assert(typeArguments.size == 1) { ""Expected only one type parameter for Any?.isArrayOf(), got: $typeArguments"" }",,6e1f
"fun render(report: SummaryBenchmarksReport, onlyChanges: Boolean)",": String {
        val results = report.detailedMetricReports.values.map { it.mergedReport }",,e488
No signature found,"fun getValue(thisRef: Foo, property: KProperty<*>): Int {
        return thisRef.a
    }","// WITH_STDLIB
// WORKS_WHEN_VALUE_CLASS
// LANGUAGE: +ValueClasses",6e1f
fun box(),": String {
    val x = Foo()
    if (x.b != 42) throw AssertionError()

    return ""OK""
}",,4f27
fun directoryToKt(dir: Any),= p,,4b36
No signature found,fun List<String>.excludeFlags(predicate: (String) -> Boolean) = f,,6e1f
No signature found,fun List<String>.excludeFlags(vararg keys: String) = k,,6e1f
No signature found,"fun List<String>.excludeArguments(vararg args: String): List<String> {
        val argsToExclude = args.toSet()
        val xPrefixesToExclude = argsToExclude.filter { it.startsWith(""-X"") }",,6e1f
fun firstStageExtraOpts(),= e,,49e9
fun secondStageExtraOpts(),= e,,5928
fun buildFirstStageArgs(klibPath: String),= m,,2299
fun buildSecondStageArgs(klibPath: String),= m,,2ea1
fun buildCommonArgs(),= m,,b55a
fun buildSingleStageArgs(),= m,,884f
fun srcDir(dir: Any),"{
        srcFiles_.add(directoryToKt(dir))
    }",,380c
fun srcFiles(vararg files: Any),"{
        srcFiles_.add(project.files(files))
    }",,f44f
fun srcFiles(files: Collection<Any>),= s,,fe90
fun nativeLibrary(lib: Any),= n,,dfeb
fun nativeLibraries(vararg libs: Any),"{
        nativeLibraries.add(project.files(*libs))
    }",,e4dd
fun nativeLibraries(libs: FileCollection),"{
        nativeLibraries.add(libs)
    }",,f478
fun enableMultiplatform(flag: Boolean),"{
        enableMultiplatform = flag
    }",// DSL. Multiplatform projects.,ba73
fun commonSourceSet(sourceSetName: String),"{
        commonSourceSets = listOf(sourceSetName)
        enableMultiplatform(true)
    }",,b02e
fun commonSourceSets(vararg sourceSetNames: String),"{
        commonSourceSets = sourceSetNames.toList()
        enableMultiplatform(true)
    }",,23f2
fun commonSrcDir(dir: Any),"{
        commonSrcFiles_.add(directoryToKt(dir))
    }",,c585
fun commonSrcFiles(vararg files: Any),"{
        commonSrcFiles_.add(project.files(files))
    }",,361b
fun commonSrcFiles(files: Collection<Any>),= c,,85c9
fun linkerOpts(values: List<String>),= l,,8ea2
fun linkerOpts(vararg values: String),"{
        linkerOpts.addAll(values)
    }",,4beb
fun enableDebug(flag: Boolean),"{
        enableDebug = flag
    }",,7943
fun noStdLib(flag: Boolean),"{
        noStdLib = flag
    }",,9d1e
fun noMain(flag: Boolean),"{
        noMain = flag
    }",,c52c
fun noPack(flag: Boolean),"{
        noPack = flag
    }",,a193
fun enableOptimizations(flag: Boolean),"{
        enableOptimizations = flag
    }",,07a3
fun enableAssertions(flag: Boolean),"{
        enableAssertions = flag
    }",,95db
fun entryPoint(entryPoint: String),"{
        this.entryPoint = entryPoint
    }",,e882
fun measureTime(flag: Boolean),"{
        measureTime = flag
    }",,78e3
fun run(),"{
        destinationDir.mkdirs()
        if (dumpParameters) {
            dumpProperties(this)
        }",// endregion,354f
fun asArguments(),= p,,cb22
fun buildCommonArgs(),= s,,b55a
fun inc(),: ST = S,"// Changed in K2, see KT-57178",6b8c
fun main(),"{
    var local = I()
    val x: ST = ++local
    val y: ST = <!TYPE_MISMATCH!>local<!>
}",,d987
"fun transform(
        module: TestModule,
        inputArtifact: ClassicBackendInput
    )",": BinaryArtifacts.Jvm {
        val configuration = testServices.compilerConfigurationProvider.getCompilerConfiguration(module)
        val (psiFiles, analysisResult, project, _) = inputArtifact
        // TODO: add configuring classBuilderFactory
        val generationState = GenerationState.Builder(
            project,
            ClassBuilderFactories.TEST,
            analysisResult.moduleDescriptor,
            analysisResult.bindingContext,
            configuration
        ).build()

        KotlinCodegenFacade.compileCorrectFiles(psiFiles, generationState, DefaultCodegenFactory)
        javaCompilerFacade.compileJavaFiles(module, configuration, generationState.factory)
        return BinaryArtifacts.Jvm(
            generationState.factory,
            psiFiles.map { SourceFileInfo(KtPsiSourceFile(it), JvmFileClassUtil.getFileClassInfoNoResolve(it)) }",,5b22
fun noParams(),: Unit = s,"// !DIAGNOSTICS: -UNUSED_PARAMETER
// !CHECK_TYPE
// SKIP_TXT",94fd
fun yieldString(value: String),= s,,41a0
No signature found,fun builder(c: suspend Controller.() -> Unit) {},,6e1f
fun test(),"{
    builder {
        noParams() checkType { _<Unit>() }",,fe98
fun requiresEscaping(name: String),"=
            !",,b256
"fun wrap(
        moduleId: String, function: JsFunction, importedModules: List<JsImportedModule>,
        program: JsProgram, kind: ModuleKind
    )",": List<JsStatement> {
        return when (kind) {
            ModuleKind.AMD -> wrapAmd(function, importedModules, program)
            ModuleKind.COMMON_JS -> wrapCommonJs(function, importedModules, program)
            ModuleKind.UMD -> wrapUmd(moduleId, function, importedModules, program)
            ModuleKind.PLAIN -> wrapPlain(moduleId, function, importedModules, program)
            ModuleKind.ES -> wrapEsModule(function)
        }",,fd0b
"fun wrapUmd(
        moduleId: String, function: JsExpression,
        importedModules: List<JsImportedModule>, program: JsProgram
    )",": List<JsStatement> {
        val scope = program.scope
        val defineName = scope.declareName(""define"")
        val exportsName = scope.declareName(""exports"")

        val adapterBody = JsBlock()
        val adapter = JsFunction(program.scope, adapterBody, ""Adapter"")
        val rootName = adapter.scope.declareName(""root"")
        val factoryName = adapter.scope.declareName(""factory"")
        adapter.parameters += JsParameter(rootName)
        adapter.parameters += JsParameter(factoryName)

        val amdTest = JsAstUtils.and(JsAstUtils.typeOfIs(defineName.makeRef(), JsStringLiteral(""function"")),
                                     JsNameRef(""amd"", defineName.makeRef()))
        val commonJsTest = JsAstUtils.typeOfIs(exportsName.makeRef(), JsStringLiteral(""object""))

        val amdBody = JsBlock(wrapAmd(factoryName.makeRef(), importedModules, program))
        val commonJsBody = JsBlock(wrapCommonJs(factoryName.makeRef(), importedModules, program))
        val plainInvocation = makePlainInvocation(moduleId, factoryName.makeRef(), importedModules, program)

        val lhs: JsExpression = if (Namer.requiresEscaping(moduleId)) {
            JsArrayAccess(rootName.makeRef(), JsStringLiteral(moduleId))
        }",,5698
"fun wrapAmd(
        function: JsExpression,
        importedModules: List<JsImportedModule>, program: JsProgram
    )",": List<JsStatement> {
        val scope = program.scope
        val defineName = scope.declareName(""define"")
        val invocationArgs = listOf(
            JsArrayLiteral(listOf(JsStringLiteral(""exports"")) + importedModules.map { JsStringLiteral(it.getRequireName()) }",,832e
"fun wrapCommonJs(
        function: JsExpression,
        importedModules: List<JsImportedModule>,
        program: JsProgram
    )",": List<JsStatement> {
        val scope = program.scope
        val moduleName = scope.declareName(""module"")
        val requireName = scope.declareName(""require"")

        val invocationArgs = importedModules.map { JsInvocation(requireName.makeRef(), JsStringLiteral(it.getRequireName())) }",,80ee
fun wrapEsModule(function: JsFunction),": List<JsStatement> {
        val (alreadyPresentedImportStatements, restStatements) = function.body.statements
            .flatMap { if (it is JsCompositeBlock) it.statements else listOf(it) }",,2fa4
"fun wrapPlain(
        moduleId: String, function: JsExpression,
        importedModules: List<JsImportedModule>, program: JsProgram
    )",": List<JsStatement> {
        val invocation = makePlainInvocation(moduleId, function, importedModules, program)
        val statements = mutableListOf<JsStatement>()

        for (importedModule in importedModules) {
            statements += addModuleValidation(moduleId, program, importedModule)
        }",,8b7e
"fun addModuleValidation(
        currentModuleId: String,
        program: JsProgram,
        module: JsImportedModule
    )",": JsStatement {
        val moduleRef = makePlainModuleRef(module, program)
        val moduleExistsCond = JsAstUtils.typeOfIs(moduleRef, JsStringLiteral(""undefined""))
        val moduleNotFoundMessage = JsStringLiteral(
            ""Error loading module '"" + currentModuleId + ""'. Its dependency '"" + module.externalName + ""' was not found. "" +
                    ""Please, check whether '"" + module.externalName + ""' is loaded prior to '"" + currentModuleId + ""'."")
        val moduleNotFoundThrow = JsThrow(JsNew(JsNameRef(""Error""), listOf<JsExpression>(moduleNotFoundMessage)))
        return JsIf(moduleExistsCond, JsBlock(moduleNotFoundThrow))
    }",,6a76
"fun makePlainInvocation(
        moduleId: String,
        function: JsExpression,
        importedModules: List<JsImportedModule>,
        program: JsProgram
    )",": JsInvocation {
        val invocationArgs = importedModules.map { makePlainModuleRef(it, program) }",,7476
"fun makePlainModuleRef(module: JsImportedModule, program: JsProgram)",": JsExpression {
        return module.plainReference ?: makePlainModuleRef(module.externalName, program)
    }",,0027
"fun makePlainModuleRef(moduleId: String, program: JsProgram)",": JsExpression {
        // TODO: we could use `this.moduleName` syntax. However, this does not work for `kotlin` module in Rhino, since
        // we run kotlin.js in a parent scope. Consider better solution
        return if (Namer.requiresEscaping(moduleId)) {
            JsArrayAccess(JsThisRef(), JsStringLiteral(moduleId))
        }",,5b14
"fun remove(x: K, y: V)",= t,"// !DIAGNOSTICS: -UNUSED_PARAMETER -PARAMETER_NAME_CHANGED_ON_OVERRIDE
// FULL_JDK",fd8b
"fun remove(x: String, y: Int)",= t,,f392
No signature found,"fun foo(x: MutableMap<String, Int>, y: java.util.HashMap<String, Int>, z: java.util.AbstractMap<String, Int>) {
    x.remove("""", 1)
    x.remove("""", <!ARGUMENT_TYPE_MISMATCH!>""""<!>)
    x.remove("""", <!NULL_FOR_NONNULL_TYPE!>null<!>)

    y.remove("""", 1)
    y.remove("""", <!ARGUMENT_TYPE_MISMATCH!>""""<!>)
    y.remove("""", <!NULL_FOR_NONNULL_TYPE!>null<!>)

    z.remove("""", 1)
    z.remove("""", <!ARGUMENT_TYPE_MISMATCH!>""""<!>)
    z.remove("""", null)
}",,6e1f
fun importClass(aClass: PsiClass),": Boolean {
        return true
    }",,96f6
fun foo(),: IntArray = i,,519f
fun bar(),= 4,,66c3
fun testVariable(),"{
    var x = foo()
    x[0] += 1
}",,5c08
fun testCall(),"{
    foo()[bar()] *= 2
}",,b823
fun testMember(c: C),"{
    c.x[0]++
}",,3971
fun MultiplatformAnalysisConfiguration(testServices: TestServices),": MultiplatformAnalysisConfiguration {
    return if (testServices.moduleStructure.allDirectives.contains(ENABLE_MULTIPLATFORM_COMPOSITE_ANALYSIS_MODE)) {
        MultiplatformCompositeAnalysisConfiguration(
            testServices.dependencyProvider,
            testServices.sourceFileProvider,
            testServices.moduleDescriptorProvider,
        )
    }",,132d
fun getCompilerEnvironment(module: TestModule),": TargetEnvironment
    fun getKtFilesForForSourceFiles(project: Project, module: TestModule): Map<TestFile, KtFile>
    fun getDependencyDescriptors(module: TestModule): List<ModuleDescriptor>
    fun getFriendDescriptors(module: TestModule): List<ModuleDescriptor>
    fun getDependsOnDescriptors(module: TestModule): List<ModuleDescriptor>
}

/**
 * Traditional 'compiler cli' configuration in which every platform gets analyzed 'separate'
 * by including dependsOn source files directly into the module descriptor.
 *
 * This mode works similar to how actual user projects would compile platforms like 'jvm', 'native' or js targets.
 */
internal class MultiplatformSeparateAnalysisConfiguration(
    private val dependencyProvider: DependencyProvider,
    private val sourceFileProvider: SourceFileProvider,
    private val moduleDescriptorProvider: ModuleDescriptorProvider
) : MultiplatformAnalysisConfiguration {

    override : TargetEnvironment {
        return CompilerEnvironment
    }",,b609
fun getDependencyDescriptors(module: TestModule),": List<ModuleDescriptor> {
        return getDescriptors(
            module.allDependencies - module.dependsOnDependencies.toSet(),
            dependencyProvider, moduleDescriptorProvider
        )
    }",,a050
fun getDependsOnDescriptors(module: TestModule),": List<ModuleDescriptor> {
        return emptyList()
    }",,ad20
fun getFriendDescriptors(module: TestModule),": List<ModuleDescriptor> {
        return getDescriptors(
            module.friendDependencies, dependencyProvider, moduleDescriptorProvider
        )
    }",,2d52
"fun getKtFilesForForSourceFiles(project: Project, module: TestModule)",": Map<TestFile, KtFile> {
        val ktFilesMap = sourceFileProvider.getKtFilesForSourceFiles(module.files, project).toMutableMap()
        fun addDependsOnSources(dependencies: List<DependencyDescription>) {
            if (dependencies.isEmpty()) return
            for (dependency in dependencies) {
                val dependencyModule = dependencyProvider.getTestModule(dependency.moduleName)
                val artifact = if (module.frontendKind == FrontendKinds.ClassicAndFIR) {
                    dependencyProvider.getArtifact(dependencyModule, FrontendKinds.ClassicAndFIR).k1Artifact
                }",,8b1c
fun getCompilerEnvironment(module: TestModule),": TargetEnvironment {
        return CompositeAnalysisTargetEnvironment
    }",,b609
"fun getKtFilesForForSourceFiles(project: Project, module: TestModule)",": Map<TestFile, KtFile> {
        return sourceFileProvider.getKtFilesForSourceFiles(module.files, project)
    }",,8b1c
fun getDependencyDescriptors(module: TestModule),": List<ModuleDescriptor> {
        // Transitive dependsOn descriptors should also be returned as dependencies
        val allDependsOnDependencies = module.dependsOnDependencies.closure(preserveOrder = true) { dependsOnDependency ->
            dependencyProvider.getTestModule(dependsOnDependency.moduleName).dependsOnDependencies
        }",,a050
fun getDependsOnDescriptors(module: TestModule),": List<ModuleDescriptor> {
        return getDescriptors(module.dependsOnDependencies, dependencyProvider, moduleDescriptorProvider)
    }",,ad20
fun getFriendDescriptors(module: TestModule),": List<ModuleDescriptor> {
        return getDescriptors(module.friendDependencies, dependencyProvider, moduleDescriptorProvider)
    }",,2d52
fun configure(container: StorageComponentContainer),"{
        CompilerEnvironment.configure(container)
        container.useInstance(CompositeAnalysisModuleStructureOracle)
    }",,9e97
fun hasImplementingModules(module: ModuleDescriptor),": Boolean {
        return findAllReversedDependsOnPaths(module).isNotEmpty()
    }",,5431
fun findAllReversedDependsOnPaths(module: ModuleDescriptor),": List<ModulePath> {
        /*
        This feature is not supported yet, since during testing of 'common modules',
        the 'less common modules' are not available as descriptors.
         */
        return emptyList()
    }",,837e
fun findAllDependsOnPaths(module: ModuleDescriptor),": List<ModulePath> {
        return module.expectedByModules.flatMap { expectedByModule ->
            val head = listOf(module, expectedByModule)
            if (expectedByModule.expectedByModules.isEmpty()) listOf(ModulePath(head))
            else findAllDependsOnPaths(expectedByModule).map { path ->
                ModulePath(head + path.nodes)
            }",,17e8
"fun getDescriptors(
    dependencies: Iterable<DependencyDescription>,
    dependencyProvider: DependencyProvider,
    moduleDescriptorProvider: ModuleDescriptorProvider
)",": List<ModuleDescriptor> {
    return dependencies.filter { it.kind == DependencyKind.Source }",,d492
fun suspendThere(v: A),: A = s,"// WITH_STDLIB
// WITH_COROUTINES",0981
fun plusAssign(other: A),"{
        value = suspendThere(A(value + other.value)).value
    }",,8b0e
No signature found,"fun builder(c: suspend () -> Unit) {
    c.startCoroutine(EmptyContinuation)
}",,6e1f
fun usePlusAssign(),": A {
    var a = A(""O"")
    a += A(""K"")
    return a
}",,36b7
fun box(),": String {
    var a = A("""")
    builder { a = usePlusAssign() }",,4f27
fun box(),": String {
    val list1 = ArrayList<Int>()
    val range1 = (3..5).reversed()
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }","// Auto-generated by org.jetbrains.kotlin.generators.tests.GenerateRangesCodegenTestData. DO NOT EDIT!
// WITH_STDLIB",4f27
fun box(),": String {
    return ""OK""
}","// TARGET_BACKEND: JVM
// IGNORE_LIGHT_ANALYSIS
// FILE: Bar.java",4f27
fun x(),"{
    val a = <caret>ArrayList(listOf(1))
}","// WITH_STDLIB
// DO_NOT_CHECK_SYMBOL_RESTORE_K1",7869
fun test(),"{
        // error, because `it` is not
        // final, so no smart type narrowing
        // is provided
        <!OVERLOAD_RESOLUTION_AMBIGUITY!>println<!>(it <!UNRESOLVED_REFERENCE!>+<!> 1)
    }",,fe98
fun jumpIfFalse(target: Label),"{
            val leftValue = left.accept(codegen, data).coerceToBoolean()
            markLineNumber(left)
            leftValue.jumpIfFalse(target)
            val rightValue = right.accept(codegen, data).coerceToBoolean()
            markLineNumber(right)
            rightValue.jumpIfFalse(target)
        }",,ce89
fun jumpIfTrue(target: Label),"{
            val stayLabel = Label()
            val leftValue = left.accept(codegen, data).coerceToBoolean()
            markLineNumber(left)
            leftValue.jumpIfFalse(stayLabel)
            val rightValue = right.accept(codegen, data).coerceToBoolean()
            markLineNumber(right)
            rightValue.jumpIfTrue(target)
            mv.visitLabel(stayLabel)
        }",,b79d
fun discard(),"{
            val end = Label()
            val leftValue = left.accept(codegen, data).coerceToBoolean()
            markLineNumber(left)
            leftValue.jumpIfFalse(end)
            val rightValue = right.accept(codegen, data)
            markLineNumber(right)
            rightValue.discard()
            mv.visitLabel(end)
        }",,64d0
"fun invoke(expression: IrFunctionAccessExpression, codegen: ExpressionCodegen, data: BlockInfo)",": PromisedValue {
        val (left, right) = expression.receiverAndArgs()
        return BooleanConjunction(left, right, codegen, data)
    }",,18cf
fun remove(i: Int),": Boolean
}

var result = ""","// TARGET_BACKEND: JVM
// FULL_JDK",7967
fun remove(i: Int),": Boolean {
        result = ""OK""
        return true
    }",,7967
fun box(),": String {
    D().remove(0)
    return result
}",,4f27
fun bar(),= 2,"// FIR_IDENTICAL
// !DIAGNOSTICS: -ERROR_SUPPRESSION
// FILE: A.kt",66c3
fun foo(),= 2,,519f
fun notNullable(),: String = C,,6111
fun foo(e: E),"{
    val result = when(e) {
        E.A -> { 1 }",,89d2
fun getSpilledToVariable(),= s,"// TARGET_BACKEND: JVM
// WITH_STDLIB
// WITH_COROUTINES",762a
No signature found,"fun Array<String>.toMap(): Map<String, String> {
    val res = hashMapOf<String, String>()
    for (i in 0..(size - 1) step 2) {
        res[get(i)] = get(i + 1)
    }",,6e1f
fun suspendHere(),= s,,3da9
fun dummy(),{},,784f
fun named(),": String {
    dummy()
    val s1 = """"
    val s2 = """"
    val s3 = """"
    val s4 = """"
    val s5 = """"
    val s6 = """"
    val s7 = """"
    val s8 = """"
    val s9 = """"
    val map = getSpilledToVariable().toMap()
    println(s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9)
    return map[""L$0""] + map[""L$1""] + map[""L$2""] + map[""L$3""] + map[""L$4""] + map[""L$5""] + map[""L$6""] + map[""L$7""] + map[""L$8""]
}",,bc9b
fun suspended(),"{
    dummy()
    val ss = """"
    suspendHere()
    println(ss)
}",,9c7d
fun multipleLocalsInOneSlot(),"{
    for (first in 0 until 1) {
        suspendHere()
        println(first)
    }",,2b1d
No signature found,"fun builder(c: suspend () -> Unit) {
    c.startCoroutine(EmptyContinuation)
}",,6e1f
fun box(),": String {
    var res: String = """"
    builder {
        res = named()
    }",,4f27
fun bar(a: A),= a,,02ec
No signature found,"fun takeStarFoo(x: Foo<*>) {
    x.value = <!ASSIGNMENT_TYPE_MISMATCH!>""test""<!>
    x.value <!NONE_APPLICABLE!>+=<!> ""test""
}","// !LANGUAGE: -RefineTypeCheckingOnAssignmentsToJavaFields
// WITH_STDLIB

// FILE: Foo.java",6e1f
fun main1(),"{
    val foo = Foo<Int>()
    foo.value = 1
    takeStarFoo(foo)
    println(foo.value) // CCE: String cannot be cast to Number
}",,2e38
No signature found,"fun takeStarBar(x: Bar<*>) {
    x.value = <!ASSIGNMENT_TYPE_MISMATCH!>""test""<!>
    x.value <!NONE_APPLICABLE!>+=<!> ""test""
}",// --- from Kotlin --- //,6e1f
fun main2(),"{
    val bar = Bar<Int>()
    bar.value = 1
    takeStarBar(bar)
    println(bar.value) // CCE: String cannot be cast to Number
}",,b0e6
No signature found,"fun takeStarFoo2(x: Foo2<*>) {
    x.value = <!ASSIGNMENT_TYPE_MISMATCH!>""test""<!>
    x.value <!NONE_APPLICABLE!>+=<!> ""test""
}",// --- from Java (nullable) --- //,6e1f
fun main3(),"{
    val foo = Foo2<Int>()
    foo.value = 1
    takeStarFoo2(foo)
    println(foo.value) // CCE: String cannot be cast to Number
}",,1c9d
No signature found,"fun takeStarBar2(x: Bar2<*>) {
    x.value = <!ASSIGNMENT_TYPE_MISMATCH!>""test""<!>
    x.value <!NONE_APPLICABLE!>+=<!> ""test""
}",// --- from Kotlin (nullable) --- //,6e1f
fun main4(),"{
    val bar = Bar2<Int>()
    bar.value = 1
    takeStarBar2(bar)
    println(bar.value) // CCE: String cannot be cast to Number
}",,8258
No signature found,"fun takeStarFoo3(x: Foo3<*>) {
    x.value = <!ASSIGNMENT_TYPE_MISMATCH!>""test""<!>
    x.value <!NONE_APPLICABLE!>+=<!> ""test""
}",// --- from Java (not-null) --- //,6e1f
fun main5(),"{
    val foo = Foo3<Int>()
    foo.value = 1
    takeStarFoo3(foo)
    println(foo.value) // CCE: String cannot be cast to Number
}",,25d6
No signature found,"fun takeStarBar3(x: Bar3<*>) {
    x.value = <!ASSIGNMENT_TYPE_MISMATCH!>""test""<!>
    x.value <!NONE_APPLICABLE!>+=<!> ""test""
}",// --- from Kotlin (field) --- //,6e1f
fun main6(),"{
    val bar = Bar3<Int>()
    bar.value = 1
    takeStarBar3(bar)
    println(bar.value) // CCE: String cannot be cast to Number
}",,30d4
fun f(),: List<String> = t,,f6fb
fun yield(t: T),{},"// FIR_IDENTICAL
// !OPT_IN: kotlin.RequiresOptIn
// !DIAGNOSTICS: -UNUSED_EXPRESSION -UNUSED_PARAMETER -UNUSED_VARIABLE",ed42
No signature found,fun <S> generate(g: suspend GenericController<S>.() -> Unit): List<S> = T,,6e1f
fun getAudioTracks(),": JsArray<MediaStreamTrack>
    fun getVideoTracks(): JsArray<MediaStreamTrack>
    fun getTracks(): JsArray<MediaStreamTrack>
    fun getTrackById(trackId: String): MediaStreamTrack?
    fun addTrack(track: MediaStreamTrack)
    fun removeTrack(track: MediaStreamTrack)
    fun clone(): MediaStream
}

/**
 * Exposes the JavaScript [MediaStreamTrack](https://developer.mozilla.org/en/docs/Web/API/MediaStreamTrack) to Kotlin
 */
public external abstract class MediaStreamTrack : EventTarget, JsAny {
    open val kind: String
    open val id: String
    open val label: String
    open var enabled: Boolean
    open val muted: Boolean
    open var onmute: ((Event) -> Unit)?
    open var onunmute: ((Event) -> Unit)?
    open val readyState: MediaStreamTrackState
    open var onended: ((Event) -> Unit)?
    open var onoverconstrained: ((Event) -> Unit)?
    fun clone(): MediaStreamTrack
    fun stop()
    fun getCapabilities(): MediaTrackCapabilities
    fun getConstraints(): MediaTrackConstraints
    fun getSettings(): MediaTrackSettings
    fun applyConstraints(constraints: MediaTrackConstraints = definedExternally): Promise<Nothing?>
}",,792d
No signature found,fun MediaTrackSupportedConstraints(width: Boolean? = t,"/**
 * Exposes the JavaScript [MediaTrackSupportedConstraints](https://developer.mozilla.org/en/docs/Web/API/MediaTrackSupportedConstraints) to Kotlin
 */",6e1f
No signature found,fun MediaTrackCapabilities(width: ULongRange? = u,,6e1f
No signature found,fun MediaTrackConstraints(advanced: JsArray<MediaTrackConstraintSet>? = u,,6e1f
No signature found,fun MediaTrackConstraintSet(width: JsAny? /* Int|ConstrainULongRange */ = u,,6e1f
No signature found,fun MediaTrackSettings(width: Int? = u,,6e1f
No signature found,"fun MediaStreamTrackEventInit(track: MediaStreamTrack?, bubbles: Boolean? = f",,6e1f
No signature found,fun OverconstrainedErrorEventInit(error: JsAny? = n,,6e1f
fun enumerateDevices(),": Promise<JsArray<MediaDeviceInfo>>
    fun getSupportedConstraints(): MediaTrackSupportedConstraints
    fun getUserMedia(constraints: MediaStreamConstraints = d",,556d
fun toJSON(),": JsAny
}

public external abstract class InputDeviceInfo : MediaDeviceInfo, JsAny {
    fun getCapabilities(): MediaTrackCapabilities
}",,ae87
No signature found,fun MediaStreamConstraints(video: JsAny? /* Boolean|MediaTrackConstraints */ = f,"/**
 * Exposes the JavaScript [MediaStreamConstraints](https://developer.mozilla.org/en/docs/Web/API/MediaStreamConstraints) to Kotlin
 */",6e1f
fun getCapabilities(),": Capabilities
    fun getConstraints(): Constraints
    fun getSettings(): Settings
    fun applyConstraints(constraints: Constraints = d",,e09a
No signature found,fun DoubleRange(max: Double? = u,,6e1f
No signature found,fun ConstrainDoubleRange(exact: Double? = u,,6e1f
No signature found,fun ULongRange(max: Int? = u,,6e1f
No signature found,fun ConstrainULongRange(exact: Int? = u,,6e1f
No signature found,fun ConstrainBooleanParameters(exact: Boolean? = u,,6e1f
No signature found,fun ConstrainDOMStringParameters(exact: JsAny? /* String|JsArray<JsString> */ = u,,6e1f
fun Capabilities(),": Capabilities { js(""return {  };",,6c6e
fun Settings(),": Settings { js(""return {  };",,76a6
fun ConstraintSet(),": ConstraintSet { js(""return {  };",,c17d
No signature found,fun Constraints(advanced: JsArray<ConstraintSet>? = u,,6e1f
fun test(),"{
    val x = try {
        throw Exception()
    }",,fe98
fun box(),": String {
    try {
        C()
        return ""Fail""
    }","// WITH_STDLIB
// KT-44496",4f27
fun test1(),"{
    <!UNREACHABLE_CODE!>bar(<!>
        11,
        todo(),//comment1
        <!UNREACHABLE_CODE!>""""//comment2
    )<!>
}",,fa3b
fun test2(),"{
    <!UNREACHABLE_CODE!>bar(<!>11, todo()/*comment1*/, <!UNREACHABLE_CODE!>""""/*comment2*/)<!>
}",,30bb
fun test3(),"{
    <!UNREACHABLE_CODE!>bar(<!>11, <!UNREACHABLE_CODE!>l@(<!>todo()/*comment*/<!UNREACHABLE_CODE!>), """")<!>
}",,a31f
fun todo(),: Nothing = t,,4113
"fun bar(i: Int, s: String, a: Any)",{},,490c
fun box(),": String {
    val x = Bar(42).x
    if (x != 42 ) return ""FAIL: $x""
        return ""OK""
}",,4f27
fun checkCannotAccess(),"{
    object : InlineCompletionSessionManager() {
        fun chch() {
            val b: Proto = Proto()
            if (<!USELESS_IS_CHECK!>b is Proto.Some<!>) return
        }","// SKIP_TXT
// FIR_DUMP",16e3
fun testSimple(),"{
        val res = evalFile(File(""testData/hello.simplescript.kts""))

        Assert.assertTrue(
            ""test failed:\n  ${res.reports.joinToString(""\n  "") { it.message + if (it.exception == null) """" else "": ${it.exception}",,5615
fun testError(),"{
        val res = evalFile(File(""testData/error.simplescript.kts""))

        Assert.assertTrue(
            ""test failed - expecting a failure with the message \""Unresolved reference 'abracadabra'.\"" but received "" +
                    (if (res is ResultWithDiagnostics.Failure) ""failure"" else ""success"") +
                    "":\n  ${res.reports.joinToString(""\n  "") { it.message + if (it.exception == null) """" else "": ${it.exception}",,05dc
fun f(),= c,,f6fb
fun box(),": String {
    Test().A()

    return ""OK""
}",,4f27
fun remove(),": Int {
        return 1
    }","// SKIP_KT_DUMP
// TARGET_BACKEND: JVM
// FULL_JDK
// SEPARATE_SIGNATURE_DUMP_FOR_K2
// ^ ISSUE: KT-65219, KT-63914

// FILE: 1.kt",6550
fun removeAt(index: Int),": Int {
        return 1
    }",,b29a
fun remove(element: Int),": Boolean {
        return true
    }",,904a
fun get(index: Int),": Int? {
        return 2
    }",,60cf
fun remove(),": Int? {
        return 2
    }",,6550
fun removeAt(index: Int),": Int? {
        return 2
    }",,b29a
No signature found,"fun remove(element: Int?): Boolean {
        return true
    }",,6e1f
"fun test(a: A, b: B, c: C, d: D)","{
    a.size
    a.add(1)
    a.get(0)
    a.remove()
    a.removeAt(1)
    a.remove(1)

    b.size
    b.add(1)
    b.get(0)
    b.remove()
    b.removeAt(1)
    b.remove(1)

    c.size
    c.add(1)
    c.get(0)
    c.remove()
    c.removeAt(1)
    c.remove(1)

    d.size
    d.add(1)
    d.get(0)
    d.remove()
    d.removeAt(1)
    d.remove(1)
}",,190e
fun ff(),": String
}

interface J : K {}",,2c99
fun ff(),"= """,,2c99
fun ff(),"= """,,2c99
fun box(),": String {
    val v = if (true) A() else B()
    return v.ff()
}",,4f27
fun resultOfIntToResultOfInt(r: Result<Int>),": Result<Int> {
    return r
}","// WITH_STDLIB
// WORKS_WHEN_VALUE_CLASS
// LANGUAGE: +ValueClasses",b3ce
fun <T> idResult(r: Result<T>),: Result<T> = r,,7ac5
No signature found,fun Result<Int>.extension(): Result<Int> = t,,6e1f
fun box(),": String {
    val r = Result<Int>(null)

    resultOfIntToResultOfInt(r)
    resultOfIntToResultOfInt(Result<Int>(null))

    val nonNull1 = resultOfIntToResultOfInt(r)
    val nonNull2 = resultOfIntToResultOfInt(Result<Int>(null))

    resultOfIntToResultOfInt(nonNull1)

    if (nonNull1.a != null) return ""fail""
    if (nonNull2.a != null) return ""fail""

    if (resultOfIntToResultOfInt(r).a != null) return ""fail""

    idResult(Result<String>(null))

    val id = idResult(r)
    if (id.a != null) return ""fail""

    r.extension()
    Result<Int>(null).extension()

    return ""OK""
}",,4f27
No signature found,fun foo(s: String?) {},"// SKIP_KT_DUMP
// TARGET_BACKEND: JVM

// FILE: Java1.java",6e1f
fun getNullableString(),": String {
        return ""C""
    }",,26bb
No signature found,fun foo(s: String?) { },,6e1f
fun getNullableString(),": String {
        return ""E""
    }",,26bb
"fun test(b: B, d: D, e: E)","{
    b.foo(null)
    b.foo("""")
    b.nullableString = ""B""
    val k1: String = b.getNullableString()
    val k2: String = b.nullableString

    d.foo(null)
    d.foo("""")
    d.nullableString = ""C""
    val k3: String = d.getNullableString()
    val k4: String = d.nullableString

    e.foo(null)
    e.foo("""")
    e.nullableString = ""E""
    val k5: String = e.getNullableString()
    val k6: String = e.nullableString
}",,d307
fun test(),"{
    A.<!DEBUG_INFO_CALL(""fqName: A.Companion.entries; typeCall: variable""), DEPRECATED_ACCESS_TO_ENUM_ENTRY_COMPANION_PROPERTY!>entries<!>

    with(A) {
        <!DEBUG_INFO_CALL(""fqName: A.Companion.entries; typeCall: variable"")!>entries<!>
    }","// !LANGUAGE: -EnumEntries
// WITH_STDLIB",fe98
No signature found,fun <R1> build(block: TestInterface<R1>.() -> Unit): R1 = T,"// !LANGUAGE: +UnrestrictedBuilderInference
// !DIAGNOSTICS: -UNUSED_PARAMETER -DEPRECATION -OPT_IN_IS_NOT_ENABLED -UNUSED_VARIABLE
// WITH_STDLIB
// ISSUE: KT-64802 (K2/PCLA difference)
// ISSUE: KT-65005 (performance problem)

// FILE: Test.java",6e1f
No signature found,fun <R2> build2(block: TestInterface<R2>.() -> Unit): R2 = T,,6e1f
fun emit(r: R),"fun get(): R
    fun getIn(): In<R>
}

fun <U> id(x: U): U? = x",,cdd5
"fun <E> select1(x: E, y: In<E>)",: E? = x,,581f
No signature found,"fun <E> select2(x: E, y: In<E?>): E = x",,6e1f
No signature found,"fun <E> select3(x: E?, y: In<E?>): E = x",,6e1f
No signature found,"fun <E> select4(x: E?, y: In<E>): E = x",,6e1f
fun test(),"{
    val ret = build {
        emit(""1"")
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.String?"")!>select1(get(), getIn())<!>
        select1(get(), Test.foo(getIn()))
        select1(Test.foo(get()), Test.foo(getIn()))
        select1(Test.foo(get()), getIn())
        select4(get(), getIn())
        select4(get(), Test.foo(getIn()))
        select4(Test.foo(get()), Test.foo(getIn()))
        select4(Test.foo(get()), getIn())

        select4(id(Test.foo(get())), getIn())

        build2 {
            emit(1)
            select1(this@build.get(), <!TYPE_MISMATCH(""In<String>; In<Int!>"")!>getIn()<!>)
            select1(get(), <!TYPE_MISMATCH!>Test.foo(this@build.getIn())<!>)
            select1(Test.foo(this@build.get()), <!TYPE_MISMATCH!>Test.foo(getIn())<!>)
            select1(Test.foo(get()), <!TYPE_MISMATCH!>this@build.getIn()<!>)
            select2(this@build.get(), <!TYPE_MISMATCH!>getIn()<!>)
            select2(get(), <!TYPE_MISMATCH!>Test.foo(this@build.getIn())<!>)
            select2(Test.foo(this@build.get()), <!TYPE_MISMATCH!>Test.foo(getIn())<!>)
            select2(Test.foo(get()), <!TYPE_MISMATCH!>this@build.getIn()<!>)
            select3(this@build.get(), <!TYPE_MISMATCH!>getIn()<!>)
            select3(get(), <!TYPE_MISMATCH!>Test.foo(this@build.getIn())<!>)
            select3(Test.foo(this@build.get()), <!TYPE_MISMATCH!>Test.foo(getIn())<!>)
            select3(Test.foo(get()), <!TYPE_MISMATCH!>this@build.getIn()<!>)
            select4(this@build.get(), <!TYPE_MISMATCH!>getIn()<!>)
            select4(get(), <!TYPE_MISMATCH!>Test.foo(this@build.getIn())<!>)
            select4(Test.foo(this@build.get()), <!TYPE_MISMATCH!>Test.foo(getIn())<!>)
            select4(Test.foo(get()), <!TYPE_MISMATCH!>this@build.getIn()<!>)

            select4(id(Test.foo(this@build.get())), <!TYPE_MISMATCH!>getIn()<!>)
            """"
        }",,fe98
fun checkTrue(),": Boolean {
        var hit = false
        val l = { hit = true; true }","// TARGET_BACKEND: JVM
// ASSERTIONS_MODE: jvm
// WITH_STDLIB",6a1b
fun checkFalse(),": Boolean {
        var hit = false
        val l = { hit = true; false }",,f255
fun checkTrueWithMessage(),": Boolean {
        var hit = false
        val l = { hit = true; true }",,ae4c
fun checkFalseWithMessage(),": Boolean {
        var hit = false
        val l = { hit = true; false }",,899c
fun disableAssertions(),": Checker {
    val loader = Dummy::class.java.classLoader
    loader.setPackageAssertionStatus(""interfaceAssertionsDisabled"", false)
    return loader.loadClass(""interfaceAssertionsDisabled.ShouldBeDisabled"").newInstance() as Checker
}",,f168
fun box(),": String {
    var c = disableAssertions()
    if (c.checkTrue()) return ""FAIL 0""
    if (c.checkTrueWithMessage()) return ""FAIL 1""
    if (c.checkFalse()) return ""FAIL 2""
    if (c.checkFalseWithMessage()) return ""FAIL 3""
    return ""OK""
}",,4f27
No signature found,"fun loadConstant(
        propertyProto: ProtoBuf.Property, callableId: CallableId, nameResolver: NameResolver, isUnsigned: Boolean,
    ): FirExpression? {
        if (!Flags.HAS_CONSTANT.get(propertyProto.flags)) return null
        constantCache[callableId]?.let { return it }",,6e1f
No signature found,"fun buildFirConstant(
    protoValue: ProtoBuf.Annotation.Argument.Value?, sourceValue: Any?, constKind: String, nameResolver: NameResolver, isUnsigned: Boolean
): FirExpression? {
    return when (constKind) {
        ""BYTE"", ""B"" -> buildLiteralExpression(
            null,
            if (isUnsigned) ConstantValueKind.UnsignedByte else ConstantValueKind.Byte,
            ((protoValue?.intValue ?: sourceValue) as Number).toByte(),
            setType = true,
        )
        ""SHORT"", ""S"" -> buildLiteralExpression(
            null,
            if (isUnsigned) ConstantValueKind.UnsignedShort else ConstantValueKind.Short,
            ((protoValue?.intValue ?: sourceValue) as Number).toShort(),
            setType = true,
        )
        ""INT"", ""I"" -> buildLiteralExpression(
            null,
            if (isUnsigned) ConstantValueKind.UnsignedInt else ConstantValueKind.Int,
            protoValue?.intValue?.toInt() ?: sourceValue as Int,
            setType = true,
        )
        ""LONG"", ""J"" -> buildLiteralExpression(
            null,
            if (isUnsigned) ConstantValueKind.UnsignedLong else ConstantValueKind.Long,
            protoValue?.intValue ?: sourceValue as Long,
            setType = true,
        )
        ""CHAR"", ""C"" -> buildLiteralExpression(
            null, ConstantValueKind.Char, ((protoValue?.intValue ?: sourceValue) as Number).toInt().toChar(), setType = true
        )
        ""FLOAT"", ""F"" -> buildLiteralExpression(
            null, ConstantValueKind.Float, protoValue?.floatValue ?: sourceValue as Float, setType = true
        )
        ""DOUBLE"", ""D"" -> buildLiteralExpression(
            null, ConstantValueKind.Double, protoValue?.doubleValue ?: sourceValue as Double, setType = true
        )
        ""BOOLEAN"", ""Z"" -> buildLiteralExpression(
            null, ConstantValueKind.Boolean, (protoValue?.intValue?.toInt() ?: sourceValue) != 0, setType = true
        )
        ""STRING"", ""Ljava/lang/String;"" -> buildLiteralExpression(
            null, ConstantValueKind.String,
            protoValue?.stringValue?.let { nameResolver.getString(it) }",,6e1f
No signature found,"fun CallableId.replaceName(newName: Name): CallableId {
    return CallableId(this.packageName, this.className, newName)
}",,6e1f
No signature found,fun A.plusAssign(s: String) {},,6e1f
No signature found,fun A.minusAssign(s: String) {},,6e1f
No signature found,fun A.timesAssign(s: String) {},,6e1f
No signature found,fun A.divAssign(s: String) {},,6e1f
No signature found,fun A.remAssign(s: String) {},,6e1f
fun testVariable(),"{
    val a = A()
    a += ""+=""
    a -= ""-=""
    a *= ""*=""
    a /= ""/=""
    a %= ""*=""
}",,5c08
fun testProperty(),"{
    p += ""+=""
    p -= ""-=""
    p *= ""*=""
    p /= ""/=""
    p %= ""%=""
}",,bb70
No signature found,"fun getCallablesMatchingCompatibility(
        expectDeclaration: CallableSymbolMarker,
        actualDeclaration: CallableSymbolMarker,
        expectContainingClass: RegularClassSymbolMarker?,
        actualContainingClass: RegularClassSymbolMarker?,
        context: ExpectActualMatchingContext<*>,
    ): ExpectActualMatchingCompatibility = w",,6e1f
No signature found,"fun <T : DeclarationSymbolMarker> matchSingleExpectTopLevelDeclarationAgainstPotentialActuals(
        expectDeclaration: DeclarationSymbolMarker,
        actualDeclarations: List<DeclarationSymbolMarker>,
        context: ExpectActualMatchingContext<T>,
    ): DeclarationSymbolMarker? = w",,6e1f
No signature found,"fun matchClassifiers(
        expectClassSymbol: RegularClassSymbolMarker,
        actualClassLikeSymbol: ClassLikeSymbolMarker,
        context: ExpectActualMatchingContext<*>,
    ): ExpectActualMatchingCompatibility = w",,6e1f
No signature found,"fun ExpectActualMatchingContext<*>.matchSingleExpectAgainstPotentialActuals(
        expectMember: DeclarationSymbolMarker,
        actualMembers: List<DeclarationSymbolMarker>,
        substitutor: TypeSubstitutorMarker?,
        expectClassSymbol: RegularClassSymbolMarker?,
        actualClassSymbol: RegularClassSymbolMarker?,
        mismatchedMembers: MutableList<Pair<DeclarationSymbolMarker, Map<ExpectActualMatchingCompatibility.Mismatch, List<DeclarationSymbolMarker?>>>>?,
    ): DeclarationSymbolMarker? {
        val mapping = actualMembers.keysToMap { actualMember ->
            when (expectMember) {
                is CallableSymbolMarker -> getCallablesCompatibility(
                    expectMember,
                    actualMember as CallableSymbolMarker,
                    substitutor,
                    expectClassSymbol,
                    actualClassSymbol
                )

                is RegularClassSymbolMarker -> {
                    matchClassifiers(expectMember, actualMember as ClassLikeSymbolMarker, this)
                }",,6e1f
No signature found,"fun ExpectActualMatchingContext<*>.getCallablesCompatibility(
        expectDeclaration: CallableSymbolMarker,
        actualDeclaration: CallableSymbolMarker,
        parentSubstitutor: TypeSubstitutorMarker?,
        expectContainingClass: RegularClassSymbolMarker?,
        actualContainingClass: RegularClassSymbolMarker?,
    ): ExpectActualMatchingCompatibility {
        checkCallablesInvariants(expectDeclaration, actualDeclaration)

        if (areEnumConstructors(expectDeclaration, actualDeclaration, expectContainingClass, actualContainingClass)) {
            return ExpectActualMatchingCompatibility.MatchedSuccessfully
        }",,6e1f
No signature found,"fun ExpectActualMatchingContext<*>.valueParametersCountCompatible(
        expectDeclaration: CallableSymbolMarker,
        actualDeclaration: CallableSymbolMarker,
        expectValueParameters: List<ValueParameterSymbolMarker>,
        actualValueParameters: List<ValueParameterSymbolMarker>,
    ): Boolean {
        if (expectValueParameters.size == actualValueParameters.size) return true

        return if (expectDeclaration.isAnnotationConstructor() && actualDeclaration.isAnnotationConstructor()) {
            expectValueParameters.isEmpty() && actualValueParameters.all { it.hasDefaultValue }",,6e1f
No signature found,"fun ExpectActualMatchingContext<*>.toTypeList(
        parameterSymbolMarkers: List<ValueParameterSymbolMarker>,
        substitutor: TypeSubstitutorMarker,
    ): List<KotlinTypeMarker> {
        return parameterSymbolMarkers.map { substitutor.safeSubstitute(it.returnType) }",,6e1f
fun test1(),= T,// FIR_IDENTICAL,fa3b
fun test2(),= t,,30bb
fun add(item: T),"{
        contents.add(item)
    }","// KJS_WITH_FULL_RUNTIME
// EXPECTED_REACHABLE_NODES: 1519",0bf3
fun plusAssign(rhs: ArrayWrapper<T>),"{
        contents.addAll(rhs.contents)
    }",,7364
fun get(index: Int),": T {
        return contents.get(index)
    }",,60cf
fun box(),": String {
    var v1 = ArrayWrapper<String>()
    val v2 = ArrayWrapper<String>()
    v1.add(""foo"")
    v2.add(""bar"")
    v1 += v2
    return if (v1.contents.size == 2) ""OK"" else ""fail""
}",,4f27
fun main(args: Array<String>),"{
    System.setProperty(""java.awt.headless"", ""true"")

    generateTestGroupSuite(args) {
        testGroup(""compiler/tests-java8/tests"", ""compiler/testData"") {
            testClass<AbstractLoadJava8Test> {
                model(""loadJava8/compiledJava"", extension = ""java"", testMethod = ""doTestCompiledJava"")
                model(""loadJava8/compiledKotlinWithStdlib"", testMethod = ""doTestCompiledKotlinWithStdlib"")
                model(""loadJava8/sourceJava"", extension = ""java"", testMethod = ""doTestSourceJava"")
            }",,5b61
No signature found,"fun foo(a: A, list: List<Array<A>>?): String = ""","// TARGET_BACKEND: JVM
// FILE: J.java",6e1f
fun box(),": String {
    val c: J<A> = C()
    return c.foo(A(), null)
}",,4f27
"fun processModule(module: TestModule, info: FirOutputArtifact)","{
        if (alreadyDumped || DUMP_CFG !in module.directives) return
        val options = module.directives[DUMP_CFG].map { it.uppercase() }",,1632
fun processAfterAllModules(someAssertionWasFailed: Boolean),"{
        val testDataFile = testServices.moduleStructure.originalTestDataFiles.first()
        val expectedFile = testDataFile.parentFile.resolve(""${testDataFile.nameWithoutFirExtension}",,b888
fun build(),": FirDelegateFieldReference {
        return FirDelegateFieldReferenceImpl(
            source,
            resolvedSymbol,
        )
    }",,5bf9
No signature found,"fun buildDelegateFieldReference(init: FirDelegateFieldReferenceBuilder.() -> Unit): FirDelegateFieldReference {
    contract {
        callsInPlace(init, InvocationKind.EXACTLY_ONCE)
    }",,6e1f
fun main(),"{
    val arg = TheVeryTransitiveStory()
    println(""Test printing: `${arg.jApiOne}",,d987
No signature found,"fun Double.provideDelegate(thisRef: Any?, kProp: Any?) = t",,6e1f
No signature found,"fun Long.getValue(thisRef: Any?, kProp: Any?) = t",,6e1f
No signature found,"fun Long.getValue(thisRef: Long, kProp: Any?) = t",,6e1f
No signature found,"fun Long.getValue(thisRef: IntArray, kProp: Any?) = t",,6e1f
No signature found,"fun Long.setValue(thisRef: IntArray, kProp: Any?, newValue: Int) {
    thisRef[this.toInt()] = newValue
}",,6e1f
No signature found,"fun Long.getValue(thisRef: IntArray, kProp: Any?) = t",,6e1f
No signature found,"fun Long.setValue(thisRef: IntArray, kProp: Any?, newValue: Int) {
        thisRef[this.toInt()] = newValue * 10
    }",,6e1f
No signature found,"fun Long.getValue(thisRef: Long, kProp: Any?) = t",,6e1f
fun test(intArray: IntArray),"{
        if (intArray.secondElementX10 != 220) throw AssertionError()
        intArray.secondElementX10 = 42
        if (intArray.secondElementX10 != 4200) throw AssertionError()

        if (42L.appendDigit1 != 421) throw AssertionError()
    }",,c52a
fun box(),": String {
    if (magic1 != 42) throw AssertionError()
    if (magic2 != 42) throw AssertionError()
    
    val intArray = IntArray(9) { (it + 1) * 10 + it + 1 }",,4f27
fun foo(),= b,// EXPECTED_REACHABLE_NODES: 1379,519f
fun box(),": String {

    val t = Test(1, 2)
    return t.foo()
}",,4f27
fun generateStatement(),": JsStatement {
        if (statements.isEmpty()) return JsEmpty

        val newStatements = statements.toMutableList().apply {
            val expression = (last() as? JsReturn)?.expression ?: return@apply

            if (expression is JsPrefixOperation && expression.operator == JsUnaryOperator.VOID) {
                removeLastOrNull()
            }",,b62b
fun generateExpression(),": JsExpression {
        if (statements.isEmpty()) return JsPrefixOperation(JsUnaryOperator.VOID, JsIntLiteral(3)) // TODO: report warning or even error

        val lastStatement = statements.findLast { it !is JsSingleLineComment && it !is JsMultiLineComment }",,f595
fun getJsStatements(),": List<JsStatement> {
        return when {
            context.checkIfJsCode(jsOrJsFuncCall.symbol) -> {
                translateJsCodeIntoStatementList(
                    jsOrJsFuncCall.getValueArgument(0) ?: compilationException(""JsCode is expected"", jsOrJsFuncCall),
                    context.staticContext.backendContext,
                    context.currentFile.fileEntry
                )
                    ?: compilationException(""Cannot compute js code"", jsOrJsFuncCall)
            }",,df75
fun diff(),: Int = d,,d4f0
"fun encode(startOffset: Int, endOffset: Int)",": Long {
//            assert(startOffset <= endOffset)
            return BinaryLattice.encode(startOffset, Math.abs(endOffset - startOffset))
        }",,62e7
fun decode(code: Long),= B,,b41f
fun IEEEremainder(),"{
        val data = arrayOf(  //  a    a IEEErem 2.5
                doubleArrayOf(-2.0,   0.5),
                doubleArrayOf(-1.25, -1.25),
                doubleArrayOf( 0.0,   0.0),
                doubleArrayOf( 1.0,   1.0),
                doubleArrayOf( 1.25,  1.25),
                doubleArrayOf( 1.5,  -1.0),
                doubleArrayOf( 2.0,  -0.5),
                doubleArrayOf( 2.5,   0.0),
                doubleArrayOf( 3.5,   1.0),
                doubleArrayOf( 3.75, -1.25),
                doubleArrayOf( 4.0,  -1.0)
        )
        for ((a, r) in data) {
            assertEquals(r, a.IEEErem(2.5), ""($a).IEEErem(2.5)"")
        }",,d3bd
fun test0(),"{
        assertEquals(
            """",
            listOf<String>().joinToReadableString()
        )
    }",,a646
fun test1(),"{
        assertEquals(
            ""a"",
            listOf(""a"").joinToReadableString()
        )
    }",,fa3b
fun test2(),"{
        assertEquals(
            ""a and b"",
            listOf(""a"", ""b"").joinToReadableString()
        )
    }",,30bb
fun test3(),"{
        assertEquals(
            ""a, b and c"",
            listOf(""a"", ""b"", ""c"").joinToReadableString()
        )
    }",,a31f
fun test4(),"{
        assertEquals(
            ""a, b, c and d"",
            listOf(""a"", ""b"", ""c"", ""d"").joinToReadableString()
        )
    }",,5b17
fun test5(),"{
        assertEquals(
            ""a, b, c, d and e"",
            listOf(""a"", ""b"", ""c"", ""d"", ""e"").joinToReadableString()
        )
    }",,aa19
fun test6(),"{
        assertEquals(
            ""a, b, c, d, e and 1 more"",
            listOf(""a"", ""b"", ""c"", ""d"", ""e"", ""f"").joinToReadableString()
        )
    }",,1831
No signature found,fun String.toByteOrNull(): Byte? = t,,6e1f
No signature found,"fun String.toByteOrNull(radix: Int): Byte? {
    val int = this.toIntOrNull(radix) ?: return null
    if (int < Byte.MIN_VALUE || int > Byte.MAX_VALUE) return null
    return int.toByte()
}",,6e1f
No signature found,fun String.toShortOrNull(): Short? = t,"/**
 * Parses the string as a [Short] number and returns the result
 * or `null` if the string is not a valid representation of a number.
 */",6e1f
No signature found,"fun String.toShortOrNull(radix: Int): Short? {
    val int = this.toIntOrNull(radix) ?: return null
    if (int < Short.MIN_VALUE || int > Short.MAX_VALUE) return null
    return int.toShort()
}",,6e1f
No signature found,fun String.toIntOrNull(): Int? = t,"/**
 * Parses the string as an [Int] number and returns the result
 * or `null` if the string is not a valid representation of a number.
 */",6e1f
No signature found,"fun String.toIntOrNull(radix: Int): Int? {
    checkRadix(radix)

    val length = this.length
    if (length == 0) return null

    val start: Int
    val isNegative: Boolean
    val limit: Int

    val firstChar = this[0]
    if (firstChar < '0') {  // Possible leading sign
        if (length == 1) return null  // non-digit (possible sign) only, no digits after

        start = 1

        if (firstChar == '-') {
            isNegative = true
            limit = Int.MIN_VALUE
        }",,6e1f
No signature found,fun String.toLongOrNull(): Long? = t,,6e1f
No signature found,"fun String.toLongOrNull(radix: Int): Long? {
    checkRadix(radix)

    val length = this.length
    if (length == 0) return null

    val start: Int
    val isNegative: Boolean
    val limit: Long

    val firstChar = this[0]
    if (firstChar < '0') {  // Possible leading sign
        if (length == 1) return null  // non-digit (possible sign) only, no digits after

        start = 1

        if (firstChar == '-') {
            isNegative = true
            limit = Long.MIN_VALUE
        }",,6e1f
fun numberFormatError(input: String),: Nothing = t,,c437
fun await(),= t,"// FULL_JDK
// WITH_STDLIB
// WITH_COROUTINES",7f11
No signature found,fun <T> async(block: suspend () -> T) = M,,6e1f
No signature found,"fun <T1, T2, R> zip(source1: MyDeferred<T1>, source2: MyDeferred<T2>, crossinline zipper: (T1, T2) -> R) =
    a",,6e1f
No signature found,"fun builder(c: suspend () -> Unit) {
    c.startCoroutine(EmptyContinuation)
}",,6e1f
fun box(),": String {
    val first = MyDeferred { 1 }",,4f27
No signature found,fun A.component1(): Int = f,// EXPECTED_REACHABLE_NODES: 1290,6e1f
No signature found,fun A.component2(): Int = b,,6e1f
No signature found,fun A.component3(): Int = b,,6e1f
No signature found,fun A.component4(): Int = f,,6e1f
No signature found,fun A.component5(): Int = b,,6e1f
fun box(),": String {
    val (a, b, c, d, e) = A(1, 2, 3, 4, 5)

    assertEquals(1, a)
    assertEquals(2, b)
    assertEquals(3, c)
    assertEquals(4, d)
    assertEquals(5, e)
    assertEquals(""fizz(1);buzz(2);buzz(3);fizz(4);buzz(5);"", pullLog())

    return ""OK""
}",,4f27
No signature found,"fun <T> f(arr: Array<T>, func: (T) -> Int): Int = f",// FILE: 1.kt,6e1f
fun box(),: String = (,,4f27
fun usage(),"{
    <expr>dependency.foo()</expr>
}",// FILE: main.kt,455a
fun invoke(),{},// FILE: dependency.kt,0a26
fun createClassLoader(classpath: List<URL>),": ClassLoader

    override fun run(classpath: List<URL>, compilerArguments: List<String>, arguments: List<String>, compilerClasspath: List<URL>) {
        val classLoader = createClassLoader(classpath)

        val mainClass = try {
            classLoader.loadClass(className)
        }",,9ae4
fun createClassLoader(classpath: List<URL>),": ClassLoader =
        U",,9ae4
fun createClassLoader(classpath: List<URL>),": ClassLoader {
        // 'kotlin *.jar' ignores the passed classpath as 'java -jar' does
        // TODO: warn on non-empty classpath?

        return URLClassLoader(arrayOf(File(path).toURI().toURL()), getPlatformClassLoader())
    }",,9ae4
"fun runCompiler(compilerClasspath: List<URL>, arguments: List<String>)","{
        val classLoader =
            if (arguments.isEmpty()) RunnerWithCompiler::class.java.classLoader
            else URLClassLoader(compilerClasspath.toTypedArray(), null)
        val compilerClass = classLoader.loadClass(""org.jetbrains.kotlin.cli.jvm.K2JVMCompiler"")
        val mainMethod = compilerClass.getMethod(""main"", Array<String>::class.java)
        mainMethod.invoke(null, arguments.toTypedArray())
    }",,57f4
No signature found,"fun MutableList<String>.addClasspathArgIfNeeded(classpath: List<URL>) {
    if (classpath.isNotEmpty()) {
        add(""-cp"")
        add(classpath.map {
            if (it.protocol == ""file"") it.path
            else it.toExternalForm()
        }",,6e1f
No signature found,"fun ArrayList<String>.addScriptArguments(arguments: List<String>) {
    if (arguments.isNotEmpty() && arguments.first() != ""--"") {
        add(""--"")
    }",,6e1f
"fun run(classpath: List<URL>, compilerArguments: List<String>, arguments: List<String>, compilerClasspath: List<URL>)","{
        val compilerArgs = ArrayList<String>().apply {
            addClasspathArgIfNeeded(classpath)
            addAll(compilerArguments)
            addScriptArguments(arguments)
        }",,e469
"fun run(classpath: List<URL>, compilerArguments: List<String>, arguments: List<String>, compilerClasspath: List<URL>)","{
        val compilerArgs = ArrayList<String>().apply {
            addClasspathArgIfNeeded(classpath)
            addAll(compilerArguments)
            add(""-script"")
            add(path)
            addScriptArguments(arguments)
        }",,e469
"fun run(classpath: List<URL>, compilerArguments: List<String>, arguments: List<String>, compilerClasspath: List<URL>)","{
        val compilerArgs = ArrayList<String>().apply {
            addClasspathArgIfNeeded(classpath)
            addAll(compilerArguments)
            add(""-expression"")
            add(code)
            addScriptArguments(arguments)
        }",,e469
fun getPlatformClassLoader(),": ClassLoader? =
    t",,b179
No signature found,"fun callLambda(x: Int, aFunction: (Int) -> Int): Int = a",,6e1f
No signature found,"fun inlineCallLambda(x: Int, aFunction: (Int) -> Int): Int = a",,6e1f
fun testEngineFactory(),"{
        val factory = ScriptEngineManager().getEngineByExtension(""kts"").factory
        Assert.assertNotNull(factory)
        factory!!.apply {
            Assert.assertEquals(""kotlin"", languageName)
            Assert.assertEquals(KotlinCompilerVersion.VERSION, languageVersion)
            Assert.assertEquals(""kotlin"", engineName)
            Assert.assertEquals(KotlinCompilerVersion.VERSION, engineVersion)
            Assert.assertEquals(listOf(""kts""), extensions)
            Assert.assertEquals(listOf(""text/x-kotlin""), mimeTypes)
            Assert.assertEquals(listOf(""kotlin""), names)
            Assert.assertEquals(""obj.method(arg1, arg2, arg3)"", getMethodCallSyntax(""obj"", ""method"", ""arg1"", ""arg2"", ""arg3""))
            Assert.assertEquals(""print(\""Hello, world!\"")"", getOutputStatement(""Hello, world!""))
            Assert.assertEquals(KotlinCompilerVersion.VERSION, getParameter(ScriptEngine.LANGUAGE_VERSION))
            val sep = System.getProperty(""line.separator"")
            val prog = arrayOf(""val x: Int = 3"", ""var y = x + 2"")
            Assert.assertEquals(prog.joinToString(sep) + sep, getProgram(*prog))
        }",,09df
fun testEngine(),"{
        val factory = ScriptEngineManager().getEngineByExtension(""kts"").factory
        Assert.assertNotNull(factory)
        val engine = factory!!.scriptEngine
        Assert.assertNotNull(engine as? KotlinJsr223ScriptEngineImpl)
        Assert.assertSame(factory, engine!!.factory)
        val bindings = engine.createBindings()
        Assert.assertTrue(bindings is SimpleBindings)
    }",,508a
fun testSimpleEval(),"{
        val engine = ScriptEngineManager().getEngineByExtension(""kts"")!!
        val res1 = engine.eval(""val x = 3"")
        Assert.assertNull(res1)
        val res2 = engine.eval(""x + 2"")
        Assert.assertEquals(5, res2)
    }",,f7de
fun testMemory(),"{
        val memoryMXBean = ManagementFactory.getMemoryMXBean()!!
        var prevMem = memoryMXBean.getHeapMemoryUsage().getUsed()
        for (i in 1..10) {
            with(ScriptEngineManager().getEngineByExtension(""kts"")) {
                val res1 = eval(""val x = 3"")
                Assert.assertNull(res1)
                val res2 = eval(""x + 2"")
                Assert.assertEquals(5, res2)
            }",,fb31
fun testIncomplete(),"{
        val engine = ScriptEngineManager().getEngineByExtension(""kts"")!!
        val res0 = try {
            engine.eval(""val x ="")
        }",,4c5e
fun testEvalWithError(),"{
        val engine = ScriptEngineManager().getEngineByExtension(""kts"")!!

        try {
            engine.eval(""java.lang.fish"")
            Assert.fail(""Script error expected"")
        }",,8a99
fun testEvalWithException(),"{
        val engine = ScriptEngineManager().getEngineByExtension(""kts"")!!
        try {
            engine.eval(""throw Exception(\""!!\"")"")
            Assert.fail(""Expecting exception to propagate"")
        }",,955d
fun testEngineRepeatWithReset(),"{
        val code = ""open class A {}",,84a5
fun testInvocable(),"{
        val engine = ScriptEngineManager().getEngineByExtension(""kts"")!!
        val res0 = engine.eval(""""""
fun fn(x: Int) = x + 2
val obj = object {
    fun fn1(x: Int) = x + 3
}",,04e9
fun testSimpleCompilable(),"{
        val engine = ScriptEngineManager().getEngineByExtension(""kts"") as KotlinJsr223ScriptEngineImpl
        val comp1 = engine.compile(""val x = 3"")
        val comp2 = engine.compile(""x + 2"")
        val res1 = comp1.eval()
        Assert.assertNull(res1)
        val res2 = comp2.eval()
        Assert.assertEquals(5, res2)
    }",,6230
fun testSimpleCompilableWithBindings(),"{
        val engine = ScriptEngineManager().getEngineByExtension(""kts"")
        engine.put(""z"", 33)
        val comp1 = (engine as Compilable).compile(""val x = 10 + bindings[\""z\""] as Int\nx + 20"")
        val comp2 = (engine as Compilable).compile(""val x = 10 + z\nx + 20"")
        val res1 = comp1.eval()
        Assert.assertEquals(63, res1)
        val res12 = comp2.eval()
        Assert.assertEquals(63, res12)
        engine.put(""z"", 44)
        val res2 = comp1.eval()
        Assert.assertEquals(74, res2)
        val res22 = comp2.eval()
        Assert.assertEquals(74, res22)
    }",,b4d2
fun testMultipleCompilable(),"{
        val engine = ScriptEngineManager().getEngineByExtension(""kts"") as KotlinJsr223ScriptEngineImpl
        val compiled1 = engine.compile(""""""listOf(1,2,3).joinToString("","")"""""")
        val compiled2 = engine.compile(""""""val x = bindings[""boundValue""] as Int + bindings[""z""] as Int"""""")
        val compiled3 = engine.compile(""""""x"""""")

        Assert.assertEquals(""1,2,3"", compiled1.eval())
        Assert.assertEquals(""1,2,3"", compiled1.eval())
        Assert.assertEquals(""1,2,3"", compiled1.eval())
        Assert.assertEquals(""1,2,3"", compiled1.eval())

        engine.getBindings(ScriptContext.ENGINE_SCOPE).apply {
            put(""boundValue"", 100)
            put(""z"", 33)
        }",,5246
fun testEvalWithContext(),"{
        val engine = ScriptEngineManager().getEngineByExtension(""kts"")!!

        engine.put(""z"", 33)

        engine.eval(""""""val x = 10 + bindings[""z""] as Int"""""")

        val result = engine.eval(""""""x + 20"""""")
        Assert.assertEquals(63, result)

        // in the current implementation the history is shared between contexts, so ""x"" could also be used in this line,
        // but this behaviour probably will not be preserved in the future, since contexts may become completely isolated
        val result2 = engine.eval(""""""11 + bindings[""boundValue""] as Int"""""", engine.createBindings().apply {
            put(""boundValue"", 100)
        }",,1645
fun testEvalWithContextDirect(),"{
        val engine = ScriptEngineManager().getEngineByExtension(""kts"")!!

        engine.put(""z"", 33)

        engine.eval(""val x = 10 + z"")

        val result = engine.eval(""x + 20"")
        Assert.assertEquals(63, result)

        // in the current implementation the history is shared between contexts, so ""x"" could also be used in this line,
        // but this behaviour probably will not be preserved in the future, since contexts may become completely isolated
        val result2 = engine.eval(""11 + boundValue"", engine.createBindings().apply {
            put(""boundValue"", 100)
        }",,ee9a
fun testEvalWithContextNamesWithSymbols(),"{
        val engine = ScriptEngineManager().getEngineByExtension(""kts"")!!

        engine.put(""\u263a"", 2)
        engine.put(""a.b"", 3)
        engine.put(""c:d"", 5)
        engine.put(""e;f"", 7)
        engine.put(""g\$h"", 11)
        engine.put(""i<j"", 13)
        engine.put(""k>l"", 17)
        engine.put(""m[n"", 19)
        engine.put(""o]p"", 23)
        engine.put(""q/r"", 29)
        engine.put(""s\\t"", 31)
        engine.put(""u v"", 37)
        engine.put("" "", 41)
        engine.put(""    "", 43)

        Assert.assertEquals(4, engine.eval(""`\u263a` * 2""))
        Assert.assertEquals(5, engine.eval(""2 + `a\\,b`""))
        Assert.assertEquals(2, engine.eval(""`a\\,b` - 1""))
        Assert.assertEquals(6, engine.eval(""1 + `c\\!d`""))
        Assert.assertEquals(7, engine.eval(""`e\\?f`""))
        Assert.assertEquals(11, engine.eval(""`g\\%h`""))
        Assert.assertEquals(13, engine.eval(""`i\\^j`""))
        Assert.assertEquals(17, engine.eval(""`k\\_l`""))
        Assert.assertEquals(19, engine.eval(""`m\\{n`""))
        Assert.assertEquals(23, engine.eval(""`o\\}",,f811
fun testSimpleEvalInEval(),"{
        val engine = ScriptEngineManager().getEngineByExtension(""kts"")!!
        val res1 = engine.eval(""val x = 3"")
        Assert.assertNull(res1)
        val res2 = engine.eval(""val y = eval(\""\$x + 2\"") as Int\ny"")
        Assert.assertEquals(5, res2)
        val res3 = engine.eval(""y + 2"")
        Assert.assertEquals(7, res3)
    }",,4775
No signature found,"fun `kotlin script evaluation should support functional return types`() {
        val scriptEngine = ScriptEngineManager().getEngineByExtension(""kts"")!!

        val script = ""{1 + 2}",,6e1f
fun testResolveFromContextStandard(),"{
        val scriptEngine = ScriptEngineManager().getEngineByExtension(""kts"")!!
        val result = scriptEngine.eval(""kotlin.script.experimental.jsr223.test.shouldBeVisibleFromRepl * 6"")
        Assert.assertEquals(42, result)
    }",,5c0d
fun testResolveFromContextLambda(),"{
        val scriptEngine = ScriptEngineManager().getEngineByExtension(""kts"")!!

        val script1 = """"""
            kotlin.script.experimental.jsr223.test.callLambda(4) { x -> 
                x % aValue
            }",,13a1
fun testResolveFromContextDirectExperimental(),"{
        val prevProp = System.setProperty(KOTLIN_JSR223_RESOLVE_FROM_CLASSLOADER_PROPERTY, ""true"")
        try {
            val scriptEngine = ScriptEngineManager().getEngineByExtension(""kts"")!!
            val result = scriptEngine.eval(""kotlin.script.experimental.jsr223.test.shouldBeVisibleFromRepl * 6"")
            Assert.assertEquals(42, result)
        }",,8f96
fun testInliningInJdk171(),"{
        val jdk17 = try {
            KtTestUtil.getJdk17Home()
        }",,4ac4
fun testEvalWithCompilationError(),"{
        val engine = ScriptEngineManager().getEngineByExtension(""kts"")
        val compilable: Compilable = engine as Compilable
        assertThrows(ScriptException::class.java) {
            compilable.compile(""foo"")
        }",,1004
No signature found,"fun assertThrows(exceptionClass: Class<*>, body: () -> Unit) {
    try {
        body()
        Assert.fail(""Expecting an exception of type ${exceptionClass.name}",,6e1f
No signature found,fun <R> withBareTypes(allowed: Boolean = t,,6e1f
No signature found,"fun <R> withIsOperandOfIsOperator(block: () -> R): R {
        val oldValue = isOperandOfIsOperator
        isOperandOfIsOperator = true
        return try {
            block()
        }",,6e1f
No signature found,"fun <R> withFile(file: FirFile?, block: FirSpecificTypeResolverTransformer.() -> R): R {
        val oldValue = currentFile
        currentFile = file
        return try {
            block()
        }",,6e1f
"fun transformTypeRef(typeRef: FirTypeRef, data: ScopeClassDeclaration)",": FirResolvedTypeRef {
        withBareTypes(allowed = false) {
            typeRef.transformChildren(this, data)
        }",,527b
"fun transformFunctionTypeRef(
        functionTypeRef: FirFunctionTypeRef,
        data: ScopeClassDeclaration
    )",": FirResolvedTypeRef {
        functionTypeRef.transformChildren(this, data)
        val resolvedTypeWithDiagnostic = resolveType(functionTypeRef, data)
        val resolvedType = resolvedTypeWithDiagnostic.type.takeIfAcceptable()
        val diagnostic = resolvedTypeWithDiagnostic.diagnostic
        return if (resolvedType != null && resolvedType !is ConeErrorType && diagnostic == null) {
            buildResolvedTypeRef {
                source = functionTypeRef.source
                type = resolvedType
                annotations += functionTypeRef.annotations
                delegatedTypeRef = functionTypeRef
            }",,7739
No signature found,"fun FirSpecificTypeResolverTransformer.resolveType(
        typeRef: FirTypeRef,
        scopeClassDeclaration: ScopeClassDeclaration,
    ): FirTypeResolutionResult {
        return typeResolver.resolveType(
            typeRef,
            scopeClassDeclaration,
            areBareTypesAllowed,
            isOperandOfIsOperator,
            resolveDeprecations,
            currentFile,
            supertypeSupplier
        )
    }",,6e1f
No signature found,"fun transformType(
        typeRef: FirTypeRef,
        resolvedType: ConeKotlinType,
        diagnostic: ConeDiagnostic?,
        scopeClassDeclaration: ScopeClassDeclaration,
    ): FirResolvedTypeRef {
        return when {
            resolvedType is ConeErrorType -> {
                buildErrorType(typeRef, resolvedType, resolvedType.diagnostic, scopeClassDeclaration)
            }",,6e1f
"fun buildErrorType(
        typeRef: FirTypeRef,
        resolvedType: ConeKotlinType,
        diagnostic: ConeDiagnostic,
        scopeClassDeclaration: ScopeClassDeclaration,
    )",": FirErrorTypeRef {
        return buildErrorTypeRef {
            val typeRefSourceKind = typeRef.source?.kind
            val diagnosticSource = (diagnostic as? ConeUnexpectedTypeArgumentsError)?.source

            source = if (diagnosticSource != null) {
                if (typeRefSourceKind is KtFakeSourceElementKind) {
                    diagnosticSource.fakeElement(typeRefSourceKind)
                }",,a3d0
No signature found,"fun smallestUnresolvablePrefix(
        qualifiers: List<FirQualifierPart>,
        partiallyResolvedTypeRef: FirResolvedTypeRef?,
    ): List<FirQualifierPart> {
        val totalQualifierCount = qualifiers.size
        val resolvedQualifierCount = (partiallyResolvedTypeRef?.delegatedTypeRef as? FirUserTypeRef)?.qualifier?.size
            ?: calculatePartiallyResolvablePackageSegments(qualifiers)

        val unresolvedQualifierCount = totalQualifierCount - resolvedQualifierCount

        return if (unresolvedQualifierCount > 1) {
            qualifiers.dropLast(unresolvedQualifierCount - 1)
        }",,6e1f
"fun tryCalculatingPartiallyResolvedTypeRef(typeRef: FirTypeRef, data: ScopeClassDeclaration)",": FirResolvedTypeRef? {
        if (typeRef !is FirUserTypeRef) return null
        val qualifiers = typeRef.qualifier
        if (qualifiers.size <= 1) {
            return null
        }",,6c55
fun calculatePartiallyResolvablePackageSegments(qualifiers: List<FirQualifierPart>),": Int {
        if (qualifiers.size <= 1) {
            return 0
        }",,5502
No signature found,fun ConeKotlinType.takeIfAcceptable(): ConeKotlinType? = t,,6e1f
"fun transformResolvedTypeRef(resolvedTypeRef: FirResolvedTypeRef, data: ScopeClassDeclaration)",": FirTypeRef {
        return resolvedTypeRef
    }",,2ce7
"fun transformErrorTypeRef(errorTypeRef: FirErrorTypeRef, data: ScopeClassDeclaration)",": FirTypeRef {
        errorTypeRef.transformPartiallyResolvedTypeRef(this, data)
        return errorTypeRef
    }",,2f78
"fun transformImplicitTypeRef(implicitTypeRef: FirImplicitTypeRef, data: ScopeClassDeclaration)",": FirTypeRef {
        return implicitTypeRef
    }",,47ce
"fun transformValueParameter(valueParameter: FirValueParameter, data: ScopeClassDeclaration)",": FirStatement {
        val result = transformElement(valueParameter, data)
        result.defaultValue?.let {
            it.resultType = ConeErrorType(ConeUnsupportedDefaultValueInFunctionType(it.source))
        }",,16ec
fun foo(),": X<String?>?
}

class Test : IFoo {
    override : X<String?>? = X(null)
}","// WITH_STDLIB
// WORKS_WHEN_VALUE_CLASS
// IGNORE_BACKEND: JS_IR, JS_IR_ES6
// LANGUAGE: +ValueClasses, +GenericInlineClassParameter",519f
fun box(),": String {
    val t1: IFoo = Test()
    val x1 = t1.foo()
    if (x1 != X(null)) throw AssertionError(""x1: $x1"")

    val t2 = Test()
    val x2 = t2.foo()
    if (x2 != X(null)) throw AssertionError(""x2: $x2"")

    return ""OK""
}",,4f27
fun enabledTargets(platformManager: PlatformManager),= p,,a899
No signature found,fun NonNullNativePtr.toNativePtr() = t,,6e1f
No signature found,fun NativePtr.toNonNull(): NonNullNativePtr = t,,6e1f
No signature found,"fun <reified T : CVariable> typeOf() =
        @",,6e1f
No signature found,"fun <reified T : NativePointed> interpretNullablePointed(ptr: NativePtr): T? {
    if (ptr == nativeNullPtr) {
        return null
    }",,6e1f
No signature found,"fun <T : CPointed> interpretCPointer(rawValue: NativePtr) =
        i",,6e1f
No signature found,"fun CPointer<*>.cPointerToString() = """,,6e1f
"fun doTestByMainFile(mainFile: KtFile, mainModule: KtTestModule, testServices: TestServices)","{
        val project = mainFile.project

        val resolveSession = mainModule.ktModule.getFirResolveSession(project)
        val firFile = mainFile.getOrBuildFirFile(resolveSession)

        val firCodeFragment = firFile.codeFragment
        firCodeFragment.lazyResolveToPhase(FirResolvePhase.BODY_RESOLVE)

        val frontendDiagnostics = mainFile.collectDiagnosticsForFile(resolveSession, DiagnosticCheckerFilter.ONLY_COMMON_CHECKERS)
        val frontendErrors = frontendDiagnostics.filter { it.severity == Severity.ERROR }",,5016
fun configureTest(builder: TestConfigurationBuilder),"{
        super.configureTest(builder)
        with(builder) {
            defaultDirectives {
                +ConfigurationDirectives.WITH_STDLIB
            }",,2608
No signature found,"fun case_1(x: Int?) {
    if (x?.inv() != null) {
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Int & kotlin.Int?"")!>x<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Int & kotlin.Int?""), DEBUG_INFO_SMARTCAST!>x<!>.inv()
    }","// !DIAGNOSTICS: -UNUSED_EXPRESSION
// SKIP_TXT",6e1f
No signature found,"fun case_2(x: Int?) {
    if (x?.inv() == null) else if (true) {}",,6e1f
No signature found,"fun case_3(x: Boolean?) {
    if (x?.not() == null) else {
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Boolean & kotlin.Boolean?"")!>x<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Boolean & kotlin.Boolean?""), DEBUG_INFO_SMARTCAST!>x<!>.not()
    }",,6e1f
No signature found,"fun case_4(x: EnumClass?) {
    if (x?.fun_1() !== null) {
        <!DEBUG_INFO_EXPRESSION_TYPE(""EnumClass & EnumClass?"")!>x<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""EnumClass & EnumClass?""), DEBUG_INFO_SMARTCAST!>x<!>.fun_1()
    }",,6e1f
No signature found,"fun case_5(x: Class.NestedClass?) {
    if (x?.prop_4 != null) {
        <!DEBUG_INFO_EXPRESSION_TYPE(""Class.NestedClass & Class.NestedClass?"")!>x<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""Class.NestedClass & Class.NestedClass?""), DEBUG_INFO_SMARTCAST!>x<!>.prop_4
    }",,6e1f
No signature found,"fun case_6(x: Class.NestedClass?) {
    if (!(x?.prop_4 == null)) {
        <!DEBUG_INFO_EXPRESSION_TYPE(""Class.NestedClass & Class.NestedClass?"")!>x<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""Class.NestedClass & Class.NestedClass?""), DEBUG_INFO_SMARTCAST!>x<!>.prop_4
    }",,6e1f
No signature found,"fun case_7(x: DeepObject.A.B.C.D.E.F.G.J?) {
    if (!!(x?.prop_1 != null)) {
        <!DEBUG_INFO_EXPRESSION_TYPE(""DeepObject.A.B.C.D.E.F.G.J & DeepObject.A.B.C.D.E.F.G.J?"")!>x<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""DeepObject.A.B.C.D.E.F.G.J & DeepObject.A.B.C.D.E.F.G.J?""), DEBUG_INFO_SMARTCAST!>x<!>.prop_1
    }",,6e1f
No signature found,"fun case_8(x: Any?) {
    if (x?.equals(10) === null) else {
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Any & kotlin.Any?"")!>x<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Any & kotlin.Any?""), DEBUG_INFO_SMARTCAST!>x<!>.equals(10)
    }",,6e1f
No signature found,"fun case_9(x: Any?) {
    if (x?.equals(10) !== null) {
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Any & kotlin.Any?"")!>x<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Any & kotlin.Any?""), DEBUG_INFO_SMARTCAST!>x<!>.equals(10)
    }",,6e1f
No signature found,"fun case_10(x: Interface3?) {
    if (x?.itest() == null == true) else {
        <!DEBUG_INFO_EXPRESSION_TYPE(""Interface3?"")!>x<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""Interface3?"")!>x<!><!UNSAFE_CALL!>.<!>itest()
        <!DEBUG_INFO_EXPRESSION_TYPE(""Interface3?"")!>x<!><!UNSAFE_CALL!>.<!>itest3()
    }",,6e1f
No signature found,"fun case_11(x: SealedMixedChildObject1?) {
    if (x?.prop_1 != null == true) {
        <!DEBUG_INFO_EXPRESSION_TYPE(""SealedMixedChildObject1?"")!>x<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""SealedMixedChildObject1?"")!>x<!><!UNSAFE_CALL!>.<!>prop_1
        <!DEBUG_INFO_EXPRESSION_TYPE(""SealedMixedChildObject1?"")!>x<!><!UNSAFE_CALL!>.<!>prop_2
    }",,6e1f
No signature found,"fun <reified T>case_12(x: Any?) {
    if (x?.equals(10) != null) {
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Any & kotlin.Any?"")!>x<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Any & kotlin.Any?""), DEBUG_INFO_SMARTCAST!>x<!>.equals(10)
    }",,6e1f
No signature found,"fun <reified T>case_13(x: Any?) {
    if (x?.equals(10) == null) {}",,6e1f
No signature found,"fun <reified T>case_14(x: Any?) {
    if (x?.equals(10) === null) else {
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Any & kotlin.Any?"")!>x<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Any & kotlin.Any?""), DEBUG_INFO_SMARTCAST!>x<!>.equals(10)
    }",,6e1f
No signature found,"fun <reified T>case_15(x: Any?) {
    if (x?.equals(10) !== null) {
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Any & kotlin.Any?"")!>x<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Any & kotlin.Any?""), DEBUG_INFO_SMARTCAST!>x<!>.equals(10)
    }",,6e1f
No signature found,"fun <reified T>case_16(x: Any?) {
    if (x?.equals(10) === null == true) else {
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Any?"")!>x<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Any?"")!>x<!><!UNSAFE_CALL!>.<!>equals(10)
    }",,6e1f
No signature found,"fun <reified T>case_17(x: Any?) {
    if (x?.equals(10) !== null == true) {
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Any?"")!>x<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Any?"")!>x<!><!UNSAFE_CALL!>.<!>equals(10)
    }",,6e1f
No signature found,"fun <reified T>case_18(x: Any?) {
    if (<!DEPRECATED_IDENTITY_EQUALS!>x?.equals(10) === null === true<!>) else {
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Any?"")!>x<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Any?"")!>x<!><!UNSAFE_CALL!>.<!>equals(10)
    }",,6e1f
No signature found,"fun <reified T>case_19(x: Any?) {
    if (<!DEPRECATED_IDENTITY_EQUALS!>x?.equals(10) !== null === true<!>) {
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Any?"")!>x<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Any?"")!>x<!><!UNSAFE_CALL!>.<!>equals(10)
    }",,6e1f
No signature found,"fun <reified T>case_20(x: Any?) {
    if (<!DEPRECATED_IDENTITY_EQUALS!>x?.equals(10) === null !== false<!>) else {
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Any?"")!>x<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Any?"")!>x<!><!UNSAFE_CALL!>.<!>equals(10)
    }",,6e1f
No signature found,"fun <reified T>case_21(x: Any?) {
    if (<!DEPRECATED_IDENTITY_EQUALS!>x?.equals(10) !== null !== false<!>) {
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Any?"")!>x<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Any?"")!>x<!><!UNSAFE_CALL!>.<!>equals(10)
    }",,6e1f
No signature found,"fun <reified T>case_22(x: Any?) {
    if (<!DEPRECATED_IDENTITY_EQUALS!>x?.equals(10) !== null !== true<!>) else {
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Any?"")!>x<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Any?"")!>x<!><!UNSAFE_CALL!>.<!>equals(10)
    }",,6e1f
No signature found,"fun <reified T>case_23(x: Any?) {
    if (<!DEPRECATED_IDENTITY_EQUALS!>x?.equals(10) === null === false<!>) {
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Any?"")!>x<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Any?"")!>x<!><!UNSAFE_CALL!>.<!>equals(10)
    }",,6e1f
No signature found,"fun <reified T>case_24(x: Any?) {
    if (x?.equals(10) !== null != true) else {
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Any?"")!>x<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Any?"")!>x<!><!UNSAFE_CALL!>.<!>equals(10)
    }",,6e1f
No signature found,"fun <reified T>case_25(x: Any?) {
    if (x?.equals(10) === null == false) {
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Any?"")!>x<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Any?"")!>x<!><!UNSAFE_CALL!>.<!>equals(10)
    }",,6e1f
No signature found,"fun <reified T>case_26(x: Any?) {
    if (<!DEPRECATED_IDENTITY_EQUALS!>x?.equals(10) != null === false<!>) else {
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Any?"")!>x<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Any?"")!>x<!><!UNSAFE_CALL!>.<!>equals(10)
    }",,6e1f
No signature found,"fun <reified T>case_27(x: Any?) {
    if (<!DEPRECATED_IDENTITY_EQUALS!>x?.equals(10) == null === false<!>) {
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Any?"")!>x<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Any?"")!>x<!><!UNSAFE_CALL!>.<!>equals(10)
    }",,6e1f
No signature found,"fun <reified T>case_28(x: Any?) {
    if (x?.equals(10) != null == false) else {
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Any?"")!>x<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Any?"")!>x<!><!UNSAFE_CALL!>.<!>equals(10)
    }",,6e1f
No signature found,"fun <reified T>case_29(x: Any?) {
    if (x?.equals(10) == null == false) {
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Any?"")!>x<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Any?"")!>x<!><!UNSAFE_CALL!>.<!>equals(10)
    }",,6e1f
No signature found,"fun case_30(x: Class.NestedClass?) {
    if (x?.prop_4 != null == true) {
        <!DEBUG_INFO_EXPRESSION_TYPE(""Class.NestedClass?"")!>x<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""Class.NestedClass?"")!>x<!><!UNSAFE_CALL!>.<!>prop_4
    }",,6e1f
No signature found,"fun case_31(x: Class.NestedClass?) {
    if (!(x?.prop_4 == null) != false) {
        <!DEBUG_INFO_EXPRESSION_TYPE(""Class.NestedClass?"")!>x<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""Class.NestedClass?"")!>x<!><!UNSAFE_CALL!>.<!>prop_4
    }",,6e1f
No signature found,"fun case_32(x: Class.NestedClass?) {
    if (x?.prop_4 == null == false) {
        <!DEBUG_INFO_EXPRESSION_TYPE(""Class.NestedClass?"")!>x<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""Class.NestedClass?"")!>x<!><!UNSAFE_CALL!>.<!>prop_4
    }",,6e1f
No signature found,"fun case_33(x: Class.NestedClass?) {
    if (!(x?.prop_4 != null) != true) {
        <!DEBUG_INFO_EXPRESSION_TYPE(""Class.NestedClass?"")!>x<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""Class.NestedClass?"")!>x<!><!UNSAFE_CALL!>.<!>prop_4
    }",,6e1f
fun invoke(),"fun interface FunInterface {
    
}",,0a26
fun id(f: FunInterface),: Any = f,,804b
fun box(),": String {
    if (id { ""lambda"" }",,4f27
fun condition(),": Boolean;
}

fun box(): String {
    val local = """"
    var result = ""fail""
    val s = object: WaitFor() {

        override : Boolean {
            result = ""OK""
            return result.length== 2
        }",,f377
fun box(),": String {
    val result = A(23).s
    if (result != ""OK"") return ""fail: $result""
    if (log != ""logged"") return ""fail log: $log""

    return ""OK""
}",,4f27
fun box(),= O,"// IGNORE_BACKEND_K2: JS_IR, JS_IR_ES6, WASM
// K2 issue: KT-64801",4f27
fun listOfStar(),: List<*> = t,,f3ae
No signature found,"fun getValue(thisRef: Any?, kProp: Any?) = v","// FIR_IDENTICAL
// !LANGUAGE: -ProperForInArrayLoopRangeVariableAssignmentSemantic
// !DIAGNOSTICS: -UNUSED_VALUE
// SKIP_TXT",6e1f
No signature found,"fun setValue(thisRef: Any?, kProp: Any?, value: T) { v = value }",,6e1f
fun testLocalDelegatedProperty(),"{
    var xs by Delegate(arrayOf(""a"", ""b"", ""c""))
    for (x in xs) {
        println(x)
        xs = arrayOf(""d"", ""e"", ""f"")
    }",,9e30
No signature found,"fun foo(s : String?, b : Boolean) {
    if (s == null) return

    val s1 = if (b) """" else <!DEBUG_INFO_SMARTCAST!>s<!>
    s1 checkType { _<String>() }",// !CHECK_TYPE,6e1f
fun build(),": FirReturnExpression {
        return FirReturnExpressionImpl(
            source,
            annotations.toMutableOrEmpty(),
            target,
            result,
        )
    }",,5bf9
No signature found,"fun buildReturnExpression(init: FirReturnExpressionBuilder.() -> Unit): FirReturnExpression {
    contract {
        callsInPlace(init, InvocationKind.EXACTLY_ONCE)
    }",,6e1f
fun append(s: String),": String {
  collector = s;
  return collector;
}",,a7e5
fun appendTo(s: String),"=
   f",// LAMBDAS: INDY,710b
fun box(),= a,,4f27
No signature found,fun foo(block: () -> String) = b,"// NO_CHECK_LAMBDA_INLINING
// IGNORE_BACKEND: JVM
// IGNORE_BACKEND_MULTI_MODULE: JVM, JVM_MULTI_MODULE_IR_AGAINST_OLD
// FILE: 1.kt",6e1f
fun bar(),= f,,66c3
fun local(),= l,,cb31
No signature found,fun localInline(block: (String) -> String) = b,,6e1f
fun box(),= b,,4f27
No signature found,"fun <T : Int, K> resolve<caret>Me() {}",,6e1f
No signature found,"fun expectOrder(at: String, expected: String, body: () -> Unit) {
    order = StringBuilder() // have to do that in order to run this test in JS
    body()
    if (order.toString() != expected) throw AssertionError(""$at: expected: $expected, actual: $order"")
}","// WITH_STDLIB
// JVM_ABI_K1_K2_DIFF: KT-63864",6e1f
fun low(i: Int),": Int {
    order.append(""L"")
    return i
}",,ab20
fun high(i: Int),": Int {
    order.append(""H"")
    return i
}",,0ce0
fun x(i: Int),": Int {
    order.append(""X"")
    return i
}",,5f6a
fun minValue(),= I,,a517
fun box(),": String {
    expectOrder(""x(0) in (low(1) until high(3)).reversed()"", ""LHX"") { assertFalse(x(0) in (low(1) until high(3)).reversed()) }",,4f27
"fun test(c1: C1<Box<Box<Box<Int>>>>, c2: C2)","{
    val v = select(c1, c2)
    <!DEBUG_INFO_EXPRESSION_TYPE(""{I1<*> & I2<*>}",// !DIAGNOSTICS: -UNUSED_PARAMETER -UNUSED_EXPRESSION,e9b8
fun <S> select(vararg args: S),: S = T,,baca
fun foo(),"= ""","// NO_COMMON_FILES
// EXPECTED_REACHABLE_NODES: 1283
// MODULE: lib
// FILE: a.kt",519f
fun bar(),"= """,,66c3
fun baz(),"= """,,b22f
fun box(),": String {
    val r = foo() + bar() + baz()

    if (r != ""foobarbaz"") return ""fail: $r""

    return ""OK""
}",,4f27
fun baz(i: Int),= i,"// FIR_IDENTICAL
// !DIAGNOSTICS: -UNUSED_PARAMETER, -UNUSED_VARIABLE",c274
fun <T> bar(x: T),: T = T,,21d9
fun nullableFun(),: ((Int) -> Int)? = n,,e36b
fun test(),"{
    val x1: (Int) -> Int = bar(if (true) ::baz else ::baz)
    val x2: (Int) -> Int = bar(nullableFun() ?: ::baz)
    val x3: (Int) -> Int = bar(::baz <!USELESS_ELVIS!>?: ::baz<!>)

    val i = 0
    val x4: (Int) -> Int = bar(when (i) {
                                   10 -> ::baz
                                   20 -> ::baz
                                   else -> ::baz
                               }",,fe98
fun test(),"{
    val buildee = build {
        setTypeVariable(TargetType())
        consumeDifferentType(<!RECEIVER_TYPE_MISMATCH(""DifferentType; TargetType"")!>extensionReplaceOutProjectedTypeVariable<!>(DifferentType()))
    }","// ISSUE: KT-55056
// CHECK_TYPE_WITH_EXACT",fe98
fun consumeDifferentType(value: DifferentType),{},"// exact type equality check — turns unexpected compile-time behavior into red code
    // considered to be non-user-reproducible code for the purposes of these tests",1ec3
fun setTypeVariable(value: TV),{ storage = value },,7aec
fun getTypeVariable(),: TV = s,,ce1a
No signature found,"fun <ETV> Buildee<out ETV>.extensionReplaceOutProjectedTypeVariable(value: ETV): ETV {
    return null!!
}",,6e1f
No signature found,"fun <PTV> build(instructions: Buildee<PTV>.() -> Unit): Buildee<PTV> {
    return Buildee<PTV>().apply(instructions)
}",,6e1f
fun protectedFun(),= p,,7a27
"fun produceAdditionalFiles(globalDirectives: RegisteredDirectives, module: TestModule)",": List<TestFile> {
        val boxTestRunFile = File(""wasm/wasm.tests/wasiBoxTestRun.kt"")
        return listOf(boxTestRunFile.toTestFile())
    }",,5d19
"fun produceAdditionalFiles(globalDirectives: RegisteredDirectives, module: TestModule)",": List<TestFile> {
        if (WasmEnvironmentConfigurationDirectives.NO_COMMON_FILES in module.directives) return emptyList()
        // For multiplatform projects, add the files only to common modules with no dependencies.
        if (module.languageVersionSettings.supportsFeature(LanguageFeature.MultiPlatformProjects) &&
            module.allDependencies.isNotEmpty()) {
            return emptyList()
        }",,5d19
"fun getFilesInDirectoryByExtension(directory: String, extension: String)",": List<String> {
            val dir = File(directory)
            if (!dir.isDirectory) return emptyList()

            return dir.listFiles(FileFilter { it.extension == extension }",,91f2
"fun getAdditionalFiles(directory: String, extension: String)",": List<File> {
            val globalCommonFiles = getFilesInDirectoryByExtension(COMMON_FILES_DIR_PATH, extension).map { File(it) }",,cc62
fun getAdditionalKotlinFiles(directory: String),": List<File> {
            return getAdditionalFiles(directory, KotlinFileType.EXTENSION)
        }",,3447
fun getMemberScope(symbol: KtSymbolWithMembers),": List<KtDeclarationSymbol>

    public object ALL : KtRendererBodyMemberScopeProvider {
        context(KtAnalysisSession)
        override : List<KtDeclarationSymbol> {
            return symbol.getCombinedDeclaredMemberScope().getAllSymbols().toList()
        }",,cf2e
fun getMemberScope(symbol: KtSymbolWithMembers),": List<KtDeclarationSymbol> {
            return symbol.getCombinedDeclaredMemberScope().getAllSymbols()
                .filter { member ->
                    val origin = member.origin
                    origin != KtSymbolOrigin.DELEGATED &&
                            origin != KtSymbolOrigin.SOURCE_MEMBER_GENERATED &&
                            origin != KtSymbolOrigin.SUBSTITUTION_OVERRIDE &&
                            origin != KtSymbolOrigin.INTERSECTION_OVERRIDE
                }",,cf2e
fun getMemberScope(symbol: KtSymbolWithMembers),": List<KtDeclarationSymbol> {
            return emptyList()
        }",,cf2e
No signature found,fun test1(x: <!DEPRECATION!>Obsolete<!>) = x,// FIR_IDENTICAL,6e1f
No signature found,fun test1a(x: List<<!DEPRECATION!>Obsolete<!>>) = x,,6e1f
fun foo(),= x,,519f
fun use(first: First),= f,,bf9b
fun bar(),= f,,66c3
fun foo(),": String
}

fun use(second: Second) = s",,519f
fun foo(),= y,,519f
fun bitMaskWith(activeBit: Int),": BitMask {
    val numberIndex = activeBit shr 5
    val intArray = IntArray(numberIndex + 1)
    val positionInNumber = activeBit and 31
    val numberWithSettledBit = 1 shl positionInNumber
    intArray[numberIndex] = intArray[numberIndex] or numberWithSettledBit
    return intArray
}",,e72c
No signature found,"fun BitMask.isBitSet(possibleActiveBit: Int): Boolean {
    val numberIndex = possibleActiveBit shr 5
    if (numberIndex > size) return false
    val positionInNumber = possibleActiveBit and 31
    val numberWithSettledBit = 1 shl positionInNumber
    return get(numberIndex) and numberWithSettledBit != 0
}",,6e1f
"fun compositeBitMask(capacity: Int, masks: Array<BitMask>)",": BitMask {
    return IntArray(capacity) { i ->
        var result = 0
        for (mask in masks) {
            if (i < mask.size) {
                result = result or mask[i]
            }",,ca4c
fun implement(interfaces: Array<dynamic>),": BitMask {
    var maxSize = 1
    val masks = js(""[]"")

    for (i in interfaces) {
        var currentSize = maxSize
        val imask: BitMask? = i.prototype.`$imask$` ?: i.`$imask$`

        if (imask != null) {
            masks.push(imask)
            currentSize = imask.size
        }",,64df
fun setS(value: String),{ s = value },"// WITH_STDLIB

// FILE: lateinit.kt",46f7
fun getS(),= s,,1491
fun box(),": String {
    var str2: String = """"
    try {
        str2 = C.getS()
        return ""Should throw an exception""
    }",,4f27
"fun check(expression: FirStatement, context: CheckerContext, reporter: DiagnosticReporter)","{
        val sourceKind = expression.source?.kind
        if (sourceKind is KtFakeSourceElementKind.DataClassGeneratedMembers ||
            sourceKind is KtFakeSourceElementKind.PropertyFromParameter
        ) return

        if (expression.isLhsOfAssignment(context)) return

        val resolvedSymbol = expression.toReference(context.session)?.toResolvedBaseSymbol() ?: return

        with(FirOptInUsageBaseChecker) {
            when {
                expression is FirVariableAssignment -> {
                    val experimentalities = resolvedSymbol.loadExperimentalities(context, fromSetter = true, null) +
                            loadExperimentalitiesFromTypeArguments(context, emptyList())
                    reportNotAcceptedExperimentalities(experimentalities, expression.lValue, context, reporter)
                }",,4977
fun foo1(),{};,,d289
fun foo(),"{
        class A1;
        val x = 1;
    }",,519f
fun bar(),";

    init {};",,66c3
No signature found,"fun foo;
val;
class B {
    val;
    init;
    constructor;
}",,6e1f
fun getName(),= n,,4692
"fun addCommonSourceSetToPlatformSourceSet(commonSourceSet: Named, platformProject: Project)","{
        val commonSourceSetName = commonSourceSet.name

        platformProject.konanMultiplatformTasks
            .filter { it.commonSourceSets.contains(commonSourceSetName) }",,12f5
fun namedSourceSetsContainer(project: Project),": NamedDomainObjectContainer<*> =
        p",,90ec
fun box(),": String {
    if (0u in u_1_10) throw AssertionError()
    if (1u !in u_1_10) throw AssertionError()
    if (5u !in u_1_10) throw AssertionError()
    if (10u !in u_1_10) throw AssertionError()
    if (20u in u_1_10) throw AssertionError()

    if (0UL in ul_1_10) throw AssertionError()
    if (1UL !in ul_1_10) throw AssertionError()
    if (5UL !in ul_1_10) throw AssertionError()
    if (10UL !in ul_1_10) throw AssertionError()
    if (20UL in ul_1_10) throw AssertionError()

    if (0u !in minUI_maxUI) throw AssertionError()
    if (MinUI !in minUI_maxUI) throw AssertionError()
    if (MaxUI !in minUI_maxUI) throw AssertionError()

    if (0UL !in minUL_maxUL) throw AssertionError()
    if (MinUL !in minUL_maxUL) throw AssertionError()
    if (MaxUL !in minUL_maxUL) throw AssertionError()

    if (0UL in m1_m2) throw AssertionError()
    if (1UL in m1_m2) throw AssertionError()
    if (10UL in m1_m2) throw AssertionError()
    if (M1 !in m1_m2) throw AssertionError()
    if (M1+1UL !in m1_m2) throw AssertionError()
    if (M2 !in m1_m2) throw AssertionError()

    return ""OK""
}",// WITH_STDLIB,4f27
fun zero(),= 0,"// ALLOW_KOTLIN_PACKAGE
// !DIAGNOSTICS: -UNUSED_PARAMETER
// SKIP_TXT
// FILE: test.kt",92e7
"fun apiVersionIsAtLeast(epic: Int, major: Int, minor: Int)",": Boolean =
        f",,6b2d
fun <reified T> foo (i2: Any),": Boolean {
    return i2 is T
}",,f6e6
fun bar(i1: Int),": Boolean {
    return foo<Double>(i1)
}",,2569
fun box(),": String {
    assertFalse(bar(1))
    return ""OK""
}",,4f27
fun box(),": String {
    // kotlin.Nothing should not be loaded here
    return (if (null is Nothing?) ""O"" else ""FAIL1"") + (if (null !is Nothing) ""K"" else ""FAIL2"")
}",,4f27
fun copy(),": IrOverridableMember {
        val typeParameters = HashMap<IrTypeParameterSymbol, IrTypeParameterSymbol>()
        val valueParameters = HashMap<IrValueParameterSymbol, IrValueParameterSymbol>()

        val copier = FakeOverrideCopier(
            valueParameters,
            typeParameters,
            FakeOverrideTypeRemapper(typeParameters, substitution),
            parentClass,
            unimplementedOverridesStrategy
        )

        return when (overridableMember) {
            is IrSimpleFunction -> copier.copySimpleFunction(overridableMember)
            is IrProperty -> copier.copyProperty(overridableMember)
            else -> error(""Unsupported member: ${overridableMember.render()}",,5070
fun enterScope(irTypeParametersContainer: IrTypeParametersContainer),{},,cedf
fun leaveScope(),{},,fd49
fun remapTypeArguments(arguments: List<IrTypeArgument>),"=
            a",,31b3
No signature found,"fun IrType.mergeTypeAnnotations(other: IrType): IrType {
            // Flexible types are represented as a type annotation in IR, so we need to keep it when substituting type during override.
            // Note that it's incorrect to merge _all_ type annotations though, because for a Collection subclass:
            //
            //     abstract class Z : Collection<Int>
            //
            // `Z.contains` should have the signature `(Int) -> Boolean`, NOT `(@UnsafeVariance Int) -> Boolean` which would occur if we
            // copied all type annotations.
            return addAnnotations(buildList {
                for (fqName in TYPE_ANNOTATIONS_TO_MERGE) {
                    addIfNotNull(other.annotations.findAnnotation(fqName))
                }",,6e1f
fun remapType(type: IrType),": IrType {
            if (type !is IrSimpleType) return type

            return when (val substitutedType = substitution[type.classifier]) {
                is IrDynamicType -> substitutedType
                is IrSimpleType -> substitutedType.mergeNullability(type).mergeTypeAnnotations(type)
                else -> type.buildSimpleType {
                    kotlinType = null
                    classifier = remapClassifier(type.classifier)
                    arguments = remapTypeArguments(type.arguments)
                    annotations = type.copyAnnotations()
                }",,c73b
fun remapClassifier(classifier: IrClassifierSymbol),": IrClassifierSymbol =
            i",,3805
fun foo(),: A = A,,519f
fun box(),": String {
    val a: A = foo()
    val b: Boolean
    when (a) {
        A.B -> b = true
        is A.C -> b = false
    }",,4f27
fun testPlus(),"{
    val x = 1 + 2
    val y = 3.0 + 4.0
    val z = 5 + 6.0
    val w = 7.0 + 8
    val c = 'a' + 1
    val s = ""."" + ""..""
    val ss = """" + 1
    val list = listOf(1, 2, 3) + 4
    val listAndList = listOf(4, 5, 6) + listOf(7, 8)
    val mutableList = mutableListOf(9, 10) + listOf(11, 12, 13)
    val setAndList = setOf(0) + listOf(1, 2)
    val stringAndList = """" + emptyList<Boolean>()
    val map = mapOf("""" to 1, ""."" to 2) + ("".."" to 3)
    val mapAndMap = mapOf(""-"" to 4) + mapOf(""_"" to 5)
}",// FULL_JDK,f5d0
fun <T> id(arg: T),: T = a,,dbcc
fun testMap(),"{
    val first = listOf(1, 2, 3).map { it * 2 }",,ecb0
fun testWith(),"{
    val length = with("""") { length }",,8082
No signature found,"fun <T> block(t: T, f: T.() -> Unit) {
    f.invoke(t)
}","// LANGUAGE: +LightweightLambdas
// TARGET_BACKEND: JVM_IR",6e1f
fun test(),"{
    block(""first"") place1@ {
        block(""second"") place2@ {
            // Breakpoint here
            this@place1
            this@place2
        }",,fe98
fun isFunctionalInterfaceType(type: KtType),": Boolean {
        require(type is KtFe10Type)
        return JavaSingleAbstractMethodUtils.isSamType(type.fe10Type)
    }",,b49d
fun getFunctionClassKind(type: KtType),": FunctionTypeKind? {
        require(type is KtFe10Type)
        return type.fe10Type.constructor.declarationDescriptor?.getFunctionTypeKind()
    }",,f666
fun canBeNull(type: KtType),": Boolean {
        require(type is KtFe10Type)
        return TypeUtils.isNullableType(type.fe10Type)
    }",,18bf
fun isDenotable(type: KtType),": Boolean {
        require(type is KtFe10Type)
        val kotlinType = type.fe10Type
        return kotlinType.isDenotable()
    }",,9c2a
fun isArrayOrPrimitiveArray(type: KtType),": Boolean {
        require(type is KtFe10Type)
        return KotlinBuiltIns.isArrayOrPrimitiveArray(type.fe10Type)
    }",,f2ed
fun isNestedArray(type: KtType),": Boolean {
        if (!isArrayOrPrimitiveArray(type)) return false
        require(type is KtFe10Type)
        val unwrappedType = type.fe10Type
        val elementType = unwrappedType.constructor.builtIns.getArrayElementType(unwrappedType)
        return KotlinBuiltIns.isArrayOrPrimitiveArray(elementType)
    }",,134e
fun fullyExpandedType(type: KtType),: KtType = t,/** Expanded by default */,5bee
No signature found,"fun KotlinType.isDenotable(): Boolean {
        if (this is DefinitelyNotNullType) return false
        return constructor.isDenotable &&
                constructor.declarationDescriptor?.name != SpecialNames.NO_NAME_PROVIDED &&
                arguments.all { it.type.isDenotable() }",,6e1f
No signature found,"fun compilerOptions(configure: CO.() -> Unit) {
        configure(compilerOptions)
    }",,6e1f
fun compilerOptions(configure: Action<CO>),"{
        configure.execute(compilerOptions)
    }","/**
     * Configures the [compilerOptions] with the provided configuration.
     */",5d0b
fun bar(),{},,66c3
No signature found,"fun String.substringAfterWithDelimiter(delimiter: String, missingDelimiterValue: String = t",,6e1f
No signature found,"fun getMutedTest(testClass: Class<*>, methodKey: String): MutedTest? {
    return mutedSet.mutedTest(testClass, methodKey)
}",,6e1f
fun loadMutedTests(file: File),": List<MutedTest> {
    if (!file.exists()) {
        System.err.println(""Can't find mute file: ${file.absolutePath}",,e21b
fun parseMutedTest(str: String),": MutedTest {
    val matchResult = MUTE_LINE_PARSE_REGEXP.matchEntire(str) ?: throw ParseError(""Can't parse the line: $str"")
    val resultValues = matchResult.groups.filterNotNull()

    val testKey = resultValues[1].value
    val issue = resultValues[2].value
    val stateStr = resultValues[3].value
    val statusStr = resultValues[4].value

    val hasFailFile = when (stateStr) {
        ""MUTE"", """" -> false
        ""FAIL"" -> true
        else -> throw ParseError(""Invalid state (`$stateStr`), MUTE, FAIL or empty are expected: $str"")
    }",,31a5
fun flakyTests(file: File),: List<MutedTest> = l,,8aad
fun accept(visitor: Visitor),"abstract fun visitChildren(visitor: Visitor)
    open fun storageNode(): Node = t",,1595
fun visitChildren(visitor: Visitor),{ },,e261
fun accept(visitor: Visitor),= v,,1595
fun accept(visitor: Visitor),= v,,1595
fun visitChildren(visitor: Visitor),"{
        walk(type.parameters, visitor)
        walk(body, visitor)
    }",,e261
fun toString(),": String = """,,a535
fun accept(visitor: Visitor),= v,,1595
fun visitChildren(visitor: Visitor),"{
        walk(target, visitor)
        walk(arguments, visitor)
    }",,e261
fun toString(),": String =
        """,,a535
fun accept(visitor: Visitor),= v,,1595
fun toString(),= n,,a535
fun accept(visitor: Visitor),= v,,1595
fun visitChildren(visitor: Visitor),= w,,e261
fun toString(),"= """,,a535
fun accept(visitor: Visitor),= v,,1595
fun visitChildren(visitor: Visitor),"{
        walk(type.parameters, visitor)
        walk(body, visitor)
    }",,e261
fun toString(),": String = """,,a535
No signature found,"fun $name: $type { ${body.joinToString("";"") }",,6e1f
fun accept(visitor: Visitor),= v,,1595
"fun bind(binding: Map<OpenType, Type>, context: MutableMap<Type, Type>)",": Type
    open fun toScheme(selfIndex: Int, index: Int = -",,eac2
fun toScheme(),: Scheme? = t,,352e
"fun bind(binding: Map<OpenType, Type>)",": Type {
        val context = mutableMapOf<Type, Type>()
        return bind(binding, context)
    }",,41ce
"fun bindOrNull(binding: Map<OpenType, Type>, context: MutableMap<Type, Type>)",": Type? {
        val boundType = bind(binding, context)
        return if (boundType == this) null else boundType
    }",,0943
fun inferredScheme(),: Scheme? = a,,41b4
fun toScheme(),: Scheme = t,,352e
"fun toScheme(selfIndex: Int, index: Int)",": Scheme =
        i",,6cd3
"fun bind(binding: Map<OpenType, Type>, context: MutableMap<Type, Type>)",": Type =
        c",,eac2
fun toString(),: String = b,,a535
"fun bind(binding: Map<OpenType, Type>, context: MutableMap<Type, Type>)","=
        b",,eac2
fun toString(),": String = """,,a535
"fun bind(binding: Map<OpenType, Type>, context: MutableMap<Type, Type>)",: Type = t,,eac2
fun toString(),": String = """,,a535
fun visit(annotation: Annotation),"fun visit(lambda: Lambda)
    fun visit(call: Call)
    fun visit(ref: Ref)
    fun visit(variable: Variable)
    fun visit(function: Function)
    fun visit(parameter: Parameter)
}

open class EmptyVisitor : Visitor {
    override  { }",,76e7
fun visit(lambda: Lambda),{ },,b722
fun visit(call: Call),{ },,f742
fun visit(ref: Ref),{ },,3c57
fun visit(variable: Variable),{ },,0b1f
fun visit(function: Function),{ },,2dd8
fun visit(parameter: Parameter),{ },,81f1
fun visit(call: Call),"{
        super.visit(call)
        walkChildren(call, this)
    }",,f742
fun visit(function: Function),"{
        super.visit(function)
        walkChildren(function, this)
    }",,2dd8
fun visit(lambda: Lambda),"{
        super.visit(lambda)
        walkChildren(lambda, this)
    }",,b722
fun visit(variable: Variable),"{
        super.visit(variable)
        walkChildren(variable, this)
    }",,0b1f
"fun walk(node: Node, visitor: Visitor)","{
    node.accept(visitor)
}",,c0a6
"fun walkChildren(node: Node, visitor: Visitor)","{
    node.visitChildren(visitor)
}",,722c
No signature found,"fun <N : Node> walk(nodes: List<N>, visitor: Visitor) {
    for (node in nodes)
        node.accept(visitor)
}",,6e1f
fun typeOf(ref: Ref),": ResolvedType {
        val name = ref.name
        map[name]?.let { return it }",,5f88
fun component1(),= n,,fd7c
fun component2(),= t,,e66b
No signature found,fun Node.resolvesTo(type: Type) = R,,6e1f
"fun resolve(data: Map<String, Function>)",": Resolutions {
    val resolvedNodes = mutableMapOf<Node, ResolvedType>()

    val rootScope = Scope(
        data.entries.associate { (name, function) ->
            name to (function resolvesTo function.type)
        }",,fd47
"fun parameterScope(type: FunctionType, parent: Scope)",": Scope =
        i",,35a2
"fun typeOf(node: Node, scope: Scope)",": ResolvedType {
        return resolvedNodes[node] ?: when (node) {
            is Ref -> scope.typeOf(node)
            is Lambda -> node resolvesTo node.type
            is Call -> node resolvesTo callTypeOfRef(node, scope).type
            else -> error(""Invalid call target $node"")
        }",,f9a8
"fun callTypeOf(call: Call, scope: Scope)",": ResolvedType {
        val targetTypeInfo = typeOf(call.target, scope)
        val targetFunctionType = targetTypeInfo.type as FunctionType
        return if (targetFunctionType.isOpen) {
            val variableBindings = mutableMapOf<OpenType, Type>()
            targetFunctionType.parameters.forEachIndexed { index, p ->
                val parameterType = p.type
                if (parameterType is OpenType) {
                    val value = call.arguments[index]
                    val valueType = typeOf(value, scope)
                    variableBindings[parameterType] = valueType.type
                }",,89cd
No signature found,"fun <T> inScope(newScope: Scope, block: () -> T): T {
            val previous = scope
            scope = newScope
            return block().also { scope = previous }",,6e1f
fun visit(call: Call),"{
                    walkChildren(call, this)
                    val callType = callTypeOf(call, scope)
                    val functionType = callType.type as FunctionType
                    val result = call resolvesTo functionType.result
                    resolvedNodes[call] = result
                    resolvedCalls[call] = ResolvedCall(
                        target = callType,
                        arguments = call.arguments.map { typeOf(it, scope) }",,f742
fun visit(variable: Variable),"{
                    walkChildren(variable, this)
                    resolvedNodes[variable] =
                        variable resolvesTo typeOf(variable.initializer, scope).type
                    scope = Scope(
                        mapOf(
                            variable.name to (
                                variable resolvesTo typeOf(variable.initializer, scope).type
                            )
                        ),
                        scope
                    )
                }",,0b1f
fun visit(lambda: Lambda),"{
                    inScope(parameterScope(lambda.type, scope)) {
                        walkChildren(lambda, this)
                    }",,b722
fun visit(function: Function),"{
                    walkChildren(function, this)
                }",,2dd8
fun visit(ref: Ref),"{
                    resolvedNodes[ref] = typeOf(ref, scope)
                }",,3c57
"fun containersOf(data: Map<String, Function>)",": Map<Node, Node> {
    val result = mutableMapOf<Node, Node>()
    val currentContainer = mutableListOf<Node>()
    for (function in data.values) {
        currentContainer.add(function)
        walk(
            function,
            object : EmptyVisitor() {
                override fun visit(parameter: Parameter) {
                    result[parameter] = currentContainer.last()
                }",,161f
fun visit(function: Function),"{
                    result[function] = currentContainer.last()
                    currentContainer.add(function)
                    walkChildren(function, this)
                    currentContainer.removeLast()
                }",,2dd8
fun visit(call: Call),"{
                    result[call] = currentContainer.last()
                    walkChildren(call, this)
                }",,f742
fun visit(lambda: Lambda),"{
                    result[lambda] = currentContainer.last()
                    currentContainer.add(lambda)
                    walkChildren(lambda, this)
                    currentContainer.remove(lambda)
                }",,b722
fun visit(variable: Variable),"{
                    result[variable] = currentContainer.last()
                    walkChildren(variable, this)
                }",,0b1f
fun visit(ref: Ref),"{
                    result[ref] = currentContainer.last()
                }",,3c57
No signature found,"fun <T> List<T>.sameContentAs(other: List<T>) =
    o",,6e1f
No signature found,"fun <K, V> Map<K, V>.toPairs() =
    e",,6e1f
No signature found,"fun List<Annotation>.item(): Item? =
    f",,6e1f
fun composableLambda(),= F,,5945
"fun call(name: String, vararg args: Node)",= C,,6cbb
fun lambda(vararg body: Node),= L,,14cd
fun openTarget(index: Int),= l,,e508
No signature found,fun clear(byteByffer: java.nio.ByteBuffer) = b,"// JDK_RELEASE: 12
// CHECK_BYTECODE_TEXT
// 1 public final static clear\(Ljava/nio/ByteBuffer;\)Ljava/nio/ByteBuffer;
// 1 INVOKEVIRTUAL java/nio/ByteBuffer.clear \(\)Ljava/nio/ByteBuffer;",6e1f
fun box(),": String {
    if (clear(java.nio.ByteBuffer.allocateDirect(10)).capacity() != 10) return ""fail""
    return ""OK""
}",,4f27
fun baz(s: CPointer<JSContext>),"{
    println(s)
}",,f2fb
fun box(),": String {
    baz(bar()!!)
    return ""OK""
}",,4f27
fun invoke(),= t,,0a26
No signature found,fun C.invoke(): B = B,,6e1f
fun foo(arg: A),": B? {
    if (arg is B) return arg()

    if (arg is C) return arg()

    return null
}",,0f7c
No signature found,"fun List<FirExpression>.toAnnotationUseSiteTargets2(): Set<AnnotationUseSiteTarget> =
    f",// WITH_STDLIB,6e1f
fun test1(),: B = <,,fa3b
fun test2(),: B = <,,30bb
fun main(),"{
     val list = <!UNRESOLVED_REFERENCE!>mutable<!> <!DEBUG_INFO_MISSING_UNRESOLVED!>ListOf<!><!SYNTAX!><<!><!DEBUG_INFO_MISSING_UNRESOLVED!>Int<!><!SYNTAX!>><!>(1) {}",// !DIAGNOSTICS: -UNUSED_VARIABLE,d987
fun getDescriptorByPath(path: String),": ModuleDescriptor {
        return stdlibPathToDescriptor[path] ?: testServices.assertions.fail {
            ""There is no library with path $path""
        }",,0e72
"fun setDescriptorAndLibraryByName(name: String, descriptor: ModuleDescriptor, library: KotlinLibrary)","{
        stdlibPathToDescriptor[name] = descriptor
        descriptorToLibrary[descriptor] = library
    }",,57e3
fun getCompiledLibraryByDescriptor(descriptor: ModuleDescriptor),": KotlinLibrary {
        return descriptorToLibrary[descriptor] ?: testServices.assertions.fail {
            ""There is no library for descriptor ${descriptor.name}",,7e35
fun getPathByDescriptor(descriptor: ModuleDescriptor),": String {
        return stdlibPathToDescriptor.entries.single { it.value == descriptor }",,eb08
fun getDescriptorByCompiledLibrary(library: KotlinLibrary),": ModuleDescriptor {
        return descriptorToLibrary.filterValues { it == library }",,6159
No signature found,"fun getOrCreateStdlibByPath(path: String, create: (String) -> Pair<ModuleDescriptor, KotlinLibrary>): ModuleDescriptor {
        return stdlibPathToDescriptor.getOrPut(path) {
            create(path).let {
                descriptorToLibrary += it
                it.first
            }",,6e1f
"fun test(m: MyMap<EditorData, Any>)","{
    m.set(SomeKey) { _, _ -> }",// ISSUE: KT-56714,6160
No signature found,"fun processClassifiersByNameWithSubstitution(name: Name, processor: (FirClassifierSymbol<*>, ConeSubstitutor) -> Unit) {
        processClassifiersByNameWithSubstitutionFromBothLevelsConditionally(name) { symbol, substitutor ->
            processor(symbol, substitutor)
            true
        }",,6e1f
No signature found,"fun processClassifiersByNameWithSubstitutionFromBothLevelsConditionally(
        name: Name,
        processor: (FirClassifierSymbol<*>, ConeSubstitutor) -> Boolean,
    ) {
        var wasFoundAny = false
        first.processClassifiersByNameWithSubstitution(name) { symbol, substitutor ->
            wasFoundAny = processor(symbol, substitutor)
        }",,6e1f
No signature found,"fun <S : FirCallableSymbol<*>> processSymbolsByName(
        name: Name,
        processingFactory: FirScope.(Name, (S) -> Unit) -> Unit,
        processor: (S) -> Unit,
    ) {
        var wasFoundAny = false
        first.processingFactory(name) {
            wasFoundAny = true
            processor(it)
        }",,6e1f
No signature found,"fun processFunctionsByName(name: Name, processor: (FirNamedFunctionSymbol) -> Unit) {
        processSymbolsByName(name, FirScope::processFunctionsByName, processor)
    }",,6e1f
No signature found,"fun processPropertiesByName(name: Name, processor: (FirVariableSymbol<*>) -> Unit) {
        processSymbolsByName(name, FirScope::processPropertiesByName, processor)
    }",,6e1f
No signature found,"fun processDeclaredConstructors(processor: (FirConstructorSymbol) -> Unit) {
        var wasFoundAny = false
        first.processDeclaredConstructors { symbol ->
            wasFoundAny = true
            processor(symbol)
        }",,6e1f
"fun check(expression: FirQualifiedAccessExpression, context: CheckerContext, reporter: DiagnosticReporter)","{
        checkReifiedTypeParameters(expression, context, reporter)

        val calleeSymbols = extractModuleCalleeSymbols(expression)
        for ((calleeSymbol, source) in calleeSymbols) {
            checkJsModuleUsage(calleeSymbol, context, reporter, source ?: expression.source)
        }",,478b
"fun extractModuleCalleeSymbols(
        expression: FirQualifiedAccessExpression
    )",": List<Pair<FirBasedSymbol<*>, AbstractKtSourceElement?>> {
        val calleeSymbol = expression.calleeReference.toResolvedBaseSymbol()
        if (calleeSymbol != null && calleeSymbol.getContainingClassSymbol(calleeSymbol.moduleData.session) == null) {
            return listOf(calleeSymbol to expression.calleeReference.source)
        }",,1c82
"fun checkReifiedTypeParameters(expr: FirQualifiedAccessExpression, context: CheckerContext, reporter: DiagnosticReporter)","{
        (expr as? FirFunctionCall)?.forAllReifiedTypeParameters { type, typeArgument ->
            val typeArgumentClass = type.toRegularClassSymbol(context.session) ?: return@forAllReifiedTypeParameters
            val source = typeArgument.source ?: expr.calleeReference.source ?: expr.source
            checkJsModuleUsage(typeArgumentClass, context, reporter, source)
        }",,2ad4
fun foo(),"{
        class E
        val x: Inner = Inner()
    }","// FIR_IDENTICAL
// !DIAGNOSTICS: -UNUSED_VARIABLE -UNUSED_PARAMETER",519f
No signature found,"fun bar(x: <!OUTER_CLASS_ARGUMENTS_REQUIRED(""class 'Outer'"")!>Inner<!>) {}",,6e1f
No signature found,"fun bar(x: <!OUTER_CLASS_ARGUMENTS_REQUIRED(""class 'Outer'"")!>Inner<!>) {}",,6e1f
No signature found,"fun Z.test() {
    aVal
    aVar
    aVar = 42
    aVar++

    """".extVal
    """".extVar
    """".extVar = 42
    """".extVar++
}","// !LANGUAGE: +InlineClasses

// FILE: Z.kt",6e1f
No signature found,"fun `test - all implementations of KotlinTarget - implement InternalKotlinTarget`() {
        assertAllImplementationsAlsoImplement(KotlinTarget::class, InternalKotlinTarget::class)
    }",,6e1f
No signature found,"fun `KotlinTarget sourceSets are equal to extension sourceSets`() {
        val project = buildProjectWithMPP {
            kotlin {
                jvm()
            }",,6e1f
fun test(),"{
        val x = <expr>indirectPointer</expr>
    }",,fe98
"fun Rgba(r: Int, g: Int, b: Int, a: Int)",": Rgba {
    return Rgba(
        ((r and 0xFF) shl 0) or ((g and 0xFF) shl 8) or ((b and 0xFF) shl 16) or ((a and 0xFF) shl 24)
    )
}","// WITH_STDLIB
// WORKS_WHEN_VALUE_CLASS
// LANGUAGE: +ValueClasses",215a
No signature found,fun Rgba.withR(r: Int) = R,,6e1f
No signature found,fun Rgba.withG(g: Int) = R,,6e1f
No signature found,fun Rgba.withB(b: Int) = R,,6e1f
No signature found,fun Rgba.withA(a: Int) = R,,6e1f
fun get(index: Int),: Rgba = R,,60cf
"fun set(index: Int, color: Rgba)","{
        array[index] = color.value
    }",,6eb3
fun box(),": String {
    val result1 = RgbaArray(32)
    val result2 = RgbaArray(IntArray(32))
    val color = Rgba(128, 128, 0, 255)
    result1[0] = color.withG(64).withA(0)
    result2[0] = color.withG(64).withA(0)
    if (result1[0].value != result2[0].value) return ""Fail 1""
    if (result1[0].value != 16512) return ""Fail 2""

    return ""OK""
}",,4f27
"fun check(declaration: FirTypeAlias, context: CheckerContext, reporter: DiagnosticReporter)","{
        if (!context.languageVersionSettings.supportsFeature(LanguageFeature.MultiPlatformProjects) ||
            !context.languageVersionSettings.supportsFeature(LanguageFeature.MultiplatformRestrictions)
        ) {
            return
        }",,281b
No signature found,"fun getMembersWithDefaultValueParametersUnlessAnnotation(classSymbol: FirClassSymbol<*>): List<FirFunctionSymbol<*>> {
        val result = mutableListOf<FirFunctionSymbol<*>>()

        fun collectFunctions(classSymbol: FirClassSymbol<*>) {
            if (classSymbol.classKind == ClassKind.ANNOTATION_CLASS) {
                return
            }",,6e1f
No signature found,fun String.removeDoubleQuotes() = r,,6e1f
fun parseCompoundName(value: String),= A,,c382
fun parseQualifiedName(value: String),": AbiQualifiedName =
        w",,8d20
fun test(a: A),"{
    val (<!INVISIBLE_REFERENCE!>p1<!>, <!INVISIBLE_REFERENCE!>p2<!>) = a // ok, but INVISIBLE_MEMBER is expected
}",// ISSUE: KT-58184,a3e0
fun iterator(),= r,// FULL_JDK,c20a
fun iterator(),= r,,c20a
fun plus(n: Int),": T
    fun next(): T = t","// IGNORE_BACKEND: JVM
// WITH_STDLIB
// WORKS_WHEN_VALUE_CLASS
// LANGUAGE: +ValueClasses, +GenericInlineClassParameter",7131
fun plus(n: Int),: A<Int> = A,,7131
fun box(),": String {
    val res = A(1).next()
    return if (res.value == 2) ""OK"" else ""FAIL $res""
}",,4f27
fun foo(),{},,519f
No signature found,fun A.bar() = <,,6e1f
No signature found,fun runNoInline(f: () -> Unit) = f,,6e1f
fun test(),"{
    var x = 1
    runNoInline { ++x }",,fe98
"fun approximateDeclarationType(baseType: KotlinType, local: Boolean)",": UnwrappedType {
        if (!languageVersionSettings.supportsFeature(LanguageFeature.NewInference)) return baseType.unwrap()

        val configuration = if (local) TypeApproximatorConfiguration.LocalDeclaration else TypeApproximatorConfiguration.PublicDeclaration.SaveAnonymousTypes
        val preparedType = if (local) baseType.unwrap() else substituteAlternativesInPublicType(baseType)
        return approximateToSuperType(preparedType, configuration) ?: preparedType
    }",,2884
"fun approximateToSuperType(type: UnwrappedType, conf: TypeApproximatorConfiguration)",": UnwrappedType? =
        s","// null means that this input type is the result, i.e. input type not contains not-allowed kind of types
    // type <: resultType",5060
"fun approximateToSubType(type: UnwrappedType, conf: TypeApproximatorConfiguration)",": UnwrappedType? =
        s",,8564
"fun approximateTo(type: UnwrappedType, conf: TypeApproximatorConfiguration, toSuperType: Boolean)",": UnwrappedType? =
        i",,1052
No signature found,fun String.k(s: String) = t,"// TARGET_BACKEND: JVM
// JVM_TARGET: 1.8
// SAM_CONVERSIONS: INDY

// CHECK_BYTECODE_TEXT
// JVM_IR_TEMPLATES
// 1 java/lang/invoke/LambdaMetafactory

// FILE: boundExtFun.kt",6e1f
fun box(),= S,,4f27
No signature found,fun B.invoke(i: Int) = i,,6e1f
fun foo(i: Int),= i,,9471
No signature found,"fun test(a: A?) {
    a?.b(1) //should be no warning
    foo(<!TYPE_MISMATCH!>a?.b(1)<!>) //no warning, only error
}",,6e1f
No signature found,"fun expectOrder(at: String, expected: String, body: () -> Unit) {
    order = StringBuilder() // have to do that in order to run this test in JS
    body()
    if (order.toString() != expected) {
        throw AssertionError(""$at: expected: '$expected', actual: '$order'"")
    }","// WITH_STDLIB
// JVM_ABI_K1_K2_DIFF: KT-63864",6e1f
fun compareTo(other: Z),": Int {
        order.append(""c:$x,${other.x}",,f9d3
fun z(i: Int),": Z {
    order.append(""z:$i "")
    return Z(i)
}",,7016
"fun zr(i: Int, j: Int)",= z,,faf9
fun box(),": String {
    expectOrder(""#1"",  ""z:1 z:3 z:0 c:0,1 "") { z(0) in z(1) .. z(3) }",,4f27
fun nameForDeclaration(descriptor: DeclarationDescriptor),": Name

    object DEFAULT : NameProvider {
        override : Name = descriptor.name
    }",,1afd
No signature found,fun <T> functionWithTAndAnyValue(otherVal: T & Any) {},// DECLARATION_TYPE: org.jetbrains.kotlin.psi.KtNamedFunction,6e1f
fun accept(t: T),"fun interface IFoo<T> where T : U, T : W {
    
}",,9f41
"fun <T> sel(x: T, y: T)",= x,,5364
fun check(x: IFoo<in T>),{},,68d5
fun test(),"{
    val g = sel(G<A>(), G<B>())
    g.check {}",,fe98
fun iterator(),= e,,c20a
fun isSafeEnvVar(name: String),": Boolean {
        if (name in SAFE_ENV_VARS) return true
        if (isUnsafeVariableName(name)) return false

        return KONAN_WORD in name
                || SAFE_ENV_VAR_PREFIXES.any { prefix -> name.startsWith(prefix, ignoreCase = true) }",,0e6f
fun iterator(),= p,,c20a
fun isSafeProperty(name: String),": Boolean {
            if (name in SUPPRESSED_PROPERTIES || isUnsafeVariableName(name)) return false

            return SAFE_PROPERTY_PREFIXES.any { prefix -> name.startsWith(prefix) }",,9433
fun isUnsafeVariableName(name: String),= n,,097d
fun doEscape(value: String),= i,,8333
fun beforeLoop(),"{
        super.beforeLoop()

        storeRangeStartAndEnd()
    }",,df42
fun storeRangeStartAndEnd(),"override fun checkEmptyLoop(loopExit: Label) {
        loopParameter().put(asmElementType, elementType, v)
        v.load(endVar, asmElementType)

        if (step > 0) {
            comparisonGenerator.jumpIfGreater(v, loopExit)
        }",,51fa
fun assignToLoopParameter(),{},,f6cc
fun checkPostConditionAndIncrement(loopExit: Label),"{
        checkPostCondition(loopExit)

        incrementLoopVariable()
    }",,ebe1
fun incrementLoopVariable(),"{
        if (loopParameterType === Type.INT_TYPE) {
            v.iinc(loopParameterVar, step)
        }",,2ea3
fun testSealed(m: MySealedInterface),": String {
    return when (m) {
        is OneSealedChild -> ""1""
        is TwoSealedChild -> ""2""
    }",,347e
fun foo(t: Type),"{

    }",,5101
"fun invoke(
        compiledScript: CompiledScript,
        scriptEvaluationConfiguration: ScriptEvaluationConfiguration
    )",": ResultWithDiagnostics<EvaluationResult> {
        try {
            if (compiledScript !is KJvmCompiledScript)
                return failure(""Cannot generate classes: unsupported compiled script type $compiledScript"")
            val module = (compiledScript.getCompiledModule() as? KJvmCompiledModuleInMemory)
                ?: return failure(""Cannot generate classes: unsupported module type ${compiledScript.getCompiledModule()}",,c802
No signature found,"fun KJvmCompiledScript.saveToJar(outputJar: File) {
    val module = (getCompiledModule() as? KJvmCompiledModuleInMemory)
        ?: throw IllegalArgumentException(""Unsupported module type ${getCompiledModule()}",,6e1f
No signature found,fun File.loadScriptFromJar(checkMissingDependencies: Boolean = t,,6e1f
"fun invoke(
        compiledScript: CompiledScript,
        scriptEvaluationConfiguration: ScriptEvaluationConfiguration
    )",": ResultWithDiagnostics<EvaluationResult> {
        try {
            if (compiledScript !is KJvmCompiledScript)
                return failure(""Cannot generate jar: unsupported compiled script type $compiledScript"")
            compiledScript.saveToJar(outputJar)
            return ResultWithDiagnostics.Success(EvaluationResult(ResultValue.NotEvaluated, scriptEvaluationConfiguration))
        }",,c802
fun getScriptOrError(),: KJvmCompiledScript = l,,04c6
No signature found,"fun getClass(scriptEvaluationConfiguration: ScriptEvaluationConfiguration?): ResultWithDiagnostics<KClass<*>> {
        if (loadedScript == null) {
            val actualEvaluationConfiguration = scriptEvaluationConfiguration ?: ScriptEvaluationConfiguration()
            val baseClassLoader = actualEvaluationConfiguration[ScriptEvaluationConfiguration.jvm.baseClassLoader]
            val loadDependencies = actualEvaluationConfiguration[ScriptEvaluationConfiguration.jvm.loadDependencies]!!
            val classLoader = URLClassLoader(
                classPath.let { if (loadDependencies) it else it.take(1) }",,6e1f
fun failure(msg: String),"=
    R",,6831
No signature found,"fun test1(
    a: <!UNSUPPORTED!>Array<Nothing><!>,
    b: <!UNSUPPORTED!>Array<Nothing?><!>,
    c: <!UNSUPPORTED!>Array<in Nothing><!>,
    d: <!UNSUPPORTED!>Array<in Nothing?><!>,
    e: <!UNSUPPORTED!>Array<out Nothing><!>,
    f: <!UNSUPPORTED!>Array<out Nothing?><!>,
    g: C<String, <!UNSUPPORTED!>Array<Nothing><!>>,
    h: A<D<<!UNSUPPORTED!>Array<Nothing><!>>>
) {
    <!UNSUPPORTED!>A<!><D<<!UNSUPPORTED!>Array<Nothing><!>>>()
}","// !DIAGNOSTICS: -UNUSED_PARAMETER -UNUSED_VARIABLE -UNCHECKED_CAST -USELESS_CAST
// !LANGUAGE: +ProhibitNonReifiedArraysAsReifiedTypeArguments",6e1f
No signature found,"fun test2(
    a: <!UNSUPPORTED!>Array<Nothing><!>?,
    b: <!UNSUPPORTED!>Array<Nothing?><!>?,
    c: <!UNSUPPORTED!>Array<in Nothing><!>?,
    d: <!UNSUPPORTED!>Array<in Nothing?><!>?,
    e: <!UNSUPPORTED!>Array<out Nothing><!>?,
    f: <!UNSUPPORTED!>Array<out Nothing?><!>?
) {}",,6e1f
No signature found,"fun test3(
    a: A<<!UNSUPPORTED!>Array<Nothing><!>>,
    b: A<<!UNSUPPORTED!>Array<Nothing?><!>>,
    c: A<<!UNSUPPORTED!>Array<in Nothing><!>>,
    d: A<<!UNSUPPORTED!>Array<in Nothing?><!>>,
    e: A<<!UNSUPPORTED!>Array<out Nothing><!>>,
    f: A<<!UNSUPPORTED!>Array<out Nothing?><!>>
) {}",,6e1f
No signature found,"fun test4(
    a: Array<A<Nothing>>,
    b: Array<A<Nothing?>>,
    c: Array<A<in Nothing>>,
    d: Array<A<in Nothing?>>,
    e: Array<A<out Nothing>>,
    f: Array<A<out Nothing?>>
) {}",,6e1f
fun test5(),"{
    <!UNSUPPORTED!>arrayOf<!><<!REIFIED_TYPE_FORBIDDEN_SUBSTITUTION!>Nothing<!>>()
    <!UNSUPPORTED!>Array<!><<!REIFIED_TYPE_FORBIDDEN_SUBSTITUTION!>Nothing<!>>(10) { throw Exception() }",,aa19
fun <T> foo(),: Array<T> = (,,d4d8
fun test6(),= <,,1831
fun <T> bar(),= B,,db0b
fun test7(),= <,,0099
fun <T> foo(a: T),": B?
}

// MODULE: m2(m1)
// FILE: b.kt
package p

public interface C : B {
    override : B?

}","// FIR_IDENTICAL
// !DIAGNOSTICS: -UNNECESSARY_SAFE_CALL -SAFE_CALL_WILL_CHANGE_NULLABILITY

// MODULE: m1
// FILE: a.kt",2720
fun <T> foo(a: T),": B?
}

// MODULE: m4(m3, m2)
// FILE: c.kt
import p.*

fun test(b: B?) {
    if (b is C) {
        b?.foo<String>("""")
    }","// MODULE: m3
// FILE: b.kt",2720
No signature found,"fun test1(b: B?) {
    if (b is C) {
        b?.foo("""")
    }",,6e1f
fun function(),{},,972c
fun empty(),{},// !LANGUAGE: +InlineClasses,084d
fun withParam(a: String),{},,d7f2
fun withInlineClassParam(f: Foo),{},,e536
fun test(),"{
        empty()
        withParam(""hello"")
        withInlineClassParam(this)
    }",,fe98
fun matchIterable(expression: IrCall),": Boolean {
        val callee = expression.symbol.owner
        if (callee.valueParameters.isNotEmpty() || callee.name.asString() != ""withIndex"") return false

        return when (callee.kotlinFqName.asString()) {
            ""kotlin.collections.withIndex"" ->
                callee.extensionReceiverParameter?.type?.run {
                    isArray() || isPrimitiveArray() || isIterable() ||
                            (supportsUnsignedArrays && isUnsignedArray())
                }",,5a36
No signature found,"fun build(expression: IrCall, data: Nothing?, scopeOwner: IrSymbol): HeaderInfo? {
        // WithIndexHeaderInfo is a composite that contains the HeaderInfo for the underlying iterable (if any).
        val nestedInfo = expression.extensionReceiver!!.accept(visitor, null) ?: return null

        // We cannot lower `iterable.withIndex().withIndex()`.
        // NestedHeaderInfoBuilderForWithIndex should not be yielding a WithIndexHeaderInfo, hence the assert.
        assert(nestedInfo !is WithIndexHeaderInfo)

        return WithIndexHeaderInfo(nestedInfo)
    }",,6e1f
fun box(),": String {
    assertEquals(TestEnumClass.ZERO.x, 0)

    return ""OK""
}",// WITH_STDLIB,4f27
fun bar(),: String? = n,"// !DIAGNOSTICS: -UNUSED_VARIABLE
// FULL_JDK",66c3
fun hashMapTest(),"{
    var x: HashMap<String?, Int> = HashMap<String?, Int>()
    x.put(null, <!NULL_FOR_NONNULL_TYPE!>null<!>)
    x.put("""", <!NULL_FOR_NONNULL_TYPE!>null<!>)
    x.put(bar(), 1)
    x.put("""", 1)

    x[null] = 1
    x[bar()] = 1
    x[""""] = <!ARGUMENT_TYPE_MISMATCH!>nullableInt<!>
    x[""""] = 1
    x[""""] = <!NULL_FOR_NONNULL_TYPE!>null<!>

    val b1: MutableMap<String?, Int?> = <!INITIALIZER_TYPE_MISMATCH!>x<!>
    val b2: MutableMap<String?, Int> = x
    val b3: Map<String?, Int> = x
    val b4: Map<String?, Int?> = x
    val b5: Map<String, Int?> = <!INITIALIZER_TYPE_MISMATCH!>x<!>

    val b6: Int = <!INITIALIZER_TYPE_MISMATCH, TYPE_MISMATCH!>x[""""]<!>
    val b7: Int = <!INITIALIZER_TYPE_MISMATCH, TYPE_MISMATCH!>x[null]<!>
    val b8: Int = <!INITIALIZER_TYPE_MISMATCH, TYPE_MISMATCH!>x.get("""")<!>

    val b9: Int? = x.get("""")
}",,5d7f
fun treeMapTest(),"{
    var x: TreeMap<String?, Int> = TreeMap<String?, Int>()
    x.put(null, <!NULL_FOR_NONNULL_TYPE!>null<!>)
    x.put("""", <!NULL_FOR_NONNULL_TYPE!>null<!>)
    x.put(bar(), 1)
    x.put("""", 1)

    x[null] = 1
    x[bar()] = 1
    x[""""] = <!ARGUMENT_TYPE_MISMATCH!>nullableInt<!>
    x[""""] = 1

    val b1: MutableMap<String?, Int?> = <!INITIALIZER_TYPE_MISMATCH!>x<!>
    val b2: MutableMap<String?, Int> = x
    val b3: Map<String?, Int> = x
    val b4: Map<String?, Int?> = x
    val b5: Map<String, Int?> = <!INITIALIZER_TYPE_MISMATCH!>x<!>

    val b6: Int = <!INITIALIZER_TYPE_MISMATCH, TYPE_MISMATCH!>x[""""]<!>
    val b7: Int = <!INITIALIZER_TYPE_MISMATCH, TYPE_MISMATCH!>x.get("""")<!>

    val b8: Int? = x.get("""")
}",,0d71
fun Foo(),= 4,,14da
fun Bar(),= 2,,a84f
fun En(),= 2,,bfec
fun ENTRY(),= 4,,96e4
fun SUBCLASS(),= E,,20fb
fun f(),"{

    }",// LANGUAGE: -StopPropagatingDeprecationThroughOverrides,f6fb
fun f(),"{

    }",,f6fb
fun f(),"{

    }",,f6fb
fun f(),"{

    }",,f6fb
No signature found,"fun <!OVERRIDE_DEPRECATION!>f<!>() {

    }",,6e1f
No signature found,"fun <!OVERRIDE_DEPRECATION!>f<!>() {

    }",,6e1f
No signature found,"fun <!OVERRIDE_DEPRECATION!>f<!>() {

    }",,6e1f
fun f(),"{

    }",,f6fb
fun f(),"{

    }",,f6fb
fun f(),"{

    }",,f6fb
No signature found,"fun <!OVERRIDE_DEPRECATION!>f<!>() {

    }",,6e1f
fun f(),"{

    }",,f6fb
fun f(),"{
    }",,f6fb
No signature found,"fun <!OVERRIDE_DEPRECATION!>f<!>() {
    }",,6e1f
No signature found,"fun <!OVERRIDE_DEPRECATION!>f<!>() {
    }",,6e1f
fun f(),"{
        super.<!DEPRECATION!>f<!>()
    }",,f6fb
"fun use(
        wd: WarningDeprecated, ed: ErrorDeprecated, hd: HiddenDeprecated,
        we: WE, wh: WH, eh: EH, nw: NW, ne: NE, nh: NH,
        weh: WEH, nweh: NWEH,
        we2: WE2, nwe2: NWE2, nwe3: NWE3,
        e2: E2, w2: W2, ew2: EW2, hew2: HEW2,
        explicitError: ExplicitError
)","{
    wd.<!DEPRECATION!>f<!>()
    ed.<!DEPRECATION_ERROR!>f<!>()
    hd.<!UNRESOLVED_REFERENCE!>f<!>()

    we.<!DEPRECATION!>f<!>()
    wh.<!DEPRECATION!>f<!>()
    eh.<!DEPRECATION_ERROR!>f<!>()

    nw.f()
    ne.f()
    nh.f()

    weh.<!DEPRECATION!>f<!>()
    nweh.f()

    we2.<!DEPRECATION!>f<!>()
    nwe2.f()
    nwe3.f()

    e2.<!DEPRECATION_ERROR!>f<!>()
    w2.<!DEPRECATION!>f<!>()
    ew2.<!DEPRECATION!>f<!>()
    hew2.<!DEPRECATION!>f<!>()

    explicitError.<!DEPRECATION_ERROR!>f<!>()
}",,99c4
"fun <R, D> accept(visitor: IrElementVisitor<R, D>, data: D)",": R =
        v",,af8a
fun remove(key: Boolean),": Boolean? {
        return false
    }","// SKIP_KT_DUMP
// TARGET_BACKEND: JVM
// FULL_JDK
// WITH_STDLIB
// SEPARATE_SIGNATURE_DUMP_FOR_K2
// ^ ISSUE: KT-65667

// FILE: Java1.java",ac0d
fun remove(key: Boolean),": Boolean {
        return true
    }",,ac0d
fun remove(key: Any),": Boolean {
        return true
    }",,82ce
No signature found,"fun remove(key: Boolean?): Boolean? {
        return true
    }",,6e1f
fun remove(key: Boolean),": Boolean {
        return true
    }",,ac0d
fun remove(key: Boolean),": Boolean? {
        return null
    }",,ac0d
fun remove(key: Any),": Boolean
}

interface KotlinInterface2 : SortedMap<Boolean, Boolean>

interface KotlinInterface3 : MutableMap<Boolean, Boolean>

fun test(a: A, b: B, c: C, d: D, e: E, f: F, i: I, j: J, k: K, l: L, m: M, n: N) {
    a.size
    a.remove(null)
    a.remove(true)

    b.size
    b.remove(null)
    b.remove(true)

    c.size
    c.remove(null)
    c.remove(true)
    c.remove("""")

    d.size
    d.remove(true)
    d.remove("""")

    e.size
    e.remove(true)
    e.remove("""")
    e.remove(null)

    f.size
    f.remove(true)
    f.remove("""")
    f.remove(null)

    i.size
    i.remove(null)
    i.remove(true)
    i.remove("""")

    j.size
    j.remove(null)
    j.remove(true)
    j.remove("""")

    k.size
    k.remove(null)
    k.remove(true)
    k.remove("""")

    l.size
    l.remove(null)
    l.remove(true)
    l.remove("""")

    m.size
    m.remove(null)
    m.remove(true)
    m.remove("""")

    n.size
    n.remove(null)
    n.remove(true)
    n.remove("""")
}",,82ce
fun box(),": String {
    val i2 = I2ImplHolder()::class.findAssociatedObject<Associated1>()!! as I2
    assertEquals(17, i2.foo())

    return ""OK""
}",,4f27
fun foo(),": Int
}

private object I2Impl : I2 {
    override  = 17
}",,519f
fun test(),"{
    class L : P()
    val a = object : P() {

    }",// MEMBER_CLASS_FILTER: org.jetbrains.kotlin.fir.symbols.impl.FirConstructorSymbol,fe98
fun a(),= B,// FILE: 1.kt,9ea5
fun c(),= B,,baea
fun b(),= A,,4df1
fun d(),"= """,,7213
fun box(),= A,,4f27
"fun check(typeRef: FirTypeRef, context: CheckerContext, reporter: DiagnosticReporter)","{
        if (typeRef !is FirFunctionTypeRef) return
        for (parameter in typeRef.parameters) {
            check(parameter, context, reporter)
        }",,7c6c
"fun check(typeRef: FirFunctionTypeParameter, context: CheckerContext, reporter: DiagnosticReporter)","{
        val name = typeRef.name ?: return
        val typeRefSource = typeRef.source ?: return
        FirJvmNamesChecker.checkNameAndReport(name, typeRefSource, context, reporter)
    }",,9f88
fun box(),": String {
    val a = ArrayList<String>()
    a.add(""OK"")
    for (i in a.indices) {
        return a[i]
    }","// WITH_STDLIB

// IMPORTANT!
// Please, when your changes cause failures in bytecodeText tests for 'for' loops,
// examine the resulting bytecode shape carefully.
// Range and progression-based loops generated with Kotlin compiler should be
// as close as possible to Java counter loops ('for (int i = a; i < b; ++i) { ... }').
// Otherwise it may result in performance regression due to missing HotSpot optimizations.
// Run Kotlin compiler benchmarks (https://github.com/Kotlin/kotlin-benchmarks)
// with compiler built from your changes if you are not sure.",4f27
fun box(),": String {
    val list = mutableListOf(3, 2, 4, 8, 1, 5)
    val expected = listOf(8, 5, 4, 3, 2, 1)
    val comparatorFun: (Int, Int) -> Int = { a, b -> b - a }","// WITH_STDLIB
// SKIP_DCE_DRIVEN",4f27
No signature found,"fun trueWhenString(x: Any?): Boolean {
    contract {
        returns(true) implies (x is String)
    }","// !LANGUAGE: +AllowContractsForCustomFunctions +UseReturnsEffect
// !OPT_IN: kotlin.contracts.ExperimentalContracts
// !DIAGNOSTICS: -INVISIBLE_REFERENCE -INVISIBLE_MEMBER",6e1f
No signature found,"fun trueWhenInt(x: Any?): Boolean {
    contract {
        returns(true) implies (x is Int)
    }",,6e1f
No signature found,"fun falseWhenString(x: Any?): Boolean {
    contract {
        returns(false) implies (x is String)
    }",,6e1f
No signature found,"fun falseWhenInt(x: Any?): Boolean {
    contract {
        returns(false) implies (x is Int)
    }",,6e1f
No signature found,"fun truetrue(x: Any?) {
    if (trueWhenString(x) && trueWhenInt(x)) {
        x.length
        x.inc()
    }",,6e1f
No signature found,"fun truefalse(x: Any?) {
    if (trueWhenString(x) && falseWhenInt(x)) {
        x.length
        x.<!UNRESOLVED_REFERENCE!>inc<!>()
    }",,6e1f
No signature found,"fun falsetrue(x: Any?) {
    if (falseWhenString(x) && trueWhenInt(x)) {
        x.<!UNRESOLVED_REFERENCE!>length<!>
        x.inc()
    }",,6e1f
No signature found,"fun falsefalse(x: Any?) {
    if (falseWhenString(x) && falseWhenInt(x)) {
        x.<!UNRESOLVED_REFERENCE!>length<!>
        x.<!UNRESOLVED_REFERENCE!>inc<!>()
    }",,6e1f
No signature found,fun foo(block: () -> Int): Int  = b,"// LANGUAGE: +BreakContinueInInlineLambdas
// TARGET_BACKEND: JVM_IR
// TARGET_BACKEND: JS_IR
// TARGET_BACKEND: JS_IR_ES6
// TARGET_BACKEND: NATIVE
// TARGET_BACKEND: WASM",6e1f
fun box(),": String {
    var sum = 0

    for (i in 1..10) {
        sum += foo { if (i == 3) break else i }",,4f27
fun defaultSourceSetName(compilationName: String),: String = l,,d7e2
No signature found,"fun KotlinCompilationFactory<*>.getOrCreateDefaultSourceSet(compilationName: String): KotlinSourceSet {
    return project.kotlinExtension.sourceSets.maybeCreate(defaultSourceSetName(compilationName))
}",,6e1f
fun component1(),<!> = 1,,fd7c
fun component2(),<!> = 2,,e66b
"fun createAnonymousInitializer(
        startOffset: Int,
        endOffset: Int,
        origin: IrDeclarationOrigin,
        symbol: IrAnonymousInitializerSymbol,
        isStatic: Boolean,
    )",": IrAnonymousInitializer =
        I",,afea
"fun createClass(
        startOffset: Int,
        endOffset: Int,
        origin: IrDeclarationOrigin,
        name: Name,
        visibility: DescriptorVisibility,
        symbol: IrClassSymbol,
        kind: ClassKind,
        modality: Modality,
        isExternal: Boolean,
        isCompanion: Boolean,
        isInner: Boolean,
        isData: Boolean,
        isValue: Boolean,
        isExpect: Boolean,
        isFun: Boolean,
        hasEnumEntries: Boolean,
        source: SourceElement,
    )",": IrClass =
        I",,cb88
No signature found,"fun createConstructor(
        startOffset: Int,
        endOffset: Int,
        origin: IrDeclarationOrigin,
        name: Name,
        visibility: DescriptorVisibility,
        isInline: Boolean,
        isExpect: Boolean,
        returnType: IrType?,
        symbol: IrConstructorSymbol,
        isPrimary: Boolean,
        isExternal: Boolean,
        containerSource: DeserializedContainerSource?,
    ): IrConstructor =
        I",,6e1f
"fun createEnumEntry(
        startOffset: Int,
        endOffset: Int,
        origin: IrDeclarationOrigin,
        name: Name,
        symbol: IrEnumEntrySymbol,
    )",": IrEnumEntry =
        I",,2f0a
No signature found,"fun createErrorDeclaration(
        startOffset: Int,
        endOffset: Int,
        descriptor: DeclarationDescriptor?,
    ): IrErrorDeclaration =
        I",,6e1f
"fun createField(
        startOffset: Int,
        endOffset: Int,
        origin: IrDeclarationOrigin,
        name: Name,
        visibility: DescriptorVisibility,
        symbol: IrFieldSymbol,
        type: IrType,
        isFinal: Boolean,
        isStatic: Boolean,
        isExternal: Boolean,
    )",": IrField =
        I",,f8dd
No signature found,"fun createSimpleFunction(
        startOffset: Int,
        endOffset: Int,
        origin: IrDeclarationOrigin,
        name: Name,
        visibility: DescriptorVisibility,
        isInline: Boolean,
        isExpect: Boolean,
        returnType: IrType?,
        modality: Modality,
        symbol: IrSimpleFunctionSymbol,
        isTailrec: Boolean,
        isSuspend: Boolean,
        isOperator: Boolean,
        isInfix: Boolean,
        isExternal: Boolean,
        containerSource: DeserializedContainerSource?,
        isFakeOverride: Boolean,
    ): IrSimpleFunction =
        I",,6e1f
No signature found,"fun createFunctionWithLateBinding(
        startOffset: Int,
        endOffset: Int,
        origin: IrDeclarationOrigin,
        name: Name,
        visibility: DescriptorVisibility,
        isInline: Boolean,
        isExpect: Boolean,
        returnType: IrType?,
        modality: Modality,
        isTailrec: Boolean,
        isSuspend: Boolean,
        isOperator: Boolean,
        isInfix: Boolean,
        isExternal: Boolean,
        isFakeOverride: Boolean,
    ): IrFunctionWithLateBinding =
        I",,6e1f
"fun createLocalDelegatedProperty(
        startOffset: Int,
        endOffset: Int,
        origin: IrDeclarationOrigin,
        name: Name,
        symbol: IrLocalDelegatedPropertySymbol,
        type: IrType,
        isVar: Boolean,
    )",": IrLocalDelegatedProperty =
        I",,afb9
No signature found,"fun createProperty(
        startOffset: Int,
        endOffset: Int,
        origin: IrDeclarationOrigin,
        name: Name,
        visibility: DescriptorVisibility,
        modality: Modality,
        symbol: IrPropertySymbol,
        isVar: Boolean,
        isConst: Boolean,
        isLateinit: Boolean,
        isDelegated: Boolean,
        isExternal: Boolean,
        containerSource: DeserializedContainerSource?,
        isExpect: Boolean,
        isFakeOverride: Boolean,
    ): IrProperty =
        I",,6e1f
"fun createPropertyWithLateBinding(
        startOffset: Int,
        endOffset: Int,
        origin: IrDeclarationOrigin,
        name: Name,
        visibility: DescriptorVisibility,
        modality: Modality,
        isVar: Boolean,
        isConst: Boolean,
        isLateinit: Boolean,
        isDelegated: Boolean,
        isExternal: Boolean,
        isExpect: Boolean,
        isFakeOverride: Boolean,
    )",": IrPropertyWithLateBinding =
        I",,be8d
"fun createTypeAlias(
        startOffset: Int,
        endOffset: Int,
        origin: IrDeclarationOrigin,
        name: Name,
        visibility: DescriptorVisibility,
        symbol: IrTypeAliasSymbol,
        isActual: Boolean,
        expandedType: IrType,
    )",": IrTypeAlias =
        I",,4475
"fun createTypeParameter(
        startOffset: Int,
        endOffset: Int,
        origin: IrDeclarationOrigin,
        name: Name,
        symbol: IrTypeParameterSymbol,
        variance: Variance,
        index: Int,
        isReified: Boolean,
    )",": IrTypeParameter =
        I",,1f15
No signature found,"fun createValueParameter(
        startOffset: Int,
        endOffset: Int,
        origin: IrDeclarationOrigin,
        name: Name,
        type: IrType,
        isAssignable: Boolean,
        symbol: IrValueParameterSymbol,
        index: Int,
        varargElementType: IrType?,
        isCrossinline: Boolean,
        isNoinline: Boolean,
        isHidden: Boolean,
    ): IrValueParameter =
        I",,6e1f
"fun createExpressionBody(
        startOffset: Int,
        endOffset: Int,
        expression: IrExpression,
    )",": IrExpressionBody =
        I",,0546
"fun createBlockBody(
        startOffset: Int,
        endOffset: Int,
    )",": IrBlockBody =
        I",,8ee6
fun foo(x: String),: Unit = U,,f5be
fun foo(x: T),{},,a834
fun foo(x: F),{},,b467
fun OK(),{},,355f
fun box(),: String = C,,4f27
fun test(),"{
    A.<!DEPRECATED_ACCESS_TO_ENUM_ENTRY_COMPANION_PROPERTY!>entries<!>

    with(A) {
        entries
    }","// !LANGUAGE: +EnumEntries +PrioritizedEnumEntries
// WITH_STDLIB
// FIR_DUMP",fe98
fun getMemberScope(),"fun StorageManager.createMockJavaIoSerializableType(): KotlinType {
        val mockJavaIoPackageFragment = object : PackageFragmentDescriptorImpl(moduleDescriptor, FqName(""java.io"")) {
            override  = MemberScope.Empty
        }",,d431
fun getSupertypes(classDescriptor: ClassDescriptor),": Collection<KotlinType> {
        val fqName = classDescriptor.fqNameUnsafe
        return when {
            isArrayOrPrimitiveArray(fqName) -> listOf(cloneableType, mockSerializableType)
            isSerializableInJava(fqName) -> listOf(mockSerializableType)
            else -> listOf()
        }","//NOTE: can't reference anyType right away, because this is sometimes called when JvmBuiltIns are initializing",bb92
"fun getFunctions(name: Name, classDescriptor: ClassDescriptor)",": Collection<SimpleFunctionDescriptor> {
        if (name == CloneableClassScope.CLONE_NAME && classDescriptor is DeserializedClassDescriptor &&
            KotlinBuiltIns.isArrayOrPrimitiveArray(classDescriptor)
        ) {
            // Do not create clone for arrays deserialized from metadata in the old (1.0) runtime, because clone is declared there anyway
            if (classDescriptor.classProto.functionList.any { functionProto ->
                    classDescriptor.c.nameResolver.getName(functionProto.name) == CloneableClassScope.CLONE_NAME
                }",,eb71
fun getFunctionsNames(classDescriptor: ClassDescriptor),": Set<Name> {
        if (!settings.isAdditionalBuiltInsFeatureSupported) return emptySet()
        // NB: It's just an approximation that could be calculated relatively fast
        // More precise computation would look like `getAdditionalFunctions` (and the measurements show that it would be rather slow)
        return classDescriptor.getJavaAnalogue()?.unsubstitutedMemberScope?.getFunctionNames() ?: emptySet()
    }",,520c
No signature found,"fun getAdditionalFunctions(
        classDescriptor: ClassDescriptor,
        functionsByScope: (MemberScope) -> Collection<SimpleFunctionDescriptor>
    ): Collection<SimpleFunctionDescriptor> {
        val javaAnalogueDescriptor = classDescriptor.getJavaAnalogue() ?: return emptyList()

        val kotlinClassDescriptors = j2kClassMapper.mapPlatformClass(javaAnalogueDescriptor.fqNameSafe, FallbackBuiltIns.Instance)
        val kotlinMutableClassIfContainer = kotlinClassDescriptors.lastOrNull() ?: return emptyList()
        val kotlinVersions = SmartSet.create(kotlinClassDescriptors.map { it.fqNameSafe }",,6e1f
"fun createCloneForArray(
        arrayClassDescriptor: DeserializedClassDescriptor,
        cloneFromCloneable: SimpleFunctionDescriptor
    )",: SimpleFunctionDescriptor = c,,53f4
No signature found,"fun SimpleFunctionDescriptor.isMutabilityViolation(isMutable: Boolean): Boolean {
        val owner = containingDeclaration as ClassDescriptor
        val jvmDescriptor = computeJvmDescriptor()

        if ((SignatureBuildingComponents.signature(owner, jvmDescriptor) in MUTABLE_METHOD_SIGNATURES) xor isMutable) return true

        return DFS.ifAny<CallableMemberDescriptor>(
            listOf(this),
            { it.original.overriddenDescriptors }",,6e1f
No signature found,"fun FunctionDescriptor.getJdkMethodStatus(): JDKMemberStatus {
        val owner = containingDeclaration as ClassDescriptor
        val jvmDescriptor = computeJvmDescriptor()
        var result: JDKMemberStatus? = null
        return DFS.dfs<ClassDescriptor, JDKMemberStatus>(
            listOf(owner),
            {
                // Search through mapped supertypes to determine that Set.toArray should be invisible, while we have only
                // Collection.toArray there explicitly
                // Note, that we can't find j.u.Collection.toArray within overriddenDescriptors of j.u.Set.toArray
                it.typeConstructor.supertypes.mapNotNull { supertype ->
                    val superClassDescriptor =
                        supertype.constructor.declarationDescriptor?.original as? ClassDescriptor ?: return@mapNotNull null

                    // j.u.List in JDK 8 from Kotlin POV has a supertype kotlin.collections.MutableCollection
                    // that actually has JavaAnalogue, but since JDK 21 it has j.u.SequencedCollection as a supertype
                    // so `getJavaAnalogue()` might return null, but we still should continue traversing the supertypes
                    superClassDescriptor.getJavaAnalogue() ?: superClassDescriptor
                }",,6e1f
fun beforeChildren(javaClassDescriptor: ClassDescriptor),": Boolean {
                    val signature = SignatureBuildingComponents.signature(javaClassDescriptor, jvmDescriptor)
                    when (signature) {
                        in HIDDEN_METHOD_SIGNATURES -> result = JDKMemberStatus.HIDDEN
                        in VISIBLE_METHOD_SIGNATURES -> result = JDKMemberStatus.VISIBLE
                        in DEPRECATED_LIST_METHODS -> result = JDKMemberStatus.DEPRECATED_LIST_METHODS
                        in DROP_LIST_METHOD_SIGNATURES -> result = JDKMemberStatus.DROP
                    }",,685c
fun result(),= r,,5880
No signature found,"fun ClassDescriptor.getJavaAnalogue(): LazyJavaClassDescriptor? {
        // Prevents recursive dependency: memberScope(Any) -> memberScope(Object) -> memberScope(Any)
        // No additional members should be added to Any
        if (KotlinBuiltIns.isAny(this)) return null

        // Optimization: only classes under kotlin.* can have Java analogues
        if (!KotlinBuiltIns.isUnderKotlinPackage(this)) return null

        val fqName = fqNameUnsafe
        if (!fqName.isSafe) return null
        val javaAnalogueFqName = JavaToKotlinClassMap.mapKotlinToJava(fqName)?.asSingleFqName() ?: return null

        return settings.ownerModuleDescriptor.resolveClassByFqName(javaAnalogueFqName, NoLookupLocation.FROM_BUILTINS) as? LazyJavaClassDescriptor
    }",,6e1f
fun getConstructors(classDescriptor: ClassDescriptor),": Collection<ClassConstructorDescriptor> {
        if (classDescriptor.kind != ClassKind.CLASS || !settings.isAdditionalBuiltInsFeatureSupported) return emptyList()

        val javaAnalogueDescriptor = classDescriptor.getJavaAnalogue() ?: return emptyList()

        val defaultKotlinVersion =
            j2kClassMapper.mapJavaToKotlin(javaAnalogueDescriptor.fqNameSafe, FallbackBuiltIns.Instance) ?: return emptyList()

        val substitutor = createMappedTypeParametersSubstitution(defaultKotlinVersion, javaAnalogueDescriptor).buildSubstitutor()

        fun ConstructorDescriptor.isEffectivelyTheSameAs(javaConstructor: ConstructorDescriptor) =
            OverridingUtil.getBothWaysOverridability(this, javaConstructor.substitute(substitutor)) ==
                    OverridingUtil.OverrideCompatibilityInfo.Result.OVERRIDABLE

        return javaAnalogueDescriptor.constructors.filter { javaConstructor ->
            javaConstructor.visibility.isPublicAPI &&
                    defaultKotlinVersion.constructors.none { it.isEffectivelyTheSameAs(javaConstructor) }",,ae6e
"fun isFunctionAvailable(classDescriptor: ClassDescriptor, functionDescriptor: SimpleFunctionDescriptor)",": Boolean {
        val javaAnalogueClassDescriptor = classDescriptor.getJavaAnalogue() ?: return true

        if (!functionDescriptor.annotations.hasAnnotation(PLATFORM_DEPENDENT_ANNOTATION_FQ_NAME)) return true
        if (!settings.isAdditionalBuiltInsFeatureSupported) return false

        val jvmDescriptor = functionDescriptor.computeJvmDescriptor()
        return javaAnalogueClassDescriptor
            .unsubstitutedMemberScope
            .getContributedFunctions(functionDescriptor.name, NoLookupLocation.FROM_BUILTINS)
            .any { it.computeJvmDescriptor() == jvmDescriptor }",,460c
No signature found,"fun ConstructorDescriptor.isTrivialCopyConstructorFor(classDescriptor: ClassDescriptor): Boolean =
        v",,6e1f
fun getPlatformDependentDeclarationFilter(),= P,,59f7
fun useTrackedJavaClass(),"{
    TrackedJavaClass().foo()
}",,4e52
"fun <R, D> accept(visitor: FirVisitor<R, D>, data: D)",": R =
        v",,06e4
No signature found,"fun <E : FirElement, D> transform(transformer: FirTransformer<D>, data: D): E =
        t",,6e1f
fun main(args: Array<String>),{},// WITH_STDLIB,5b61
fun foo(),"= """,// FILE: 1.kt,519f
No signature found,"fun inlineFn(crossinline fn: () -> String, x: String = """,,6e1f
fun box(),": String {
    return inlineFn(foo::foo)
}",,4f27
fun isEmpty(),: Boolean = t,"// TARGET_BACKEND: JVM
// FULL_JDK
// FILE: emptyStringListAdd.kt",464e
fun contains(element: String),: Boolean = f,,1ecb
fun containsAll(elements: Collection<String>),: Boolean = e,,885b
fun get(index: Int),: String = n,,60cf
fun indexOf(element: String),: Int = -,,5219
fun lastIndexOf(element: String),: Int = -,,9a79
fun iterator(),: Iterator<String> = n,,c20a
fun listIterator(),: ListIterator<String> = n,,d886
fun listIterator(index: Int),: ListIterator<String> = n,,1bc7
"fun subList(fromIndex: Int, toIndex: Int)",: List<String> = n,,2cf6
fun box(),": String {
    try {
        J.add42(EmptyStringList)
        return ""Fail: no exception is thrown from J.add42(list)""
    }",,4f27
"fun assertEqualDirectoriesIgnoringDotFiles(
    expected: File,
    actual: File,
    forgiveOtherExtraFiles: Boolean,
)",= a,,a560
No signature found,"fun assertEqualDirectories(
    expected: File,
    actual: File,
    forgiveExtraFiles: Boolean,
    filter: (File) -> (Boolean) = {",,6e1f
No signature found,"fun File.checksumString(): String {
    val crc32 = CRC32()
    crc32.update(this.readBytes())
    return java.lang.Long.toHexString(crc32.value)
}",,6e1f
fun addDirContent(dir: File),"fun getDirectoryString(
    dir: File,
    interestingPaths: List<String>,
    predicate: (File) -> (Boolean),
): String {
    val buf = StringBuilder()
    val p = Printer(buf)


     {
        p.pushIndent()

        val listFiles = dir.listFiles()?.filter(predicate)
        assertNotNull(""$dir does not exist"", listFiles)

        val children = listFiles!!.sortedWith(compareBy({ it.isDirectory }",,1017
fun getAllRelativePaths(dir: File),": Set<String> {
    val result = HashSet<String>()
    FileUtil.processFilesRecursively(dir) {
        if (it!!.isFile) {
            result.add(FileUtil.getRelativePath(dir, it)!!)
        }",,e53c
fun classFileToString(classFile: File),": String {
    val out = StringWriter()

    val traceVisitor = TraceClassVisitor(PrintWriter(out))
    ClassReader(classFile.readBytes()).accept(traceVisitor, 0)

    val classHeader = LocalFileKotlinClass.create(classFile, JvmMetadataVersion.INSTANCE)?.classHeader ?: return """"
    if (!classHeader.metadataVersion.isCompatibleWithCurrentCompilerVersion()) {
        error(""Incompatible class ($classHeader): $classFile"")
    }",,3160
fun metaJsToString(metaJsFile: File),": String {
    val out = StringWriter()

    val metadataList = arrayListOf<KotlinJavascriptMetadata>()
    KotlinJavascriptMetadataUtils.parseMetadata(metaJsFile.readText(), metadataList)

    for (metadata in metadataList) {
        val (header, content) = GZIPInputStream(ByteArrayInputStream(metadata.body)).use { stream ->
            DebugJsProtoBuf.Header.parseDelimitedFrom(stream, JsSerializerProtocol.extensionRegistry) to
                    DebugJsProtoBuf.Library.parseFrom(stream, JsSerializerProtocol.extensionRegistry)
        }",,b29c
fun kjsmToString(kjsmFile: File),": String {
    val out = StringWriter()

    val stream = DataInputStream(kjsmFile.inputStream())
    // Read and skip the metadata version
    repeat(stream.readInt()) { stream.readInt() }",,82b3
"fun sourceMapFileToString(sourceMapFile: File, generatedJsFile: File)",": String {
    val sourceMapParseResult = SourceMapParser.parse(sourceMapFile.readText())
    return when (sourceMapParseResult) {
        is SourceMapSuccess -> {
            val bytesOut = ByteArrayOutputStream()
            PrintStream(bytesOut).use { printStream ->
                sourceMapParseResult.value.debugVerbose(printStream, generatedJsFile)
            }",,8e7c
fun getExtensionRegistry(),": ExtensionRegistry {
    val registry = ExtensionRegistry.newInstance()!!
    DebugJvmProtoBuf.registerAllExtensions(registry)
    return registry
}",,4468
fun fileToStringRepresentation(file: File),": String {
    return when {
        file.name.endsWith("".class"") -> {
            classFileToString(file)
        }",,c6d5
fun box(),": String {
    try {
        val c = E::class.constructors.single()
        c.isAccessible = true
        c.call()
        return ""Fail: constructing an enum class should not be allowed""
    }","// TARGET_BACKEND: JVM

// WITH_REFLECT",4f27
fun main(),"{
    generateAbstractKotlinArtifactsExtensionImplementation()
}",,d987
fun generateAbstractKotlinArtifactsExtensionImplementation(),"{
    val className = typeName(""org.jetbrains.kotlin.gradle.targets.native.tasks.artifact.KotlinArtifactsExtensionImpl"")

    val imports = """"""
        import org.gradle.api.Project
        import org.jetbrains.kotlin.gradle.dsl.KotlinArtifact
        import org.jetbrains.kotlin.gradle.dsl.KotlinArtifactConfig
        import org.jetbrains.kotlin.gradle.dsl.KotlinArtifactsExtension
        import org.jetbrains.kotlin.gradle.plugin.mpp.BitcodeEmbeddingMode
        import org.jetbrains.kotlin.gradle.plugin.mpp.NativeBuildType
        import org.jetbrains.kotlin.konan.target.DEPRECATED_TARGET_MESSAGE
        import org.jetbrains.kotlin.konan.target.KonanTarget
        import javax.inject.Inject
    """""".trimIndent()

    val generatedCodeWarning = ""// DO NOT EDIT MANUALLY! Generated by ${object {}",,bb59
No signature found,"fun KonanTarget.generateKonanTargetVal(): String {
    val nameParts = this.name.split(""_"")
    val name = nameParts.drop(1).joinToString(
        separator = """",
        prefix = nameParts.first(),
        transform = String::capitalizeUS
    )
    return ""val $name = KonanTarget.${this.name.uppercase(Locale.US)}",,6e1f
fun box(),": String {
    var log = """"

    var s: Any? = null
    for (t in arrayOf(""1"", ""2"", ""3"")) {
        class C() {
            val y = t

            inner class D() {
                fun foo() = ""($y;$t)""
            }",,4f27
fun bar(derived: Derived),= d,,eb4c
No signature found,"fun trans(n: Int, f: (Int) -> Boolean) = i",,6e1f
fun foo(),"{
    val base: Base = Derived()
    if (base is Derived) {
        fun can(n: Int) = n > 0
        trans(42, ::can)
        bar(base)
    }",,519f
No signature found,"fun <K : Any, V, CONTEXT> createCache(createValue: (K, CONTEXT) -> V): FirCache<K, V, CONTEXT>

    /**
     * Creates a cache with returns a value by key on demand if it is computed
     * Otherwise computes the value in [createValue] and caches it for future invocations
     *
     * [FirCache.getValue] should not be called inside [createValue]
     *
     * Where:
     * [CONTEXT] -- type of value which be used to create value by [createValue]
     *
     * @param initialCapacity initial capacity for the underlying cache map
     * @param loadFactor loadFactor for the underlying cache map
     */
    abstract fun <K : Any, V, CONTEXT> createCache(
        initialCapacity: Int,
        loadFactor: Float,
        createValue: (K, CONTEXT) -> V
    ): FirCache<K, V, CONTEXT>

    /**
     * Creates a cache with returns a caches value on demand if it is computed
     * Otherwise computes the value in two phases:
     *  - [createValue] -- creates values and stores value of type [V] to cache and passes [V] & [DATA] to [postCompute]
     *  - [postCompute] -- performs some operations on computed value after it placed into map
     *
     * [FirCache.getValue] can be safely called in postCompute from the same thread and correct value computed by [createValue] will be returned
     * [FirCache.getValue] should not be called inside [createValue]
     *
     * Where:
     *  [CONTEXT] -- type of value which be used to create value by [createValue]
     *  [DATA] -- type of additional data which will be passed from [createValue] to [postCompute]
     */
    abstract fun <K : Any, V, CONTEXT, DATA> createCacheWithPostCompute(
        createValue: (K, CONTEXT) -> Pair<V, DATA>,
        postCompute: (K, V, DATA) -> Unit
    ): FirCache<K, V, CONTEXT>

    abstract fun <V> createLazyValue(createValue: () -> V): FirLazyValue<V>
}

val FirSession.firCachesFactory: FirCachesFactory by FirSession.sessionComponentAccessor()

inline fun <K : Any, V> FirCachesFactory.createCache(
    crossinline createValue: (K) -> V,
): FirCache<K, V, Nothing?> = c",,6e1f
fun id(x: String),: String = x,"// TARGET_BACKEND: JVM
// WITH_COROUTINES
// WITH_STDLIB",e1c8
fun box(),": String {
    val actual = f.javaClass.genericInterfaces.toList().toString()
    val expected = ""["" +
        ""kotlin.jvm.functions.Function2<java.lang.String, kotlin.coroutines.Continuation<? super java.lang.String>, java.lang.Object>, "" +
        ""interface kotlin.coroutines.jvm.internal.SuspendFunction"" +
    ""]""

    return if (expected == actual) ""OK"" else ""Fail: $actual""
}",,4f27
fun close(),"fun interface BaseInterface {
    @ObjCName(""close"")
    
}","// FIR_IDENTICAL
// FILE: kotlin.kt",7e58
fun close(),"}

fun interface IntersectionInterface {
    @ObjCName(""close"")
    
}",,7e58
fun close(),"{
    }",,7e58
fun testWeakRefs(),"{
    testWeakReference({ createNSObject()!! }",,919f
No signature found,"fun testWeakReference(block: () -> NSObject) {
    val ref = autoreleasepool {
        createAndTestWeakReference(block)
    }",,6e1f
No signature found,"fun createAndTestWeakReference(block: () -> NSObject): WeakReference<NSObject> {
    val ref = createWeakReference(block)
    assertNotNull(ref.get())
    assertEquals(ref.get()!!.hash(), ref.get()!!.hash())
    return ref
}",,6e1f
No signature found,fun createWeakReference(block: () -> NSObject) = W,,6e1f
fun createAndAbandonWeakRef(obj: NSObject),"{
    WeakReference(obj)
}",,2864
fun lower(irFile: IrFile),"{
        // In legacy mode we treat assertions as inline function calls
        if (context.config.assertionsMode != JVMAssertionsMode.LEGACY)
            irFile.transformChildren(this, null)
    }",,a3a5
No signature found,"fun visitDeclaration(declaration: IrDeclarationBase, data: ClassInfo?): IrStatement {
        scopeOwnerStack.push(declaration)
        val result = super.visitDeclaration(declaration, data)
        scopeOwnerStack.pop()
        return result
    }",,6e1f
No signature found,"fun visitClass(declaration: IrClass, data: ClassInfo?): IrStatement {
        val info = ClassInfo(declaration, data?.topLevelClass ?: declaration)

        visitDeclaration(declaration, info)

        // Note that it's necessary to add this member at the beginning of the class, before all user-visible
        // initializers, which may contain assertions. At the same time, assertions are supposed to be enabled
        // for code which runs before class initialization. This is the reason why this field records whether
        // assertions are disabled rather than enabled. During initialization, $assertionsDisabled is going
        // to be false, meaning that assertions are checked.
        info.assertionsDisabledField?.let {
            declaration.declarations.add(0, it)
        }",,6e1f
No signature found,"fun visitCall(expression: IrCall, data: ClassInfo?): IrElement {
        val function = expression.symbol.owner
        if (!function.isAssert)
            return super.visitCall(expression, data)

        val mode = context.config.assertionsMode
        if (mode == JVMAssertionsMode.ALWAYS_DISABLE)
            return IrCompositeImpl(expression.startOffset, expression.endOffset, context.irBuiltIns.unitType)

        context.createIrBuilder(scopeOwnerStack.peek().symbol).run {
            at(expression)
            val assertCondition = expression.getValueArgument(0)!!
            val lambdaArgument = if (function.valueParameters.size == 2) expression.getValueArgument(1) else null

            return if (mode == JVMAssertionsMode.ALWAYS_ENABLE) {
                checkAssertion(assertCondition, lambdaArgument)
            }",,6e1f
No signature found,"fun IrBuilderWithScope.checkAssertion(assertCondition: IrExpression, lambdaArgument: IrExpression?) =
        i",,6e1f
"fun getAssertionDisabled(irBuilder: IrBuilderWithScope, data: ClassInfo)",": IrExpression {
        if (data.assertionsDisabledField == null)
            data.assertionsDisabledField = data.irClass.buildAssertionsDisabledField(context, data.topLevelClass)
        return irBuilder.irGetField(null, data.assertionsDisabledField!!)
    }",,91a6
fun noArgs(),{},// !DIAGNOSTICS: -UNUSED_PARAMETER,1863
No signature found,fun oneLambdaArg(fn: () -> Unit) {},,6e1f
No signature found,"fun twoLambdaArgs(f1: () -> Unit, f2: () -> Unit) {}",,6e1f
fun varargFn(vararg args: Int),{},,1c44
fun testNoArgs(),"{
    noArgs()
    noArgs <!TOO_MANY_ARGUMENTS!>{}",,26f7
fun testLambdaArg(),"{
    oneLambdaArg<!NO_VALUE_FOR_PARAMETER!>()<!>
    oneLambdaArg {}",,6fbf
fun testVararg(),"{
    varargFn(1,2,3)
    varargFn <!VARARG_OUTSIDE_PARENTHESES!>{}",,eb22
fun testTwoLambdas(),"{
    twoLambdaArgs(
        f1 = {}",,54ac
fun bar(),": () -> Unit {
        twoLambdaArgs<!NO_VALUE_FOR_PARAMETER!>()<!>
        {}",,66c3
fun f1(),": (() -> Unit) -> (() -> Unit) -> Unit {
    return { l1 ->
        <!TYPE_MISMATCH, TYPE_MISMATCH!>l1()
        <!UNEXPECTED_TRAILING_LAMBDA_ON_A_NEW_LINE!>{ <!CANNOT_INFER_PARAMETER_TYPE!>l2<!> -> <!DEBUG_INFO_MISSING_UNRESOLVED!>l2<!>() }",,ed85
fun lock(),"{
        val lockData = CurrentThread.id.hashCode()
        loop@ do {
            val old = locker_.compareAndExchange(0, lockData)
            when (old) {
                lockData -> {
                    // Was locked by us already.
                    reenterCount_.incrementAndGet()
                    break@loop
                }",,a3f8
fun unlock(),"{
        if (reenterCount_.value > 0) {
            reenterCount_.decrementAndGet()
        }",,84be
No signature found,"fun <R> locked(lock: Lock, block: () -> R): R {
    lock.lock()
    try {
        return block()
    }",,6e1f
fun map(type: String),": String {
        return typeRemapper.map(type)
    }",,ef25
fun visitTypeVariable(name: String),"fun createSignatureRemapper(v: SignatureVisitor?): SignatureVisitor {
        return object : SignatureRemapper(v, this) {
            override  {
                /*TODO try to erase absent type variable*/
                val mapping = typeRemapper.mapTypeParameter(name)
                if (mapping != null) {
                    // TODO: what is this condition
                    if (mapping.isReified) {
                        result.reifiedTypeParametersUsages.mergeAll(mapping.reifiedTypeParametersUsages)
                    }",,cb8b
fun visitFormalTypeParameter(name: String),"{
                typeRemapper.registerTypeParameter(name)
                super.visitFormalTypeParameter(name)
            }",,b3fb
fun test(x: Int),": String {
        return ""OK""
    }",,b707
fun test(x: Int),": String {
        return <expr>super.test(x * 2)</expr>
    }",,b707
fun testFooJvmAndJs(),"{
        assertEquals(foo(), fooCommon())
        fooLinuxAndJs()
    }",,6438
No signature found,"fun loadTypeAnnotations(typeProto: ProtoBuf.Type, nameResolver: NameResolver): List<FirAnnotation> {
        val annotations = typeProto.getExtension(protocol.typeAnnotation).orEmpty()
        return annotations.map { deserializeAnnotation(it, nameResolver) }",,6e1f
No signature found,"fun loadTypeParameterAnnotations(typeParameterProto: ProtoBuf.TypeParameter, nameResolver: NameResolver): List<FirAnnotation> {
        val annotations = typeParameterProto.getExtension(protocol.typeParameterAnnotation).orEmpty()
        return annotations.map { deserializeAnnotation(it, nameResolver) }",,6e1f
fun excs(),"{ throw Exception(""!!!"") }","// WITH_STDLIB
// WITH_COROUTINES",03e7
fun fff(),{},,42f3
fun bars(),": String {
    var i = 0
    var s = """"
    while (i < 3) {
        ++i
        s += ""FAIL$i;""
        try {
            try {
                fff()
                return s
            }",,e90c
No signature found,"fun builder(c: suspend Controller.() -> Unit): String {
    val controller = Controller()
    c.startCoroutine(controller, EmptyContinuation)
    return controller.result
}",,6e1f
fun box(),": String {
    return builder { result = bars() }",,4f27
fun i(t: T),": Int
}

class C<T>(val x: Int): I<<expr>T</expr>> {
    companion object {
        val K: Int = 58
    }",,2f41
fun test(),": Int {
        return 45 * K
    }",,fe98
fun count(xs: List<T>),": Int {
        return xs.size
    }",,8ae0
fun i(t: T),": Int {
        return test() + t.hashCode()
    }",,2f41
No signature found,"fun calc(x: List<String>?, y: List<Int>?) {
    // x and y should be non-null in arguments list, despite of a chains
    x?.subList(y?.subList(1, 2)?.get(<!DEBUG_INFO_SMARTCAST!>y<!>.size) ?: 0,
               y?.get(0) ?: 1) // But safe call is NECESSARY here for y
     ?.get(<!DEBUG_INFO_SMARTCAST!>x<!>.size)
}",,6e1f
No signature found,"fun watch(p: String, f: (String) -> Int) {
    f(p)
}",,6e1f
fun main(args: Array<String>),"{
    val local = ""mno""
    watch(local) { it.length }",,5b61
"fun renderContextReceivers(owner: KtContextReceiversOwner, printer: PrettyPrinter)","{
        contextReceiverListRenderer.renderContextReceivers(owner, printer)
    }",,8af1
No signature found,"fun with(action: Builder.() -> Unit): KtContextReceiversRenderer {
        val renderer = this
        return KtContextReceiversRenderer {
            this.contextReceiverListRenderer = renderer.contextReceiverListRenderer
            this.contextReceiverLabelRenderer = renderer.contextReceiverLabelRenderer

            action()
        }",,6e1f
fun build(),: KtContextReceiversRenderer = K,,5bf9
No signature found,"fun invoke(action: Builder.() -> Unit): KtContextReceiversRenderer =
            B",,6e1f
No signature found,"fun serializePackage(packageFqName: FqName, proto: ProtoBuf.Package.Builder) {
        proto.setExtension(protocol.packageFqName, stringTable.getPackageFqNameIndex(packageFqName))
    }",,6e1f
No signature found,"fun serializeClass(
        klass: FirClass,
        proto: ProtoBuf.Class.Builder,
        versionRequirementTable: MutableVersionRequirementTable,
        childSerializer: FirElementSerializer
    ) {
        klass.serializeAnnotations(session, additionalMetadataProvider, annotationSerializer, proto, protocol.classAnnotation)
    }",,6e1f
"fun serializeScript(
        script: FirScript,
        proto: Builder,
        versionRequirementTable: MutableVersionRequirementTable,
        childSerializer: FirElementSerializer,
    )",{},,b9a8
No signature found,"fun serializeConstructor(
        constructor: FirConstructor,
        proto: ProtoBuf.Constructor.Builder,
        childSerializer: FirElementSerializer
    ) {
        constructor.serializeAnnotations(session, additionalMetadataProvider, annotationSerializer, proto, protocol.constructorAnnotation)
    }",,6e1f
No signature found,"fun serializeFunction(
        function: FirFunction,
        proto: ProtoBuf.Function.Builder,
        versionRequirementTable: MutableVersionRequirementTable?,
        childSerializer: FirElementSerializer
    ) {
        function.serializeAnnotations(session, additionalMetadataProvider, annotationSerializer, proto, protocol.functionAnnotation)
        function.receiverParameter?.serializeAnnotations(
            session,
            additionalMetadataProvider,
            annotationSerializer,
            proto,
            protocol.functionExtensionReceiverAnnotation
        )
    }",,6e1f
No signature found,"fun serializeProperty(
        property: FirProperty,
        proto: ProtoBuf.Property.Builder,
        versionRequirementTable: MutableVersionRequirementTable?,
        childSerializer: FirElementSerializer
    ) {
        val fieldPropertyAnnotations = mutableListOf<FirAnnotation>()
        val delegatePropertyAnnotations = mutableListOf<FirAnnotation>()

        for (annotation in property.backingField?.allRequiredAnnotations(session, additionalMetadataProvider).orEmpty()) {
            val destination = when (annotation.useSiteTarget) {
                AnnotationUseSiteTarget.PROPERTY_DELEGATE_FIELD -> delegatePropertyAnnotations
                else -> fieldPropertyAnnotations
            }",,6e1f
No signature found,"fun serializeEnumEntry(enumEntry: FirEnumEntry, proto: ProtoBuf.EnumEntry.Builder) {
        enumEntry.serializeAnnotations(session, additionalMetadataProvider, annotationSerializer, proto, protocol.enumEntryAnnotation)
    }",,6e1f
No signature found,"fun serializeValueParameter(parameter: FirValueParameter, proto: ProtoBuf.ValueParameter.Builder) {
        parameter.serializeAnnotations(session, additionalMetadataProvider, annotationSerializer, proto, protocol.parameterAnnotation)
    }",,6e1f
No signature found,"fun serializeTypeAnnotations(annotations: List<FirAnnotation>, proto: ProtoBuf.Type.Builder) {
        annotations.serializeAnnotations(proto, protocol.typeAnnotation)
    }",,6e1f
No signature found,"fun serializeTypeParameter(typeParameter: FirTypeParameter, proto: ProtoBuf.TypeParameter.Builder) {
        typeParameter.serializeAnnotations(
            session,
            additionalMetadataProvider,
            annotationSerializer,
            proto,
            protocol.typeParameterAnnotation
        )
    }",,6e1f
No signature found,"fun <
        MessageType : GeneratedMessageLite.ExtendableMessage<MessageType>,
        BuilderType : GeneratedMessageLite.ExtendableBuilder<MessageType, BuilderType>,
    > List<FirAnnotation>.serializeAnnotations(
        proto: GeneratedMessageLite.ExtendableBuilder<MessageType, BuilderType>,
        extension: GeneratedMessageLite.GeneratedExtension<MessageType, List<ProtoBuf.Annotation>>?,
    ) {
        if (extension == null) return
        for (annotation in this) {
            proto.addExtensionOrNull(extension, annotationSerializer.serializeAnnotation(annotation))
        }",,6e1f
fun foo(),": Int {
    if (false) {
        return 1
    }",,519f
fun renderClassId(classId: ClassId),"{
        builder.append(classId.asString())
    }",,76ae
fun renderCallableId(callableId: CallableId),"{
        builder.append(callableId.callableName)
    }",,47ae
No signature found,"fun <T : PhaseContext> PhaseEngine<T>.writeKlib(
        serializationOutput: SerializerOutput,
        customOutputPath: String? = n",,6e1f
fun transformFlat(declaration: IrDeclaration),": List<IrDeclaration>? {
        if (!context.es6mode || declaration !is IrConstructor || declaration.hasStrictSignature(context)) return null

        hackEnums(declaration)
        hackExceptions(declaration)
        hackSimpleClassWithCapturing(declaration)

        if (!declaration.isSyntheticPrimaryConstructor) {
            declaration.addBoxParameter()
        }",,ad1d
No signature found,"fun IrConstructor.addBoxParameter() {
        val irClass = parentAsClass
        val boxParameter = generateBoxParameter(irClass).also { valueParameters = valueParameters memoryOptimizedPlus it }",,6e1f
fun createJsObjectLiteral(),": IrExpression {
        return JsIrBuilder.buildCall(context.intrinsics.jsEmptyObject)
    }",,1261
No signature found,"fun IrConstructor.generateBoxParameter(irClass: IrClass): IrValueParameter {
        return JsIrBuilder.buildValueParameter(
            parent = this,
            name = Namer.ES6_BOX_PARAMETER_NAME,
            index = valueParameters.size,
            type = irClass.defaultType.makeNullable(),
            origin = ES6_BOX_PARAMETER,
            isAssignable = true
        )
    }",,6e1f
No signature found,"fun IrValueParameter.generateDefaultResolution(): IrExpression {
        return with(context.createIrBuilder(symbol, UNDEFINED_OFFSET, UNDEFINED_OFFSET)) {
            irIfThen(
                context.irBuiltIns.unitType,
                irEqeqeqWithoutBox(irGet(type, symbol), this@ES6AddBoxParameterToConstructorsLowering.context.getVoid()),
                irSet(symbol, createJsObjectLiteral()),
                ES6_BOX_PARAMETER_DEFAULT_RESOLUTION
            )
        }",,6e1f
fun visitGetValue(expression: IrGetValue),"fun IrBody.replaceThisWithBoxBeforeSuperCall(irClass: IrClass, boxParameterSymbol: IrValueSymbol): Boolean {
        var meetCapturing = false
        var meetDelegatingConstructor = false
        val selfParameterSymbol = irClass.thisReceiver!!.symbol

        transformChildrenVoid(object : ValueRemapper(mapOf(selfParameterSymbol to boxParameterSymbol)) {
            override : IrExpression {
                return if (meetDelegatingConstructor) {
                    expression
                }",,8d48
fun visitSetField(expression: IrSetField),": IrExpression {
                if (meetDelegatingConstructor) return expression
                val newExpression = super.visitSetField(expression)
                val receiver = expression.receiver as? IrGetValue

                if (receiver?.symbol == boxParameterSymbol) {
                    meetCapturing = true
                }",,72c7
fun visitDelegatingConstructorCall(expression: IrDelegatingConstructorCall),": IrExpression {
                meetDelegatingConstructor = true
                return super.visitDelegatingConstructorCall(expression)
            }",,a709
fun hackEnums(constructor: IrConstructor),"{
        constructor.transformChildren(object : IrElementTransformerVoid() {
            override fun visitTypeOperator(expression: IrTypeOperatorCall): IrExpression {
                return (expression.argument as? IrDelegatingConstructorCall) ?: expression
            }",,eac2
fun hackSimpleClassWithCapturing(constructor: IrConstructor),"{
        val irClass = constructor.parentAsClass

        if (irClass.superClass != null || (!irClass.isInner && !irClass.isLocal)) return

        val statements = (constructor.body as? IrBlockBody)?.statements ?: return
        val delegationConstructorIndex = statements.indexOfFirst { it is IrDelegatingConstructorCall }",,32b7
fun hackExceptions(constructor: IrConstructor),"{
        val setPropertiesSymbol = context.setPropertiesToThrowableInstanceSymbol

        val statements = (constructor.body as? IrBlockBody)?.statements ?: return

        var callIndex = -1
        var superCallIndex = -1
        for (i in statements.indices) {
            val s = statements[i]

            if (s is IrCall && s.symbol === setPropertiesSymbol) {
                callIndex = i
            }",,9ee9
No signature found,"fun foo(x : B<*>) {
    bar1(<!TYPE_MISMATCH!>x<!>) // this should not be valid
    bar2(x)
    bar3(x)
}","// !DIAGNOSTICS: -UNUSED_PARAMETER
// See KT-7296",6e1f
No signature found,fun bar1(x : A<A<*>>) { },,6e1f
No signature found,fun bar2(x : A<out A<*>>) { },,6e1f
No signature found,fun bar3(x : A<*>) { },,6e1f
fun box(),": String {
    var x = """"
    run { x = ""OK"" }",// WITH_STDLIB,4f27
No signature found,"fun someFunctionWithTypeConstraints<T, E>(arg: E?, block: () -> T): String
    contract [
        returns() implies (arg != n","// the following functions have type constraints and contracts written in different order
// any order is correct",6e1f
No signature found,"fun anotherFunctionWithTypeConstraints<D, T>(data: D?, arg: T?, block: () -> Unit)
    where D : SuperType,
          T : SomeType
    contract [
        returns() implies (data != n",,6e1f
No signature found,fun foo(x: Comparable<*>) {},"// FIR_IDENTICAL
// !LANGUAGE: +ContextReceivers
// RENDER_DIAGNOSTICS_FULL_TEXT",6e1f
fun foo(x: Number),{},,0744
fun test(),"{
    with("""") {
        <!OVERLOAD_RESOLUTION_AMBIGUITY!>foo<!>(1)
    }",,fe98
fun box(),": String {
    ConcreteClass::class.java.getConstructor().newInstance()
    return ""OK""
}",// WITH_STDLIB,4f27
"fun check(declaration: FirFunction, context: CheckerContext, reporter: DiagnosticReporter)","{
        if (!declaration.isInline) {
            checkParametersInNotInline(declaration, context, reporter)
            return
        }",,0adc
"fun visitElement(element: FirElement, data: CheckerContext)",{},,484d
"fun visitSmartCastExpression(smartCastExpression: FirSmartCastExpression, data: CheckerContext)",{},"// prevent delegation to visitQualifiedAccessExpression, which causes redundant diagnostics",b083
No signature found,"fun checkAccessedDeclaration(
            source: KtSourceElement,
            accessExpression: FirStatement,
            accessedSymbol: FirBasedSymbol<*>,
            declarationVisibility: Visibility,
            context: CheckerContext,
            reporter: DiagnosticReporter,
        ): AccessedDeclarationVisibilityData {
            val recordedEffectiveVisibility = when (accessedSymbol) {
                is FirCallableSymbol<*> -> accessedSymbol.publishedApiEffectiveVisibility ?: accessedSymbol.effectiveVisibility
                is FirClassLikeSymbol<*> -> accessedSymbol.publishedApiEffectiveVisibility ?: accessedSymbol.effectiveVisibility
                else -> shouldNotBeCalled()
            }",,6e1f
"fun getNonPublicCallFromPublicInlineFactory(
            accessExpression: FirStatement,
            source: KtSourceElement,
            context: CheckerContext,
        )",": KtDiagnosticFactory2<FirBasedSymbol<*>, FirBasedSymbol<*>> {
            if (!context.languageVersionSettings.supportsFeature(LanguageFeature.ProhibitPrivateOperatorCallInInline)) {
                val isDelegatedPropertyAccessor = source.kind == KtFakeSourceElementKind.DelegatedPropertyAccessor
                val isForLoopButNotIteratorCall = source.kind == KtFakeSourceElementKind.DesugaredForLoop &&
                        accessExpression.toReference(context.session)?.symbol?.memberDeclarationNameOrNull != OperatorNameConventions.ITERATOR

                if (isDelegatedPropertyAccessor || isForLoopButNotIteratorCall) {
                    return FirErrors.NON_PUBLIC_CALL_FROM_PUBLIC_INLINE_DEPRECATION
                }",,fbd4
No signature found,"fun EffectiveVisibility.isReachableDueToLocalDispatchReceiver(access: FirStatement, context: CheckerContext): Boolean {
            val receiverType = access.localDispatchReceiver(context) ?: return false
            val receiverProtected = EffectiveVisibility.Protected(receiverType.typeConstructor(context.session.typeContext))
            val relation = receiverProtected.relation(this, context.session.typeContext)
            return relation == EffectiveVisibility.Permissiveness.SAME || relation == EffectiveVisibility.Permissiveness.LESS
        }",,6e1f
No signature found,"fun FirStatement.localDispatchReceiver(context: CheckerContext): ConeKotlinType? =
            (",,6e1f
No signature found,"fun checkReceiversOfQualifiedAccessExpression(
            qualifiedAccessExpression: FirQualifiedAccessExpression,
            targetSymbol: FirBasedSymbol<*>?,
            context: CheckerContext,
            reporter: DiagnosticReporter,
        ) {
            checkReceiver(qualifiedAccessExpression, qualifiedAccessExpression.dispatchReceiver, targetSymbol, context, reporter)
            checkReceiver(qualifiedAccessExpression, qualifiedAccessExpression.extensionReceiver, targetSymbol, context, reporter)
        }",,6e1f
No signature found,"fun checkArgumentsOfCall(
            functionCall: FirFunctionCall,
            targetSymbol: FirBasedSymbol<*>?,
            context: CheckerContext,
            reporter: DiagnosticReporter,
        ) {
            if (context.isContractBody) return
            val calledFunctionSymbol = targetSymbol as? FirFunctionSymbol ?: return
            val argumentMapping = functionCall.resolvedArgumentMapping ?: return
            for ((wrappedArgument, valueParameter) in argumentMapping) {
                val argument = wrappedArgument.unwrapErrorExpression()?.unwrapArgument() ?: continue
                val resolvedArgumentSymbol = argument.toResolvedCallableSymbol(session) as? FirVariableSymbol<*> ?: continue

                val valueParameterOfOriginalInlineFunction = inlinableParameters.firstOrNull { it == resolvedArgumentSymbol }",,6e1f
No signature found,"fun checkReceiver(
            qualifiedAccessExpression: FirQualifiedAccessExpression,
            receiverExpression: FirExpression?,
            targetSymbol: FirBasedSymbol<*>?,
            context: CheckerContext,
            reporter: DiagnosticReporter,
        ) {
            if (receiverExpression == null) return
            val receiverSymbol =
                receiverExpression.unwrapErrorExpression()?.toResolvedCallableSymbol(session) as? FirValueParameterSymbol ?: return
            if (receiverSymbol in inlinableParameters) {
                if (!isInvokeOrInlineExtension(targetSymbol)) {
                    reporter.reportOn(
                        receiverExpression.source ?: qualifiedAccessExpression.source,
                        FirErrors.USAGE_IS_NOT_INLINABLE,
                        receiverSymbol,
                        context
                    )
                }",,6e1f
No signature found,"fun isInvokeOrInlineExtension(targetSymbol: FirBasedSymbol<*>?): Boolean {
            if (targetSymbol !is FirNamedFunctionSymbol) return false
            // TODO: receivers are currently not inline (KT-5837)
            // if (targetSymbol.isInline) return true
            return targetSymbol.name == OperatorNameConventions.INVOKE &&
                    targetSymbol.dispatchReceiverType?.isSomeFunctionType(session) == true
        }",,6e1f
No signature found,"fun checkQualifiedAccess(
            qualifiedAccess: FirStatement,
            targetSymbol: FirBasedSymbol<*>?,
            context: CheckerContext,
            reporter: DiagnosticReporter,
        ) {
            val source = qualifiedAccess.source ?: return
            if (targetSymbol !is FirCallableSymbol<*>) return

            if (targetSymbol in inlinableParameters) {
                if (!qualifiedAccess.partOfCall(context)) {
                    reporter.reportOn(source, FirErrors.USAGE_IS_NOT_INLINABLE, targetSymbol, context)
                }",,6e1f
No signature found,"fun FirStatement.partOfCall(context: CheckerContext): Boolean {
            if (this !is FirExpression) return false
            val containingQualifiedAccess = context.callsOrAssignments.getOrNull(
                context.callsOrAssignments.size - 2
            ) ?: return false
            if (this == (containingQualifiedAccess as? FirQualifiedAccessExpression)?.explicitReceiver?.unwrapErrorExpression()) return true
            val call = containingQualifiedAccess as? FirCall ?: return false
            return call.arguments.any { it.unwrapErrorExpression()?.unwrapArgument() == this }",,6e1f
No signature found,"fun checkVisibilityAndAccess(
            accessExpression: FirStatement,
            calledDeclaration: FirCallableSymbol<*>?,
            source: KtSourceElement,
            context: CheckerContext,
            reporter: DiagnosticReporter,
        ) {
            if (calledDeclaration == null ||
                calledDeclaration.callableId.callableName == BACKING_FIELD ||
                calledDeclaration is FirPropertySymbol && calledDeclaration.isConst &&
                context.callsOrAssignments.any { it is FirAnnotationCall }",,6e1f
No signature found,"fun checkPrivateClassMemberAccess(
            calledDeclaration: FirBasedSymbol<*>,
            source: KtSourceElement,
            context: CheckerContext,
            reporter: DiagnosticReporter,
        ) {
            if (!isEffectivelyPrivateApiFunction) {
                if (calledDeclaration.isInsidePrivateClass()) {
                    reporter.reportOn(
                        source,
                        FirErrors.PRIVATE_CLASS_MEMBER_FROM_INLINE,
                        calledDeclaration,
                        inlineFunction.symbol,
                        context
                    )
                }",,6e1f
No signature found,"fun checkSuperCalls(
            calledDeclaration: FirCallableSymbol<*>,
            callExpression: FirStatement,
            context: CheckerContext,
            reporter: DiagnosticReporter,
        ) {
            val receiver = when (callExpression) {
                is FirQualifiedAccessExpression -> callExpression.dispatchReceiver
                is FirVariableAssignment -> callExpression.dispatchReceiver
                else -> null
            }",,6e1f
No signature found,"fun FirClassifierSymbol<*>.isDefinedInInlineFunction(): Boolean {
            return when (val symbol = this) {
                is FirAnonymousObjectSymbol -> true
                is FirRegularClassSymbol -> symbol.classId.isLocal
                is FirTypeAliasSymbol, is FirTypeParameterSymbol -> error(""Unexpected classifier declaration type: $symbol"")
            }",,6e1f
No signature found,"fun checkRecursion(
            targetSymbol: FirBasedSymbol<*>,
            source: KtSourceElement,
            context: CheckerContext,
            reporter: DiagnosticReporter,
        ) {
            if (targetSymbol == inlineFunction.symbol) {
                reporter.reportOn(source, FirErrors.RECURSION_IN_INLINE, targetSymbol, context)
            }",,6e1f
No signature found,"fun FirBasedSymbol<*>.isInsidePrivateClass(): Boolean {
            val containingClassSymbol = this.getOwnerLookupTag()?.toSymbol(session) ?: return false

            val containingClassVisibility = when (containingClassSymbol) {
                is FirAnonymousObjectSymbol -> return false
                is FirRegularClassSymbol -> containingClassSymbol.visibility
                is FirTypeAliasSymbol -> containingClassSymbol.visibility
            }",,6e1f
"fun checkParameters(
        function: FirSimpleFunction,
        overriddenSymbols: List<FirCallableSymbol<out FirCallableDeclaration>>,
        context: CheckerContext,
        reporter: DiagnosticReporter
    )","{
        for (param in function.valueParameters) {
            val coneType = param.returnTypeRef.coneType
            val functionKind = coneType.functionTypeKind(context.session)
            val isFunctionalType = functionKind != null
            val isSuspendFunctionType = functionKind?.isSuspendOrKSuspendFunction == true
            val defaultValue = param.defaultValue

            if (!isFunctionalType && (param.isNoinline || param.isCrossinline)) {
                reporter.reportOn(param.source, FirErrors.ILLEGAL_INLINE_PARAMETER_MODIFIER, context)
            }",,3338
"fun checkParametersInNotInline(function: FirFunction, context: CheckerContext, reporter: DiagnosticReporter)","{
        for (param in function.valueParameters) {
            if (param.isNoinline || param.isCrossinline) {
                reporter.reportOn(param.source, FirErrors.ILLEGAL_INLINE_PARAMETER_MODIFIER, context)
            }",,d482
"fun checkNothingToInline(function: FirSimpleFunction, context: CheckerContext, reporter: DiagnosticReporter)","{
        if (function.isExpect || function.isSuspend) return
        if (function.typeParameters.any { it.symbol.isReified }",,8fbe
"fun checkCanBeInlined(
        declaration: FirCallableDeclaration,
        effectiveVisibility: EffectiveVisibility,
        context: CheckerContext,
        reporter: DiagnosticReporter
    )",": Boolean {
        if (declaration.containingClassLookupTag() == null) return true
        if (effectiveVisibility == EffectiveVisibility.PrivateInClass) return true

        if (!declaration.isEffectivelyFinal(context)) {
            // For primary constructor parameters there's INLINE_PROPERTY_WITH_BACKING_FIELD already
            if (declaration.source?.kind != KtFakeSourceElementKind.PropertyFromParameter) {
                reporter.reportOn(declaration.source, FirErrors.DECLARATION_CANT_BE_INLINED, context)
            }",,2e7b
fun isInlinableDefaultValue(expression: FirExpression),": Boolean =
        e",,8add
"fun checkCallableDeclaration(declaration: FirCallableDeclaration, context: CheckerContext, reporter: DiagnosticReporter)","{
        if (declaration is FirPropertyAccessor) return
        val directOverriddenSymbols = declaration.getDirectOverriddenSymbols(context)
        if (declaration is FirSimpleFunction) {
            checkParameters(declaration, directOverriddenSymbols, context, reporter)
            checkNothingToInline(declaration, context, reporter)
        }",,0c36
"fun isNonLocalReturnAllowed(context: CheckerContext, inlineFunction: FirFunction)",": Boolean {
        val declarations = context.containingDeclarations
        val inlineFunctionIndex = declarations.indexOf(inlineFunction)
        if (inlineFunctionIndex == -1) return true

        for (i in (inlineFunctionIndex + 1) until declarations.size) {
            val declaration = declarations[i]

            // Only consider containers which can change locality.
            if (declaration !is FirFunction && declaration !is FirClass) continue

            // Anonymous functions are allowed if they are an argument to an inline function call,
            // and the associated anonymous function parameter allows non-local returns. Everything
            // else changes locality, and must not be allowed.
            val anonymousFunction = declaration as? FirAnonymousFunction ?: return false
            val (call, parameter) = extractCallAndParameter(context, anonymousFunction) ?: return false
            val callable = call.toResolvedCallableSymbol() as? FirFunctionSymbol<*> ?: return false
            if (!callable.isInline && !callable.isArrayLambdaConstructor()) return false
            if (parameter.isNoinline || parameter.isCrossinline) return false
        }",,8ed3
"fun extractCallAndParameter(
        context: CheckerContext,
        anonymousFunction: FirAnonymousFunction,
    )",": Pair<FirFunctionCall, FirValueParameter>? {
        for (call in context.callsOrAssignments) {
            if (call is FirFunctionCall) {
                val mapping = call.resolvedArgumentMapping ?: continue
                for ((argument, parameter) in mapping) {
                    if ((argument.unwrapArgument() as? FirAnonymousFunctionExpression)?.anonymousFunction === anonymousFunction) {
                        return call to parameter
                    }",,caa0
No signature found,"fun FirFunctionSymbol<*>.isArrayLambdaConstructor(): Boolean {
        return this is FirConstructorSymbol &&
                valueParameterSymbols.size == 2 &&
                resolvedReturnType.isArrayOrPrimitiveArray
    }",,6e1f
"fun createInlineFunctionBodyContext(function: FirFunction, session: FirSession)",": FirInlineDeclarationChecker.InlineFunctionBodyContext {
    val inlineableParameters = function.valueParameters.filter {
        if (it.isNoinline) return@filter false
        val type = it.returnTypeRef.coneType
        !type.isMarkedNullable && type.isNonReflectFunctionType(session)
    }",,385b
No signature found,fun DeclarationDescriptor.isFromContractDsl(): Boolean = t,,6e1f
No signature found,fun DeclarationDescriptor.isContractCallDescriptor(): Boolean = e,,6e1f
No signature found,fun DeclarationDescriptor.isImpliesCallDescriptor(): Boolean = e,,6e1f
No signature found,fun DeclarationDescriptor.isReturnsEffectDescriptor(): Boolean = e,,6e1f
No signature found,fun DeclarationDescriptor.isReturnsNotNullDescriptor(): Boolean = e,,6e1f
No signature found,fun DeclarationDescriptor.isReturnsWildcardDescriptor(): Boolean = e,,6e1f
No signature found,fun DeclarationDescriptor.isEffectDescriptor(): Boolean = e,,6e1f
No signature found,fun DeclarationDescriptor.isCallsInPlaceEffectDescriptor(): Boolean = e,,6e1f
No signature found,fun DeclarationDescriptor.isInvocationKindEnum(): Boolean = e,,6e1f
No signature found,"fun DeclarationDescriptor.isEqualsDescriptor(): Boolean =
    t",,6e1f
No signature found,"fun ResolvedCall<*>.firstArgumentAsExpressionOrNull(): KtExpression? =
    (",,6e1f
No signature found,fun DeclarationDescriptor.equalsDslDescriptor(dslName: Name): Boolean = t,,6e1f
fun dummy(),{},,784f
fun tailCall(),"{
    dummy()
}",,f423
fun stateMachine(),"{
    dummy()
    dummy()
}",,7127
No signature found,fun bar(d: String = e,"// EXPECTED_REACHABLE_NODES: 1253
// MODULE: lib
// NO_COMMON_FILES
// FILE: lib.kt",6e1f
fun box(),": String {
    try {
        return II.bar()
    }",,4f27
fun foo(x: String),: String? = x,,f5be
No signature found,"fun calc(x: String?): Int {
    // Smart cast because of x!! in receiver
    foo(x!!)?.subSequence(0, <!DEBUG_INFO_SMARTCAST!>x<!>.length)?.length
    // Smart cast because of x!! in receiver
    return <!DEBUG_INFO_SMARTCAST!>x<!>.length
}",,6e1f
fun newPublishedFun(),{},"// !API_VERSION: 1.3
// !OPT_IN: kotlin.RequiresOptIn
// !DIAGNOSTICS: -INVISIBLE_MEMBER -INVISIBLE_REFERENCE -NEWER_VERSION_IN_SINCE_KOTLIN -UNUSED_PARAMETER",fd73
fun newFunExperimentalInThePast(),{},,2c88
No signature found,"fun use1(
    c1: <!OPT_IN_USAGE_ERROR!>NewClassExperimentalInThePast<!>,
    t1: <!OPT_IN_USAGE_ERROR!>TypeAliasToNewClass<!>
) {
    <!UNRESOLVED_REFERENCE!>newPublishedFun<!>()
    <!UNRESOLVED_REFERENCE!>newFunExperimentalInThePast<!>()
    <!UNRESOLVED_REFERENCE!>newValExperimentalInThePast<!>
    <!UNRESOLVED_REFERENCE!>NewClassExperimentalInThePast<!>()
}",,6e1f
"fun use2(
    c2: NewClassExperimentalInThePast,
    t2: TypeAliasToNewClass
)","{
    <!UNRESOLVED_REFERENCE!>newPublishedFun<!>()
    newFunExperimentalInThePast()
    newValExperimentalInThePast
    NewClassExperimentalInThePast()
}",,7ded
"fun use3(
    c3: NewClassExperimentalInThePast,
    t3: TypeAliasToNewClass
)","{
    <!UNRESOLVED_REFERENCE!>newPublishedFun<!>()
    newFunExperimentalInThePast()
    newValExperimentalInThePast
    NewClassExperimentalInThePast()
}",,06df
"fun updateSupertypesIfNeeded(firClass: FirClass, scopeSession: ScopeSession)","{
        if (firClass !is FirRegularClass || !firClass.isData ||
            !firClass.hasAnnotationSafe(JvmStandardClassIds.Annotations.JvmRecord, session)
        ) return
        var anyFound = false
        var hasExplicitSuperClass = false
        val newSuperTypeRefs = firClass.superTypeRefs.mapTo(mutableListOf()) {
            when {
                it is FirImplicitBuiltinTypeRef && it.id == StandardClassIds.Any -> {
                    anyFound = true
                    it.withReplacedConeType(recordType)
                }",,0687
No signature found,"fun <E : FirElement> transformElement(element: E, data: ScopeSession): E {
            return element
        }",,6e1f
"fun transformRegularClass(regularClass: FirRegularClass, data: ScopeSession)",": FirStatement {
            return regularClass
        }",,bea2
"fun transformConstructor(constructor: FirConstructor, data: ScopeSession)",": FirStatement {
            return constructor.transformDelegatedConstructor(this, data)
        }",,5c17
"fun transformErrorPrimaryConstructor(errorPrimaryConstructor: FirErrorPrimaryConstructor, data: ScopeSession)","=
            t",,bdcd
"fun transformDelegatedConstructorCall(
            delegatedConstructorCall: FirDelegatedConstructorCall,
            data: ScopeSession
        )",": FirStatement {
            /*
             * Here we need to update only implicit calls to Any()
             * And such calls don't have a real source and can not be an lazy calls
             */
            if (
                delegatedConstructorCall is FirLazyDelegatedConstructorCall ||
                delegatedConstructorCall.source?.kind != KtFakeSourceElementKind.DelegatingConstructorCall
            ) return delegatedConstructorCall
            val constructedTypeRef = delegatedConstructorCall.constructedTypeRef
            if (constructedTypeRef is FirImplicitTypeRef || constructedTypeRef.coneTypeSafe<ConeKotlinType>()?.isAny == true) {
                delegatedConstructorCall.replaceConstructedTypeRef(constructedTypeRef.resolvedTypeFromPrototype(recordType))
            }",,818f
fun AndroidGradlePluginVersion(versionString: String),": AndroidGradlePluginVersion {
    return AndroidGradlePluginVersionOrNull(versionString)
        ?: throw IllegalArgumentException(""Invalid Android Gradle Plugin version: $versionString"")
}",,1b65
fun AndroidGradlePluginVersionOrNull(versionString: String),": AndroidGradlePluginVersion? {
    val baseVersion = versionString.split(""-"", limit = 2)[0]
    val classifier = versionString.split(""-"", limit = 2).getOrNull(1)

    val baseVersionSplit = baseVersion.split(""."")
    if (!(baseVersionSplit.size == 2 || baseVersionSplit.size == 3)) return null

    return AndroidGradlePluginVersion(
        major = baseVersionSplit[0].toIntOrNull() ?: return null,
        minor = baseVersionSplit[1].toIntOrNull() ?: return null,
        patch = baseVersionSplit.getOrNull(2)?.let { it.toIntOrNull() ?: return null }",,0f41
fun compareTo(other: AndroidGradlePluginVersion),": Int {
        if (this === other) return 0
        (this.major - other.major).takeIf { it != 0 }",,61dc
fun toString(),": String {
        return ""$major.$minor.$patch"" + if (classifier != null) ""-$classifier"" else """"
    }",,a535
No signature found,"fun AndroidGradlePluginVersion.compareTo(versionString: String): Int {
    return this.compareTo(AndroidGradlePluginVersion(versionString))
}",,6e1f
No signature found,"fun AndroidGradlePluginVersion?.isAtLeast(versionString: String): Boolean {
    if (this == null) return false
    return this >= AndroidGradlePluginVersion(versionString)
}",,6e1f
No signature found,"fun AndroidGradlePluginVersion?.isAtLeast(version: AndroidGradlePluginVersion): Boolean {
    if (this == null) return false
    return this >= version
}",,6e1f
fun create(),": JpsStatisticsReportService {
            val fileReportSettings = initFileReportSettings()
            val httpReportSettings = initHttpReportSettings()

            return if (fileReportSettings == null && httpReportSettings == null) {
                DummyJpsStatisticsReportService
            }",,9c2f
fun getFromContext(context: CompileContext),": JpsStatisticsReportService =
            c",,9d61
fun initFileReportSettings(),": FileReportSettings? {
            return System.getProperty(""kotlin.build.report.file.output_dir"")?.let {
                FileReportSettings(File(it), System.getProperty(""kotlin.build.report.file.change_file_limit"")?.toInt() ?: DEFAULT_CHANGED_FILE_LIST_LIMIT)
            }",,1fe6
fun initHttpReportSettings(),": HttpReportSettings? {
            val httpReportUrl = System.getProperty(""kotlin.build.report.http.url"") ?: return null
            val httpReportUser = System.getProperty(""kotlin.build.report.http.user"")
            val httpReportPassword = System.getProperty(""kotlin.build.report.http.password"")
            val includeGitBranch = System.getProperty(""kotlin.build.report.http.git_branch"", ""false"").toBoolean()
            val verboseEnvironment = System.getProperty(""kotlin.build.report.http.environment.verbose"", ""false"").toBoolean()
            return HttpReportSettings(httpReportUrl, httpReportUser, httpReportPassword, verboseEnvironment, includeGitBranch)
        }",,117a
fun buildStarted(context: CompileContext),"fun <T> reportMetrics(chunk: ModuleChunk, metric: JpsBuildTime, action: () -> T): T
    abstract 
    abstract fun buildFinish(context: CompileContext)

    abstract fun moduleBuildFinished(chunk: ModuleChunk, context: CompileContext, exitCode: ModuleLevelBuilder.ExitCode)
    abstract fun moduleBuildStarted(chunk: ModuleChunk)

    abstract fun reportDirtyFiles(kotlinDirtySourceFilesHolder: KotlinDirtySourceFilesHolder)
    abstract fun reportCompilerArguments(chunk: ModuleChunk, kotlinChunk: KotlinChunk)
    abstract fun getMetricReporter(chunk: ModuleChunk): JpsBuilderMetricReporter?
}


object DummyJpsStatisticsReportService : JpsStatisticsReportService() {
    override fun <T> reportMetrics(chunk: ModuleChunk, metric: JpsBuildTime, action: () -> T): T {
        return action()
    }",,17ce
fun buildStarted(context: CompileContext),{},,17ce
fun buildFinish(context: CompileContext),{},,e9ce
"fun moduleBuildFinished(chunk: ModuleChunk, context: CompileContext, exitCode: ExitCode)",{},,02b2
fun moduleBuildStarted(chunk: ModuleChunk),{},,4d78
fun reportDirtyFiles(kotlinDirtySourceFilesHolder: KotlinDirtySourceFilesHolder),{},,3be1
"fun reportCompilerArguments(chunk: ModuleChunk, kotlinChunk: KotlinChunk)",{},,bec4
fun getMetricReporter(chunk: ModuleChunk),: JpsBuilderMetricReporter? = n,,26a5
fun moduleBuildStarted(chunk: ModuleChunk),"{
        val moduleName = chunk.name
        val jpsReporter = JpsBuilderMetricReporterImpl(chunk, BuildMetricsReporterImpl())
        if (buildMetrics.putIfAbsent(moduleName, jpsReporter) != jpsReporter) {
            log.warn(""Service already initialized for $moduleName module"")
            return
        }",,4d78
fun getMetricReporter(chunk: ModuleChunk),": JpsBuilderMetricReporter? {
        val moduleName = chunk.name
        return getMetricReporter(moduleName)
    }",,26a5
fun getMetricReporter(moduleName: String),": JpsBuilderMetricReporter? {
        val metricReporter = buildMetrics[moduleName]
        if (metricReporter == null) {
            //At some point log should be changed to exception
            log.warn(""Service hasn't initialized for $moduleName module"")
            return null
        }",,90cc
"fun moduleBuildFinished(chunk: ModuleChunk, context: CompileContext, exitCode: ExitCode)","{
        val moduleName = chunk.name
        val metrics = buildMetrics.remove(moduleName)
        if (metrics == null) {
            log.warn(""Service hasn't initialized for $moduleName module"")
            return
        }",,02b2
fun buildFinish(context: CompileContext),"{
        val compileStatisticsData = finishedModuleBuildMetrics.map { it.flush(context) }",,e9ce
No signature found,"fun <T> reportMetrics(chunk: ModuleChunk, metric: JpsBuildTime, action: () -> T): T {
        return getMetricReporter(chunk)?.measure(metric, action) ?: action.invoke()
    }",,6e1f
fun reportDirtyFiles(kotlinDirtySourceFilesHolder: KotlinDirtySourceFilesHolder),"{
        getMetricReporter(kotlinDirtySourceFilesHolder.chunk)?.let {
            it.addChangedFiles(kotlinDirtySourceFilesHolder.allRemovedFilesFiles.map { it.path }",,3be1
"fun reportCompilerArguments(chunk: ModuleChunk, kotlinChunk: KotlinChunk)","{
        getMetricReporter(chunk)?.let {
            it.addCompilerArguments(kotlinChunk.compilerArguments.freeArgs)
            it.setKotlinLanguageVersion(kotlinChunk.compilerArguments.languageVersion)
        }",,bec4
fun buildStarted(context: CompileContext),"{
        loggerAdapter.info(""Build started for $context with enabled build metric reports."")
    }",,17ce
fun get(),": String

    //@CompileTimeCalculation
    fun defaultGet() = """,,7383
fun get(),"= """,,7383
fun str(),"= """,,62ab
fun get(),"= """,,7383
No signature found,fun <T : Any> T.self() = o,,6e1f
fun bar(),": T {
            return this@self
        }",,66c3
fun test(),"{
        1.self().bar() + 1
    }",,fe98
fun <T> bar(),= o,,db0b
fun baz(),": Foo<R> {
            return this@Foo
        }",,b22f
fun getR(r: R),= r,,c531
fun test(),"{
        Foo<Int>().bar<String>().baz().getR(1)
        Foo<Int>().bar<String>().baz().getR(<!ARGUMENT_TYPE_MISMATCH!>""""<!>)
    }",,fe98
No signature found,"fun IrValueParameter.isInlineParameter(): Boolean =
    i",,6e1f
No signature found,fun IrStatement.unwrapInlineLambda(): IrFunctionReference? = w,,6e1f
No signature found,"fun IrFunction.isInlineFunctionCall(context: JvmBackendContext): Boolean =
    (",,6e1f
No signature found,"fun IrDeclaration.isInlineOnly(): Boolean =
    t",,6e1f
No signature found,"fun IrDeclarationWithVisibility.isEffectivelyInlineOnly(): Boolean =
    t",,6e1f
No signature found,"fun IrFunction.isPrivateInlineSuspend(): Boolean =
    i",,6e1f
No signature found,"fun IrFunction.isReifiable(): Boolean =
    t",,6e1f
No signature found,"fun IrAttributeContainer.getDeclarationBeforeInline(): IrDeclaration? {
    val original = this.originalBeforeInline ?: return null
    return original.extractRelatedDeclaration()
}",,6e1f
No signature found,"fun IrAttributeContainer.getAttributeOwnerBeforeInline(): IrAttributeContainer? {
    if (this.originalBeforeInline == null) return null
    return generateSequence(this) { it.originalBeforeInline }",,6e1f
"fun isVisible(memberSymbol: KtCallableSymbol, classSymbol: KtClassOrObjectSymbol)",": Boolean  {
        val memberDescriptor = getSymbolDescriptor(memberSymbol) as? DeclarationDescriptorWithVisibility ?: return false
        val classDescriptor = getSymbolDescriptor(classSymbol) ?: return false
        return isVisibleWithAnyReceiver(memberDescriptor, classDescriptor, analysisSession.analysisContext.languageVersionSettings)
    }",,6938
"fun getImplementationStatus(
        memberSymbol: KtCallableSymbol,
        parentClassSymbol: KtClassOrObjectSymbol
    )",": ImplementationStatus?  {
        throw NotImplementedError(""Method is not implemented for FE 1.0"")
    }",,64d5
fun unwrapFakeOverrides(symbol: KtCallableSymbol),": KtCallableSymbol {
        val callableDescriptor = getSymbolDescriptor(symbol) as? CallableMemberDescriptor ?: return symbol
        val originalCallableDescriptor = callableDescriptor.findOriginalTopMostOverriddenDescriptors().firstOrNull() ?: return symbol
        return originalCallableDescriptor.toKtCallableSymbol(analysisContext) ?: symbol
    }",,502a
fun getOriginalContainingClassForOverride(symbol: KtCallableSymbol),": KtClassOrObjectSymbol?  {
        val callableDescriptor = getSymbolDescriptor(symbol) as? CallableMemberDescriptor ?: return null
        val originalCallableDescriptor = callableDescriptor.findOriginalTopMostOverriddenDescriptors().firstOrNull() ?: return null
        val containingClassDescriptor = originalCallableDescriptor.containingDeclaration as? ClassDescriptor ?: return null
        return containingClassDescriptor.toKtClassifierSymbol(analysisContext) as? KtClassOrObjectSymbol
    }",,d352
fun test(),"{
        a
        """".a
    }","// ISSUE: KT-65373, KT-65464

// FILE: J.java",fe98
fun test(),"{
        a
        """".a
    }",,fe98
fun test(),"{
        a
        """".a
    }",,fe98
fun test(),"{
        a
        """".a
    }",,fe98
"fun check(declaration: FirDeclaration, context: CheckerContext, reporter: DiagnosticReporter)","{
        when (declaration) {
            is FirAnonymousFunction -> return
            is FirTypeAlias -> checkTypeAlias(declaration, reporter, context)
            is FirProperty -> checkProperty(declaration, reporter, context)
            is FirFunction -> checkFunction(declaration, reporter, context)
            is FirRegularClass -> checkClass(declaration, reporter, context)
            else -> {}",,ee93
"fun checkClass(declaration: FirRegularClass, reporter: DiagnosticReporter, context: CheckerContext)","{
        checkSupertypes(declaration, reporter, context)
        checkParameterBounds(declaration, reporter, context)
    }",,69ff
"fun checkSupertypes(declaration: FirRegularClass, reporter: DiagnosticReporter, context: CheckerContext)","{
        val classVisibility = declaration.effectiveVisibility

        if (classVisibility == EffectiveVisibility.Local) return
        val supertypes = declaration.superTypeRefs
        val isInterface = declaration.classKind == ClassKind.INTERFACE
        for (supertypeRef in supertypes) {
            val supertype = supertypeRef.coneTypeSafe<ConeClassLikeType>() ?: continue
            val classSymbol = supertype.toRegularClassSymbol(context.session) ?: continue
            val superIsInterface = classSymbol.classKind == ClassKind.INTERFACE
            if (superIsInterface != isInterface) {
                continue
            }",,3050
"fun checkParameterBounds(declaration: FirRegularClass, reporter: DiagnosticReporter, context: CheckerContext)","{
        val classVisibility = declaration.effectiveVisibility

        if (classVisibility == EffectiveVisibility.Local) return
        for (parameter in declaration.typeParameters) {
            for (bound in parameter.symbol.resolvedBounds) {
                val (restricting, restrictingVisibility) = bound.coneType.findVisibilityExposure(context, classVisibility) ?: continue
                reporter.reportOn(
                    bound.source,
                    FirErrors.EXPOSED_TYPE_PARAMETER_BOUND,
                    classVisibility,
                    restricting,
                    restrictingVisibility,
                    context
                )
            }",,986a
"fun checkTypeAlias(declaration: FirTypeAlias, reporter: DiagnosticReporter, context: CheckerContext)","{
        val expandedType = declaration.expandedConeType
        val typeAliasVisibility = declaration.effectiveVisibility

        if (typeAliasVisibility == EffectiveVisibility.Local) return
        val (restricting, restrictingVisibility) = expandedType?.findVisibilityExposure(context, typeAliasVisibility) ?: return
        reporter.reportOn(
            declaration.source,
            FirErrors.EXPOSED_TYPEALIAS_EXPANDED_TYPE,
            typeAliasVisibility,
            restricting,
            restrictingVisibility,
            context
        )
    }",,d4f8
"fun checkFunction(declaration: FirFunction, reporter: DiagnosticReporter, context: CheckerContext)","{
        if (declaration.source?.kind is KtFakeSourceElementKind) {
            return
        }",,e93e
"fun checkProperty(declaration: FirProperty, reporter: DiagnosticReporter, context: CheckerContext)","{
        if (declaration.fromPrimaryConstructor == true) return
        if (declaration.isLocal) return
        val propertyVisibility = declaration.effectiveVisibility

        if (propertyVisibility == EffectiveVisibility.Local) return
        declaration.returnTypeRef.coneType
            .findVisibilityExposure(context, propertyVisibility)?.let { (restricting, restrictingVisibility) ->
                reporter.reportOn(
                    declaration.source,
                    FirErrors.EXPOSED_PROPERTY_TYPE,
                    propertyVisibility,
                    restricting,
                    restrictingVisibility,
                    context
                )
            }",,3db7
No signature found,"fun checkMemberReceiver(
        typeRef: FirTypeRef?,
        memberDeclaration: FirCallableDeclaration?,
        reporter: DiagnosticReporter,
        context: CheckerContext
    ) {
        if (typeRef == null || memberDeclaration == null) return
        val receiverParameterType = typeRef.coneType
        val memberVisibility = memberDeclaration.effectiveVisibility

        if (memberVisibility == EffectiveVisibility.Local) return
        val (restricting, restrictingVisibility) = receiverParameterType.findVisibilityExposure(context, memberVisibility) ?: return
        reporter.reportOn(
            typeRef.source,
            FirErrors.EXPOSED_RECEIVER_TYPE,
            memberVisibility,
            restricting,
            restrictingVisibility,
            context
        )
    }",,6e1f
No signature found,"fun ConeKotlinType.findVisibilityExposure(
        context: CheckerContext,
        base: EffectiveVisibility,
        visitedTypes: MutableSet<ConeKotlinType> = m",,6e1f
fun box(),": String {
    val xs = listOf(1, 1, 1, 1)
    var sum = 0
    for (i in xs.indices.reversed()) {
        sum = sum * 10 + i + xs[i]
    }","// IMPORTANT!
// Please, when your changes cause failures in bytecodeText tests for 'for' loops,
// examine the resulting bytecode shape carefully.
// Range and progression-based loops generated with Kotlin compiler should be
// as close as possible to Java counter loops ('for (int i = a; i < b; ++i) { ... }').
// Otherwise it may result in performance regression due to missing HotSpot optimizations.
// Run Kotlin compiler benchmarks (https://github.com/Kotlin/kotlin-benchmarks)
// with compiler built from your changes if you are not sure.",4f27
No signature found,fun PointerEventInit(pointerId: Int? = 0,,6e1f
"fun <T, R> foo(x: T)",: R = T,"// !CHECK_TYPE
// !DIAGNOSTICS: -UNUSED_PARAMETER, -UNUSED_VARIABLE",ecdc
No signature found,"fun <T, R> bar(x: T, y: R, f: (T) -> R): Pair<T, R?> = T",,6e1f
No signature found,"fun <reified T, reified R> baz(x: T, y: R, f: (T) -> R) {}",,6e1f
fun <T> test(x: T),"{
    bar(1, """", ::foo).checkType { _<Pair<Int, String?>>() }",,200b
No signature found,"fun Project.getKotlinSourceSetOrFail(androidSourceSet: AndroidSourceSet): KotlinSourceSet {
    val kotlinSourceSets = kotlinExtension.sourceSets
        .filter { kotlinSourceSet -> kotlinSourceSet.androidSourceSetInfoOrNull?.androidSourceSetName == androidSourceSet.name }",,6e1f
No signature found,"fun Project.getKotlinSourceSetOrFail(androidSourceSet: SourceProvider): KotlinSourceSet {
    return getKotlinSourceSetOrFail(androidExtension.sourceSets.getByName(androidSourceSet.name))
}",,6e1f
fun test(),{},// !DIAGNOSTICS: -UNUSED_PARAMETER,fe98
"fun <K> select(a: K, b: K)",: K = a,,ca5b
No signature found,"fun test(a: A?, b: B?) {
    b as A?
    a as B?
    val c = select(a, b)
    if (c != null) {
        <!DEBUG_INFO_SMARTCAST!>c<!>.test()
    }",,6e1f
No signature found,"fun `test - project to project ide dependency resolution`() {
        val rootProject = buildProject()
        val consumer = buildProject(projectBuilder = { withName(""consumer"").withParent(rootProject) }",,6e1f
fun hashCode(),: Int = t,"// FIR_IDENTICAL
// !LANGUAGE: +InlineClasses",6874
fun foo(),: Int = c,,519f
fun box(),": String {
    val ic = IC<Int>(C(42))

    if (ic.foo() != 42) return ""FAIL""
    return ""OK""
}",,4f27
fun foo(x: Outer),= 1,// !DIAGNOSTICS: -UNUSED_PARAMETER,f782
fun test(),": Int {
    try {
        // do nothing
    }",,fe98
fun contains(char: Char),: Boolean = C,,b1ad
fun valueOf(category: Int),": CharCategory =
            w",,98ed
No signature found,"fun foo(r : (() -> Unit)?) {
    }","// FIR_IDENTICAL
// FILE: Super.java",6e1f
No signature found,"fun <T, C: Collection<T>> convert(src: Collection<T>, dest: C): C = t","// FIR_IDENTICAL
// !CHECK_TYPE",6e1f
fun test(l: List<Int>),"{
    //todo should be inferred
    val r = convert(l, HashSet())
    r checkType { _<HashSet<Int>>() }",,f63d
fun getType(),": PsiType {
        val bindingContext = LightClassGenerationSupport.getInstance(this.project).analyze(kotlinOrigin)
        val (classId, arrayDimensions) = bindingContext[BindingContext.COMPILE_TIME_VALUE, kotlinOrigin]
            ?.toConstantValue(TypeUtils.NO_EXPECTED_TYPE)?.safeAs<KClassValue>()?.value
            ?.safeAs<KClassValue.Value.NormalClass>()?.value ?: return PsiType.VOID
        var type = psiType(classId.asSingleFqName().asString(), kotlinOrigin, boxPrimitiveType = arrayDimensions > 0)
        repeat(arrayDimensions) {
            type = type.createArrayType()
        }",,fac2
fun getOperand(),: PsiTypeElement = L,,f651
fun box(),": String {
    val plusZero: Any = 0.0
    val minusZero: Any = -0.0
    if ((minusZero as Double) < (plusZero as Double)) return ""fail 0""

    val plusZeroF: Any = 0.0F
    val minusZeroF: Any = -0.0F
    if ((minusZeroF as Float) < (plusZeroF as Float)) return ""fail 1""

    if ((minusZero as Double) != (plusZero as Double)) return ""fail 3""

    if ((minusZeroF as Float) != (plusZeroF as Float)) return ""fail 4""

    return ""OK""
}",,4f27
fun test(data: String),"=
    w","// FIR_IDENTICAL
// !LANGUAGE: +VariableDeclarationInWhenSubject",e95a
No signature found,"fun generate(
        valueArgumentsByIndex: List<ResolvedValueArgument>,
        actualArgs: List<ResolvedValueArgument>,
        // may be null for a constructor of an object literal
        calleeDescriptor: CallableDescriptor?
    ): DefaultCallArgs {
        assert(valueArgumentsByIndex.size == actualArgs.size) {
            ""Value arguments collection should have same size, but ${valueArgumentsByIndex.size}",,6e1f
"fun generateExpression(i: Int, argument: ExpressionValueArgument)","{
        throw UnsupportedOperationException(""Unsupported expression value argument #$i: $argument"")
    }",,36a2
"fun generateDefault(i: Int, argument: DefaultValueArgument)","{
        throw UnsupportedOperationException(""Unsupported default value argument #$i: $argument"")
    }",,15d4
"fun generateVararg(i: Int, argument: VarargValueArgument)","{
        throw UnsupportedOperationException(""Unsupported vararg value argument #$i: $argument"")
    }",,a028
"fun generateOther(i: Int, argument: ResolvedValueArgument)","{
        throw UnsupportedOperationException(""Unsupported value argument #$i: $argument"")
    }",,73e6
fun reorderArgumentsIfNeeded(args: List<ArgumentAndDeclIndex>),"{
        throw UnsupportedOperationException(""Unsupported operation"")
    }",,ed25
fun getFunctionWithDefaultArguments(functionDescriptor: FunctionDescriptor),": FunctionDescriptor {
    if (functionDescriptor.containingDeclaration !is ClassDescriptor) return functionDescriptor
    if (functionDescriptor.overriddenDescriptors.isEmpty()) return functionDescriptor

    // We are calling a function with some arguments mapped as defaults.
    // Multiple override-equivalent functions from different supertypes with (potentially different) default values
    // can't be overridden by any function in a subtype.
    // Also, a function overriding some other function can't introduce default parameter values.
    // Thus, among all overridden functions should be one (and only one) function
    // that doesn't override anything and has parameters with default values.
    return functionDescriptor.overriddenTreeUniqueAsSequence(true)
        .firstOrNull { function ->
            function.kind == CallableMemberDescriptor.Kind.DECLARATION &&
                    function.overriddenDescriptors.isEmpty() &&
                    function.valueParameters.any { valueParameter -> valueParameter.hasDefaultValue() }",,687c
fun takeIssue(issue: Issue),{},"// FIR_IDENTICAL
// ISSUE: KT-41952",9468
No signature found,"fun <Self : Any, Target : Any> Self.bidir_collection(targetType: KClass<out Target>, f: (Self) -> Unit): Delegate<Self, Collection<Target>> = n",,6e1f
No signature found,"fun getValue(thisRef: R, property: KProperty<*>): T {
        return null!!
    }",,6e1f
No signature found,"fun setValue(thisRef: R, property: KProperty<*>, value: T) {}",,6e1f
fun doTest(),": String {
        return <!SUPER_CALL_FROM_PUBLIC_INLINE!>super<!>.test
    }",// FILE: 1.kt,203f
fun box(),": String {
    return X.doTest()
}",,4f27
No signature found,"fun ProtoClass.findClass(irClass: IrClass, fileReader: IrLibraryFile, symbolDeserializer: IrSymbolDeserializer): ProtoClass {
    val signature = irClass.symbol.signature ?: error(""No signature for ${irClass.render()}",,6e1f
No signature found,"fun ProtoClass.findProperty(irProperty: IrProperty, fileReader: IrLibraryFile, symbolDeserializer: IrSymbolDeserializer): ProtoProperty {
    val signature = irProperty.symbol.signature ?: error(""No signature for ${irProperty.render()}",,6e1f
No signature found,"fun ProtoProperty.findAccessor(irProperty: IrProperty, irFunction: IrSimpleFunction): ProtoFunction {
    if (irFunction == irProperty.getter)
        return getter
    require(irFunction == irProperty.setter) { ""Accessor should be either a getter or a setter. ${irFunction.render()}",,6e1f
No signature found,"fun ProtoClass.findInlineFunction(irFunction: IrFunction, fileReader: IrLibraryFile, symbolDeserializer: IrSymbolDeserializer): ProtoFunction {
    (irFunction as? IrSimpleFunction)?.correspondingPropertySymbol?.owner?.let { irProperty ->
        return findProperty(irProperty, fileReader, symbolDeserializer).findAccessor(irProperty, irFunction)
    }",,6e1f
fun testRenameModule(),"{
        doTest(""jps/jps-plugin/testData/incremental/custom/renameModule/"")
    }",,d0e7
fun performAdditionalModifications(modifications: List<Modification>),"{
        projectDescriptor.project.modules.forEach { it.name += ""Renamed"" }",,bfd3
No signature found,fun f(run: () -> Unit) = R,,6e1f
No signature found,fun g(run: () -> Unit) = R,,6e1f
No signature found,fun h(p: (String) -> Boolean) = P,,6e1f
"fun getWrapperVisibility(expression: IrTypeOperatorCall, scopes: List<ScopeWithIr>)",": DescriptorVisibility

    abstract fun getSuperTypeForWrapper(typeOperand: IrType): IrType

    protected open fun getWrappedFunctionType(klass: IrClass): IrType =
        k",,fe15
fun getSuspendFunctionWithoutContinuation(function: IrSimpleFunction),": IrSimpleFunction =
        f",,5bcb
No signature found,"fun IrFunctionBuilder.setConstructorSourceRange(createFor: IrElement) {
        setSourceRange(createFor)
    }",,6e1f
fun postprocessCreatedObjectProxy(klass: IrClass),{},,6dd3
fun lower(irFile: IrFile),"{
        cachedImplementations.clear()
        inlineCachedImplementations.clear()
        enclosingContainer = irFile.declarations.findIsInstanceAnd<IrClass> { it.isFileClass }",,a3a5
fun currentScopeSymbol(),": IrSymbol? {
        return currentScope?.scope?.scopeOwnerSymbol
    }",,89e5
fun visitClassNew(declaration: IrClass),": IrStatement {
        val prevContainer = enclosingContainer
        if (prevContainer == null || prevContainer is IrFile)
            enclosingContainer = declaration
        super.visitClassNew(declaration)
        enclosingContainer = prevContainer
        return declaration
    }",,7cc9
fun visitTypeOperator(expression: IrTypeOperatorCall),": IrExpression {
        if (expression.operator != IrTypeOperator.SAM_CONVERSION)
            return super.visitTypeOperator(expression)
        // TODO: there must be exactly one wrapper per Java interface; ideally, if the interface has generic
        //       parameters, so should the wrapper. Currently, we just erase them and generate something that
        //       erases to the same result at codegen time.
        val erasedSuperType = getSuperTypeForWrapper(expression.typeOperand)
        val superType = if (expression.typeOperand.isNullable()) erasedSuperType.makeNullable() else erasedSuperType
        val invokable = expression.argument.transform(this, null)
        context.createIrBuilder(currentScopeSymbol()!!).apply {
            // Do not generate a wrapper class for null, it has no invoke() anyway.
            if (invokable.isNullConst())
                return invokable

            val cache = if (inInlineFunctionScope) inlineCachedImplementations else cachedImplementations
            val implementation = cache.getOrPut(erasedSuperType) {
                createObjectProxy(erasedSuperType, getWrapperVisibility(expression, allScopes), expression)
            }",,d80c
No signature found,fun method(...) = i,,6e1f
"fun createObjectProxy(superType: IrType, wrapperVisibility: DescriptorVisibility, createFor: IrElement)",": IrClass {
        val superClass = superType.classifierOrFail.owner as IrClass
        // The language documentation prohibits casting lambdas to classes, but if it was allowed,
        // the `irDelegatingConstructorCall` in the constructor below would need to be modified.
        assert(superClass.kind == ClassKind.INTERFACE) { ""SAM conversion to an abstract class not allowed"" }",,beed
"fun generateEqualsHashCode(klass: IrClass, superType: IrType, functionDelegateField: IrField)","=
        S",,d292
fun getAdditionalSupertypes(supertype: IrType),"=
        i",,7e2b
No signature found,"fun interface wrappers, as well as an implementation of getFunctionDelegate
 * (inherited from kotlin.jvm.internal.FunctionAdapter), needed to properly implement them.
 * This class is used in two places:
 * - FunctionReferenceLowering, which is the case of SAM conversion of a (maybe adapted) function reference, e.g. `FunInterface(foo::bar)`.
 *   Note that we don't generate equals/hashCode for SAM conversion of lambdas, e.g. `FunInterface {}",,6e1f
fun generate(),"{
        generateGetFunctionDelegate()
        val anyGenerator = MethodsFromAnyGeneratorForLowerings(context, klass, IrDeclarationOrigin.SYNTHETIC_GENERATED_SAM_IMPLEMENTATION)
        generateEquals(anyGenerator)
        generateHashCode(anyGenerator)
    }",,3be5
fun generateGetFunctionDelegate(),"{
        klass.addFunction(getFunctionDelegate.name.asString(), getFunctionDelegate.returnType).apply {
            overriddenSymbols = listOf(getFunctionDelegate.symbol)
            body = context.createIrBuilder(symbol).run {
                irBlockBody {
                    +irReturn(obtainFunctionDelegate(irGet(dispatchReceiverParameter!!)))
                }",,2643
fun generateEquals(anyGenerator: MethodsFromAnyGeneratorForLowerings),"{
        anyGenerator.createEqualsMethodDeclaration().apply {
            val other = valueParameters[0]
            body = context.createIrBuilder(symbol).run {
                irBlockBody {
                    +irReturn(
                        irIfThenElse(
                            builtIns.booleanType,
                            irIs(irGet(other), samSuperType),
                            irIfThenElse(
                                builtIns.booleanType,
                                irIs(irGet(other), functionAdapterClass.typeWith()),
                                irEquals(
                                    irCall(getFunctionDelegate).also {
                                        it.dispatchReceiver = irGet(dispatchReceiverParameter!!)
                                    }",,abdd
fun generateHashCode(anyGenerator: MethodsFromAnyGeneratorForLowerings),"{
        anyGenerator.createHashCodeMethodDeclaration().apply {
            val hashCode = context.irBuiltIns.functionClass.owner.functions.single { it.isHashCode() }",,b0d9
fun testSimple(),= B,// FIR_IDENTICAL,5615
No signature found,"fun <reified T> testArray(n: Int, crossinline block: () -> T): Array<T> {
    return Array<T>(n) { block() }",,6e1f
No signature found,"fun BuildResult.assertTasksAreNotInTaskGraph(vararg taskPaths: String) {
    val presentTasks = taskPaths.filter { task(it) != null }",,6e1f
No signature found,"fun BuildResult.findTasksByPattern(pattern: Regex): Set<String> {
    return tasks.map { it.path }",,6e1f
No signature found,"fun BuildResult.assertTasksExecuted(vararg taskPaths: String) {
    assertTasksHaveOutcome(TaskOutcome.SUCCESS, taskPaths.asList())
}",,6e1f
No signature found,"fun BuildResult.assertAnyTaskHasBeenExecuted(taskPaths: Set<String>) {
    val taskOutcomes = taskPaths.associateWith { taskPath -> task(taskPath)?.outcome }","/**
 * Asserts any of [taskPaths] has [TaskOutcome.SUCCESS] execution state.
 */",6e1f
No signature found,"fun BuildResult.assertTasksExecuted(taskPaths: Collection<String>) {
    assertTasksExecuted(*taskPaths.toTypedArray())
}",,6e1f
No signature found,"fun BuildResult.assertTasksFailed(vararg taskPaths: String) {
    assertTasksHaveOutcome(TaskOutcome.FAILED, taskPaths.asList())
}","/**
 * Asserts given [taskPaths] have [TaskOutcome.FAILED] execution state.
 */",6e1f
No signature found,"fun BuildResult.assertTasksUpToDate(vararg taskPaths: String) {
    assertTasksHaveOutcome(TaskOutcome.UP_TO_DATE, taskPaths.asList())
}","/**
 * Asserts given [taskPaths] have [TaskOutcome.UP_TO_DATE] execution state.
 */",6e1f
No signature found,"fun BuildResult.assertTasksUpToDate(taskPaths: Collection<String>) {
    assertTasksUpToDate(*taskPaths.toTypedArray())
}","/**
 * Asserts given [taskPaths] have [TaskOutcome.UP_TO_DATE] execution state.
 */",6e1f
No signature found,"fun BuildResult.assertTasksSkipped(vararg taskPaths: String) {
    assertTasksHaveOutcome(TaskOutcome.SKIPPED, taskPaths.asList())
}","/**
 * Asserts given [taskPaths] have [TaskOutcome.SKIPPED] execution state.
 */",6e1f
No signature found,"fun BuildResult.assertTasksFromCache(vararg taskPaths: String) {
    assertTasksHaveOutcome(TaskOutcome.FROM_CACHE, taskPaths.asList())
}","/**
 * Asserts given [taskPaths] have [TaskOutcome.FROM_CACHE] execution state.
 */",6e1f
No signature found,"fun BuildResult.assertTasksNoSource(vararg taskPaths: String) {
    assertTasksHaveOutcome(TaskOutcome.NO_SOURCE, taskPaths.asList())
}","/**
 * Asserts given [taskPaths] have [TaskOutcome.NO_SOURCE] execution state.
 */",6e1f
No signature found,"fun BuildResult.assertTasksHaveOutcome(expected: TaskOutcome, taskPaths: Collection<String>) {
    taskPaths.forEach { taskPath ->
        val task = task(taskPath)
        assertNotNull(task, ""expected Task $taskPath had state $expected, but task was not executed"")
        assert(task.outcome == expected) {
            printBuildOutput()
            """"""
            |Expected Task $taskPath had state:${expected}","/**
 * Asserts given [taskPaths] have [expected] execution state.
 */",6e1f
No signature found,"fun BuildResult.assertTasksPackedToCache(vararg taskPaths: String) {
    taskPaths.forEach {
        assertOutputContains(""Stored cache entry for task '$it' with cache key "")
    }",,6e1f
No signature found,"fun TestProject.buildAndAssertAllTasks(
    registeredTasks: List<String> = e",,6e1f
No signature found,"fun BuildResult.assertTasksInBuildOutput(
    expectedPresentTasks: List<String> = e",,6e1f
No signature found,"fun BuildResult.getActualTasksAsString(): String {
    return tasks.joinToString(""\n"") { ""${it.path}",,6e1f
No signature found,"fun BuildResult.getAllTasksFromTheOutput(): List<String> {

    val taskPattern = Regex(""^([:\\w]+) - (.*)$"")
    val tasks = mutableListOf<String>()

    output.lines().forEach { line ->
        if (line.matches(taskPattern)) {
            tasks.add(taskPattern.find(line)!!.groupValues[1])
        }",,6e1f
fun p2Fun(),{},,4048
No signature found,fun String.p2ExtFun() {},,6e1f
No signature found,"fun getValue(thisRef: Foo, property: KProperty<*>): Int {
        return thisRef.a
    }","// WITH_STDLIB
// WORKS_WHEN_VALUE_CLASS
// LANGUAGE: +ValueClasses, +GenericInlineClassParameter",6e1f
fun box(),": String {
    val x = Foo()
    if (x.b != 42) throw AssertionError()

    return ""OK""
}",,4f27
"fun doTest(content: String, expectedAnnotation: String)","{
        checkAnnotationOnAllExceptLocalDeclarations(content, expectedAnnotation)
    }",,0f25
fun getPath(),"= """,,872c
fun usePropBrowsers(),"{
        val propValue = project.kotlinPropertiesProvider.jsKarmaBrowsers(compilation.target)
        val propBrowsers = propValue?.split("","")
        propBrowsers?.map(String::trim)?.forEach {
            when (it.toLowerCaseAsciiOnly()) {
                ""chrome"" -> useChrome()
                ""chrome-canary"" -> useChromeCanary()
                ""chrome-canary-headless"" -> useChromeCanaryHeadless()
                ""chrome-headless"" -> useChromeHeadless()
                ""chrome-headless-no-sandbox"" -> useChromeHeadlessNoSandbox()
                ""chromium"" -> useChromium()
                ""chromium-headless"" -> useChromiumHeadless()
                ""firefox"" -> useFirefox()
                ""firefox-aurora"" -> useFirefoxAurora()
                ""firefox-aurora-headless"" -> useFirefoxAuroraHeadless()
                ""firefox-developer"" -> useFirefoxDeveloper()
                ""firefox-developer-headless"" -> useFirefoxDeveloperHeadless()
                ""firefox-headless"" -> useFirefoxHeadless()
                ""firefox-nightly"" -> useFirefoxNightly()
                ""firefox-nightly-headless"" -> useFirefoxNightlyHeadless()
                ""ie"" -> useIe()
                ""opera"" -> useOpera()
                ""phantom-js"" -> usePhantomJS()
                ""safari"" -> useSafari()
                else -> project.logger.warn(""Unrecognised `kotlin.js.browser.karma.browsers` value [$it]. Ignoring..."")
            }",,4a53
fun useKotlinReporter(),"{
        config.reporters.add(""karma-kotlin-reporter"")

        confJsWriters.add {
            // Not all log events goes through this appender
            // For example Error in config file
            //language=ES6
            it.appendLine(
                """"""
                config.plugins = config.plugins || [];
                config.plugins.push('kotlin-test-js-runner/karma-kotlin-reporter.js');
                
                config.loggers = [
                    {
                        type: 'kotlin-test-js-runner/tc-log-appender.js',
                        //default layout
                        layout: { type: 'pattern', pattern: '%[%d{DATETIME}",,bc64
fun watch(),"{
        config.singleRun = false
        config.autoWatch = true
    }",,682f
fun useConfigDirectory(dir: String),= u,,a3c7
fun useConfigDirectory(dir: File),"{
        configDirectory = dir
    }",,941a
fun useChromeLike(id: String),= u,,07ae
fun useChrome(),= u,,a524
fun useChromeHeadless(),= u,,97f6
fun useChromeHeadlessNoSandbox(),"{
        val chromeHeadlessNoSandbox = ""ChromeHeadlessNoSandbox""

        config.customLaunchers[chromeHeadlessNoSandbox] = CustomLauncher(""ChromeHeadless"").apply {
            flags.add(""--no-sandbox"")
        }",,ed0f
fun useChromium(),= u,,0fb3
fun useChromiumHeadless(),= u,,ab79
fun useChromeCanary(),= u,,b837
fun useChromeCanaryHeadless(),= u,,6804
fun useChromeHeadlessWasmGc(),"{
        val chromeCanaryHeadlessWasmGc = ""ChromeHeadlessWasmGc""

        config.customLaunchers[chromeCanaryHeadlessWasmGc] = CustomLauncher(""ChromeHeadless"").apply {
            flags.add(""--js-flags=--experimental-wasm-gc"")
        }",,1ac8
fun useDebuggableChrome(),"{
        val debuggableChrome = ""DebuggableChrome""

        config.customLaunchers[debuggableChrome] = CustomLauncher(""Chrome"").apply {
            flags.add(""--remote-debugging-port=9222"")
        }",,41e6
fun usePhantomJS(),= u,,f566
fun useFirefoxLike(id: String),= u,,969f
fun useFirefox(),= u,,10db
fun useFirefoxHeadless(),= u,,6096
fun useFirefoxDeveloper(),= u,,cce7
fun useFirefoxDeveloperHeadless(),= u,,5f23
fun useFirefoxAurora(),= u,,7852
fun useFirefoxAuroraHeadless(),= u,,71e1
fun useFirefoxNightly(),= u,,8084
fun useFirefoxNightlyHeadless(),= u,,eff5
fun useOpera(),= u,,250c
fun useSafari(),= u,,5abc
fun useIe(),= u,,79c0
"fun useBrowser(id: String, dependency: NpmPackageVersion)","{
        config.browsers.add(id)
        requiredDependencies.add(dependency)
    }",,aea6
fun addChromeLauncher(),"{
        requiredDependencies.add(versions.karmaChromeLauncher)
    }",,4bc1
fun useMocha(),"{
        requiredDependencies.add(versions.karmaMocha)
        requiredDependencies.add(versions.mocha)
        config.frameworks.add(""mocha"")
    }",,82a9
fun useWebpack(),"{
        config.frameworks.add(""webpack"")
        requiredDependencies.add(versions.karmaWebpack)
        requiredDependencies.add(
            versions.webpack
        )
        requiredDependencies.add(
            versions.webpackCli
        )
        requiredDependencies.add(
            versions.sourceMapLoader
        )

        addPreprocessor(""webpack"")
        confJsWriters.add {
            it.appendLine()
            it.appendLine(""// webpack config"")
            it.appendLine(""function createWebpackConfig() {"")

            webpackConfig.appendTo(it)
            //language=ES6
            it.appendLine(
                """"""
                // noinspection JSUnnecessarySemicolon
                ;(function(config) {
                    const webpack = require('webpack');
                ${
                    """"""
                    // https://github.com/webpack/webpack/issues/12951
                    const PatchSourceMapSource = require('kotlin-test-js-runner/webpack-5-debug');
                    config.plugins.push(new PatchSourceMapSource())
                    """"""
                }",,0f77
fun useSourceMapSupport(),"{
        requiredDependencies.add(versions.karmaSourcemapLoader)
        sourceMaps = true
        addPreprocessor(""sourcemap"")
    }",,9005
No signature found,"fun addPreprocessor(name: String, predicate: (String) -> Boolean = {",,6e1f
"fun createTestExecutionSpec(
        task: KotlinJsTest,
        forkOptions: ProcessForkOptions,
        nodeJsArgs: MutableList<String>,
        debug: Boolean,
    )",": TCServiceMessagesTestExecutionSpec {
        val file = task.inputFileProperty.getFile()
        val fileString = file.toString()

        config.files.add(npmProject.require(""kotlin-test-js-runner/kotlin-test-karma-runner.js""))
        if (!debug) {
            if (platformType == KotlinPlatformType.wasm) {
                val wasmFile = file.parentFile.resolve(""${file.nameWithoutExtension}",,454b
No signature found,"fun wrapExecute(body: () -> Unit) {
                services().operation(""Running and building tests with karma and webpack"") {
                    progressLogger = this
                    body()
                }",,6e1f
"fun createClient(testResultProcessor: TestResultProcessor, log: Logger, testReporter: MppTestReportHelper)","=
                o",,4087
No signature found,"fun printNonTestOutput(text: String, type: LogType?) {
                        val value = text.trimEnd()
                        progressLogger.progress(value)

                        parseConsole(value, type)
                    }",,6e1f
No signature found,"fun parseConsole(text: String, type: LogType?) {

                        var actualType = type
                        val inStackTrace = stackTraceProcessor.process(text) { line, logType ->
                            log.processLogMessage(line, logType)
                        }",,6e1f
fun processFailedBrowsers(text: String),"{
                        config.browsers
                            .filter { it in text }",,ec85
"fun testFailedMessage(execHandle: ExecHandle, exitValue: Int)",": String {
                        if (failedBrowsers.isEmpty()) {
                            return super.testFailedMessage(execHandle, exitValue)
                        }",,5a10
fun processStackTrace(stackTrace: String),": String =
                        p",,d268
fun getSuiteName(message: BaseTestSuiteMessage),": String {
                        val src = message.suiteName.trim()
                        // example: ""sample.a DeepPackageTest Inner.HeadlessChrome 74.0.3729 (Mac OS X 10.14.4)""
                        // should be reported as ""sample.a.DeepPackageTest.Inner[js,browser,HeadlessChrome74.0.3729,MacOSX10.14.4]""

                        // lets parse it from the end:
                        val os = src.substringAfterLast(""("") // Mac OS X 10.14.4)
                            .removeSuffix("")"") // Mac OS X 10.14.4
                            .replace("" "", """") // MacOSX10.14.4

                        val withoutOs = src.substringBeforeLast("" ("") // sample.a DeepPackageTest Inner.HeadlessChrome 74.0.3729

                        val rawSuiteNameOnly = withoutOs
                            .substringBeforeLast("" "") // sample.a DeepPackageTest Inner.HeadlessChrome
                            .substringBeforeLast(""."") // sample.a DeepPackageTest Inner

                        val browser = withoutOs.substring(rawSuiteNameOnly.length + 1) // HeadlessChrome 74.0.3729
                            .replace("" "", """") // HeadlessChrome74.0.3729

                        testNameSuffix = listOfNotNull(baseTestNameSuffix, browser, os)
                            .takeIf { it.isNotEmpty() }",,942f
"fun createDebuggerJs(
        file: String,
    )",": File {
        val adapterJs = npmProject.dir.getFile().resolve(""debugger.js"")
        adapterJs.printWriter().use { writer ->
            // It is necessary for debugger attaching (--inspect-brk analogue)
            writer.println(""debugger;"")

            writer.println(""module.exports = require(${file.jsQuoted()}",,da9a
No signature found,"fun Appendable.appendFromConfigDir() {
        if (!configDirectory.isDirectory) {
            return
        }",,6e1f
"fun basify(npmProjectDir: File, file: File)",": String {
    return ""/base/${file.relativeTo(npmProjectDir).invariantSeparatorsPath}",,eb1a
"fun createLoadWasm(npmProjectDir: File, file: File)",": File {
    val static = npmProjectDir.resolve(""static"").also {
        it.mkdirs()
    }",,f2a4
fun get(index: Int),: ReplHistoryRecord<Unit> = R,,60cf
"fun push(id: ILineId, item: Unit)","{
        throw NotImplementedError(""push to remote history is not supported"")
    }",,a0cb
fun pop(),": ReplHistoryRecord<Unit>? {
        throw NotImplementedError(""pop from remote history is not supported"")
    }",,4144
fun reset(),: Iterable<ILineId> = s,,64bc
fun resetTo(id: ILineId),: Iterable<ILineId> = s,,cecc
fun bar(),": String {
        return ""2""
    }","// SKIP_KT_DUMP
// TARGET_BACKEND: JVM

// FILE: Java1.java",66c3
No signature found,fun foo(s: String?) { },,6e1f
No signature found,fun foo(s: String?) { },,6e1f
fun bar(),": String {
        return ""3""
    }",,66c3
No signature found,fun foo(s: Any?) { },,6e1f
fun foo(s: Any),{ },,20cb
fun bar(),": Any?
    fun foo(s: Any)
    val nullableString: Any
}

fun test(a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I) {
    a.nullableString
    a.foo("""")
    a.bar()
    b.nullableString
    b.foo("""")
    b.bar()
    c.nullableString
    c.foo("""")
    c.bar()
    d.nullableString
    d.foo("""")
    d.bar()
    e.nullableString
    e.foo("""")
    e.foo(1)
    e.bar()
    f.nullableString
    f.foo("""")
    f.foo(1)
    f.bar()
    g.nullableString
    g.foo(1)
    g.bar()
    h.nullableString
    h.foo(1)
    h.bar()
    i.nullableString
    i.foo("""")
    i.bar()
}",,66c3
"fun jsDeleteProperty(obj: dynamic, property: Any)",= j,,21c4
No signature found,"fun jsBitwiseOr(lhs: Any?, rhs: Any?): Int = j",,6e1f
No signature found,"fun jsBitwiseAnd(lhs: Any?, rhs: Any?): Int = j",,6e1f
No signature found,"fun jsInstanceOf(obj: Any?, jsClass: Any?): Boolean = j",,6e1f
No signature found,"fun jsIn(lhs: Any?, rhs: Any): Boolean = j",,6e1f
fun configure(builder: TestConfigurationBuilder),"{
        super.configure(builder)
        builder.configureDumpHandlersForCodegenTest()
    }",,f283
fun configure(builder: TestConfigurationBuilder),"{
        super.configure(builder)
        builder.useIrInliner()
    }",,f283
fun configure(builder: TestConfigurationBuilder),"{
        super.configure(builder)
        builder.configureDumpHandlersForCodegenTest()
        builder.configureFirParser(parser)
    }",,f283
No signature found,"fun getValue(thisRef: Any?, prop: KProperty<*>): String = p",// IGNORE_TREE_ACCESS: KT-64898,6e1f
No signature found,"fun anotherFun(@field:Ann s: String) {
        @field:Ann
        val localVariable = 5
    }",,6e1f
fun a(),": Int {
    fun b(): Int {
        var c: Int? = null
        if (c == null ||
            0 < c // FE 1.0: smart cast impossible, see KT-10240
        ) c = 0
        return c <!USELESS_ELVIS!>?: 0<!>
    }",,9ea5
No signature found,"fun myRun(f: () -> Unit) {
    f()
}",,6e1f
fun println(arg: Int),{},,dd7c
fun d(),"{
    myRun {
        var koko: String? = ""Alpha""
        while (koko != null) {
            println(koko.length)
            koko = null
        }",,7213
No signature found,"fun <R> Function<R>.reflect(): KFunction<R>? {
    val annotation = javaClass.getAnnotation(Metadata::class.java) ?: return null
    val data = annotation.data1.takeUnless(Array<String>::isEmpty) ?: return null
    val (nameResolver, proto) = JvmProtoBufUtil.readFunctionDataFrom(data, annotation.data2)
    val metadataVersion = JvmMetadataVersion(
        annotation.metadataVersion,
        (annotation.extraInt and JvmAnnotationNames.METADATA_STRICT_VERSION_SEMANTICS_FLAG) != 0
    )

    val descriptor = deserializeToDescriptor(
        javaClass, proto, nameResolver, TypeTable(proto.typeTable), metadataVersion, MemberDeserializer::loadFunction
    )

    @Suppress(""UNCHECKED_CAST"")
    return KFunctionImpl(EmptyContainerForLocal, descriptor) as KFunction<R>
}",,6e1f
"fun createIrLazyFunction(
        fir: FirSimpleFunction,
        symbol: IrSimpleFunctionSymbol,
        lazyParent: IrDeclarationParent,
        declarationOrigin: IrDeclarationOrigin
    )",": IrSimpleFunction {
        val irFunction = fir.convertWithOffsets { startOffset, endOffset ->
            val firContainingClass = (lazyParent as? Fir2IrLazyClass)?.fir
            val isFakeOverride = fir.isFakeOverride(firContainingClass)
            Fir2IrLazySimpleFunction(
                c, startOffset, endOffset, declarationOrigin,
                fir, firContainingClass, symbol, lazyParent, isFakeOverride
            ).apply {
                prepareTypeParameters()
            }",,5bee
"fun createIrLazyProperty(
        fir: FirProperty,
        lazyParent: IrDeclarationParent,
        symbols: PropertySymbols,
        declarationOrigin: IrDeclarationOrigin
    )",": IrProperty {
        val isPropertyForField = fir.isStubPropertyForPureField == true
        val firContainingClass = (lazyParent as? Fir2IrLazyClass)?.fir
        val isFakeOverride = !isPropertyForField && fir.isFakeOverride(firContainingClass)
        // It is really required to create those properties with DEFINED origin
        // Using `declarationOrigin` here (IR_EXTERNAL_JAVA_DECLARATION_STUB in particular) causes some tests to fail, including
        // FirPsiBlackBoxCodegenTestGenerated.Reflection.Properties.testJavaStaticField
        val originForProperty = if (isPropertyForField) IrDeclarationOrigin.DEFINED else declarationOrigin
        return fir.convertWithOffsets { startOffset, endOffset ->
            Fir2IrLazyProperty(
                c, startOffset, endOffset, originForProperty, fir, firContainingClass, symbols, lazyParent, isFakeOverride
            )
        }",,dba7
"fun createIrLazyConstructor(
        fir: FirConstructor,
        symbol: IrConstructorSymbol,
        declarationOrigin: IrDeclarationOrigin,
        lazyParent: IrDeclarationParent,
    )",: Fir2IrLazyConstructor = f,,7648
"fun createIrLazyClass(
        firClass: FirRegularClass,
        irParent: IrDeclarationParent,
        symbol: IrClassSymbol
    )",: Fir2IrLazyClass = f,,8e03
"fun createIrLazyTypeAlias(
        firTypeAlias: FirTypeAlias,
        irParent: IrDeclarationParent,
        symbol: IrTypeAliasSymbol
    )",: Fir2IrLazyTypeAlias = f,,0c80
"fun createIrLazyField(
        fir: FirField,
        symbol: IrFieldSymbol,
        lazyParent: IrDeclarationParent,
        declarationOrigin: IrDeclarationOrigin
    )",": IrField {
        return fir.convertWithOffsets { startOffset, endOffset ->
            Fir2IrLazyField(
                c, startOffset, endOffset, declarationOrigin, fir, (lazyParent as? Fir2IrLazyClass)?.fir, symbol
            )
        }",,d735
No signature found,"fun FirCallableDeclaration.isFakeOverride(firContainingClass: FirRegularClass?): Boolean {
    val declaration = unwrapUseSiteSubstitutionOverrides()
    return declaration.isSubstitutionOrIntersectionOverride ||
            firContainingClass?.symbol?.toLookupTag() != declaration.containingClassLookupTag()
}",,6e1f
"fun resolveSymbol(symbol: IrSymbol, context: TranslationPluginContext)",: IrDeclaration? = n,,c049
No signature found,"fun init(moduleFragment: IrModuleFragment?, extensions: Collection<IrLinkerExtension>) {}",,6e1f
"fun resolveBySignatureInModule(signature: IdSignature, kind: TopLevelSymbolKind, moduleName: Name)",": IrSymbol

    /**
     * [postProcess] has two usages with different expectations:
     * - IR plugin API: actualize expects/actuals, generate fake overrides
     * - Linker(s): the same + run partial linkage
     *
     * In the future, this function should be split into several functions with different semantics for more precise use.
     */
    @Deprecated(
        ""Use postProcess(inOrAfterLinkageStep) instead"",
        ReplaceWith(""postProcess(inOrAfterLinkageStep = t",,4ee4
fun postProcess(),= p,,900b
fun foo(),{},,519f
fun box(),": String =
        """,,4f27
No signature found,"fun <T> with2(receiver: T, body: T.() -> String) =  r",// FILE: 1.kt,6e1f
No signature found,"fun <T : Any> test(item: T?, defaultLink: T.() -> String): String {
    return with2("""") {
        item?.defaultLink() ?: ""fail""
    }",,6e1f
fun box(),": String {
    return test(""O"") {
        this + ""K""
    }",,4f27
fun box(),"=
    i","// TARGET_BACKEND: JVM
// MODULE: lib
// FILE: test/En.java",4f27
fun getFoo(),": String = ""","// SCOPE_DUMP: A:getFoo, B:getFoo, C:getFoo, D:getFoo
// FILE: A.java",5fb9
fun test(d: D),"{
    d.foo.length
}",,b85b
"fun <T, E> foo()",": E
}

interface B {
    fun <Q, W> foo(): W
}",// !CHECK_TYPE,4b3c
fun test(c: Any),"{
    if (c is B && c is A) {
        <!DEBUG_INFO_SMARTCAST!>c<!>.foo<String, Int>().checkType { _<Int>() }",,b636
fun render(),"{
        printHeader()

        if (settings.renderDeclarations)
            printTopLevelDeclarations(libraryAbi.topLevelDeclarations, Printer(output, settings))
    }",,0b52
fun printHeader(),"{
        output.appendLine(
            """"""
                // Rendering settings:
                // - Signature version: ${settings.renderedSignatureVersion.versionNumber}",,e6cb
No signature found,"fun indented(block: () -> Unit) {
            indent++
            try {
                block()
            }","// - Show manifest properties: ${settings.renderManifest}
                // - Show declarations: ${settings.renderDeclarations}
               
                // Library unique name: <${libraryAbi.uniqueName}>",6e1f
No signature found,"fun printDeclaration(renderedDeclaration: RenderedDeclaration<*>, printOpeningBrace: Boolean = f",,6e1f
fun printClosingBrace(),: Unit = w,,2e17
fun appendIndent(),"{
            for (i in 0u until indent) output.append(settings.indentationString)
        }",,4b2d
fun appendSignature(declaration: AbiDeclaration),"{
            output.append("" // "")
            output.append(
                declaration.signatures[settings.renderedSignatureVersion]
                    ?: settings.whenSignatureNotFound(declaration, settings.renderedSignatureVersion)
            )
        }",,debd
"fun printNestedDeclarationsInProperOrder(container: T, printer: Printer)","fun orderByDeclarationKind(renderedDeclaration: RenderedDeclaration<*>): Int

         {
            container.declarations.mapAndSort(
                /**
                 * Always sort declarations in a strictly specific order before printing them to make the output
                 * be unaffected by the actual serialization order:
                 *   1. by declaration kind, see [orderByDeclarationKind]
                 *   2. by a fully-qualified name of the declaration
                 *   3. by an additional ordering factor #1, see implementations of [RenderedDeclaration.additionalOrderingFactor1]
                 *   4. by the text of the rendered declaration (excluding signatures!)
                 *   5. by an additional ordering factor #2, see implementations of [RenderedDeclaration.additionalOrderingFactor2]
                 */
                compareBy(
                    ::orderByDeclarationKind,
                    { it.declaration.qualifiedName }",,6707
No signature found,"fun orderByDeclarationKind(renderedDeclaration: RenderedDeclaration<*>) =
            w",,6e1f
fun print(printer: Printer),"companion object {
            fun createFor(declaration: AbiDeclaration): RenderedDeclaration<*> = when (declaration) {
                is AbiFunction -> RenderedFunction(declaration)
                is AbiProperty -> RenderedProperty(declaration)
                is AbiClass -> RenderedClass(declaration)
                is AbiEnumEntry -> RenderedEnumEntry(declaration)
            }",,9bd6
No signature found,"fun StringBuilder.appendModalityOf(declaration: AbiDeclarationWithModality) {
                append(declaration.modality.name.lowercase()).append(' ')
            }",,6e1f
No signature found,"fun StringBuilder.appendNameOf(declaration: AbiDeclaration) {
                // For non-top level declarations print only simple declaration's name.
                val isTopLevel = declaration.qualifiedName.relativeName.nameSegmentsCount == 1
                append(if (isTopLevel) declaration.qualifiedName else declaration.qualifiedName.relativeName.simpleName)
            }",,6e1f
No signature found,"fun StringBuilder.appendTypeParametersOf(container: AbiTypeParametersContainer) {
                if (container.typeParameters.isNotEmpty()) {
                    container.typeParameters.joinTo(this, separator = "", "", prefix = ""<"", postfix = "">"") { typeParameter ->
                        appendTypeParameter(typeParameter)
                    }",,6e1f
No signature found,"fun StringBuilder.appendTypeParameter(typeParameter: AbiTypeParameter): String {
                append('#').append(typeParameter.tag).append("": "")
                if (typeParameter.isReified) append(""reified "")
                appendVariance(typeParameter.variance)
                when (typeParameter.upperBounds.size) {
                    0 -> append(""kotlin/Any?"")
                    1 -> appendType(typeParameter.upperBounds[0])
                    else -> appendSortedTypes(typeParameter.upperBounds, separator = "" & "", prefix = """", postfix = """")
                }",,6e1f
No signature found,"fun StringBuilder.appendType(type: AbiType) {
                when (type) {
                    is AbiType.Simple -> when (val classifier = type.classifierReference) {
                        is AbiClassifierReference.ClassReference -> {
                            append(classifier.className)
                            if (type.arguments.isNotEmpty()) {
                                type.arguments.joinTo(this, separator = "", "", prefix = ""<"", postfix = "">"") { typeArgument ->
                                    appendTypeArgument(typeArgument)
                                }",,6e1f
No signature found,"fun StringBuilder.appendTypeArgument(typeArgument: AbiTypeArgument): String {
                when (typeArgument) {
                    is AbiTypeArgument.StarProjection -> append('*')
                    is AbiTypeArgument.TypeProjection -> {
                        appendVariance(typeArgument.variance)
                        appendType(typeArgument.type)
                    }",,6e1f
No signature found,"fun StringBuilder.appendVariance(variance: AbiVariance) {
                when (variance) {
                    AbiVariance.INVARIANT -> Unit
                    AbiVariance.IN -> append(""in "")
                    AbiVariance.OUT -> append(""out "")
                }",,6e1f
No signature found,"fun StringBuilder.appendSortedTypes(types: List<AbiType>, separator: String, prefix: String, postfix: String) {
                types.mapAndSort(naturalOrder()) { buildString { appendType(it) }",,6e1f
No signature found,"fun "")
            appendClassKind(declaration.kind)

            // Note: Type parameters are rendered before the class name, exactly as it is done for functions.
            // This is done intentionally for the purpose of unification of the rendering notation for different
            // types of declarations.
            appendTypeParametersOf(declaration)
            appendNameOf(declaration)
            if (declaration.superTypes.isNotEmpty()) {
                appendSortedTypes(declaration.superTypes, separator = "", "", prefix = "" : "", postfix = """")
            }",,6e1f
fun print(printer: Printer),"{
            val hasChildren = declaration.declarations.isNotEmpty()
            printer.printDeclaration(this, printOpeningBrace = hasChildren)
            if (hasChildren) {
                printer.indented {
                    printNestedDeclarationsInProperOrder(container = declaration, printer)
                }",,9bd6
No signature found,"fun StringBuilder.appendClassKind(classKind: AbiClassKind) {
                append(
                    when (classKind) {
                        AbiClassKind.CLASS -> ""class""
                        AbiClassKind.INTERFACE -> ""interface""
                        AbiClassKind.OBJECT -> ""object""
                        AbiClassKind.ENUM_CLASS -> ""enum class""
                        AbiClassKind.ANNOTATION_CLASS -> ""annotation class""
                    }",,6e1f
No signature found,"fun orderByDeclarationKind(renderedDeclaration: RenderedDeclaration<*>) =
                w",,6e1f
fun print(printer: Printer),= p,,9bd6
fun print(printer: Printer),"{
            printer.printDeclaration(this)
            printer.indented {
                getter?.print(printer)
                setter?.print(printer)
            }",,9bd6
No signature found,"fun StringBuilder.appendPropertyKind(propertyKind: AbiPropertyKind) {
                append(
                    when (propertyKind) {
                        AbiPropertyKind.VAL -> ""val""
                        AbiPropertyKind.CONST_VAL -> ""const val""
                        AbiPropertyKind.VAR -> ""var""
                    }",,6e1f
No signature found,"fun "")
            appendTypeParametersOf(declaration)
            appendIrregularValueParametersOf(declaration)
            appendNameOf(declaration)
            appendRegularValueParametersOf(declaration)
            appendReturnTypeOf(declaration)
        }
    ) {
        /**
         * Determines the relative order of a function to put it upper or lower in the renderer's output:
         * - Functions without extension receiver go above functions with an extension receiver.
         * - Functions without context receivers go above functions with context receivers.
         * - The more regular value parameters function has, the lower it goes.
         * - Same among functions with context receiver parameters.
         */
        override val additionalOrderingFactor1: Int
            get() {
                val extensionReceivers = if (declaration.hasExtensionReceiverParameter) 1 else 0
                val contextReceivers = declaration.contextReceiverParametersCount
                val regularParameters = declaration.valueParameters.size - extensionReceivers - contextReceivers
                return (((contextReceivers shl 1) or extensionReceivers) shl BITS_ENOUGH_FOR_STORING_PARAMETERS_COUNT) or regularParameters
            }",,6e1f
fun print(printer: Printer),= p,,9bd6
No signature found,"fun StringBuilder.appendIrregularValueParametersOf(function: AbiFunction) {
                if (function.contextReceiverParametersCount > 0)
                    function.valueParameters
                        .asSequence()
                        .apply { if (function.hasExtensionReceiverParameter) drop(1) }",,6e1f
No signature found,"fun StringBuilder.appendRegularValueParametersOf(function: AbiFunction) {
                val skippedParametersCount = (if (function.hasExtensionReceiverParameter) 1 else 0) +
                        function.contextReceiverParametersCount

                function.valueParameters
                    .asSequence()
                    .drop(skippedParametersCount)
                    .joinTo(this, separator = "", "", prefix = ""("", postfix = "")"") { valueParameter ->
                        appendValueParameter(valueParameter)
                    }",,6e1f
No signature found,"fun StringBuilder.appendValueParameter(valueParameter: AbiValueParameter): String {
                if (valueParameter.isNoinline) append(""noinline "")
                if (valueParameter.isCrossinline) append(""crossinline "")
                appendType(valueParameter.type)
                if (valueParameter.isVararg) append(""..."")
                if (valueParameter.hasDefaultArg) append("" =..."")
                return """"
            }",,6e1f
No signature found,"fun StringBuilder.appendReturnTypeOf(function: AbiFunction) {
                function.returnType?.let { returnType -> append("": "").appendType(returnType) }",,6e1f
No signature found,"fun <T, R : Any> List<T>.mapAndSort(comparator: Comparator<R>, transform: (T) -> R): List<R> {
            if (isEmpty()) return emptyList()

            val result = ArrayList<R>(size)
            mapTo(result, transform)
            result.sortWith(comparator)
            return result
        }",,6e1f
No signature found,"fun params(
    r1: Result<Int>,
    r2: Result<Int>?,
    r3: ResultAlias<String>,
    r4: List<Result<Int>>,
    r5: InlineResult<Int>,
    <!FORBIDDEN_VARARG_PARAMETER_TYPE!>vararg<!> r6: Result<Int>
) {}","// FIR_IDENTICAL
// !DIAGNOSTICS: -UNUSED_PARAMETER, -UNUSED_EXPRESSION, -UNUSED_VARIABLE
// !LANGUAGE: +InlineClasses -AllowResultInReturnType, -JvmInlineValueClasses",6e1f
fun returnTypePublic(),: Result<Int> = T,,6089
fun returnTypeInternal(),: Result<Int> = T,,1d9e
fun returnTypePrivate(),: Result<Int> = T,,d169
fun returnTypeNullable(),: Result<Int>? = T,,752a
fun returnTypeAlias(),: ResultAlias<Int> = T,,f2fd
"fun returnInferred(r1: Result<Int>, r2: ResultAlias<Int>, b: Boolean)",= i,,fa82
fun returnTypeInline(),: InlineResult<Int> = T,,285b
fun returnContainer(),: List<Result<Int>> = T,,629b
fun returnInCls(),: Result<Int> = T,,f73f
fun returnInClsProtected(),: Result<Int> = T,,b1b1
fun returnInClsPrivate(),: Result<Int> = T,,56b9
fun returnInInternal(),: Result<Int> = T,,7cf4
fun returnInClsProtected(),: Result<Int> = T,,b1b1
fun returnInPrivate(),: Result<Int> = T,,6227
fun local(r: Result<Int>),"{
    val l1: Result<Int>? = null
    val l2 = r

    fun localFun(): Result<Int> = TODO()

    class F {
        val p1: Result<Int> = r
        val p2 = r
    }",,256a
fun <T> resultInGenericFun(r: Result<Int>),: T = r,,99be
fun testBar(),"{
        // thirdPartyFun() // unresolved
        // fooJvmAndJs() // unresolved
        // fooLinuxAndJs() // unresolved
        assertEquals(foo(), fooCommon())
        assertEquals(bar(), barCommon())
    }",,1395
fun foo(javaClass: JavaClass<Int>),": Int {
    val inner = javaClass.createInner<String>()
    return <!TYPE_MISMATCH!>inner.doSomething(<!CONSTANT_EXPECTED_TYPE_MISMATCH!>1<!>, """") { }",// FILE: KotlinFile.kt,0090
"fun callLocal(a: String, b: String)",": String {
    suspend fun local(a: String, b: String) = suspendCoroutineUninterceptedOrReturn<String> {
        it.resume(a + b)
        COROUTINE_SUSPENDED
    }","// WITH_STDLIB
// WITH_COROUTINES",a2ce
No signature found,"fun builder(c: suspend () -> Unit) {
    c.startCoroutine(EmptyContinuation)
}",,6e1f
fun box(),": String {
    var res = ""FAIL""
    builder {
        res = callLocal(""O"", ""K"")
    }",,4f27
No signature found,"fun <reified T : ConeKotlinType> AnnotationValue.coneTypeSafe(): T? {
    return this.value.type as? T
}",,6e1f
No signature found,"fun <reified T : ConeKotlinType> KClassValue.Value.LocalClass.coneType(): T {
    return this.type as T
}",,6e1f
fun create(argumentType: ConeKotlinType),": ConstantValue<*>? {
    if (argumentType is ConeErrorType) return null
    if (argumentType !is ConeClassLikeType) return null
    var type = argumentType
    var arrayDimensions = 0
    while (true) {
        if (type.isPrimitiveArray) break
        type = type.arrayElementType() ?: break
        arrayDimensions++
    }",,0fa3
fun bar(),": String = """,// Ambiguity between fun and callable property,66c3
fun fn(),": String = """,,8fa7
fun foo(),": String =
    <",,519f
fun bar(),": String =
            s",,66c3
fun test(boolean: Boolean),"{
    val x: Int // Breakpoint
    if (boolean) {
        throw IllegalArgumentException()
    }",// CHECK_BYTECODE_TEXT,dd1e
fun box(),": String {
    test(false)
    return ""OK""
}",,4f27
No signature found,"fun getValue(thiz: Any?, metadata: Any?) = t","// TARGET_BACKEND: JVM
// WITH_STDLIB
// JVM_ABI_K1_K2_DIFF: KT-63984",6e1f
No signature found,"fun setValue(thiz: Any?, metadata: Any?, value: Boolean) {}",,6e1f
fun box(),": String {
    assertEquals(
            listOf(""getIsFries"", ""getIsUpdateable"", ""setIsFries"", ""setIsUpdateable""),
            TestIt::class.java.declaredMethods.map { it.name }",,4f27
No signature found,"fun ideaKotlinBinaryCoordinatesProto(block: org.jetbrains.kotlin.gradle.idea.proto.generated.tcs.IdeaKotlinBinaryCoordinatesProtoKt.Dsl.() -> kotlin.Unit): org.jetbrains.kotlin.gradle.idea.proto.generated.tcs.IdeaKotlinBinaryCoordinatesProto =
  o","//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: proto_tcs.proto",6e1f
No signature found,fun _create(builder: org.jetbrains.kotlin.gradle.idea.proto.generated.tcs.IdeaKotlinBinaryCoordinatesProto.Builder): Dsl = D,,6e1f
fun _build(),: org.jetbrains.kotlin.gradle.idea.proto.generated.tcs.IdeaKotlinBinaryCoordinatesProto = _,,8dd3
fun clearGroup(),"{
      _builder.clearGroup()
    }",,0dbc
fun hasGroup(),": kotlin.Boolean {
      return _builder.hasGroup()
    }","/**
     * <code>optional string group = 1;</code>
     * @return Whether the group field is set.
     */",95e3
fun clearModule(),"{
      _builder.clearModule()
    }","/**
     * <code>optional string module = 2;</code>
     */",28d7
fun hasModule(),": kotlin.Boolean {
      return _builder.hasModule()
    }","/**
     * <code>optional string module = 2;</code>
     * @return Whether the module field is set.
     */",9e0f
fun clearVersion(),"{
      _builder.clearVersion()
    }","/**
     * <code>optional string version = 3;</code>
     */",8817
fun hasVersion(),": kotlin.Boolean {
      return _builder.hasVersion()
    }","/**
     * <code>optional string version = 3;</code>
     * @return Whether the version field is set.
     */",465c
fun clearSourceSetName(),"{
      _builder.clearSourceSetName()
    }","/**
     * <code>optional string source_set_name = 4;</code>
     */",9192
fun hasSourceSetName(),": kotlin.Boolean {
      return _builder.hasSourceSetName()
    }","/**
     * <code>optional string source_set_name = 4;</code>
     * @return Whether the sourceSetName field is set.
     */",64bc
No signature found,"fun com.google.protobuf.kotlin.DslList<org.jetbrains.kotlin.gradle.idea.proto.generated.tcs.IdeaKotlinBinaryCapabilityProto, CapabilitiesProxy>.add(value: org.jetbrains.kotlin.gradle.idea.proto.generated.tcs.IdeaKotlinBinaryCapabilityProto) {
      _builder.addCapabilities(value)
    }","/**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */",6e1f
No signature found,"fun com.google.protobuf.kotlin.DslList<org.jetbrains.kotlin.gradle.idea.proto.generated.tcs.IdeaKotlinBinaryCapabilityProto, CapabilitiesProxy>.plusAssign(value: org.jetbrains.kotlin.gradle.idea.proto.generated.tcs.IdeaKotlinBinaryCapabilityProto) {
      add(value)
    }","/**
     * <code>repeated .org.jetbrains.kotlin.gradle.idea.proto.generated.tcs.IdeaKotlinBinaryCapabilityProto capabilities = 5;</code>
     * @param value The capabilities to add.
     */",6e1f
No signature found,"fun com.google.protobuf.kotlin.DslList<org.jetbrains.kotlin.gradle.idea.proto.generated.tcs.IdeaKotlinBinaryCapabilityProto, CapabilitiesProxy>.addAll(values: kotlin.collections.Iterable<org.jetbrains.kotlin.gradle.idea.proto.generated.tcs.IdeaKotlinBinaryCapabilityProto>) {
      _builder.addAllCapabilities(values)
    }","/**
     * <code>repeated .org.jetbrains.kotlin.gradle.idea.proto.generated.tcs.IdeaKotlinBinaryCapabilityProto capabilities = 5;</code>
     * @param values The capabilities to add.
     */",6e1f
No signature found,"fun com.google.protobuf.kotlin.DslList<org.jetbrains.kotlin.gradle.idea.proto.generated.tcs.IdeaKotlinBinaryCapabilityProto, CapabilitiesProxy>.plusAssign(values: kotlin.collections.Iterable<org.jetbrains.kotlin.gradle.idea.proto.generated.tcs.IdeaKotlinBinaryCapabilityProto>) {
      addAll(values)
    }","/**
     * <code>repeated .org.jetbrains.kotlin.gradle.idea.proto.generated.tcs.IdeaKotlinBinaryCapabilityProto capabilities = 5;</code>
     * @param values The capabilities to add.
     */",6e1f
No signature found,"fun com.google.protobuf.kotlin.DslList<org.jetbrains.kotlin.gradle.idea.proto.generated.tcs.IdeaKotlinBinaryCapabilityProto, CapabilitiesProxy>.set(index: kotlin.Int, value: org.jetbrains.kotlin.gradle.idea.proto.generated.tcs.IdeaKotlinBinaryCapabilityProto) {
      _builder.setCapabilities(index, value)
    }","/**
     * <code>repeated .org.jetbrains.kotlin.gradle.idea.proto.generated.tcs.IdeaKotlinBinaryCapabilityProto capabilities = 5;</code>
     * @param index The index to set the value at.
     * @param value The capabilities to set.
     */",6e1f
No signature found,"fun com.google.protobuf.kotlin.DslList<org.jetbrains.kotlin.gradle.idea.proto.generated.tcs.IdeaKotlinBinaryCapabilityProto, CapabilitiesProxy>.clear() {
      _builder.clearCapabilities()
    }","/**
     * <code>repeated .org.jetbrains.kotlin.gradle.idea.proto.generated.tcs.IdeaKotlinBinaryCapabilityProto capabilities = 5;</code>
     */",6e1f
fun clearAttributes(),"{
      _builder.clearAttributes()
    }","/**
     * <code>optional .org.jetbrains.kotlin.gradle.idea.proto.generated.tcs.IdeaKotlinBinaryAttributesProto attributes = 6;</code>
     */",6c90
fun hasAttributes(),": kotlin.Boolean {
      return _builder.hasAttributes()
    }","/**
     * <code>optional .org.jetbrains.kotlin.gradle.idea.proto.generated.tcs.IdeaKotlinBinaryAttributesProto attributes = 6;</code>
     * @return Whether the attributes field is set.
     */",c216
No signature found,"fun org.jetbrains.kotlin.gradle.idea.proto.generated.tcs.IdeaKotlinBinaryCoordinatesProto.copy(block: org.jetbrains.kotlin.gradle.idea.proto.generated.tcs.IdeaKotlinBinaryCoordinatesProtoKt.Dsl.() -> kotlin.Unit): org.jetbrains.kotlin.gradle.idea.proto.generated.tcs.IdeaKotlinBinaryCoordinatesProto =
  o",,6e1f
fun result(),": String
}

open class B(val x: String)

class A : B(""OK"") {
    fun foo() = object : T {
        val bar = x

        override  = bar
    }",,5880
fun box(),= A,,4f27
No signature found,"fun <T> MyFuture<T>.setup() {
    addListener(ListenerImpl<T, MyFuture<T>>())
    addListener { }","// FIR_IDENTICAL
// FILE: MyFuture.java",6e1f
fun operationComplete(future: F),"{
    }",,6905
No signature found,"fun invoke(cause: Throwable?) {
    }",,6e1f
No signature found,"fun KotlinSharedNativeCompilation.getImplicitlyDependingNativeCompilations(): Set<KotlinNativeCompilation> {
    val multiplatformExtension = project.multiplatformExtensionOrNull ?: return emptySet()
    val thisAllKotlinSourceSets = allKotlinSourceSets

    return multiplatformExtension.targets
        .flatMap { target -> target.compilations }",,6e1f
fun test(),"{
            f<caret>oo
        }",,fe98
fun get(index: Int),: UByte = s,,60cf
"fun set(index: Int, value: UByte)","{
        storage[index] = value.toByte()
    }",,8e35
fun iterator(),: kotlin.collections.Iterator<UByte> = I,/** Returns the number of elements in the array. */,c20a
fun hasNext(),= i,,2c39
fun next(),= i,,cb14
fun contains(element: UByte),": Boolean {
        // TODO: Eliminate this check after KT-30016 gets fixed.
        // Currently JS BE does not generate special bridge method for this method.
        @Suppress(""USELESS_CAST"")
        if ((element as Any?) !is UByte) return false

        return storage.contains(element.toByte())
    }",,8182
fun containsAll(elements: Collection<UByte>),": Boolean {
        return (elements as Collection<*>).all { it is UByte && storage.contains(it.toByte()) }",,0f7c
fun isEmpty(),: Boolean = t,,464e
No signature found,"fun UByteArray(size: Int, init: (Int) -> UByte): UByteArray {
    return UByteArray(ByteArray(size) { index -> init(index).toByte() }",,6e1f
fun ubyteArrayOf(vararg elements: UByte),: UByteArray = e,,6754
No signature found,fun takeLambda1(f: String.() -> String) {},"// SKIP_TXT
// ISSUE: KT-56138",6e1f
No signature found,fun takeLambda2(f: String.(String) -> String) {},,6e1f
fun test_1(),"{
    val x1: String.(String) -> String = { <!EXPECTED_PARAMETERS_NUMBER_MISMATCH!>str, <!CANNOT_INFER_PARAMETER_TYPE!>str2<!><!> -> ""this"" }",,dda0
fun test_2(),"{
    takeLambda2 <!TYPE_MISMATCH!>{ <!EXPECTED_PARAMETERS_NUMBER_MISMATCH!>str, <!CANNOT_INFER_PARAMETER_TYPE!>str2<!><!> -> ""this"" }",,bb80
fun test_3(b: Boolean),"{
    val x1: String.(String) -> String = if (b) <!TYPE_MISMATCH!>{
        { <!EXPECTED_PARAMETERS_NUMBER_MISMATCH!>str, <!CANNOT_INFER_PARAMETER_TYPE!>str2<!><!> -> ""this"" }",,148d
"fun getResolvedToPsi(analysisSession: KtAnalysisSession, referenceTargetSymbols: Collection<KtSymbol>)",": Collection<PsiElement> =
        w",,02e4
fun getResolvedToPsi(analysisSession: KtAnalysisSession),": Collection<PsiElement> =
        w",,9e21
No signature found,"fun KtAnalysisSession.getPsiDeclarations(symbol: KtFirSymbol<*>): Collection<PsiElement> {
    val intersectionOverriddenSymbolsOrSingle = when {
        symbol.origin == KtSymbolOrigin.INTERSECTION_OVERRIDE && symbol is KtCallableSymbol -> symbol.getIntersectionOverriddenSymbols()
        else -> listOf(symbol)
    }",,6e1f
No signature found,"fun KtSymbol.findPsiForReferenceResolve(): PsiElement? {
    require(this is KtFirSymbol<*>)
    return firSymbol.fir.findReferencePsi()
}",,6e1f
"fun lower(irBody: IrBody, container: IrDeclaration)","{
        if (container is IrFunction) {
            // Lower local declarations
            irBody.acceptChildrenVoid(object : IrElementVisitorVoid {
                override fun visitElement(element: IrElement) {
                    element.acceptChildrenVoid(this)
                }",,c7d0
fun visitSimpleFunction(declaration: IrSimpleFunction),"{
                    declaration.acceptChildrenVoid(this)
                    if (declaration.isTailrec) {
                        lowerTailRecursionCalls(declaration)
                    }",,451c
fun followFunctionReference(reference: IrFunctionReference),: Boolean = f,,5b34
"fun nullConst(startOffset: Int, endOffset: Int, type: IrType)",": IrExpression =
        I",,6cb5
No signature found,"fun TailrecLowering.lowerTailRecursionCalls(irFunction: IrFunction) {
    val (tailRecursionCalls, someCallsAreFromOtherFunctions) = collectTailRecursionCalls(irFunction, ::followFunctionReference)
    if (tailRecursionCalls.isEmpty()) {
        return
    }",,6e1f
fun visitCall(expression: IrCall),": IrExpression {
        expression.transformChildrenVoid(this)
        if (expression !in tailRecursionCalls) {
            return expression
        }",,4974
fun visitFunctionReference(expression: IrFunctionReference),": IrExpression {
        if (lowering.followFunctionReference(expression)) {
            expression.symbol.owner.body?.transformChildrenVoid(this)
        }",,0e81
No signature found,fun IrBuilderWithScope.genTailCall(expression: IrCall) = t,,6e1f
No signature found,fun f(x: () -> T = {,,6e1f
No signature found,"fun IrValueParameterSymbol.suggestVariableName(): String =
    i",,6e1f
fun <K> id(x: K),= x,// !DIAGNOSTICS: -UNUSED_PARAMETER,cbda
fun <T> a1(t: T),: Unit {},,60f0
fun test1(),: (String) -> Unit = A,,fa3b
fun test2(),: (String) -> Unit = i,,30bb
"fun <K, V> a2(key: K)",: V = T,,faa2
fun test1(),: (String) -> Unit = A,,fa3b
fun <T3> test2(),: (T3) -> T3 = A,,a65c
fun <V> a3(key: T),: V = T,,6926
fun test1(),: (T) -> Int = t,,fa3b
fun test2(),: (T) -> Unit = A,,30bb
fun test3(),: (Int) -> String = A,,a31f
fun <R> test4(),: (R) -> Unit = t,,20ad
fun <R> test5(),: (T) -> R = t,,f776
"fun doTestByMainFile(mainFile: KtFile, mainModule: KtTestModule, testServices: TestServices)","{
        val fileStructure = mainFile.getFileStructure()
        val allStructureElements = fileStructure.getAllStructureElements(mainFile)
        val declarationToStructureElement = allStructureElements.associateBy { it.declaration.psi }",,5016
fun visitElement(element: PsiElement),"{
                    if (element is LeafPsiElement) {
                        append(element.text)
                    }",,3961
fun visitComment(comment: PsiComment),{},,d787
No signature found,"fun FileStructureElement.createComment(): String {
        return """"""/* ${this::class.simpleName!!}",,6e1f
No signature found,"fun KtFile.getFileStructure(): FileStructure {
        val module = ProjectStructureProvider.getModule(project, this, contextualModule = null)
        val moduleFirResolveSession = module.getFirResolveSession(project)
        check(moduleFirResolveSession.isSourceSession)
        val session = moduleFirResolveSession.getSessionFor(module) as LLFirResolvableModuleSession
        return session.moduleComponents.fileStructureCache.getFileStructure(this)
    }",,6e1f
No signature found,fun FileStructure.getAllStructureElements(ktFile: KtFile): Collection<FileStructureElement> = b,,6e1f
fun suppressIfNeeded(failedAssertions: List<WrappedException>),": List<WrappedException> {
        if (enabled || System.getProperty(""kotlin.test.update.test.data"") == ""true"") {
            for (failure in failedAssertions.mapNotNull { it.cause as? FileComparisonFailure }",,8fa5
fun none(),{},// !DIAGNOSTICS: -UNREACHABLE_CODE,c80a
fun unitEmptyInfer(),{},,4ee0
fun unitEmpty(),: Unit {},,e6f6
fun unitEmptyReturn(),: Unit {return},,b064
fun unitIntReturn(),: Unit {return <!CONSTANT_EXPECTED_TYPE_MISMATCH!>1<!>},,7786
fun unitUnitReturn(),: Unit {return Unit},,7cbf
fun test1(),: Any = {,,fa3b
fun test2(),: Any = a,,30bb
fun test3(),: Any { <!RETURN_TYPE_MISMATCH!>return<!> },,a31f
fun test4(),: ()-> Unit = {,,5b17
fun test5(),: Any = l,,aa19
fun test6(),: Any = {,,1831
fun bbb(),"{
    return <!CONSTANT_EXPECTED_TYPE_MISMATCH!>1<!>
}",,d4f9
fun foo(expr: StringBuilder),": Int {
    val c = 'a'
    when(c) {
        0.toChar() -> throw Exception(""zero"")
        else -> throw Exception(""nonzero"" + c)
    }",,fbf2
fun unitShort(),: Unit = U,,ab49
fun unitShortConv(),: Unit = <,,a064
fun unitShortNull(),: Unit = <,,219c
fun intEmpty(),: Int {<!NO_RETURN_IN_FUNCTION_WITH_BLOCK_BODY!>},,ead3
fun intShortInfer(),= 1,,24d8
fun intShort(),: Int = 1,,758b
fun intBlock(),: Int {return 1},//fun intBlockInfer()  {1},d2e3
fun intBlock1(),: Int {1<!NO_RETURN_IN_FUNCTION_WITH_BLOCK_BODY!>},,cb27
fun intString(),: Int = <,,d82b
fun intFunctionLiteral(),: Int = <,,4cfe
fun blockReturnUnitMismatch(),: Int {<!RETURN_TYPE_MISMATCH!>return<!>},,27be
fun blockReturnValueTypeMismatch(),: Int {return <!CONSTANT_EXPECTED_TYPE_MISMATCH!>3.4<!>},,4666
fun blockReturnValueTypeMatch(),: Int {return 1},,6bc1
fun blockReturnValueTypeMismatchUnit(),: Int {return <!TYPE_MISMATCH!>Unit<!>},,f5f0
fun blockAndAndMismatch(),": Int {
    true && false
    <!NO_RETURN_IN_FUNCTION_WITH_BLOCK_BODY!>}",,f575
fun blockAndAndMismatch1(),": Int {
    return <!TYPE_MISMATCH!>true && false<!>
}",,0cfc
fun blockAndAndMismatch2(),": Int {
    (return <!CONSTANT_EXPECTED_TYPE_MISMATCH!>true<!>) && (return <!CONSTANT_EXPECTED_TYPE_MISMATCH!>false<!>)
}",,59e3
fun blockAndAndMismatch3(),": Int {
    true || false
    <!NO_RETURN_IN_FUNCTION_WITH_BLOCK_BODY!>}",,0afc
fun blockAndAndMismatch4(),": Int {
    return <!TYPE_MISMATCH!>true || false<!>
}",,37f2
fun blockAndAndMismatch5(),": Int {
    (return <!CONSTANT_EXPECTED_TYPE_MISMATCH!>true<!>) || (return <!CONSTANT_EXPECTED_TYPE_MISMATCH!>false<!>)
}",,ad54
fun blockReturnValueTypeMatch1(),": Int {
    return if (1 > 2) <!CONSTANT_EXPECTED_TYPE_MISMATCH!>1.0<!> else <!CONSTANT_EXPECTED_TYPE_MISMATCH!>2.0<!>
}",,0ec7
fun blockReturnValueTypeMatch2(),": Int {
    return <!TYPE_MISMATCH!><!INVALID_IF_AS_EXPRESSION!>if<!> (1 > 2) 1<!>
}",,3b76
fun blockReturnValueTypeMatch3(),": Int {
    return <!TYPE_MISMATCH!><!INVALID_IF_AS_EXPRESSION!>if<!> (1 > 2) else 1<!>
}",,1ace
fun blockReturnValueTypeMatch4(),": Int {
    if (1 > 2)
        return <!CONSTANT_EXPECTED_TYPE_MISMATCH!>1.0<!>
    else return <!CONSTANT_EXPECTED_TYPE_MISMATCH!>2.0<!>
}",,acf8
fun blockReturnValueTypeMatch5(),": Int {
    if (1 > 2)
        return <!CONSTANT_EXPECTED_TYPE_MISMATCH!>1.0<!>
    return <!CONSTANT_EXPECTED_TYPE_MISMATCH!>2.0<!>
}",,54cc
fun blockReturnValueTypeMatch6(),": Int {
    if (1 > 2)
    else return <!CONSTANT_EXPECTED_TYPE_MISMATCH!>1.0<!>
    return <!CONSTANT_EXPECTED_TYPE_MISMATCH!>2.0<!>
}",,1900
fun blockReturnValueTypeMatch7(),": Int {
    if (1 > 2)
    1.0
    else 2.0
    <!NO_RETURN_IN_FUNCTION_WITH_BLOCK_BODY!>}",,4ed0
fun blockReturnValueTypeMatch8(),": Int {
    if (1 > 2)
    1.0
    else 2.0
    return 1
}",,f1c0
fun blockReturnValueTypeMatch9(),": Int {
    if (1 > 2)
    1.0
    <!NO_RETURN_IN_FUNCTION_WITH_BLOCK_BODY!>}",,8e78
fun blockReturnValueTypeMatch10(),": Int {
    return <!TYPE_MISMATCH!><!INVALID_IF_AS_EXPRESSION!>if<!> (1 > 2)
    1<!>
}",,843f
fun blockReturnValueTypeMatch11(),": Int {
    if (1 > 2)
    else 1.0
    <!NO_RETURN_IN_FUNCTION_WITH_BLOCK_BODY!>}",,8106
fun blockReturnValueTypeMatch12(),": Int {
    if (1 > 2)
        return 1
    else return <!CONSTANT_EXPECTED_TYPE_MISMATCH!>1.0<!>
}",,244d
fun blockNoReturnIfValDeclaration(),": Int {
    val x = 1
    <!NO_RETURN_IN_FUNCTION_WITH_BLOCK_BODY!>}",,1c61
fun blockNoReturnIfEmptyIf(),": Int {
    if (1 < 2) {}",,234a
fun blockNoReturnIfUnitInOneBranch(),": Int {
    if (1 < 2) {
        return 1
    }",,58aa
fun nonBlockReturnIfEmptyIf(),: Int = i,,dcee
fun nonBlockNoReturnIfUnitInOneBranch(),: Int = i,,5a52
fun illegalConstantBody(),: Int = <,,faf9
fun illegalConstantBlock(),": String {
    return <!CONSTANT_EXPECTED_TYPE_MISMATCH!>1<!>
}",,2a54
fun illegalIfBody(),": Int =
        i",,958f
fun illegalIfBlock(),": Boolean {
    if (1 < 2)
        return false
    else { return <!CONSTANT_EXPECTED_TYPE_MISMATCH!>1<!> }",,728e
fun illegalReturnIf(),": Char {
    return if (1 < 2) 'a' else <!TYPE_MISMATCH!>{ 1 }",,431e
fun returnNothing(),": Nothing {
    throw <!CONSTANT_EXPECTED_TYPE_MISMATCH!>1<!>
}",,e104
fun returnNothingEmpty(),": Nothing {
<!NO_RETURN_IN_FUNCTION_WITH_BLOCK_BODY!>}",,12ac
fun f(),": Int {
    if (1 < 2) { return 1 }",,f6fb
fun f1(),: Int = i,,ed85
fun f2(),= 1,,e1c0
fun f(),"= """,,f6fb
fun testFunctionLiterals(),"{
    val endsWithVarDeclaration : () -> Boolean = {
        <!EXPECTED_TYPE_MISMATCH!>val x = 2<!>
    }",,9ac2
fun meow(),: Unit {},,8bf4
fun meow(),: Unit {},,8bf4
fun box(),": String {
    val p2 = ""p2""

    TailArgs()
    if (ctorArgs.size != 0) return ""fail2: $ctorArgs arguments instead 0""

    TailArgs(p2 = p2)
    if (ctorArgs.size != 3 || ctorArgs[2] != p2) return ""fail3: $ctorArgs arguments instead 3""

    return ""OK""
}","// EXPECTED_REACHABLE_NODES: 1239
// FILE: main.kt",4f27
fun getPackagePartScope(fileClass: ReflectKotlinClass),: MemberScope = c,,a0cb
fun property(name: String),= p,,948f
fun test(lock: Any),"{
    val x: Int

    synchronized(lock) {
        x = 42
    }","// FIR_IDENTICAL
// !LANGUAGE: +ReadDeserializedContracts +UseCallsInPlaceEffect",cd69
fun foo(),{},"// FIR_IDENTICAL
// !DIAGNOSTICS:-UNUSED_VARIABLE",519f
No signature found,fun A?.foo() {},,6e1f
fun test(),": String = ""","// MODULE: lib
// FILE: l1.kt",fe98
fun test(),": String = """,,fe98
fun box(),: String = O,,4f27
"fun <T> select(x: T, y: T)",: T = x,// !DIAGNOSTICS: -UNUSED_PARAMETER -UNUSED_EXPRESSION,c16c
fun testSimple(),"{
    val a0 = select(Inv<Int>(), SubInv())

    <!DEBUG_INFO_EXPRESSION_TYPE(""Inv<kotlin.Int>"")!>a0<!>

    val a1 = select(SubInv<Int>(), Inv())

    <!DEBUG_INFO_EXPRESSION_TYPE(""Inv<kotlin.Int>"")!>a1<!>
}",,5615
fun testNullability(),"{
    val n1 = select(Inv<Int?>(), SubInv())

    <!DEBUG_INFO_EXPRESSION_TYPE(""Inv<kotlin.Int?>"")!>n1<!>

    val n2 = select(SubInv<Int?>(), Inv())

    <!DEBUG_INFO_EXPRESSION_TYPE(""Inv<kotlin.Int?>"")!>n2<!>
}",,c18c
fun testNested(),"{
    val n1 = select(Inv<Inv<Int>>(), SubInv())

    <!DEBUG_INFO_EXPRESSION_TYPE(""Inv<Inv<kotlin.Int>>"")!>n1<!>

    val n2 = select(SubInv<SubInv<Int>>(), Inv())

    <!DEBUG_INFO_EXPRESSION_TYPE(""Inv<SubInv<kotlin.Int>>"")!>n2<!>

    fun <K> createInvInv(): Inv<Inv<K>> = TODO()

    val n3 = select(SubInv<SubInv<Int>>(), createInvInv())

    <!DEBUG_INFO_EXPRESSION_TYPE(""Inv<out Inv<kotlin.Int>>"")!>n3<!>
}",,17ff
"fun testCaptured(cSub: SubInv<out Number>, cInv: Inv<out Number>)","{
    val c1 = select(cInv, SubInv())

    <!DEBUG_INFO_EXPRESSION_TYPE(""Inv<out kotlin.Number>"")!>c1<!>

    val c2 = select(cSub, Inv())

    <!DEBUG_INFO_EXPRESSION_TYPE(""Inv<out kotlin.Number>"")!>c2<!>
}",,a18a
fun testVariableWithBound(),"{
    fun <K : Number> createWithNumberBound(): Inv<K> = TODO()
    fun <K : <!FINAL_UPPER_BOUND!>Int<!>> createWithIntBound(): Inv<K> = TODO()

    val c1 = select(SubInv<Int>(), createWithNumberBound())

    <!DEBUG_INFO_EXPRESSION_TYPE(""Inv<kotlin.Int>"")!>c1<!>

    val c2 = <!TYPE_MISMATCH!>select<!>(SubInv<String>(), <!TYPE_MISMATCH!>createWithNumberBound<!>())

    <!DEBUG_INFO_EXPRESSION_TYPE(""Inv<kotlin.String>"")!>c2<!>

    val c3 = <!TYPE_MISMATCH!>select<!>(SubInv<Double>(), <!TYPE_MISMATCH!>createWithIntBound<!>())

    <!DEBUG_INFO_EXPRESSION_TYPE(""Inv<kotlin.Double>"")!>c3<!>
}",,570e
fun testCapturedVariable(),"{
    fun <K> createInvOut(): Inv<out K> = TODO()
    fun <V> createSubInvOut(): SubInv<out V> = TODO()

    fun <K> createInvIn(): Inv<in K> = TODO()

    val c1 = select(SubInv<Number>(), createInvOut())

    <!DEBUG_INFO_EXPRESSION_TYPE(""Inv<out kotlin.Number>"")!>c1<!>

    val c2 = select(createSubInvOut<Number>(), createInvOut())

    <!DEBUG_INFO_EXPRESSION_TYPE(""Inv<out kotlin.Number>"")!>c2<!>

    val c3 = <!TYPE_MISMATCH!>select<!>(SubInv<Number>(), createInvIn())

    <!DEBUG_INFO_EXPRESSION_TYPE(""Inv<out kotlin.Number>"")!>c3<!>
}",,2efd
No signature found,"fun createSubstitutedCopy(
        newOwner: DeclarationDescriptor,
        original: FunctionDescriptor?,
        kind: CallableMemberDescriptor.Kind,
        newName: Name?,
        annotations: Annotations,
        source: SourceElement
    ): FunctionDescriptorImpl = t",,6e1f
No signature found,"fun copy(
        newOwner: DeclarationDescriptor,
        modality: Modality,
        visibility: DescriptorVisibility,
        kind: CallableMemberDescriptor.Kind,
        copyOverrides: Boolean
    ): SimpleFunctionDescriptor = t",,6e1f
fun newCopyBuilder(),": FunctionDescriptor.CopyBuilder<SimpleFunctionDescriptor?> =
        o",,13a9
fun setOwner(owner: DeclarationDescriptor),: FunctionDescriptor.CopyBuilder<SimpleFunctionDescriptor?> = t,,2753
fun setModality(modality: Modality),: FunctionDescriptor.CopyBuilder<SimpleFunctionDescriptor?> = t,,f8a7
fun setVisibility(visibility: DescriptorVisibility),: FunctionDescriptor.CopyBuilder<SimpleFunctionDescriptor?> = t,,f2b8
No signature found,fun setKind(kind: CallableMemberDescriptor.Kind): FunctionDescriptor.CopyBuilder<SimpleFunctionDescriptor?> = t,,6e1f
fun setCopyOverrides(copyOverrides: Boolean),: FunctionDescriptor.CopyBuilder<SimpleFunctionDescriptor?> = t,,4219
fun setName(name: Name),: FunctionDescriptor.CopyBuilder<SimpleFunctionDescriptor?> = t,,fcae
fun setSubstitution(substitution: TypeSubstitution),: FunctionDescriptor.CopyBuilder<SimpleFunctionDescriptor?> = t,,3641
"fun setValueParameters(
                parameters: List<ValueParameterDescriptor>
            )",: FunctionDescriptor.CopyBuilder<SimpleFunctionDescriptor?> = t,,42f0
No signature found,"fun <V> putUserData(userDataKey: CallableDescriptor.UserDataKey<V>,
                                         value: V
            ): FunctionDescriptor.CopyBuilder<SimpleFunctionDescriptor?> = t",,6e1f
"fun setTypeParameters(
                parameters: List<TypeParameterDescriptor>
            )",: FunctionDescriptor.CopyBuilder<SimpleFunctionDescriptor?> = t,,7bde
fun setReturnType(type: KotlinType),: FunctionDescriptor.CopyBuilder<SimpleFunctionDescriptor?> = t,,69c4
"fun setContextReceiverParameters(
                contextReceiverParameters: List<ReceiverParameterDescriptor>
            )",: FunctionDescriptor.CopyBuilder<SimpleFunctionDescriptor?> = t,,cc27
No signature found,"fun setExtensionReceiverParameter(
                extensionReceiverParameter: ReceiverParameterDescriptor?
            ): FunctionDescriptor.CopyBuilder<SimpleFunctionDescriptor?> = t",,6e1f
No signature found,"fun setDispatchReceiverParameter(
                dispatchReceiverParameter: ReceiverParameterDescriptor?
            ): FunctionDescriptor.CopyBuilder<SimpleFunctionDescriptor?> = t",,6e1f
No signature found,fun setOriginal(original: CallableMemberDescriptor?): FunctionDescriptor.CopyBuilder<SimpleFunctionDescriptor?> = t,,6e1f
fun setSignatureChange(),: FunctionDescriptor.CopyBuilder<SimpleFunctionDescriptor?> = t,,7dac
fun setPreserveSourceElement(),: FunctionDescriptor.CopyBuilder<SimpleFunctionDescriptor?> = t,,b2a1
fun setDropOriginalInContainingParts(),: FunctionDescriptor.CopyBuilder<SimpleFunctionDescriptor?> = t,,5e0b
fun setHiddenToOvercomeSignatureClash(),: FunctionDescriptor.CopyBuilder<SimpleFunctionDescriptor?> = t,,cb68
fun setHiddenForResolutionEverywhereBesideSupercalls(),: FunctionDescriptor.CopyBuilder<SimpleFunctionDescriptor?> = t,,c77b
"fun setAdditionalAnnotations(
                additionalAnnotations: Annotations
            )",: FunctionDescriptor.CopyBuilder<SimpleFunctionDescriptor?> = t,,b011
fun build(),: SimpleFunctionDescriptor = t,,5bf9
fun isSuspend(),: Boolean = f,,b5de
No signature found,fun <V> getUserData(key: CallableDescriptor.UserDataKey<V>): V? = n,,6e1f
No signature found,fun setOverriddenDescriptors(overriddenDescriptors: Collection<CallableMemberDescriptor?>) {},,6e1f
fun test(),"{
    val f = String::length
    val s = ""hello""
    val g = <expr>s</expr>::length
    f() + g() + String::length.invoke(s) + s::length.invoke()
}",,fe98
No signature found,"fun Scaffold(topBar: @MyComposable () -> Unit, bottomBar: @MyComposable () -> Unit) {
}","// WITH_FIR_TEST_COMPILER_PLUGIN
// DUMP_IR

// MODULE: lib
// MODULE_KIND: LibraryBinary
// FILE: p3/foo.kt",6e1f
fun TopAppBar(title: String),"{
}","// MODULE: main(lib)
// FILE: main.kt",c536
No signature found,"fun ArticleScreenContent(title: String, bottomBarContent: @MyComposable () -> Unit = {",,6e1f
No signature found,"fun <TP1: OClass1, TP2: OClass2> test(
  t1: Trait1,
  oc1: OClass1,
  fc1: FClass1,
  tp1: TP1
) {
  t1 as Trait2
  t1 as OClass2
  t1 <!CAST_NEVER_SUCCEEDS!>as<!> FClass2
  t1 as TP2

  oc1 as Trait2
  oc1 <!CAST_NEVER_SUCCEEDS!>as<!> OClass2
  oc1 <!CAST_NEVER_SUCCEEDS!>as<!> FClass2
  oc1 as TP2

  fc1 <!CAST_NEVER_SUCCEEDS!>as<!> Trait2
  fc1 <!CAST_NEVER_SUCCEEDS!>as<!> OClass2
  fc1 <!CAST_NEVER_SUCCEEDS!>as<!> FClass2
  fc1 as TP2

  tp1 as Trait2
  tp1 as OClass2
  tp1 as FClass2
  tp1 as TP2
}",// !DIAGNOSTICS: -UNCHECKED_CAST,6e1f
No signature found,fun <T> T.foo(): (a: T) -> Unit = T,,6e1f
fun call(),"{
    val x = 123.foo()
    <expr>x(1)</expr>
}",,f930
fun foo(),": CharSequence?
}

interface A : Common {
    override : CharSequence
}",// !CHECK_TYPE,519f
fun foo(),": String
}

fun test(c: Common) {
    if (c is B && c is A) {
        c.foo().checkType { _<String>() }",,519f
fun foo(s: String),{},"// TARGET_BACKEND: JVM
// FILE: Test.java",b751
fun box(),": String {
    try {
        Test.callFoo()
        return ""Fail 1""
    }",,4f27
fun getPackage(),"= """,,5656
fun generateBody(),"{
        for (kind in PrimitiveType.values()) {
            val s = kind.capitalized
            out.println(""/** An iterator over a sequence of values of type `$s`. */"")
            out.println(""public abstract class ${s}",,fb73
fun next(),: $s = n,,cb14
fun createTestContainerFun(container: IrDeclaration),": IrSimpleFunction

}

// TODO: investigate if it could be removed
internal fun <T> BackendContext.lazy2(fn: () -> T) = l",,b249
"fun findClass(memberScope: MemberScope, name: Name)",": ClassDescriptor =
    m",,f4c4
"fun findFunctions(memberScope: MemberScope, name: Name)",": List<SimpleFunctionDescriptor> =
    m",,a42f
fun getInlinedClass(type: IrType),": IrClass?

    fun isTypeInlined(type: IrType): Boolean {
        return getInlinedClass(type) != null
    }",,78df
fun shouldValueParameterBeBoxed(parameter: IrValueParameter),": Boolean {
        val function = parameter.parent as? IrSimpleFunction ?: return false
        val klass = function.parent as? IrClass ?: return false
        if (!isClassInlineLike(klass)) return false
        return parameter.isDispatchReceiver && function.isOverridableOrOverrides
    }",,7bf8
fun test(targetString: String),": String {
    val json = Json { encodeDefaults = true }",// WITH_STDLIB,0630
fun box(),": String {
    return test(""""""{""ctor"":1,""ctorDependent"":2,""body"":""x"",""bodyDependent"":3}",,4f27
No signature found,"fun addImplicitReceiver(name: Name?, value: ImplicitReceiverValue<*>): MutableCheckerContext {
        return MutableCheckerContext(
            implicitReceiverStack.add(name, value),
            containingDeclarations,
            callsOrAssignments,
            getClassCalls,
            annotationContainers,
            containingElements,
            isContractBody,
            inlineFunctionBodyContext,
            containingFile,
            sessionHolder,
            returnTypeCalculator,
            suppressedDiagnostics,
            allInfosSuppressed,
            allWarningsSuppressed,
            allErrorsSuppressed
        )
    }",,6e1f
fun addDeclaration(declaration: FirDeclaration),": MutableCheckerContext {
        containingDeclarations.add(declaration)
        return this
    }",,db2e
fun dropDeclaration(),"{
        containingDeclarations.removeLast()
    }",,d7b6
fun addCallOrAssignment(qualifiedAccessOrAnnotationCall: FirStatement),": MutableCheckerContext {
        callsOrAssignments.add(qualifiedAccessOrAnnotationCall)
        return this
    }",,354f
fun dropCallOrAssignment(),"{
        callsOrAssignments.removeLast()
    }",,c7d8
fun addGetClassCall(getClassCall: FirGetClassCall),": MutableCheckerContext {
        getClassCalls.add(getClassCall)
        return this
    }",,02dc
fun dropGetClassCall(),"{
        getClassCalls.removeLast()
    }",,ce6c
fun addAnnotationContainer(annotationContainer: FirAnnotationContainer),": CheckerContextForProvider {
        annotationContainers.add(annotationContainer)
        return this
    }",,b9a9
fun dropAnnotationContainer(),"{
        annotationContainers.removeLast()
    }",,f70a
fun addElement(element: FirElement),": CheckerContextForProvider {
        assert(containingElements.lastOrNull() !== element)
        containingElements.add(element)
        return this
    }",,6f4d
fun dropElement(),"{
        containingElements.removeLast()
    }",,b604
"fun addSuppressedDiagnostics(
        diagnosticNames: Collection<String>,
        allInfosSuppressed: Boolean,
        allWarningsSuppressed: Boolean,
        allErrorsSuppressed: Boolean
    )",": CheckerContextForProvider {
        if (diagnosticNames.isEmpty()) return this
        return MutableCheckerContext(
            implicitReceiverStack,
            containingDeclarations,
            callsOrAssignments,
            getClassCalls,
            annotationContainers,
            containingElements,
            isContractBody,
            inlineFunctionBodyContext,
            containingFile,
            sessionHolder,
            returnTypeCalculator,
            suppressedDiagnostics.addAll(diagnosticNames),
            this.allInfosSuppressed || allInfosSuppressed,
            this.allWarningsSuppressed || allWarningsSuppressed,
            this.allErrorsSuppressed || allErrorsSuppressed
        )
    }",,b5f2
fun enterContractBody(),": CheckerContextForProvider {
        check(!isContractBody)
        isContractBody = true
        return this
    }",,6f05
fun exitContractBody(),": CheckerContextForProvider {
        check(isContractBody)
        isContractBody = false
        return this
    }",,88a9
No signature found,"fun setInlineFunctionBodyContext(context: FirInlineDeclarationChecker.InlineFunctionBodyContext): CheckerContextForProvider {
        inlineFunctionBodyContext = context
        return this
    }",,6e1f
fun unsetInlineFunctionBodyContext(),": CheckerContextForProvider {
        inlineFunctionBodyContext = null
        return this
    }",,7f8d
fun enterFile(file: FirFile),": CheckerContextForProvider {
        containingFile = file
        return this
    }",,0661
fun exitFile(file: FirFile),": CheckerContextForProvider {
        containingFile = file
        return this
    }",,a706
fun box(),": String {
    val outer1 = Outer(""propValue1"")
    val a1 = outer1.A2(""abc"")
    if (a1.parentProp != ""abc#propValue1#propValue1"") return ""fail1: ${a1.parentProp}",,4f27
"fun set(fir: FirProperty, value: IrPropertySymbol)","{
            when (fir) {
                is FirSyntheticProperty -> synthetic[fir.cacheKey] = value
                else -> normal[fir] = value
            }",,aa53
fun get(fir: FirProperty),": IrPropertySymbol? {
            return when (fir) {
                is FirSyntheticProperty -> synthetic[fir.cacheKey]
                else -> normal[fir]
            }",,c766
No signature found,"fun forEachCachedDeclarationSymbol(block: (IrSymbol) -> Unit) {
        functionCache.values.forEachWithRemapping(symbolsMappingForLazyClasses::remapFunctionSymbol, block)
        constructorCache.values.forEach(block)
        propertyCache.normal.values.forEachWithRemapping(symbolsMappingForLazyClasses::remapPropertySymbol, block)
        propertyCache.synthetic.values.forEachWithRemapping(symbolsMappingForLazyClasses::remapPropertySymbol, block)
        getterForPropertyCache.values.forEachWithRemapping(symbolsMappingForLazyClasses::remapFunctionSymbol, block)
        setterForPropertyCache.values.forEachWithRemapping(symbolsMappingForLazyClasses::remapFunctionSymbol, block)
        backingFieldForPropertyCache.values.forEach(block)
        propertyForBackingFieldCache.values.forEach(block)
        delegateVariableForPropertyCache.values.forEach(block)
    }",,6e1f
No signature found,"fun <S : IrSymbol> Collection<S>.forEachWithRemapping(remapper: (S) -> S, block: (S) -> Unit) {
        for (symbol in this) {
            val updatedSymbol = if (symbol is IrFakeOverrideSymbolBase<*, *, *>) {
                remapper(symbol)
            }",,6e1f
fun foo(),"}
    // interface B : A {
    //      /* $2 */ fake_override 
    // }",,519f
No signature found,"fun invoke(
                originalSymbol: FirCallableSymbol<*>,
                dispatchReceiverLookupTag: ConeClassLikeLookupTag,
                c: Fir2IrComponents
            ): FakeOverrideIdentifier {
                return FakeOverrideIdentifier(
                    originalSymbol,
                    dispatchReceiverLookupTag,
                    dispatchReceiverLookupTag.toFirRegularClass(c.session)?.isExpect == true
                )
            }","// interface C : B {
    //    /* $3 */ override fun foo()
    // }
    //
    // We've got FIR declarations only for $1 and $3, but we've got a fake override for $2 in IR
    // and just to simplify things we create a synthetic FIR for $2, while it can't be referenced from other FIR nodes.
    //
    // But when we're binding overrides for $3, we want it had $2 ad it's overridden,
    // so remember that in class B there's a fake override $2 for real $1.
    //
    // Thus, we may obtain it by fakeOverridesInClass[ir(B)][fir(A::foo)] -> fir(B::foo)
    //
    // Note: reusing is necessary here, because sometimes (see testFakeOverridesInPlatformModule)
    // we have to match fake override in platform class with overridden fake overrides in common class",6e1f
No signature found,"fun FirCallableDeclaration.asFakeOverrideKey(): FirOverrideKey {
        return when (val signature = signatureComposer.composeSignature(this)) {
            null -> FirOverrideKey.Declaration(this)
            else -> FirOverrideKey.Signature(signature)
        }",,6e1f
No signature found,"fun getIrExternalPackageFragment(
        fqName: FqName,
        moduleData: FirModuleData,
        firOrigin: FirDeclarationOrigin = F",,6e1f
"fun getIrExternalOrBuiltInsPackageFragment(
        fqName: FqName,
        moduleData: FirModuleData,
        firOrigin: FirDeclarationOrigin,
        allowBuiltins: Boolean
    )",": IrExternalPackageFragment {
        val isBuiltIn = allowBuiltins && fqName in BUILT_INS_PACKAGE_FQ_NAMES
        val fragments = fragmentCache.getOrPut(fqName) {
            val fragmentForPrecompiledBinaries = callablesGenerator.createExternalPackageFragment(fqName, sourceModuleDescriptor)
            ExternalPackageFragments(ConcurrentHashMap(), ConcurrentHashMap(), fragmentForPrecompiledBinaries)
        }",,69ed
"fun registerFile(firFile: FirFile, irFile: IrFile)","{
        fileCache[firFile] = irFile
    }","// Make sure that external package fragments have a different module descriptor. The module descriptors are compared
        // to determine if objects need regeneration because they are from different modules.
        // But keep the original module descriptor for the fragments coming from parts compiled on the previous incremental step",5fa6
fun getIrFile(firFile: FirFile),": IrFile {
        return fileCache[firFile]!!
    }",,b4e5
fun getContainingFile(),: SourceFile = S,,e442
No signature found,"fun getCachedIrFunctionSymbol(
        function: FirFunction,
        fakeOverrideOwnerLookupTag: ConeClassLikeLookupTag? = n",,6e1f
No signature found,"fun getCachedIrFunctionSymbol(
        function: FirSimpleFunction,
        fakeOverrideOwnerLookupTag: ConeClassLikeLookupTag? = n",,6e1f
No signature found,"fun getCachedIrFunctionSymbol(
        function: FirSimpleFunction,
        fakeOverrideOwnerLookupTag: ConeClassLikeLookupTag?,
        signatureCalculator: () -> IdSignature?
    ): IrSimpleFunctionSymbol? {
        if (function.visibility == Visibilities.Local) {
            return localStorage.getLocalFunctionSymbol(function)
        }",,6e1f
No signature found,"fun createAndCacheIrFunction(
        function: FirFunction,
        irParent: IrDeclarationParent?,
        predefinedOrigin: IrDeclarationOrigin? = n",,6e1f
No signature found,"fun createFunctionSymbol(signature: IdSignature?): IrSimpleFunctionSymbol {
        return when {
            signature != null -> symbolTable.referenceSimpleFunction(signature)
            else -> IrSimpleFunctionSymbolImpl()
        }",,6e1f
No signature found,"fun createMemberFunctionSymbol(
        function: FirFunction,
        fakeOverrideOwnerLookupTag: ConeClassLikeLookupTag? = n",,6e1f
No signature found,"fun findContainingIrClassSymbol(
        callable: FirCallableDeclaration,
        fakeOverrideOwnerLookupTag: ConeClassLikeLookupTag?,
    ): IrClassSymbol {
        val containingClassLookupTag = when {
            fakeOverrideOwnerLookupTag != null -> fakeOverrideOwnerLookupTag
            callable.isSubstitutionOrIntersectionOverride -> callable.containingClassLookupTag()
            else -> shouldNotBeCalled()
        }",,6e1f
No signature found,"fun cacheIrFunctionSymbol(
        function: FirFunction,
        irFunctionSymbol: IrSimpleFunctionSymbol,
        fakeOverrideOwnerLookupTag: ConeClassLikeLookupTag?,
    ) {
        when {
            function.visibility == Visibilities.Local || function is FirAnonymousFunction -> {
                localStorage.putLocalFunction(function, irFunctionSymbol)
            }",,6e1f
No signature found,"fun <T : IrFunction> T.putParametersInScope(function: FirFunction): T {
        val contextReceivers = function.contextReceiversForFunctionOrContainingProperty()

        for ((firParameter, irParameter) in function.valueParameters.zip(valueParameters.drop(contextReceivers.size))) {
            localStorage.putParameter(firParameter, irParameter.symbol)
        }",,6e1f
"fun cacheDelegationFunction(function: FirSimpleFunction, irFunction: IrSimpleFunction)","{
        val symbol = irFunction.symbol
        functionCache[function] = symbol
        delegatedReverseCache[symbol] = function
    }",,84f8
"fun cacheGeneratedFunction(firFunction: FirSimpleFunction, irFunction: IrSimpleFunction)","{
        val containingClass = firFunction.getContainingClass(session)!!
        val cache = dataClassGeneratedFunctionsCache.computeIfAbsent(containingClass) { DataClassGeneratedFunctionsStorage() }",,18d9
fun getCachedIrConstructorSymbol(constructor: FirConstructor),": IrConstructorSymbol? {
        return constructorCache[constructor]
    }",,6141
No signature found,"fun createAndCacheIrConstructor(
        constructor: FirConstructor,
        irParent: () -> IrClass,
        predefinedOrigin: IrDeclarationOrigin? = n",,6e1f
"fun cacheIrConstructorSymbol(constructor: FirConstructor, irConstructorSymbol: IrConstructorSymbol)","{
        constructorCache[constructor] = irConstructorSymbol
    }",,0d43
No signature found,"fun getIrConstructorSymbol(firConstructorSymbol: FirConstructorSymbol, potentiallyExternal: Boolean = t",,6e1f
fun prepareProperty(property: FirProperty),": FirProperty {
        return when (property) {
            is FirSyntheticProperty -> originalForSyntheticProperty.getOrPut(FirSyntheticPropertyKey(property)) { property }",,aa99
"fun getOrCreateIrPropertyByPureField(
        field: FirField,
        irParent: IrDeclarationParent
    )",": IrProperty {
        return fieldToPropertyCache.getOrPut(field to irParent) {
            val containingClassId = (irParent as? IrClass)?.classId
            createAndCacheIrProperty(
                field.toStubProperty(),
                irParent,
                fakeOverrideOwnerLookupTag = containingClassId?.toLookupTag(),
                allowLazyDeclarationsCreation = true // pure fields exist only in java
            )
        }",,ab7f
No signature found,"fun createAndCacheIrProperty(
        property: FirProperty,
        irParent: IrDeclarationParent?,
        predefinedOrigin: IrDeclarationOrigin? = n",,6e1f
No signature found,"fun createPropertySymbols(
        property: FirProperty,
        fakeOverrideOwnerLookupTag: ConeClassLikeLookupTag?,
        parentIsExternal: Boolean
    ): PropertySymbols {
        if (
            !configuration.useFirBasedFakeOverrideGenerator &&
            !parentIsExternal &&
            property.isFakeOverride(fakeOverrideOwnerLookupTag)
        ) {
            return createFakeOverridePropertySymbols(property, fakeOverrideOwnerLookupTag)
        }",,6e1f
No signature found,"fun createFakeOverridePropertySymbols(
        property: FirProperty,
        fakeOverrideOwnerLookupTag: ConeClassLikeLookupTag?,
    ): PropertySymbols {
        val originalFirProperty = property.unwrapFakeOverrides()
        val originalSymbols = getIrPropertySymbols(originalFirProperty.symbol)
        require(property.isStubPropertyForPureField != true) {
            ""What are we doing here?""
        }",,6e1f
No signature found,"fun cacheIrPropertySymbols(
        property: FirProperty,
        symbols: PropertySymbols,
        fakeOverrideOwnerLookupTag: ConeClassLikeLookupTag?,
    ) {
        val irPropertySymbol = symbols.propertySymbol
        symbols.backingFieldSymbol?.let {
            backingFieldForPropertyCache[irPropertySymbol] = it
            propertyForBackingFieldCache[it] = irPropertySymbol
        }",,6e1f
No signature found,"fun FirField.toStubProperty(): FirProperty {
        val field = this
        return buildProperty {
            source = field.source
            moduleData = field.moduleData
            origin = field.origin
            returnTypeRef = field.returnTypeRef
            name = field.name
            isVar = field.isVar
            getter = field.getter
            setter = field.setter
            symbol = FirPropertySymbol(field.symbol.callableId)
            isLocal = false
            status = field.status
        }",,6e1f
No signature found,"fun getIrPropertySymbol(
        firPropertySymbol: FirPropertySymbol,
        fakeOverrideOwnerLookupTag: ConeClassLikeLookupTag? = n",,6e1f
No signature found,"fun getIrPropertySymbols(
        firPropertySymbol: FirPropertySymbol,
        fakeOverrideOwnerLookupTag: ConeClassLikeLookupTag? = n",,6e1f
No signature found,"fun createAndCacheIrPropertySymbols(
        property: FirProperty,
        fakeOverrideOwnerLookupTag: ConeClassLikeLookupTag?,
    ): PropertySymbols {
        val irParent = findIrParent(property, fakeOverrideOwnerLookupTag)
        if (irParent?.isExternalParent() == true) {
            val symbols = createPropertySymbols(property, fakeOverrideOwnerLookupTag, parentIsExternal = true)
            @OptIn(FirBasedFakeOverrideGenerator::class) // only for lazy
            val firForLazyProperty = calculateFirForLazyDeclaration(
                property, fakeOverrideOwnerLookupTag, irParent,
                fakeOverrideGenerator::createFirPropertyFakeOverrideIfNeeded
            )

            callablesGenerator.createIrProperty(
                firForLazyProperty,
                irParent,
                symbols,
                predefinedOrigin = firForLazyProperty.computeExternalOrigin(),
                allowLazyDeclarationsCreation = true
            ).also {
                check(it is Fir2IrLazyProperty)
            }",,6e1f
No signature found,"fun getCachedIrPropertySymbol(
        property: FirProperty,
        fakeOverrideOwnerLookupTag: ConeClassLikeLookupTag?,
        signatureCalculator: () -> IdSignature? = {",,6e1f
No signature found,"fun getCachedIrPropertySymbols(
        property: FirProperty,
        fakeOverrideOwnerLookupTag: ConeClassLikeLookupTag?,
        signatureCalculator: () -> IdSignature? = {",,6e1f
fun findGetterOfProperty(propertySymbol: IrPropertySymbol),": IrSimpleFunctionSymbol? {
        return getterForPropertyCache[propertySymbol]?.let(symbolsMappingForLazyClasses::remapFunctionSymbol)
    }",,c81f
fun findSetterOfProperty(propertySymbol: IrPropertySymbol),": IrSimpleFunctionSymbol? {
        return setterForPropertyCache[propertySymbol]?.let(symbolsMappingForLazyClasses::remapFunctionSymbol)
    }",,daa7
fun findBackingFieldOfProperty(propertySymbol: IrPropertySymbol),": IrFieldSymbol? {
        return backingFieldForPropertyCache[propertySymbol]
    }",,40d5
fun findPropertyForBackingField(fieldSymbol: IrFieldSymbol),": IrPropertySymbol? {
        return propertyForBackingFieldCache[fieldSymbol]
    }",,9f09
"fun cacheDelegatedProperty(property: FirProperty, irProperty: IrProperty)","{
        val symbol = irProperty.symbol
        propertyCache[property] = symbol
        delegatedReverseCache[symbol] = property
    }",,54bc
No signature found,"fun getOrCreateIrField(
        firFieldSymbol: FirFieldSymbol,
        fakeOverrideOwnerLookupTag: ConeClassLikeLookupTag? = n",// ------------------------------------ fields ------------------------------------,6e1f
No signature found,"fun getOrCreateIrField(field: FirField, irParent: IrDeclarationParent?): IrField {
        @OptIn(UnsafeDuringIrConstructionAPI::class)
        getCachedIrFieldSymbol(field, irParent)?.ownerIfBound()?.let { return it }",,6e1f
No signature found,"fun getCachedIrFieldSymbol(field: FirField, irParent: IrDeclarationParent?): IrFieldSymbol? {
        val containingClassLookupTag = (irParent as IrClass?)?.classId?.toLookupTag()
        val staticFakeOverrideKey = getFieldStaticFakeOverrideKey(field, containingClassLookupTag)
        return if (staticFakeOverrideKey == null) {
            fieldCache[field]
        }",,6e1f
fun getIrBackingFieldSymbol(firBackingFieldSymbol: FirBackingFieldSymbol),": IrSymbol {
        return getIrPropertyForwardedSymbol(firBackingFieldSymbol.fir.propertySymbol.fir)
    }",,67c7
No signature found,"fun getIrDelegateFieldSymbol(firVariableSymbol: FirVariableSymbol<*>): IrSymbol {
        return getIrPropertyForwardedSymbol(firVariableSymbol.fir)
    }",,6e1f
fun getIrPropertyForwardedSymbol(fir: FirVariable),": IrSymbol {
        return when (fir) {
            is FirProperty -> {
                if (fir.isLocal) {
                    // local property cannot be referenced before declaration, so it's safe to take an owner from the symbol
                    @OptIn(UnsafeDuringIrConstructionAPI::class)
                    val delegatedProperty = localStorage.getDelegatedProperty(fir)?.owner
                    return delegatedProperty?.delegate?.symbol ?: getIrVariableSymbol(fir)
                }",,de8a
fun getCachedIrDelegateOrBackingFieldSymbol(field: FirField),": IrFieldSymbol? {
        return fieldCache[field]
    }",,ebb8
"fun recordDelegateFieldMappedToBackingField(field: FirField, irFieldSymbol: IrFieldSymbol)","{
        fieldCache[field] = irFieldSymbol
    }",,14bf
fun getCachedIrFieldStaticFakeOverrideSymbolByDeclaration(field: FirField),": IrFieldSymbol? {
        val ownerLookupTag = field.containingClassLookupTag() ?: return null
        return fieldStaticOverrideCache[FieldStaticOverrideKey(ownerLookupTag, field.name)]
    }",,5083
"fun createDelegateIrField(field: FirField, irClass: IrClass)",": IrField {
        return createAndCacheIrField(
            field,
            irParent = irClass,
            type = field.initializer?.resolvedType ?: field.returnTypeRef.coneType,
            origin = IrDeclarationOrigin.DELEGATE
        )
    }",,74a8
No signature found,"fun createAndCacheIrField(
        field: FirField,
        irParent: IrDeclarationParent?,
        type: ConeKotlinType = f",,6e1f
fun createFieldSymbol(),": IrFieldSymbol {
        return IrFieldSymbolImpl()
    }",,0479
No signature found,"fun getFieldStaticFakeOverrideKey(field: FirField, ownerLookupTag: ConeClassLikeLookupTag?): FieldStaticOverrideKey? {
        if (ownerLookupTag == null || !field.isStatic ||
            !field.isSubstitutionOrIntersectionOverride && ownerLookupTag == field.containingClassLookupTag()
        ) return null
        return FieldStaticOverrideKey(ownerLookupTag, field.name)
    }",// This function returns null if this field/ownerClassId combination does not describe static fake override,6e1f
No signature found,"fun createAndCacheParameter(
        valueParameter: FirValueParameter,
        index: Int = U",// ------------------------------------ parameters ------------------------------------,6e1f
fun findGetterOfProperty(propertySymbol: IrLocalDelegatedPropertySymbol),": IrSimpleFunctionSymbol {
        return getterForPropertyCache.getValue(propertySymbol)
    }",,68a3
fun findSetterOfProperty(propertySymbol: IrLocalDelegatedPropertySymbol),": IrSimpleFunctionSymbol? {
        return setterForPropertyCache[propertySymbol]
    }",,512e
fun findDelegateVariableOfProperty(propertySymbol: IrLocalDelegatedPropertySymbol),": IrVariableSymbol {
        return delegateVariableForPropertyCache.getValue(propertySymbol)
    }",,8de2
"fun createAndCacheIrLocalDelegatedProperty(
        property: FirProperty,
        irParent: IrDeclarationParent
    )",": IrLocalDelegatedProperty {
        val symbols = createLocalDelegatedPropertySymbols(property)
        val irProperty = callablesGenerator.createIrLocalDelegatedProperty(property, irParent, symbols)
        val symbol = irProperty.symbol
        delegateVariableForPropertyCache[symbol] = irProperty.delegate.symbol
        getterForPropertyCache[symbol] = irProperty.getter.symbol
        irProperty.setter?.let { setterForPropertyCache[symbol] = it.symbol }",,f2dc
fun createLocalDelegatedPropertySymbols(property: FirProperty),": LocalDelegatedPropertySymbols {
        val propertySymbol = IrLocalDelegatedPropertySymbolImpl()
        val getterSymbol = createFunctionSymbol(signature = null)
        val setterSymbol = runIf(property.isVar) {
            createFunctionSymbol(signature = null)
        }",,b888
No signature found,"fun createAndCacheIrVariable(
        variable: FirVariable,
        irParent: IrDeclarationParent,
        givenOrigin: IrDeclarationOrigin? = n",,6e1f
No signature found,"fun getIrValueSymbol(firVariableSymbol: FirVariableSymbol<*>): IrSymbol {
        return when (val firDeclaration = firVariableSymbol.fir) {
            is FirEnumEntry -> classifierStorage.getIrEnumEntrySymbol(firDeclaration)

            is FirValueParameter -> localStorage.getParameter(firDeclaration)
                ?: getIrVariableSymbol(firDeclaration) // catch parameter is FirValueParameter in FIR but IrVariable in IR

            else -> getIrVariableSymbol(firDeclaration)
        }",,6e1f
fun getIrVariableSymbol(firVariable: FirVariable),": IrVariableSymbol {
        return localStorage.getVariable(firVariable)
            ?: error(""Cannot find variable ${firVariable.render()}",,1b6a
"fun createIrAnonymousInitializer(
        anonymousInitializer: FirAnonymousInitializer,
        containingIrClass: IrClass,
    )",": IrAnonymousInitializer {
        val irInitializer = callablesGenerator.createIrAnonymousInitializer(anonymousInitializer, containingIrClass)
        val alreadyContained = initializerCache.put(anonymousInitializer, irInitializer)
        require(alreadyContained == null) {
            ""IR for anonymous initializer already exits: ${anonymousInitializer.render()}",,2117
fun getIrAnonymousInitializer(anonymousInitializer: FirAnonymousInitializer),": IrAnonymousInitializer {
        return initializerCache.getValue(anonymousInitializer)
    }",,de8d
fun originalDeclarationForDelegated(irDeclaration: IrDeclaration),": FirDeclaration? {
        return delegatedReverseCache[irDeclaration.symbol]
    }",// ------------------------------------ callables ------------------------------------,d1dd
"fun saveFakeOverrideInClass(
        irClass: IrClass,
        originalDeclaration: FirCallableDeclaration,
        fakeOverride: FirCallableDeclaration
    )","{
        fakeOverridesInClass.getOrPut(irClass, ::mutableMapOf)[originalDeclaration.asFakeOverrideKey()] = fakeOverride
    }",,2aaf
"fun getFakeOverrideInClass(
        irClass: IrClass,
        callableDeclaration: FirCallableDeclaration
    )",": FirCallableDeclaration? {
        if (irClass is Fir2IrLazyClass) {
            irClass.getFakeOverridesByName(callableDeclaration.symbol.callableId.callableName)
        }",,094f
No signature found,"fun FirCallableDeclaration.computeExternalOrigin(): IrDeclarationOrigin {
        val containingClass = containingClassLookupTag()?.toFirRegularClass(session)
        return when (containingClass?.isJavaOrEnhancement) {
            true -> IrDeclarationOrigin.IR_EXTERNAL_JAVA_DECLARATION_STUB
            else -> IrDeclarationOrigin.IR_EXTERNAL_DECLARATION_STUB
        }",,6e1f
No signature found,"fun getIrFunctionSymbol(
        firFunctionSymbol: FirFunctionSymbol<*>,
        fakeOverrideOwnerLookupTag: ConeClassLikeLookupTag? = n",,6e1f
No signature found,"fun <reified FC : FirCallableDeclaration, reified IS : IrSymbol> getCachedIrCallableSymbol(
        declaration: FC,
        fakeOverrideOwnerLookupTag: ConeClassLikeLookupTag?,
        cacheGetter: (FC) -> IS?,
        cacheSetter: (FC, IS) -> Unit,
        signatureCalculator: () -> IdSignature?,
        referenceIfAny: (IdSignature) -> IS?
    ): IS? {
        /*
         * There should be two types of declarations:
         * 1. Real declarations. They are stored in simple FirDeclaration -> IrDeclaration [cache]
         * 2. Fake overrides. They are stored in [irFakeOverridesForRealFirFakeOverrideMap], where the key is the original real declaration and
         *      specific dispatch receiver of particular fake override. This cache is needed, because we can have two different FIR
         *      f/o for common and platform modules (because they are session dependent), but we should create IR declaration for them
         *      only once. So [irFakeOverridesForFirFakeOverrideMap] is shared between fir2ir conversion for different MPP modules
         *      (see KT-58229)
         *
         * Unfortunately, in the current implementation, there is a special case.
         * If the fake override exists in FIR (i.e., it is an intersection or substitution override), and it comes from dependency module,
         * corresponding LazyIrFunction or LazyIrProperty can be created, ignoring the fact that it is a fake override.
         * In that case, it can sometimes be put to the wrong cache, as a normal declaration.
         *
         * To workaround this, we look up such declarations in both caches.
         */
        val isFakeOverride = declaration.isFakeOverrideOrDelegated(fakeOverrideOwnerLookupTag)
        if (isFakeOverride) {
            val key = FakeOverrideIdentifier(
                declaration.unwrapFakeOverridesOrDelegated().symbol,
                fakeOverrideOwnerLookupTag ?: declaration.containingClassLookupTag()!!,
                c
            )
            irForFirSessionDependantDeclarationMap[key]?.let { return it as IS }",,6e1f
fun foo(param: T),"// (1)
         * }
         *
         * class Derived : Base<String>() {
         *     // substitution override fun foo(param: String)
         * }",,a535
fun foo(param: T),{},,a535
fun test(d: Derived),"{
         *     d.foo()
         * }",// (2),37e1
No signature found,"fun <T : FirCallableDeclaration> calculateFirForLazyDeclaration(
        originalDeclaration: T,
        fakeOverrideOwnerLookupTag: ConeClassLikeLookupTag?,
        irParent: IrDeclarationParent,
        createFakeOverrideIfNeeded: (T, ConeClassLikeLookupTag, IrClass) -> T?
    ): T {
        if (irParent !is IrClass || fakeOverrideOwnerLookupTag == null) return originalDeclaration
        return createFakeOverrideIfNeeded(originalDeclaration, fakeOverrideOwnerLookupTag, irParent) ?: originalDeclaration
    }",,6e1f
No signature found,"fun generateLazyFakeOverrides(name: Name, fakeOverrideOwnerLookupTag: ConeClassLikeLookupTag?) {
        val firClassSymbol = fakeOverrideOwnerLookupTag?.toSymbol(session) as? FirClassSymbol<*>
        if (firClassSymbol != null) {
            val irClass = classifierStorage.getIrClass(firClassSymbol.fir)
            if (irClass is Fir2IrLazyClass) {
                irClass.getFakeOverridesByName(name)
            }",,6e1f
fun foo(),"// (1)
     * }
     *
     * // MODULE: platform()()(common)
     * actual interface A {
     *      // (2)
     * }",,519f
fun test(b: B),"{
     *     b.foo() // (3)
     * }",,0226
fun generateUnboundFakeOverrides(),"{
        for ((identifier, symbol) in irForFirSessionDependantDeclarationMap) {
            if (symbol.isBound) continue
            val (originalSymbol, dispatchReceiverLookupTag, _) = identifier
            generateDeclaration(originalSymbol, dispatchReceiverLookupTag)
        }",,1991
fun foo(x: Int),{},,0028
fun bar(),"{
     *     1.let { // (2)
     *         <context of code fragment>
     *     }",// (1),66c3
fun fillUnboundSymbols(),"{
        fillUnboundSymbols(functionCache)
        fillUnboundSymbols(propertyCache.normal)
        fillUnboundSymbols(propertyCache.synthetic)
    }",,f819
"fun fillUnboundSymbols(cache: Map<out FirCallableDeclaration, IrSymbol>)","{
        for ((firDeclaration, irSymbol) in cache) {
            if (irSymbol.isBound) continue
            generateDeclaration(firDeclaration.symbol, dispatchReceiverLookupTag = null)
        }",,6150
No signature found,"fun generateDeclaration(
        originalSymbol: FirBasedSymbol<*>,
        dispatchReceiverLookupTag: ConeClassLikeLookupTag?,
    ) {
        val irParent = findIrParent(
            originalSymbol.packageFqName(),
            dispatchReceiverLookupTag ?: originalSymbol.getContainingClassSymbol(session)?.toLookupTag(),
            originalSymbol,
            originalSymbol.origin
        )
        when (originalSymbol) {
            is FirPropertySymbol -> createAndCacheIrProperty(
                originalSymbol.fir,
                irParent,
                fakeOverrideOwnerLookupTag = dispatchReceiverLookupTag
            )

            is FirNamedFunctionSymbol -> createAndCacheIrFunction(
                originalSymbol.fir,
                irParent,
                fakeOverrideOwnerLookupTag = dispatchReceiverLookupTag
            )

            else -> error(""Unexpected declaration: $originalSymbol"")
        }",,6e1f
fun getCachedIrScript(script: FirScript),": IrScript? {
        return scriptCache[script]
    }",,408c
fun createIrScript(script: FirScript),": IrScript {
        getCachedIrScript(script)?.let { error(""IrScript already created: ${script.render()}",,5bb3
fun enterScope(symbol: IrSymbol),"{
        symbolTable.enterScope(symbol)
        if (symbol is IrSimpleFunctionSymbol ||
            symbol is IrConstructorSymbol ||
            symbol is IrAnonymousInitializerSymbol ||
            symbol is IrPropertySymbol ||
            symbol is IrEnumEntrySymbol ||
            symbol is IrScriptSymbol
        ) {
            localStorage.enterCallable()
        }",,8796
fun leaveScope(symbol: IrSymbol),"{
        if (symbol is IrSimpleFunctionSymbol ||
            symbol is IrConstructorSymbol ||
            symbol is IrAnonymousInitializerSymbol ||
            symbol is IrPropertySymbol ||
            symbol is IrEnumEntrySymbol ||
            symbol is IrScriptSymbol
        ) {
            if (configuration.allowNonCachedDeclarations) {
                // See KDoc to `fillUnboundSymbols` function
                @OptIn(LeakedDeclarationCaches::class)
                fillUnboundSymbols(localStorage.lastCache.localFunctions)
            }",,4e04
No signature found,"fun withScope(symbol: IrSymbol, crossinline block: () -> Unit) {
        enterScope(symbol)
        block()
        leaveScope(symbol)
    }",,6e1f
No signature found,"fun findIrParent(
        packageFqName: FqName,
        parentLookupTag: ConeClassLikeLookupTag?,
        firBasedSymbol: FirBasedSymbol<*>,
        firOrigin: FirDeclarationOrigin
    ): IrDeclarationParent? {
        if (parentLookupTag != null) {
            // At this point all source classes should be already created and bound to symbols
            @OptIn(UnsafeDuringIrConstructionAPI::class)
            return classifierStorage.getIrClassSymbol(parentLookupTag)?.owner
        }",// ------------------------------------ utilities ------------------------------------,6e1f
No signature found,"fun findIrParent(
        callableDeclaration: FirCallableDeclaration,
        fakeOverrideOwnerLookupTag: ConeClassLikeLookupTag?,
    ): IrDeclarationParent? {
        val firBasedSymbol = callableDeclaration.symbol
        val callableId = firBasedSymbol.callableId
        val callableOrigin = callableDeclaration.origin
        val parentLookupTag = when {
            // non-static fields can not be fake overrides
            firBasedSymbol is FirFieldSymbol && !firBasedSymbol.isStatic -> callableDeclaration.containingClassLookupTag()
            else -> fakeOverrideOwnerLookupTag ?: callableDeclaration.containingClassLookupTag()
        }","// TODO: All classes from BUILT_INS_PACKAGE_FQ_NAMES are considered built-ins now,
        // which is not exact and can lead to some problems",6e1f
No signature found,"fun FirCallableDeclaration.isFakeOverrideOrDelegated(fakeOverrideOwnerLookupTag: ConeClassLikeLookupTag?): Boolean {
    if (isCopyCreatedInScope) return true
    return isFakeOverrideImpl(fakeOverrideOwnerLookupTag)
}",,6e1f
No signature found,"fun FirCallableDeclaration.isFakeOverride(fakeOverrideOwnerLookupTag: ConeClassLikeLookupTag?): Boolean {
    if (isSubstitutionOrIntersectionOverride) return true
    return isFakeOverrideImpl(fakeOverrideOwnerLookupTag)
}",,6e1f
No signature found,"fun FirCallableDeclaration.isFakeOverrideImpl(fakeOverrideOwnerLookupTag: ConeClassLikeLookupTag?): Boolean {
    if (fakeOverrideOwnerLookupTag == null) return false
    // this condition is true for all places when we are trying to create ""fake"" fake overrides in IR
    // ""fake"" fake overrides are f/o which are presented in IR but have no corresponding FIR f/o
    return fakeOverrideOwnerLookupTag != containingClassLookupTag()
}",,6e1f
No signature found,"fun <D : IrDeclaration> IrBindableSymbol<*, D>.ownerIfBound(): D? {
    return runIf(isBound) { owner }",,6e1f
No signature found,fun Long.component1() = t,,6e1f
No signature found,fun Long.component2() = t,,6e1f
fun doTest(l : Array<Long>),": String {
    var s = """"
    for ((a, b) in l) {
      s += ""$a:$b;""
    }",,341c
fun box(),": String {
  val l = Array<Long>(3, {x -> x.toLong()}",,4f27
No signature found,"fun CompilerConfiguration.updateConfiguration() {
        put(ComposeConfiguration.LIVE_LITERALS_V2_ENABLED_KEY, true)
    }",,6e1f
fun testSiblingCallArgs(),= a,,738d
fun Test(),"{
            print(1)
            print(1)
        }",,cd90
fun testFunctionCallWithConstArg(),= a,,5f8a
fun Test(),"{
            print(1)
            print(1)
        }",,cd90
fun testDispatchReceiver(),"{
        assertKeys(
            ""Int%%this%call-toString%arg-0%call-print%fun-Test"",
            ""Int%arg-0%call-print-1%fun-Test""
        ) {
            """"""
        fun Test() {
            print(1.toString())
            print(1)
        }",,2d87
fun testInsidePropertyGetter(),= a,,874d
fun testInsidePropertyInitializer(),= a,,cea5
fun testValueParameter(),= a,,a9b5
No signature found,fun Foo(x: Int = 1,,6e1f
fun testAnnotation(),= a,,b7bd
fun Bar(),{},,a84f
fun Bam(),{},,65e7
fun testForLoop(),= a,,f0f1
fun Foo(),"{
            for (x in 0..10) {
                print(x)
            }",,14da
fun testWhileTrue(),= a,,d6ed
fun Foo(),"{
            while (true) {
                print(1)
                if (Math.random() > 0.5) break
            }",,14da
fun testWhileCondition(),= a,,b62a
fun Foo(),"{
            while (Math.random() > 0.5) {
                print(1)
            }",,14da
fun testForInCollection(),= a,,47ce
fun Foo(items: List<Int>),"{
            for (item in items) {
                print(item)
                print(1)
            }",,922c
fun testConstantProperty(),= a,,ad28
fun testSafeCall(),= a,,750d
No signature found,"fun Foo(bar: String?): Boolean {
            return bar?.contains(""foo"") == true
        }",,6e1f
fun testElvis(),= a,,b945
No signature found,"fun Foo(bar: String?): String {
            return bar ?: ""Hello World""
        }",,6e1f
fun testTryCatch(),= a,,ae20
No signature found,"fun Foo(block: (Int) -> Unit) {
            try {
                block(1)
            }",,6e1f
fun testWhen(),= a,,0c9f
fun Foo(),"{
            when {
                Math.random() > 0.5 -> print(1)
                Math.random() > 0.5 -> print(2)
                else -> print(3)
            }",,14da
fun testWhenWithSubject(),= a,,b651
fun Foo(),"{
            when (val x = Math.random()) {
                in 0.0..0.5 -> print(1)
                in 0.0..0.2 -> print(2)
                else -> print(3)
            }",,14da
fun testWhenWithSubject2(),= a,,8909
fun Foo(foo: Any),"{
            when (foo) {
                is String -> print(""Hello World"")
                is Int -> print(2)
                else -> print(3)
            }",,bada
fun testDelegatingCtor(),= a,,b8ff
fun testLocalVal(),= a,,2e61
fun Foo(),"{
            val x = 1
            var y = 2
            y += 10
        }",,14da
fun testCapturedVar(),= a,,3549
fun Example(),": String {
                val a = 123
                return ""foo ${""$""}",,3701
fun testStringTemplate(),: Unit = a,,a9ae
fun Example(),": String {
            val a = 123
            return ""foo ${""$""}",,3701
fun testEnumEntryMultipleArgs(),: Unit = a,,8500
fun testCommentsAbove(),= a,,2ec0
fun Test(),"{
                print(1)
            }",,cd90
fun Test(),"{
                // this is a comment
                print(1)
            }",,cd90
fun testValsAndStructureAbove(),= a,,e511
fun Test(),"{
                print(1)
            }",,cd90
fun Test(),"{
                val x = Math.random()
                println(x)
                print(1)
            }",,cd90
fun testAnonymousClass(),: Unit = a,,a322
fun bar(),": Int }
            fun a(): Foo {
                return object : Foo {
                    override : Int { return 1 }",,66c3
fun testBasicTransform(),"{
        assertTransform(
            """"""
            """""",
            """"""
                fun A() {
                  print(1)
                  print(""Hello World"")
                  if (true) {
                    print(7)
                  }",,26fd
fun testBasicTransformConstantFoldingK1(),"{
        // K1 does not constant fold.
        assumeFalse(useFir)
        assertTransform(
            """"""
            """""",
            """"""
                fun A() {
                    print(3 + 4)
                }",,7683
fun testBasicTransformConstantFoldingK2(),"{
        // K2 constant folds.
        assumeTrue(useFir)
        assertTransform(
            """"""
            """""",
            """"""
                fun A() {
                    print(3 + 4)
                }",,e974
fun testComposeIrSkippingWithDefaultsRelease(),= v,,ecd0
No signature found,"fun Ui.UiTextField(
                isError: Boolean = f",,6e1f
No signature found,"fun Text(
                text: String,
                softWrap: Boolean = t",,6e1f
fun verifyInitInClass(),"{
        assertTransform(
            """"""
            """""",
            """"""
                class ViewModel {
                    init {
                        1
                    }",,7c5e
No signature found,fun <T> Collection<T>.toArray(): Array<T> = t,// !DIAGNOSTICS: -UNCHECKED_CAST,6e1f
No signature found,fun Collection<String>.toArray2(): Array<String> = t,,6e1f
fun <T> toArray3(x: Collection<T>),: Array<T> = x,,d2d2
fun plus(x: Foo<T>),": Array<T> {
        return this + x
    }",,22ea
"fun use(arg: Array<String>, s: Collection<String>, x: Foo<String>)","{
    arr(<!NON_VARARG_SPREAD!>*<!>arg)
    arr(<!NON_VARARG_SPREAD!>*<!>s.toArray())
    arr(<!NON_VARARG_SPREAD!>*<!>s.toArray2())
    arr(<!NON_VARARG_SPREAD!>*<!>toArray3(s))
    arr(<!NON_VARARG_SPREAD!>*<!>x + x)
    arr(<!NON_VARARG_SPREAD!>*<!>(x + x))
}",,5d9b
fun arr(x: Array<String>),{},,55ca
fun x(),: Boolean { return true },,7869
No signature found,"fun foo(p: String?, r: String?, q: String?): Int {
    while(true) {
        q!!.length
        do {
            p!!.length
        }",,6e1f
fun foo(),"{
        foo = 5
        foo
    }","// JVM_ABI_K1_K2_DIFF: KT-63850, KT-63854",519f
fun foo(),"{
        foo
    }",,519f
fun foo(),"{
        foo = 2
        foo
    }",,519f
fun foo(),"{
        foo = 5
        foo
    }",,519f
fun box(),": String {
    A().foo()
    B().foo()
    C().foo()
    D().foo()
    return ""OK""
}",,4f27
fun scheduleRefresh(vararg files : Object),"{
    ArrayList<Object>(files.map { it }","// TARGET_BACKEND: JVM
// TARGET_BACKEND: JVM_IR
// not sure if it's ok to change Object to Any

// WITH_STDLIB",1921
fun box(),": String {
    scheduleRefresh()
    return ""OK""
}",,4f27
fun readFile(name: String),: String {...},,08f6
No signature found,"fun <T : Comparable<T>> expectMinMax(min: T, max: T, elements: Iterable<T>) {
        assertEquals(min, elements.minOrNull())
        assertEquals(max, elements.maxOrNull())
        assertEquals(min, elements.min())
        assertEquals(max, elements.max())
    }",,6e1f
fun minMax(),"{
        expectMinMax(""a"", ""a"", listOf(""a""))
        expectMinMax(""a"", ""bcd"", listOf(""a"", ""bcd""))
        expectMinMax(""a"", ""e"", listOf(""a"", ""bcd"", ""e""))
        expectMinMax(1, Int.MAX_VALUE, listOf(1, 2, Int.MAX_VALUE))
        expectMinMax(1, Long.MAX_VALUE, listOf(1, 2, Long.MAX_VALUE))
        expectMinMax(1U, UInt.MAX_VALUE, listOf(1U, 2U, UInt.MAX_VALUE))
        expectMinMax('a', Char.MAX_VALUE, listOf('a', 'b', Char.MAX_VALUE))
                    
    }",,ec61
fun minMaxEmpty(),"{
        val empty = listOf<Int>()
        assertNull(empty.minOrNull())
        assertNull(empty.maxOrNull())
        assertFailsWith<NoSuchElementException> { empty.min() }",,7128
fun minMaxDouble(),"{
        val zeroes = listOf(0.0, -0.0).shuffled()
        val NaNs = listOf(0.0, Double.NaN).shuffled()

        assertIsNegativeZero(zeroes.min().toDouble())
        assertIsNegativeZero(zeroes.minOrNull()!!.toDouble())
        assertTrue(NaNs.min().isNaN())
        assertTrue(NaNs.minOrNull()!!.isNaN())

        assertIsPositiveZero(zeroes.max().toDouble())
        assertIsPositiveZero(zeroes.maxOrNull()!!.toDouble())
        assertTrue(NaNs.max().isNaN())
        assertTrue(NaNs.maxOrNull()!!.isNaN())             

    }",,09cd
fun minMaxFloat(),"{
        val zeroes = listOf(0.0F, -0.0F).shuffled()
        val NaNs = listOf(0.0F, Float.NaN).shuffled()

        assertIsNegativeZero(zeroes.min().toDouble())
        assertIsNegativeZero(zeroes.minOrNull()!!.toDouble())
        assertTrue(NaNs.min().isNaN())
        assertTrue(NaNs.minOrNull()!!.isNaN())

        assertIsPositiveZero(zeroes.max().toDouble())
        assertIsPositiveZero(zeroes.maxOrNull()!!.toDouble())
        assertTrue(NaNs.max().isNaN())
        assertTrue(NaNs.maxOrNull()!!.isNaN())             

    }",,95a7
"fun <T> expectMinMaxWith(min: T, max: T, elements: Iterable<T>, comparator: Comparator<T>)","{
        assertEquals(min, elements.minWithOrNull(comparator))
        assertEquals(max, elements.maxWithOrNull(comparator))
        assertEquals(min, elements.minWith(comparator))
        assertEquals(max, elements.maxWith(comparator))
    }",,6083
fun minMaxWith(),"{
        expectMinMaxWith(""a"", ""a"", listOf(""a""), naturalOrder())
        expectMinMaxWith(""a"", ""bcd"", listOf(""a"", ""bcd""), naturalOrder())
        expectMinMaxWith(""a"", ""e"", listOf(""a"", ""bcd"", ""e""), naturalOrder())
        expectMinMaxWith(""a"", ""B"", listOf(""a"", ""B""), String.CASE_INSENSITIVE_ORDER)

    }",,9676
fun minMaxWithEmpty(),"{
        val empty = listOf<Int>()
        assertNull(empty.minWithOrNull(naturalOrder()))
        assertNull(empty.maxWithOrNull(naturalOrder()))
        assertFailsWith<NoSuchElementException> { empty.minWith(naturalOrder()) }",,3140
No signature found,"fun <T, K : Comparable<K>> expectMinMaxBy(min: T, max: T, elements: Iterable<T>, selector: (T) -> K) {
        assertEquals(min, elements.minBy(selector))
        assertEquals(min, elements.minByOrNull(selector))
        assertEquals(max, elements.maxBy(selector))
        assertEquals(max, elements.maxByOrNull(selector))
    }",,6e1f
fun minMaxBy(),"{
        expectMinMaxBy(""a"", ""a"", listOf(""a""), { it }",,b30d
fun minMaxByEmpty(),"{
        val empty = listOf<Int>()
        assertNull(empty.minByOrNull { it.toString() }",,5ebc
fun minBySelectorEvaluateOnce(),"{
        val source = listOf(""a"", ""bcd"", ""e"")
        var c = 0
        source.minBy { c++ }",,c827
fun maxBySelectorEvaluateOnce(),"{
        val source = listOf(""a"", ""bcd"", ""e"")
        var c = 0
        source.maxBy { c++ }",,29c8
No signature found,"fun <T, R : Comparable<R>> expectMinMaxOf(min: R, max: R, elements: Iterable<T>, selector: (T) -> R) {
        assertEquals(min, elements.minOf(selector))
        assertEquals(min, elements.minOfOrNull(selector))
        assertEquals(max, elements.maxOf(selector))
        assertEquals(max, elements.maxOfOrNull(selector))
    }",,6e1f
fun minMaxOf(),"{
        expectMinMaxOf(""_"" + ""a"", ""_"" + ""a"", listOf(""a""), { ""_$it"" }",,d677
fun minMaxOfDouble(),"{
        val middle = ""bcd""
        val items = listOf(""a"", ""bcd"", ""e"").shuffled()
        assertTrue(items.minOf { it.compareTo(middle).toDouble().pow(0.5) }",,f82a
fun minMaxOfFloat(),"{
        val middle = ""bcd""
        val items = listOf(""a"", ""bcd"", ""e"").shuffled()
        assertTrue(items.minOf { it.compareTo(middle).toFloat().pow(0.5F) }",,bba0
fun minMaxOfEmpty(),"{
        val empty = listOf<Int>()

        assertNull(empty.minOfOrNull { it.toString() }",,4f8c
No signature found,"fun <T, R> expectMinMaxOfWith(min: R, max: R, elements: Iterable<T>, comparator: Comparator<R>, selector: (T) -> R) {
        assertEquals(min, elements.minOfWith(comparator, selector))
        assertEquals(min, elements.minOfWithOrNull(comparator, selector))
        assertEquals(max, elements.maxOfWith(comparator, selector))
        assertEquals(max, elements.maxOfWithOrNull(comparator, selector))
    }",,6e1f
fun minMaxOfWith(),"{
        expectMinMaxOfWith(""_"" + ""a"", ""_"" + ""a"", listOf(""a""), reverseOrder(), { ""_$it"" }",,fb5e
fun minMaxOfWithEmpty(),"{
        val empty = listOf<Int>()
        assertNull(empty.minOfWithOrNull(naturalOrder()) { it.toString() }",,2673
fun invoke(),"{
    }","// FIR_IDENTICAL
// !LANGUAGE: +SuspendFunctionAsSupertype
// SKIP_TXT
// DIAGNOSTICS: -CONFLICTING_INHERITED_MEMBERS, -CONFLICTING_OVERLOADS, -ABSTRACT_MEMBER_NOT_IMPLEMENTED, -ABSTRACT_CLASS_MEMBER_NOT_IMPLEMENTED",0a26
fun invoke(),"{
    }",,0a26
No signature found,"fun getUseSiteMemberScope(
        klass: FirClass,
        useSiteSession: FirSession,
        scopeSession: ScopeSession,
        memberRequiredPhase: FirResolvePhase?,
    ): FirTypeScope {
        val symbol = klass.symbol as FirRegularClassSymbol
        val enhancementScope = buildJavaEnhancementScope(useSiteSession, symbol, scopeSession, memberRequiredPhase)
        if (klass.classKind == ClassKind.ANNOTATION_CLASS) {
            return buildSyntheticScopeForAnnotations(useSiteSession, symbol, scopeSession, enhancementScope)
        }",,6e1f
"fun buildSyntheticScopeForAnnotations(
        session: FirSession,
        symbol: FirRegularClassSymbol,
        scopeSession: ScopeSession,
        enhancementScope: JavaClassMembersEnhancementScope
    )",": FirTypeScope {
        return scopeSession.getOrBuild(symbol, JAVA_SYNTHETIC_FOR_ANNOTATIONS) {
            JavaAnnotationSyntheticPropertiesScope(session, symbol, enhancementScope)
        }",,1be5
No signature found,"fun buildJavaEnhancementScope(
        useSiteSession: FirSession,
        symbol: FirRegularClassSymbol,
        scopeSession: ScopeSession,
        memberRequiredPhase: FirResolvePhase?,
    ): JavaClassMembersEnhancementScope {
        return scopeSession.getOrBuild(symbol, JAVA_ENHANCEMENT) {
            val firJavaClass = symbol.fir
            require(firJavaClass is FirJavaClass) {
                ""${firJavaClass.classId}",,6e1f
"fun buildDeclaredMemberScope(useSiteSession: FirSession, regularClass: FirRegularClass)",": FirContainingNamesAwareScope {
        return if (regularClass is FirJavaClass) {
            useSiteSession.declaredMemberScopeWithLazyNestedScope(
                regularClass,
                existingNames = regularClass.existingNestedClassifierNames,
                symbolProvider = useSiteSession.symbolProvider
            )
        }",,e11f
No signature found,"fun buildUseSiteMemberScopeWithJavaTypes(
        regularClass: FirJavaClass,
        useSiteSession: FirSession,
        scopeSession: ScopeSession,
        memberRequiredPhase: FirResolvePhase?,
    ): JavaClassUseSiteMemberScope {
        return scopeSession.getOrBuild(regularClass.symbol, JAVA_USE_SITE) {
            val declaredScope = buildDeclaredMemberScope(useSiteSession, regularClass)
            val superTypes = if (regularClass.isThereLoopInSupertypes(useSiteSession))
                listOf(StandardClassIds.Any.constructClassLikeType(emptyArray(), isNullable = false))
            else
                lookupSuperTypes(
                    regularClass, lookupInterfaces = true, deep = false, useSiteSession = useSiteSession, substituteTypes = true
                )

            val superTypeScopes = superTypes.mapNotNull {
                it.scopeForSupertype(useSiteSession, scopeSession, regularClass, memberRequiredPhase = memberRequiredPhase)
            }",,6e1f
"fun getStaticMemberScopeForCallables(
        klass: FirClass,
        useSiteSession: FirSession,
        scopeSession: ScopeSession
    )",": FirContainingNamesAwareScope? {
        val scope = getStaticMemberScopeForCallables(klass, useSiteSession, scopeSession, hashSetOf()) ?: return null
        return FirNameAwareOnlyCallablesScope(FirStaticScope(scope))
    }",,1a6e
"fun getStaticMemberScopeForCallables(
        klass: FirClass,
        useSiteSession: FirSession,
        scopeSession: ScopeSession,
        visitedClasses: MutableSet<FirRegularClass>
    )",": JavaClassStaticEnhancementScope? {
        if (klass !is FirJavaClass) return null
        if (!visitedClasses.add(klass)) return null

        return scopeSession.getOrBuild(klass.symbol, JAVA_ENHANCEMENT_FOR_STATIC) {
            val declaredScope = buildDeclaredMemberScope(useSiteSession, klass)

            val superClassScope = klass.findJavaSuperClass(useSiteSession)?.let {
                (it.scopeProvider as? JavaScopeProvider)
                    ?.getStaticMemberScopeForCallables(it, useSiteSession, scopeSession, visitedClasses)
            }",,74d0
No signature found,"fun FirRegularClass.findJavaSuperClass(useSiteSession: FirSession): FirRegularClass? {
        val superClass = superConeTypes.firstNotNullOfOrNull {
            if (it.isAny) return@firstNotNullOfOrNull null
            (it.lookupTag.toSymbol(useSiteSession)?.fir as? FirRegularClass)?.takeIf { superClass ->
                superClass.classKind == ClassKind.CLASS
            }",,6e1f
No signature found,"fun FirRegularClass.findClosestJavaSuperTypes(useSiteSession: FirSession): Collection<FirRegularClass> {
        val result = mutableListOf<FirRegularClass>()
        DFS.dfs(listOf(this),
                { regularClass ->
                    regularClass.superConeTypes.mapNotNull {
                        it.lookupTag.toSymbol(useSiteSession)?.fir as? FirRegularClass
                    }",,6e1f
No signature found,"fun beforeChildren(current: FirRegularClass?): Boolean {
                        if (this@findClosestJavaSuperTypes === current) return true
                        if (current is FirJavaClass) {
                            result.add(current)
                            return false
                        }",,6e1f
fun result(),{},,5880
"fun getNestedClassifierScope(
        klass: FirClass,
        useSiteSession: FirSession,
        scopeSession: ScopeSession
    )",": FirContainingNamesAwareScope? {
        return lazyNestedClassifierScope(
            klass.classId,
            (klass as FirJavaClass).existingNestedClassifierNames,
            useSiteSession.symbolProvider
        )
    }",,7f00
No signature found,"fun KotlinType.asStringForDebugging(analysisContext: Fe10AnalysisContext): String {
    val renderer = KtFe10DebugTypeRenderer()
    return prettyPrint { with(analysisContext) { renderer.render(this@asStringForDebugging, this@prettyPrint) }",,6e1f
fun box(),": String {
    val p = Triple(""X"",""O"",""K"")

    val
            (
        _
            ,
        o
            ,
        k
    )
    =
        p

    return o + k
}","// WITH_STDLIB


// FILE: test.kt",4f27
"fun create(
            fqName: FqName,
            storageManager: StorageManager,
            module: ModuleDescriptor,
            inputStream: InputStream,
            isFallback: Boolean
        )",": BuiltInsPackageFragmentImpl {
            val (proto, version) = inputStream.readBuiltinsPackageFragment()

            if (proto == null) {
                // TODO: report a proper diagnostic
                throw UnsupportedOperationException(
                    ""Kotlin built-in definition format version is not supported: "" +
                            ""expected ${BuiltInsBinaryVersion.INSTANCE}",,ed8e
fun toString(),": String = """,,a535
fun setupAttributesMatchingStrategy(attributesSchema: AttributesSchema),"{
        attributesSchema.attribute(attribute)
    }",,1c3f
fun setupTransform(project: Project),"{
        project.dependencies.artifactTypes.maybeCreate(""tar.gz"").also { artifactType ->
            artifactType.attributes.setAttribute(attribute, KotlinNativeBundleArtifactsTypes.ARCHIVE)
        }","/**
     * Sets up the necessary transformations for handling artifact types ""tar.gz"" and ""zip"" in the given project.
     *
     * @param project The project in which to set up the transformations.
     */",d3ba
fun addKotlinNativeBundleConfiguration(project: Project),"{
        project.configurations
            .maybeCreateResolvable(KOTLIN_NATIVE_BUNDLE_CONFIGURATION_NAME) {
                defaultDependencies {
                    it.add(project.dependencies.create(NativeCompilerDownloader.getCompilerDependencyNotation(project)))
                }",,a44f
fun platformSpecificFunction(descriptor: FunctionDescriptor),"{
            keepTrackOfOverridesForPossiblyClashingFakeOverride(descriptor)
            computeStoredFileSignature(descriptor)
        }",,fb6b
fun platformSpecificClass(descriptor: ClassDescriptor),"{
            computeStoredFileSignature(descriptor)
        }",,0556
fun platformSpecificProperty(descriptor: PropertyDescriptor),"{
            // See KT-31646
            setSpecialJavaProperty(descriptor is JavaForKotlinOverridePropertyDescriptor)
            setSyntheticJavaProperty(descriptor is SyntheticJavaPropertyDescriptor)
            keepTrackOfOverridesForPossiblyClashingFakeOverride(descriptor)
            computeStoredFileSignature(descriptor)
        }",,98b0
fun platformSpecificGetter(descriptor: PropertyGetterDescriptor),"{
            keepTrackOfOverridesForPossiblyClashingFakeOverride(descriptor)
            computeStoredFileSignature(descriptor)
        }",,7c78
fun platformSpecificSetter(descriptor: PropertySetterDescriptor),"{
            keepTrackOfOverridesForPossiblyClashingFakeOverride(descriptor)
            computeStoredFileSignature(descriptor)
        }",,eb54
fun platformSpecificAlias(descriptor: TypeAliasDescriptor),"{
            computeStoredFileSignature(descriptor)
        }",,7c3d
fun platformSpecificModule(descriptor: ModuleDescriptor),"{

        }",,ef60
fun keepTrackOfOverridesForPossiblyClashingFakeOverride(descriptor: CallableMemberDescriptor),"{
            if (descriptor.kind != CallableMemberDescriptor.Kind.FAKE_OVERRIDE) return
            val containingClass = descriptor.containingDeclaration as? ClassDescriptor ?: return

            val possiblyClashingMembers = when (descriptor) {
                is PropertyAccessorDescriptor ->
                    containingClass.unsubstitutedMemberScope
                        .getContributedVariables(descriptor.correspondingProperty.name, NoLookupLocation.FROM_BACKEND)
                is PropertyDescriptor ->
                    containingClass.unsubstitutedMemberScope
                        .getContributedVariables(descriptor.name, NoLookupLocation.FROM_BACKEND)
                is FunctionDescriptor ->
                    containingClass.unsubstitutedMemberScope
                        .getContributedFunctions(descriptor.name, NoLookupLocation.FROM_BACKEND)
                else ->
                    throw AssertionError(""Unexpected CallableMemberDescriptor: $descriptor"")
            }",,bb5a
fun isCapturingTypeParameter(member: CallableMemberDescriptor),": Boolean =
            m",,1a33
No signature found,"fun ParameterDescriptor.isCapturingTypeParameter(): Boolean =
            t",,6e1f
fun computeStoredFileSignature(descriptor: DeclarationDescriptorWithSource),"{
            // isTopLevelPrivate needs to be already set.
            if (isTopLevelPrivate && externallyGivenFileSignature == null) {
                storedFileSignature = IdSignature.FileSignature(
                    descriptor.source.containingFile,
                    descriptor.containingPackage() ?: FqName.ROOT,
                    descriptor.source.containingFile.name ?: ""unknown""
                )
            }",,487b
fun createSignatureBuilder(type: SpecialDeclarationType),": DescriptorBasedSignatureBuilder =
        J",,21f1
No signature found,"fun withFileSignature(fileSignature: IdSignature.FileSignature, body: () -> Unit) {
        externallyGivenFileSignature = fileSignature
        body()
        externallyGivenFileSignature = null
    }",,6e1f
No signature found,fun <!EXPOSED_FUNCTION_RETURN_TYPE!>foo<!>() = {,// FIR_IDENTICAL,6e1f
fun box(u: Int),"{
    val x: A? = A()
    val y: A?
    if (u == 0) {
        y = x
    }",,b168
"fun apply(testRun: TestRun, runResult: RunResult)",": Result

    sealed interface Result {
        data object Passed : Result
        data class Failed(val reason: String) : Result
    }",,8b14
"fun apply(testRun: TestRun, runResult: RunResult)",": Result =
                i",,8b14
"fun apply(testRun: TestRun, runResult: RunResult)",": Result =
                i",,8b14
"fun apply(testRun: TestRun, runResult: RunResult)",": Result {
            // Don't check the exit code if it is unknown.
            val knownExitCode: Int = runResult.exitCode ?: return Result.Passed

            return when (this) {
                AnyNonZero -> {
                    if (knownExitCode == 0)
                        Result.Failed(""Test exited with zero code, which wasn't expected."")
                    else Result.Passed
                }",,8b14
No signature found,fun RunResult.processOutputAsString(output: Output) = w,,6e1f
"fun apply(testRun: TestRun, runResult: RunResult)",": Result {
            val expectedOutput = file.readText()
            val actualFilteredOutput = runResult.processOutputAsString(output)

            return if (StringUtilRt.convertLineSeparators(expectedOutput) != StringUtilRt.convertLineSeparators(actualFilteredOutput))
                Result.Failed(""Tested process output mismatch. See \""TEST STDOUT\"" and \""EXPECTED OUTPUT DATA FILE\"" below."")
            else Result.Passed
        }",,8b14
"fun apply(testRun: TestRun, runResult: RunResult)",": Result =
            t",,8b14
"fun apply(testRun: TestRun, runResult: RunResult)",": Result {
            if (testOutputFilter != TestOutputFilter.NO_FILTERING) {
                val testReport = runResult.processOutput.stdOut.testReport

                checkNotNull(testReport) { ""TestRun has TestFiltering enabled, but test report is null"" }",,8b14
"fun verifyNoSuchTests(tests: Collection<TestName>, subject: String)",": Result {
            return if (tests.isNotEmpty()) {
                Result.Failed(
                    buildString {
                        append(subject).append(':')
                        tests.forEach { appendLine().append("" - "").append(it) }",,e429
No signature found,"fun TestReport.checkDisabled() {
            Assumptions.assumeFalse(
                ignoredTests.isNotEmpty() && passedTests.isEmpty(),
                ""Test case is disabled""
            )
        }",,6e1f
"fun apply(testRun: TestRun, runResult: RunResult)",": Result {
            val fileCheckDump = runResult.testExecutable.executable.fileCheckDump!!
            val result = doFileCheck(fileCheckDump)

            return if (!(result.stdout.isEmpty() && result.stderr.isEmpty())) {
                val shortOutText = result.stdout.lines().take(100)
                val shortErrText = result.stderr.lines().take(100)

                Result.Failed(
                    """"""
                    FileCheck matching of ${fileCheckDump.absolutePath}",,8b14
fun doFileCheck(fileCheckDump: File),": RunProcessResult {
            val fileCheckExecutable = settings.configurables.absoluteLlvmHome + File.separator + ""bin"" + File.separator +
                    if (SystemInfo.isWindows) ""FileCheck.exe"" else ""FileCheck""
            require(File(fileCheckExecutable).exists()) {
                ""$fileCheckExecutable does not exist. Make sure Distribution for `settings.configurables` "" +
                        ""was created using `propertyOverrides` to specify development variant of LLVM instead of user variant.""
            }",,f9d7
fun iterator(),= i,,c20a
fun Default(timeout: Duration),= T,,6434
fun foo(x: Any),"fun test(x: Foo<*, T>)
}

 {
    if (x is Bar<*>) {
        x::test
    }",,d233
fun box(),": String = """,,4f27
No signature found,"fun string(init: StringBuilder.() -> Unit): String{
    val answer = StringBuilder()
    answer.init()
    return answer.toString()
}","// FIR_IDENTICAL
// !DIAGNOSTICS: -UNUSED_VARIABLE
//KT-4586 this@ does not work for builders",6e1f
fun box(),": String {
    val property = ::pr
    if (property.get() != Box(""first"")) return ""Fail value: ${property.get()}",,4f27
fun capacityOverflow(),"{
        val builderSize = 15
        val giantMapSize = Int.MAX_VALUE - builderSize + 1

        val giantMap = object : AbstractMap<Int, String>() {
            override val entries: Set<Map.Entry<Int, String>> = object : AbstractSet<Map.Entry<Int, String>>() {
                override val size: Int get() = giantMapSize
                override fun iterator(): Iterator<Map.Entry<Int, String>> {
                    return indexSequence().map {
                        object : Map.Entry<Int, String> {
                            override val key: Int get() = it
                            override val value: String get() = ""value""
                        }",,3092
fun reclaimStorage(),"{
        val builder = MapBuilder<Int, Int>()
        val initialCapacity = builder.capacity
        repeat(20) {
            builder[it] = it
            builder.remove(it)
        }",,7dce
fun box(),": String {
    val result = ""OK""

    fun foo() = result

    return (::foo).let { it() }",,4f27
No signature found,"fun ideaKotlinClasspathProto(block: org.jetbrains.kotlin.gradle.idea.proto.generated.tcs.IdeaKotlinClasspathProtoKt.Dsl.() -> kotlin.Unit): org.jetbrains.kotlin.gradle.idea.proto.generated.tcs.IdeaKotlinClasspathProto =
  o","//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: proto_tcs.proto",6e1f
No signature found,fun _create(builder: org.jetbrains.kotlin.gradle.idea.proto.generated.tcs.IdeaKotlinClasspathProto.Builder): Dsl = D,,6e1f
fun _build(),: org.jetbrains.kotlin.gradle.idea.proto.generated.tcs.IdeaKotlinClasspathProto = _,,8dd3
No signature found,"fun com.google.protobuf.kotlin.DslList<kotlin.String, FilesProxy>.add(value: kotlin.String) {
      _builder.addFiles(value)
    }",,6e1f
No signature found,"fun com.google.protobuf.kotlin.DslList<kotlin.String, FilesProxy>.plusAssign(value: kotlin.String) {
      add(value)
    }","/**
     * <code>repeated string files = 1;</code>
     * @param value The files to add.
     */",6e1f
No signature found,"fun com.google.protobuf.kotlin.DslList<kotlin.String, FilesProxy>.addAll(values: kotlin.collections.Iterable<kotlin.String>) {
      _builder.addAllFiles(values)
    }","/**
     * <code>repeated string files = 1;</code>
     * @param values The files to add.
     */",6e1f
No signature found,"fun com.google.protobuf.kotlin.DslList<kotlin.String, FilesProxy>.plusAssign(values: kotlin.collections.Iterable<kotlin.String>) {
      addAll(values)
    }","/**
     * <code>repeated string files = 1;</code>
     * @param values The files to add.
     */",6e1f
No signature found,"fun com.google.protobuf.kotlin.DslList<kotlin.String, FilesProxy>.set(index: kotlin.Int, value: kotlin.String) {
      _builder.setFiles(index, value)
    }","/**
     * <code>repeated string files = 1;</code>
     * @param index The index to set the value at.
     * @param value The files to set.
     */",6e1f
No signature found,"fun com.google.protobuf.kotlin.DslList<kotlin.String, FilesProxy>.clear() {
      _builder.clearFiles()
    }","/**
     * <code>repeated string files = 1;</code>
     */",6e1f
No signature found,"fun org.jetbrains.kotlin.gradle.idea.proto.generated.tcs.IdeaKotlinClasspathProto.copy(block: org.jetbrains.kotlin.gradle.idea.proto.generated.tcs.IdeaKotlinClasspathProtoKt.Dsl.() -> kotlin.Unit): org.jetbrains.kotlin.gradle.idea.proto.generated.tcs.IdeaKotlinClasspathProto =
  o",,6e1f
No signature found,"fun Regex.allGroups(text: String) =
            f",,6e1f
fun testLookBehind(),"{
        var regex: Regex
        var result: List<String>

        regex = ""(?<=^/nl(?:/nl)?/\\d{1,600}",,44c4
fun testLookAheadBehind(),"{
        var regex: Regex
        var result: List<String>

        regex = ""a(?=b?)(\\w|)c"".toRegex()
        result = regex.allGroups(""abcfgac"")
        assertEquals(2, result.count())
        assertEquals(""0 => abc; 1 => b"", result[0])
        assertEquals(""0 => ac; 1 => "", result[1])

        regex = ""[a!](?=d|&)\\b[&d]"".toRegex()
        result = regex.allGroups(""ada& !d!&"")
        assertEquals(2, result.count())
        assertEquals(""0 => a&"", result[0])
        assertEquals(""0 => !d"", result[1])

        regex = ""(?=ab)(a|^)b"".toRegex()
        result = regex.allGroups(""abcab"")
        assertEquals(2, result.count())
        assertEquals(""0 => ab; 1 => a"", result[0])
        assertEquals(""0 => ab; 1 => a"", result[1])

        regex = ""(?=[a-k][a-z])(?=[a-d][c-x])[d-y][x-z]"".toRegex()
        result = regex.allGroups(""abdydx"")
        assertEquals(1, result.count())
        assertEquals(""0 => dx"", result[0])
    }",,c306
fun main(),"{
    val derivedList: List<Base> = <!UNRESOLVED_REFERENCE!>listOf<!>(Derived(), Derived(), Derived())

    for (derived: <!TYPE_MISMATCH_IN_FOR_LOOP!>Derived<!> in derivedList) {
    }",,d987
No signature found,"fun testJumpOutInElvis(x: Int?) {
    loop@ while (true) {
        val y = when (val z = x ?: break@loop) {
            0 -> ""0""
            else -> ""not 0""
        }","// !LANGUAGE: +VariableDeclarationInWhenSubject
// !DIAGNOSTICS: -UNUSED_VARIABLE",6e1f
No signature found,"fun testJumpOutInElvisLikeIf(x: Int?) {
    loop@ while (true) {
        val y = when (val z = if (x == null) break@loop else x) {
            0 -> ""0""
            else -> ""not 0""
        }",,6e1f
fun getBoolean(),= t,,e4ee
No signature found,"fun testJumpOutInIf(x: Int?) {
    loop@ while (true) {
        val y = when (val z = if (getBoolean()) { x!!; break@loop }",,6e1f
fun foo(),"{
    try {
        return
    }",,519f
fun box(),": String {
    foo()
    return result
}",,4f27
No signature found,"fun KtOperationExpression.reportDeprecatedDefinitelyNotNullSyntax(
    rhs: KtTypeReference?,
    context: ExpressionTypingContext
) {
    val nextLeaf = nextLeaf()
    if (nextLeaf is LeafPsiElement && nextLeaf.elementType === KtTokens.EXCLEXCL && rhs?.typeElement is KtUserType) {
        val parent = PsiTreeUtil.findCommonParent(nextLeaf, this)
        if (parent is KtPostfixExpression && parent.operationToken === KtTokens.EXCLEXCL) {
            context.trace.report(Errors.DEPRECATED_SYNTAX_WITH_DEFINITELY_NOT_NULL.on((parent as KtPostfixExpression?)!!))
        }",,6e1f
fun box(),": String {
    if (true) X::<!INVISIBLE_REFERENCE!>y<!> else null
    return ""OK""
}",,4f27
No signature found,"fun launch(block: suspend (Long) -> String): String {
    var result = """"
    block.startCoroutine(0L, Continuation(EmptyCoroutineContext) { result = it.getOrThrow() }",// WITH_STDLIB,6e1f
fun g(),{},,4958
fun f(i: Long),": String {
        var x = 0
        listOf<Int>().map { x }",,de3e
fun box(),: String = l,,4f27
fun outer(),"{
    typealias Test1 = <!UNRESOLVED_REFERENCE!>Test1<!>
    typealias Test2 = List<<!UNRESOLVED_REFERENCE!>Test2<!>>
    typealias Test3<T> = List<<!UNRESOLVED_REFERENCE!>Test3<!><T>>
}",// !DIAGNOSTICS: -UNUSED_VARIABLE -UNUSED_PARAMETER -TOPLEVEL_TYPEALIASES_ONLY,59f5
fun run(),"}

// Function is NOT suspend
// parameter is noinline
// parameter is suspend
// Block is NOT allowed to be called inside the body of owner inline function
// Block is allowed to be called from nested classes/lambdas (as common crossinlines)
// It is possible to call startCoroutine on the parameter
// suspend calls possible inside lambda matching to the parameter

inline fun test(noinline c: suspend () -> Unit)  {
    <!ILLEGAL_SUSPEND_FUNCTION_CALL!>c<!>()
    val o = object : SuspendRunnable {
        override suspend  {
            c()
        }","// FIR_IDENTICAL
// !DIAGNOSTICS: -UNUSED_VARIABLE -UNUSED_PARAMETER -NOTHING_TO_INLINE
// SKIP_TXT
// WITH_COROUTINES",354f
fun calculate(),"= """,,b1fe
fun box(),"{
    test {
        calculate()
    }",,4f27
fun testIn(x: ULong),"=
    x",// WITH_STDLIB,a735
fun box(),": String =
    i",,4f27
fun box(),": String {
  val o = Outer()
  return if (o.x.name != ""xyzzy"") ""fail"" else ""OK""
}",,4f27
fun box(),": String {
    assertTrue(EmptyClass.isPermanent())

    return ""OK""
}",,4f27
No signature found,"fun A<Int>.f() {
    this<!AMBIGUOUS_LABEL!>@A<!>.<!DEBUG_INFO_MISSING_UNRESOLVED!>a<!>.<!DEBUG_INFO_MISSING_UNRESOLVED!>length<!>
}",// !LANGUAGE: +ContextReceivers,6e1f
fun f(),"{
    this@A.a.length
    this@B.b
    <!NO_THIS!>this<!>
}",,f6fb
fun f(),"{
    this<!AMBIGUOUS_LABEL!>@A<!>.<!DEBUG_INFO_MISSING_UNRESOLVED!>a<!>.<!DEBUG_INFO_MISSING_UNRESOLVED!>length<!>
    this@B.b
    <!NO_THIS!>this<!>
}",,f6fb
No signature found,"fun C.f() {
    this<!AMBIGUOUS_LABEL!>@A<!>.<!DEBUG_INFO_MISSING_UNRESOLVED!>a<!>.<!DEBUG_INFO_MISSING_UNRESOLVED!>length<!>
    this@B.b
    this@C.c
    this@f.c
    this.c
}",,6e1f
fun foo(),{},"// TARGET_BACKEND: JVM

// WITH_STDLIB",519f
fun box(),": String {
    try {
        foo() as Int?
    }",,4f27
No signature found,"fun <T> inlineFun(arg: T, crossinline f: (T) -> Unit) {
    {
        f(arg)
    }",// FILE: 1.kt,6e1f
fun box(),": String {
    val param = ""start""
    var result = ""fail""

    inlineFun(""2"") { a ->
        {
            result = param + a
        }",,4f27
fun foo(),"<!EXPECTED_PRIVATE_DECLARATION, EXPECTED_PRIVATE_DECLARATION{JVM}","// MODULE: m1-common
// FILE: common.kt",519f
No signature found,"fun Int.memExt(): Any

<!EXPECTED_PRIVATE_DECLARATION, EXPECTED_PRIVATE_DECLARATION{JVM}",,6e1f
fun foo(),{},,519f
No signature found,fun Int.memExt(): Any = 0,,6e1f
fun f(arg: Int),= a,// LANGUAGE: +ContractSyntaxV2,f887
fun g(arg: Double),= a,,4463
fun box(),": String {
    if (!Modifier.isPublic(IC1::class.java.declaredMethods.single { it.name == ""constructor-impl"" }","// TARGET_BACKEND: JVM
// WITH_STDLIB
// FULL_JDK
// LANGUAGE: +ValueClasses, +GenericInlineClassParameter",4f27
fun test(),"{
    val buildee = build {
        class ConcreteType
        class TargetType {
            fun consumeConcreteType(value: ConcreteType) {}",// ISSUE: KT-60447,fe98
fun targetTypeMemberFunction(),{},,c519
No signature found,fun setTypeVariableConsumerFunction(consumer: (TV) -> Unit) { typeVariableConsumer = consumer },,6e1f
No signature found,fun setTypeVariableProducerFunction(producer: () -> TV) { typeVariableProducer = producer },,6e1f
No signature found,"fun <PTV> build(instructions: Buildee<PTV>.() -> Unit): Buildee<PTV> {
    return Buildee<PTV>().apply(instructions)
}",,6e1f
No signature found,fun <T> run(c: () -> T): T = c,"// NO_CHECK_LAMBDA_INLINING
// FILE: 1.kt",6e1f
fun run(),": String
}

interface RunnableString {
    fun run(s: String): String
}",,354f
fun fooInt(),": String {
    val r = ""O""
    val a = run {
        fun f(x: Int, y: String? = null): String = r + x + y
        f(1, ""K"")
    }",,7747
fun fooLong(),": String {
    val r = ""O""
    val a = run {
        fun f(x: Long, y: String? = null): String = r + x + y
        f(2, ""K"")
    }",,8929
fun fooLongInsideObject(),": String {
    val r = ""O""
    val a = object: Runnable {
        override fun run(): String {
            fun f(x: Long, y: String? = null): String = r + x + y
            return f(3, ""K"")
        }",,aa9f
fun fooLongCallableReference(),": String {
    val r = ""O""
    val a = run {
        fun f(x: Long, y: String? = null): String = r + x + y
        (::f).let { it(4, ""K"") }",,e337
fun fooLongSyntheticAccessor(capt: Int),": String {
        val o: RunnableString = run {
            object: RunnableString {
                override fun run(captured: String): String {
                    return {
                        callPrivate(capt, captured)
                    }",,aa10
No signature found,"fun callPrivate(x: Int, y: String?): String = """,,6e1f
fun box(),": String {
    var res = fooInt()
    if (res != ""O1K"") return res
    res = fooLong()
    if (res != ""O2K"") return res
    res = fooLongInsideObject()
    if (res != ""O3K"") return res
    res = fooLongCallableReference()
    if (res != ""O4K"") return res
    res = A().fooLongSyntheticAccessor(5)
    if (res != ""O5K"") return res
    return ""OK""
}",,4f27
fun leafTargets(),"{
        KonanTarget.predefinedTargets.values.forEach { konanTarget ->
            assertEquals(konanTarget.name, CommonizerTarget(konanTarget).identityString)
            assertEquals(CommonizerTarget(konanTarget), parseCommonizerTarget(CommonizerTarget(konanTarget).identityString))
        }",,42ae
No signature found,"fun `simple shared targets are invariant under konanTarget order`() {
        val macosFirst = CommonizerTarget(MACOS_X64, LINUX_X64)
        val linuxFirst = CommonizerTarget(LINUX_X64, MACOS_X64)

        assertEquals(macosFirst, linuxFirst)
        assertEquals(macosFirst.identityString, linuxFirst.identityString)
        assertEquals(linuxFirst, parseCommonizerTarget(linuxFirst.identityString))
        assertEquals(macosFirst, parseCommonizerTarget(macosFirst.identityString))
        assertEquals(macosFirst, parseCommonizerTarget(linuxFirst.identityString))
        assertEquals(linuxFirst, parseCommonizerTarget(macosFirst.identityString))
    }",,6e1f
No signature found,"fun `parsing CommonizerTarget with 1 5 20 notation`() {
        val target = parseCommonizerTarget(""(x, (x, y, (a, b), (b, c)))"")
        assertEquals(SharedCommonizerTarget(setOf(""x"", ""y"", ""a"", ""b"", ""c"").map(::LeafCommonizerTarget).toSet()), target)
    }",,6e1f
No signature found,"fun `empty shared target`() {
        assertEquals(SharedCommonizerTarget(emptySet<LeafCommonizerTarget>()), parseCommonizerTarget(""()""))
    }",,6e1f
No signature found,"fun `fail parsing CommonizerTarget 1`() {
        parseCommonizerTarget(""xxx,"")
    }",,6e1f
No signature found,"fun `fail parsing CommonizerTarget 2`() {
        parseCommonizerTarget("""")
    }",,6e1f
No signature found,"fun `fail parsing CommonizerTarget 4`() {
        parseCommonizerTarget(""(xxx"")
    }",,6e1f
No signature found,"fun `fail parsing CommonizerTarget 5`() {
        parseCommonizerTarget(""xxx)"")
    }",,6e1f
No signature found,"fun `fail parsing CommonizerTarget 6`() {
        parseCommonizerTarget(""(xxx"")
    }",,6e1f
No signature found,"fun `fail parsing CommonizerTarget 7`() {
        parseCommonizerTarget(""(xxx yyy)"")
    }",,6e1f
No signature found,"fun `fail parsing CommonizerTarget 8`() {
        parseCommonizerTarget("" "")
    }",,6e1f
No signature found,"fun `fail parsing CommonizerTarget 9`() {
        parseCommonizerTarget(""xxx?"")
    }",,6e1f
No signature found,"fun `fail parsing CommonizerTarget 10`() {
        parseCommonizerTarget(""(x, (x, y)"")
    }",,6e1f
fun isCommonizerIdentityString(),"{
        assertFalse(isCommonizerTargetIdentityString(""""))
        assertTrue(isCommonizerTargetIdentityString(""()""))
        assertTrue(isCommonizerTargetIdentityString(""(a,b)""))
        assertFalse(isCommonizerTargetIdentityString(""...""))
        assertTrue(isCommonizerTargetIdentityString(""x""))
        assertFalse(isCommonizerTargetIdentityString(""((a)""))
    }",,6589
fun parseCommonizerTargetOrNull(),"{
        assertEquals(parseCommonizerTarget(""((a,b),c)""), parseCommonizerTargetOrNull(""((a,b),c)""))
        assertNull(parseCommonizerTargetOrNull(""""))
    }",,31f7
fun foo(t: T),{},"// FIR_IDENTICAL
// !DIAGNOSTICS: -UNUSED_PARAMETER",6c6b
fun foo(o: Any),{},,9865
No signature found,"fun configure(
        target: KotlinAndroidTarget,
        kotlinSourceSet: KotlinSourceSet,
        @Suppress(""TYPEALIAS_EXPANSION_DEPRECATION"") androidSourceSet: DeprecatedAndroidSourceSet
    ) = U",,6e1f
No signature found,"fun configureWithVariant(
        target: KotlinAndroidTarget,
        kotlinSourceSet: KotlinSourceSet,
        @Suppress(""TYPEALIAS_EXPANSION_DEPRECATION"") variant: DeprecatedAndroidBaseVariant
    ) = U",,6e1f
No signature found,"fun KotlinAndroidSourceSetConfigurator.onlyIf(
    condition: (target: KotlinAndroidTarget) -> Boolean
): KotlinAndroidSourceSetConfigurator {
    return KotlinAndroidSourceSetConfigurationWithCondition(this, condition)
}",,6e1f
No signature found,"fun configure(
        target: KotlinAndroidTarget,
        kotlinSourceSet: KotlinSourceSet,
        @Suppress(""TYPEALIAS_EXPANSION_DEPRECATION"") androidSourceSet: DeprecatedAndroidSourceSet
    ) {
        if (condition(target)) underlying.configure(target, kotlinSourceSet, androidSourceSet)
    }",,6e1f
No signature found,"fun configureWithVariant(
        target: KotlinAndroidTarget,
        kotlinSourceSet: KotlinSourceSet,
        @Suppress(""TYPEALIAS_EXPANSION_DEPRECATION"") variant: DeprecatedAndroidBaseVariant
    ) {
        if (condition(target)) underlying.configureWithVariant(target, kotlinSourceSet, variant)
    }",,6e1f
No signature found,"fun KotlinAndroidSourceSetConfigurator(
    vararg configurators: KotlinAndroidSourceSetConfigurator?
): KotlinAndroidSourceSetConfigurator {
    return CompositeKotlinAndroidSourceSetConfigurator(configurators.filterNotNull())
}",,6e1f
No signature found,"fun configure(
        target: KotlinAndroidTarget,
        kotlinSourceSet: KotlinSourceSet,
        @Suppress(""TYPEALIAS_EXPANSION_DEPRECATION"") androidSourceSet: DeprecatedAndroidSourceSet
    ) {
        configurators.forEach { configurator ->
            configurator.configure(target, kotlinSourceSet, androidSourceSet)
        }",,6e1f
No signature found,"fun configureWithVariant(
        target: KotlinAndroidTarget,
        kotlinSourceSet: KotlinSourceSet,
        @Suppress(""TYPEALIAS_EXPANSION_DEPRECATION"") variant: DeprecatedAndroidBaseVariant
    ) {
        configurators.forEach { configurator ->
            configurator.configureWithVariant(target, kotlinSourceSet, variant)
        }",,6e1f
No signature found,fun <S : Bound1> select(vararg args: S): S = T,// !DIAGNOSTICS: -UNUSED_PARAMETER -UNUSED_VARIABLE -UNUSED_EXPRESSION,6e1f
fun test(),"{
    val v = Cls().property
    v
}",,fe98
No signature found,"fun inlineFun(vararg constraints: String, init: String.() -> String): String {
    return ""O"".init()
}",// FILE: 1.kt,6e1f
fun box(),": String {
    return inlineFun {
        this + ""K""
    }",// FILE: 2.kt,4f27
fun box(),"=
    i","// TARGET_BACKEND: JVM
// MODULE: lib
// FILE: R.java",4f27
fun box(),": String {
    while (true) {
        try {
            continue;
        }",,4f27
No signature found,fun <T> useT(fn: () -> T) = f,"// TARGET_BACKEND: JVM
// FILE: stringVsT.kt",6e1f
No signature found,"fun checkNull(x: Any?) {
    if (x != null) throw AssertionError(""null expected"")
}",,6e1f
fun box(),": String {
    checkNull(useT { J.string() }",,4f27
fun foo(),"{
    JavaEnum.A.get<caret>Name()
}",// FILE: JavaEnum.java,519f
fun getBuilder(),": ConstraintSystemBuilder

    // after this method we shouldn't mutate system via ConstraintSystemBuilder
    fun asReadOnlyStorage(): ConstraintStorage

    fun asConstraintSystemCompleterContext(): ConstraintSystemCompletionContext
    fun asPostponedArgumentsAnalyzerContext(): PostponedArgumentsAnalyzerContext
    fun resolveForkPointsConstraints()

    fun getEmptyIntersectionTypeKind(types: Collection<KotlinTypeMarker>): EmptyIntersectionTypeInfo?
}

/**
 * In some cases we're not only adding constraints linearly to the system, but sometimes we need to consider several variants of constraints
 *
 * For example, from smartcast we've got a value of a type A<Int, String> & A<E, F> that we'd like to pass as an argument to the parameter
 * of type A<Xv, Yv> (where Xv and Yv are the type variables of the current call)
 *
 * So, we've got a subtyping constraint
 * A<Int, String> & A<E, F> <: A<Xv, Yv>
 *
 * And we might go with the first intersection component, having the following variables constraint set: {Xv=Int,Yv=String}",,0936
fun box(),": String {
    val m = Map2()
    if (m.entries.size != 0) return ""fail 1""

    m.put(""56"", ""OK"")
    val x = m.entries.iterator().next()

    if (x.key != ""56"" || x.value != ""OK"") return ""fail 2""

    return ""OK""
}","// IGNORE_BACKEND: WASM
// WASM_MUTE_REASON: STDLIB_COLLECTION_INHERITANCE
// KJS_WITH_FULL_RUNTIME
// DONT_TARGET_EXACT_BACKEND: NATIVE",4f27
fun fn0(),{},"// DONT_TARGET_EXACT_BACKEND: JS
// DONT_TARGET_EXACT_BACKEND: JS_IR
// DONT_TARGET_EXACT_BACKEND: JS_IR_ES6
// WITH_REFLECT",6732
fun fn1(x: Any),{},,ec5c
No signature found,fun Any.extFun() {},,6e1f
fun foo(),{},,519f
fun box(),": String {
    val f0 = ::fn0 as Any
    val f1 = ::fn1 as Any

    val ef = Any::extFun as Any

    val afoo = A::foo

    fun local0() {}",,4f27
fun local1(x: Any),{},,780e
fun emit(iv: InstructionAdapter),"{
        iv.invokestatic(PSEUDO_INSN_CALL_OWNER, toString(), signature, false)
    }",,3400
fun createInsnNode(),": MethodInsnNode =
            M",,68de
fun isa(node: AbstractInsnNode),": Boolean =
            t",,2f4e
fun isPseudoInsn(insn: AbstractInsnNode),": Boolean =
        i",,8bcb
fun parsePseudoInsnOrNull(insn: AbstractInsnNode),": PseudoInsn? =
        i",,6207
No signature found,"fun InstructionAdapter.fixStackAndJump(label: Label) {
    PseudoInsn.FIX_STACK_BEFORE_JUMP.emit(this)
    this.goTo(label)
}",,6e1f
No signature found,"fun InstructionAdapter.fakeAlwaysTrueIfeq(label: Label) {
    PseudoInsn.FAKE_ALWAYS_TRUE_IFEQ.emit(this)
    this.ifeq(label)
}",,6e1f
No signature found,"fun InstructionAdapter.fakeAlwaysFalseIfeq(label: Label) {
    PseudoInsn.FAKE_ALWAYS_FALSE_IFEQ.emit(this)
    this.ifeq(label)
}",,6e1f
No signature found,"fun InstructionAdapter.storeNotNull() {
    PseudoInsn.STORE_NOT_NULL.emit(this)
}",,6e1f
No signature found,"fun InstructionAdapter.asNotNull() {
    PseudoInsn.AS_NOT_NULL.emit(this)
}",,6e1f
No signature found,"fun AbstractInsnNode.isPseudo(pseudoInsn: PseudoInsn) =
        p",,6e1f
fun sin(x: Double),: Double = n,,28c7
fun cos(x: Double),: Double = n,,c2b7
fun tan(x: Double),: Double = n,,de1d
fun asin(x: Double),: Double = n,,f191
fun acos(x: Double),: Double = n,,cde5
fun atan(x: Double),: Double = n,,2d9f
"fun atan2(y: Double, x: Double)",: Double = n,,4f81
fun sinh(x: Double),: Double = n,,2553
fun cosh(x: Double),: Double = n,,fae1
fun tanh(x: Double),: Double = n,,df95
fun asinh(x: Double),": Double =
    w",,ea30
fun acosh(x: Double),": Double =
    w",,e692
fun atanh(x: Double),": Double {
    if (nativeMath.abs(x) < taylor_n_bound) {
        var result = x
        if (nativeMath.abs(x) > taylor_2_bound) {
            result += (x * x * x) / 3
        }",,586a
"fun hypot(x: Double, y: Double)",: Double = n,,fcca
fun sqrt(x: Double),: Double = n,,3df3
fun exp(x: Double),: Double = n,,8441
fun expm1(x: Double),: Double = n,,8242
"fun log(x: Double, base: Double)",": Double {
    if (base <= 0.0 || base == 1.0) return Double.NaN
    return nativeMath.log(x) / nativeMath.log(base)
}",,b05e
fun ln(x: Double),: Double = n,"/**
 * Computes the natural logarithm (base `E`) of the value [x].
 *
 * Special cases:
 *   - `ln(NaN)` is `NaN`
 *   - `ln(x)` is `NaN` when `x < 0.0`
 *   - `ln(+Inf)` is `+Inf`
 *   - `ln(0.0)` is `-Inf`
 */",70e5
fun log10(x: Double),: Double = n,,e01d
fun log2(x: Double),: Double = n,,9e2c
fun ln1p(x: Double),: Double = n,,0bd5
fun ceil(x: Double),: Double = n,,1d8e
fun floor(x: Double),: Double = n,,2203
fun truncate(x: Double),: Double = w,,fc72
fun round(x: Double),: Double = n,,539d
fun abs(x: Double),: Double = n,,14e0
fun sign(x: Double),: Double = n,,5a47
"fun min(a: Double, b: Double)",: Double = n,,3057
"fun max(a: Double, b: Double)",: Double = n,,43bd
fun cbrt(x: Double),: Double = n,,bd23
No signature found,fun Double.pow(x: Double): Double = n,,6e1f
No signature found,fun Double.pow(n: Int): Double = n,,6e1f
No signature found,fun Double.IEEErem(divisor: Double): Double = n,,6e1f
No signature found,fun Double.withSign(sign: Double): Double = n,,6e1f
No signature found,fun Double.withSign(sign: Int): Double = n,,6e1f
No signature found,fun Double.nextUp(): Double = n,,6e1f
No signature found,fun Double.nextDown(): Double = n,,6e1f
No signature found,fun Double.nextTowards(to: Double): Double = n,,6e1f
No signature found,fun Double.roundToInt(): Int = w,,6e1f
No signature found,"fun Double.roundToLong(): Long =
    i",,6e1f
fun sin(x: Float),: Float = n,,7228
fun cos(x: Float),: Float = n,,55cd
fun tan(x: Float),: Float = n,,354b
fun asin(x: Float),: Float = n,,a3f7
fun acos(x: Float),: Float = n,,bba7
fun atan(x: Float),: Float = n,,195e
"fun atan2(y: Float, x: Float)",: Float = n,,0f43
fun sinh(x: Float),: Float = n,,3f9f
fun cosh(x: Float),: Float = n,,b2e3
fun tanh(x: Float),: Float = n,,7a80
fun asinh(x: Float),: Float = a,,401f
fun acosh(x: Float),: Float = a,,2770
fun atanh(x: Float),: Float = a,,f261
"fun hypot(x: Float, y: Float)",: Float = n,,aefe
fun sqrt(x: Float),: Float = n,,7fd3
fun exp(x: Float),: Float = n,,501f
fun expm1(x: Float),: Float = n,,8b60
"fun log(x: Float, base: Float)",": Float {
    if (base <= 0.0F || base == 1.0F) return Float.NaN
    return (nativeMath.log(x.toDouble()) / nativeMath.log(base.toDouble())).toFloat()
}",,33a1
fun ln(x: Float),: Float = n,"/**
 * Computes the natural logarithm (base `E`) of the value [x].
 *
 * Special cases:
 *   - `ln(NaN)` is `NaN`
 *   - `ln(x)` is `NaN` when `x < 0.0`
 *   - `ln(+Inf)` is `+Inf`
 *   - `ln(0.0)` is `-Inf`
 */",e2ff
fun log10(x: Float),: Float = n,,3a70
fun log2(x: Float),: Float = (,,af4d
fun ln1p(x: Float),: Float = n,,2ec4
fun ceil(x: Float),: Float = n,,399b
fun floor(x: Float),: Float = n,,4e65
fun truncate(x: Float),: Float = w,,5291
fun round(x: Float),: Float = n,,3aa7
fun abs(x: Float),: Float = n,,3740
fun sign(x: Float),: Float = n,,132d
"fun min(a: Float, b: Float)",: Float = n,,a947
"fun max(a: Float, b: Float)",: Float = n,,89c1
fun cbrt(x: Float),: Float = n,,42dd
No signature found,fun Float.pow(x: Float): Float = n,,6e1f
No signature found,fun Float.pow(n: Int): Float = n,,6e1f
No signature found,fun Float.IEEErem(divisor: Float): Float = n,,6e1f
No signature found,fun Float.withSign(sign: Float): Float = n,,6e1f
No signature found,fun Float.withSign(sign: Int): Float = n,,6e1f
No signature found,fun Float.nextUp(): Float = n,,6e1f
No signature found,fun Float.nextDown(): Float = n,,6e1f
No signature found,fun Float.nextTowards(to: Float): Float = n,,6e1f
No signature found,"fun Float.roundToInt(): Int =
    i",,6e1f
No signature found,fun Float.roundToLong(): Long = t,,6e1f
fun abs(n: Int),: Int = n,,e035
"fun min(a: Int, b: Int)",: Int = n,,1bf6
"fun max(a: Int, b: Int)",: Int = n,,7acf
fun abs(n: Long),: Long = n,,c48b
"fun min(a: Long, b: Long)",: Long = n,,e99c
"fun max(a: Long, b: Long)",: Long = n,,2605
fun doSomething(),": Double
}

// These functions have name clashes with an interface, so their names should be mangled with repetitive ""_"" suffixes
fun TestInterface(double: Double): TestInterface = o",,877b
fun doSomething(),": Double {
        return double
    }",,877b
fun TestInterface(int: Int),: TestInterface = o,,9c27
fun doSomething(),": Double {
        return int.toDouble()
    }",,877b
fun doSomething(),": Double
    }

    // These functions have name clashes with an interface, so their names should be mangled with repetitive ""_"" suffixes
    fun InnerInterface(double: Double): InnerInterface = o",,877b
fun doSomething(),": Double {
            return double
        }",,877b
fun InnerInterface(int: Int),: InnerInterface = o,,f458
fun doSomething(),": Double {
            return int.toDouble()
        }",,877b
fun TestPackage(double: Double),: TestInterface = o,,733b
fun doSomething(),": Double {
        return double
    }",,877b
fun box(),": String {
    val p = A::x
    if (p.get(A(42)) != 42) return ""Fail 1""
    if (p.get(A(-1)) != -1) return ""Fail 2""
    if (p.name != ""x"") return ""Fail 3""
    return ""OK""
}",,4f27
"fun produceObjCExportInterface(
        context: PhaseContext,
        moduleDescriptor: ModuleDescriptor,
        frontendServices: FrontendServices,
)",": ObjCExportedInterface {
    val config = context.config
    require(config.target.family.isAppleFamily)
    require(config.produce == CompilerOutputKind.FRAMEWORK)

    val topLevelNamePrefix = context.objCExportTopLevelNamePrefix

    // TODO: emit RTTI to the same modules as classes belong to.
    //   Not possible yet, since ObjCExport translates the entire ""world"" API at once
    //   and can't do this per-module, e.g. due to global name conflict resolution.

    val unitSuspendFunctionExport = config.unitSuspendFunctionObjCExport
    val mapper = ObjCExportMapper(frontendServices.deprecationResolver, unitSuspendFunctionExport = unitSuspendFunctionExport)
    val moduleDescriptors = listOf(moduleDescriptor) + moduleDescriptor.getExportedDependencies(config)
    val objcGenerics = config.configuration.getBoolean(KonanConfigKeys.OBJC_GENERICS)
    val disableSwiftMemberNameMangling = config.configuration.getBoolean(BinaryOptions.objcExportDisableSwiftMemberNameMangling)
    val ignoreInterfaceMethodCollisions = config.configuration.getBoolean(BinaryOptions.objcExportIgnoreInterfaceMethodCollisions)
    val reportNameCollisions = config.configuration.getBoolean(BinaryOptions.objcExportReportNameCollisions)
    val errorOnNameCollisions = config.configuration.getBoolean(BinaryOptions.objcExportErrorOnNameCollisions)

    val problemCollector = ObjCExportCompilerProblemCollector(context)

    val namer = ObjCExportNamerImpl(
            moduleDescriptors.toSet(),
            moduleDescriptor.builtIns,
            mapper,
            problemCollector,
            topLevelNamePrefix,
            local = false,
            objcGenerics = objcGenerics,
            disableSwiftMemberNameMangling = disableSwiftMemberNameMangling,
            ignoreInterfaceMethodCollisions = ignoreInterfaceMethodCollisions,
            nameCollisionMode = when {
                errorOnNameCollisions -> ObjCExportNameCollisionMode.ERROR
                reportNameCollisions -> ObjCExportNameCollisionMode.WARNING
                else -> ObjCExportNameCollisionMode.NONE
            }",,bb2f
fun reportWarning(text: String),"{
        context.reportCompilationWarning(text)
    }",,b71d
"fun reportWarning(declaration: DeclarationDescriptor, text: String)","{
        val location = declaration.psiLocation ?: return reportWarning(
                ""$text\n    (at ${DescriptorRenderer.COMPACT_WITH_SHORT_TYPES.render(declaration)}",,2d74
fun reportError(text: String),"{
        context.messageCollector.report(CompilerMessageSeverity.ERROR, text, null)
    }",,96c8
"fun reportError(declaration: DeclarationDescriptor, text: String)","{
        val location = declaration.psiLocation ?: return reportError(
                ""$text\n    (at ${DescriptorRenderer.COMPACT_WITH_SHORT_TYPES.render(declaration)}",,3dbf
fun reportException(throwable: Throwable),"{
        throw throwable
    }",,5f69
"fun createObjCFramework(
    config: KonanConfig,
    moduleDescriptor: ModuleDescriptor,
    exportedInterface: ObjCExportedInterface,
    frameworkDirectory: File
)","{
    val frameworkName = frameworkDirectory.name.removeSuffix(CompilerOutputKind.FRAMEWORK.suffix())
    val frameworkBuilder = FrameworkBuilder(
        config,
        infoPListBuilder = InfoPListBuilder(config),
        moduleMapBuilder = ModuleMapBuilder(),
        objCHeaderWriter = ObjCHeaderWriter(),
        mainPackageGuesser = MainPackageGuesser(),
    )
    frameworkBuilder.build(
            moduleDescriptor,
            frameworkDirectory,
            frameworkName,
            exportedInterface.headerLines,
            moduleDependencies = setOf(""Foundation"")
    )
}",,ca13
"fun createTestBundle(
        config: KonanConfig,
        moduleDescriptor: ModuleDescriptor,
        bundleDirectory: File
)","{
    val name = bundleDirectory.name.removeSuffix(CompilerOutputKind.TEST_BUNDLE.suffix())
    BundleBuilder(
            config = config,
            infoPListBuilder = InfoPListBuilder(config, BundleType.XCTEST),
            mainPackageGuesser = MainPackageGuesser()
    ).build(moduleDescriptor, bundleDirectory, name)
}",,b210
fun generate(codegen: CodeGenerator),"{
        if (!target.family.isAppleFamily) return

        if (generationState.shouldDefineFunctionClasses) {
            ObjCExportBlockCodeGenerator(codegen).generate()
        }",// TODO: No need for such class in dynamic driver.,be68
No signature found,"fun ObjCExportedInterface.generateWorkaroundForSwiftSR10177(generationState: NativeGenerationState) {
    // Code for all protocols from the header should get into the binary.
    // Objective-C protocols ABI is complicated (consider e.g. undocumented extended type encoding),
    // so the easiest way to achieve this (quickly) is to compile a stub by clang.

    val protocolsStub = listOf(
            ""__attribute__((used)) static void __workaroundSwiftSR10177() {"",
            buildString {
                append(""    "")
                generatedClasses.forEach {
                    if (it.isInterface) {
                        val protocolName = namer.getClassOrProtocolName(it).objCName
                        append(""@protocol($protocolName); "")
                    }",,6e1f
fun resolve(str: String),: TDat = n,,ddd6
fun foo(),: Int = 1,// NI_EXPECTED_FILE,519f
fun test(),"{
    A.x
    val b = object : Foo() {
    }",,fe98
fun foo(),{},,519f
No signature found,"fun get(name: String, type: Int = 1",// !LANGUAGE: +ProperArrayConventionSetterWithDefaultCalls,6e1f
No signature found,"fun set(name: String, defaultParam: String = """,,6e1f
No signature found,"fun get(name: String, type: String = """,,6e1f
No signature found,"fun set(name: String, defaultParam: String = """,,6e1f
fun box(),": String {
    var x = X()
    x[""index""] += ""OK""
    if (x.result != ""index_default_index100OK"") return ""fail 1: ${x.result}",,4f27
fun toString(),": String {
        return ""KotlinxJsPlainObjectsPlugin""
    }",,a535
No signature found,fun Array<out String>.test() = s,// FIR_IDENTICAL,6e1f
fun foo(),"= """,,519f
No signature found,fun String.myToInt(): Int = 4,,6e1f
fun get(key: K),": V? {
        result = ""AbstractFoo""
        return null
    }",,f9f9
fun isEmpty(),": Boolean {
        throw UnsupportedOperationException()
    }",,464e
fun containsKey(key: K),": Boolean {
        throw UnsupportedOperationException()
    }",,26e1
fun containsValue(value: V),": Boolean {
        throw UnsupportedOperationException()
    }",,4377
fun get(key: String),": E? {
        result = ""StringFoo""
        return null
    }",,c233
fun get(key: Int),": E? {
        result = ""IntFoo""
        return null
    }",,9921
fun box(),": String {
    StringFoo<String>().get("""")
    if (result != ""StringFoo"") return ""fail 1: $result""

    IntFoo<String>().get(1)
    if (result != ""IntFoo"") return ""fail 2: $result""

    AnyFoo<String>().get(null)
    if (result != ""AbstractFoo"") return ""fail 3: $result""

    return ""OK""
}",,4f27
fun processAfterAllModules(someAssertionWasFailed: Boolean),{},,b888
No signature found,"fun processModule(module: TestModule, info: BinaryArtifacts.Js) {
        when (val artifact = info.unwrap()) {
            is BinaryArtifacts.Js.JsIrArtifact -> {
                val testModules = testServices.moduleStructure.modules
                val moduleId2TestModule = testModules.associateBy { it.name.safeModuleName }",,6e1f
"fun verifyModulesRecursively(
                    module: TestModule,
                    compilationOutputs: CompilationOutputs,
                )","{
                    for ((moduleId, dependencyOutputs) in compilationOutputs.dependencies) {
                        moduleId2TestModule[moduleId]?.let {
                            verifyModulesRecursively(it, dependencyOutputs)
                        }",,dca5
"fun verifyModule(
        module: TestModule,
        translationMode: TranslationMode,
        jsProgram: JsProgram
    )","{
        val baseOutputPath = JsEnvironmentConfigurator.getJsModuleArtifactPath(testServices, module.name, translationMode)

        val lineCollector = LineCollector()
        lineCollector.accept(jsProgram)

        val generatedCode = kotlin.run {
            val programOutput = TextOutputImpl()
            jsProgram.globalBlock.accept(LineOutputToStringVisitor(programOutput, lineCollector))
            programOutput.toString()
        }",,552e
No signature found,fun List<Int?>.render() = j,,6e1f
fun createIrJsLineNumberHandler(testServices: TestServices),": JsBinaryArtifactHandler {
    return JsLineNumberHandler(FrontendKinds.ClassicFrontend, testServices)
}",,006c
fun createFirJsLineNumberHandler(testServices: TestServices),": JsBinaryArtifactHandler {
    return JsLineNumberHandler(FrontendKinds.FIR, testServices)
}",,d94e
fun case_1(value_1: Int),": String {
    while (true) {
        when (value_1) {
            break -> return """"
        }",// SKIP_TXT,4991
fun case_2(value_1: Int),": String {
    while (true) {
        when (value_1) {
            continue -> return """"
        }",,2fa8
fun getName(),: String = n,,4692
fun getVariants(),: Set<SoftwareComponent> = _,,fb21
fun getUsages(),": Set<UsageContext> {
        return _usages.getOrThrow().publishableUsages()
    }",,dca2
fun allPublishableCommonSourceSets(),= g,,680e
fun addSourcesJarArtifactToConfiguration(configurationName: String),": PublishArtifact {
        return project.artifacts.add(configurationName, sourcesJarTask) { sourcesJarArtifact ->
            sourcesJarArtifact.classifier = ""sources""
        }",,3659
fun getCoordinates(),: ModuleVersionIdentifier = g,,82e7
fun predicate(),"fun interface PublishOnlyIf {
        : Boolean
    }",,57ec
fun getUsage(),: Usage = e,,3f8e
fun getName(),: String = d,,4692
fun getDependencies(),": MutableSet<out ModuleDependency> =
        c",,3b91
fun getDependencyConstraints(),": MutableSet<out DependencyConstraint> =
        c",,c09b
fun getArtifacts(),": Set<PublishArtifact> =
        o",,6759
fun getAttributes(),": AttributeContainer {
        val configurationAttributes = overrideConfigurationAttributes ?: configuration.attributes

        /** TODO Using attributes of a detached configuration is a small and 'conservative' fix for KT-29758, [HierarchyAttributeContainer]
         * being rejected by Gradle 5.2+; we may need to either not filter the attributes, which will lead to
         * [ProjectLocalConfigurations.ATTRIBUTE] being published in the Gradle module metadata, which will potentially complicate our
         * attributes schema migration, or create proper, non-detached configurations for publishing that are separated from the
         * configurations used for project-to-project dependencies
         */
        val result = project.configurations.detachedResolvable().attributes

        configurationAttributes.copyAttributesTo(
            project,
            dest = result,
            keys = filterOutNonPublishableAttributes(configurationAttributes.keySet())
        )

        return result
    }",,5c87
fun getCapabilities(),: Set<Capability> = e,,e09a
fun getGlobalExcludes(),: Set<ExcludeRule> = e,,56bd
No signature found,"fun filterOutNonPublishableAttributes(attributes: Set<Attribute<*>>): Set<Attribute<*>> =
        a",,6e1f
No signature found,fun Iterable<DefaultKotlinUsageContext>.publishableUsages() = t,,6e1f
fun test(),"{
    A.entries

    with(A) {
        entries
    }","// !LANGUAGE: +EnumEntries +PrioritizedEnumEntries
// WITH_STDLIB
// FIR_DUMP",fe98
fun t(),= d,"// FIR_IDENTICAL
// FILE: a/b/c.java",8234
fun t2(),= d,,6b57
No signature found,"fun test(a_b: a.b) {
    a_b.a_b()

    val ab_c = t2()
    ab_c.<!UNRESOLVED_REFERENCE!>ab_c<!>()
    ab_c.a_bc()
}",,6e1f
fun test2(),= t,,30bb
fun test(),"{
    A::class
    A.<!DEPRECATION!>Companion<!>::class
}","// FIR_IDENTICAL
// ISSUE: KT-54209",fe98
No signature found,fun <<!CYCLIC_GENERIC_UPPER_BOUND!>T: T<!>> foo() {},"// FIR_IDENTICAL
// !DIAGNOSTICS: -MUST_BE_INITIALIZED -TYPE_PARAMETER_OF_PROPERTY_NOT_USED_IN_RECEIVER",6e1f
"fun renderSymbol(symbol: KtEnumEntrySymbol, printer: PrettyPrinter)","public object AS_SOURCE : KtEnumEntrySymbolRenderer {
        context(KtAnalysisSession, KtDeclarationRenderer)
        override : Unit = printer {
            "" "".separated(
                { renderAnnotationsModifiersAndContextReceivers(symbol, printer) }",,f5ae
fun suspendHere(x: String),": Unit {
    log += ""suspendHere($x);""
    return suspendCoroutineUninterceptedOrReturn { c ->
        postponed = { c.resume(Unit) }","// WITH_STDLIB
// WITH_COROUTINES",4187
fun foo(),= s,,519f
No signature found,"fun builder(c: suspend () -> Unit) {
    c.startCoroutine(handleResultContinuation {
        log += ""complete;""
        complete = true
    }",,6e1f
fun box(),": String {
    val a1: A? = A(""*"")
    val a2: A? = null
    builder {
        val r1 = a1?.foo().simpleName + "";""
        log += r1
        val r2 = a2?.foo().simpleName + "";""
        log += r2
        A(""@"").foo()
    }",,4f27
fun bind(owner: IrExternalPackageFragment),"{
        _owner = owner
    }",,9db7
No signature found,"fun `test direct dependency - is the same - for all resolution methods and supported scopes`() {
        KotlinTargetResourcesResolutionStrategy.values().forEach { resolutionMethod ->
            dependencyScopesWithResources().forEach { dependencyScope ->
                testDirectDependencyOnResourcesProducer(
                    producerTarget = { linuxX64() }",,6e1f
No signature found,"fun `test direct dependency - between different native targets - with artifact view`() {
        testDirectDependencyOnResourcesProducer(
            producerTarget = { linuxX64() }",,6e1f
No signature found,"fun `test direct dependency - between different native targets - with resources configuration`() {
        testDirectDependencyOnResourcesProducer(
            producerTarget = { linuxX64() }",,6e1f
No signature found,"fun `test direct dependency - for wasmJs, wasmWasi, js targets - when using artifact view`() {
        listOf<TargetProvider>(
            { wasmJs() }",,6e1f
No signature found,"fun `test direct dependency - for wasmJs - when using resources configuration`() {
        testDirectDependencyOnResourcesProducer(
            producerTarget = { wasmJs() }",,6e1f
No signature found,"fun `test direct dependency - for wasmWasi - when using resources configuration`() {
        testDirectDependencyOnResourcesProducer(
            producerTarget = { wasmWasi() }",,6e1f
No signature found,"fun `test direct dependency - for js - when using resources configuration`() {
        testDirectDependencyOnResourcesProducer(
            producerTarget = { js() }",,6e1f
No signature found,"fun `test transitive dependency - without resources in middle project - with configuration`() {
        testTransitiveDependencyOnResourcesProducer(
            targetProvider = { linuxX64() }",,6e1f
No signature found,"fun `test transitive dependency - without resources in middle project in wasm - with configuration`() {
        dependencyScopesWithResources().forEach { dependencyScope ->
            testTransitiveDependencyOnResourcesProducer(
                targetProvider = { wasmJs() }",,6e1f
No signature found,"fun `test transitive dependency - without resources in middle project in wasm - with artifact view`() {
        dependencyScopesWithResources().forEach { dependencyScope ->
            testTransitiveDependencyOnResourcesProducer(
                targetProvider = { wasmJs() }",,6e1f
No signature found,"fun `test transitive dependency - without resources in middle project in js - with configuration`() {
        dependencyScopesWithResources().forEach { dependencyScope ->
            testTransitiveDependencyOnResourcesProducer(
                targetProvider = { js() }",,6e1f
No signature found,"fun `test transitive dependency - without resources in middle project in js - with artifact view`() {
        dependencyScopesWithResources().forEach { dependencyScope ->
            testTransitiveDependencyOnResourcesProducer(
                targetProvider = { js() }",,6e1f
No signature found,"fun `test transitive dependency - without resources in middle project - with artifact view`() {
        testTransitiveDependencyOnResourcesProducer(
            targetProvider = { linuxX64() }",,6e1f
No signature found,"fun `test transitive dependency - with resources in middle project - with artifact view`() {
        dependencyScopesWithResources().forEach { dependencyScope ->
            testTransitiveDependencyOnResourcesProducer(
                targetProvider = { linuxX64() }",,6e1f
No signature found,"fun `test transitive dependency - with resources in middle project - with configuration`() {
        dependencyScopesWithResources().forEach { dependencyScope ->
            testTransitiveDependencyOnResourcesProducer(
                targetProvider = { linuxX64() }",,6e1f
No signature found,"fun `test resources - don't leak into non-resources configurations`() {
        resourcesConfigurationResolutionSanityCheck()

        val targetsToTest = listOf<TargetProvider>(
            { wasmJs() }",,6e1f
No signature found,"fun `test KT66393 - resolving resources with java-api dependencies in native configuration`() {
        val resolutionStrategy = KotlinTargetResourcesResolutionStrategy.ResourcesConfiguration
        val rootProject = buildProject()
        val producer = rootProject.createSubproject(
            ""producer"",
            resolutionStrategy = resolutionStrategy,
        ) {
            kotlin {
                linuxArm64()
                sourceSets.commonMain {
                    dependencies {
                        implementation(""org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.8.0"")
                    }",,6e1f
No signature found,"fun `test resources configuration - only exists in projects with resources configuration strategy`() {
        val rootProject = buildProject()
        assertNotNull(
            rootProject.createSubproject(
                ""resourcesConfiguration"",
                resolutionStrategy = KotlinTargetResourcesResolutionStrategy.ResourcesConfiguration,
            ) { kotlin { linuxArm64() }",,6e1f
fun dependencyScopesWithResources(),": List<DependencyScopeProvider> {
        return listOf(
            { this::implementation }",,7b08
fun resourcesConfigurationResolutionSanityCheck(),"{
        directDependencyOnResourcesProducer(
            producerTarget = { linuxX64() }",,e6e7
"fun testNonResourcesConfigurationDontResolveResourceVariants(
        producerTarget: TargetProvider,
        consumerTarget: TargetProvider,
        strategy: KotlinTargetResourcesResolutionStrategy,
    )","{
        directDependencyOnResourcesProducer(
            producerTarget = producerTarget,
            consumerTarget = consumerTarget,
            strategy = strategy,
            assert = { consumer, _ ->
                val resourcesConfigurations = consumer.multiplatformExtension.targets.flatMap {
                    it.compilations.mapNotNull { it.internal.configurations.resourcesConfiguration }",,92ed
No signature found,"fun testDirectDependencyOnResourcesProducer(
        producerTarget: TargetProvider,
        consumerTarget: TargetProvider,
        dependencyScope: DependencyScopeProvider = {",,6e1f
No signature found,"fun directDependencyOnResourcesProducer(
        producerTarget: TargetProvider,
        consumerTarget: TargetProvider,
        strategy: KotlinTargetResourcesResolutionStrategy,
        dependencyScope: DependencyScopeProvider = {",,6e1f
No signature found,"fun testTransitiveDependencyOnResourcesProducer(
        targetProvider: TargetProvider,
        resolutionStrategy: KotlinTargetResourcesResolutionStrategy,
        filterResolvedFiles: (Set<File>) -> Set<File> = {",,6e1f
No signature found,fun Project.buildFile(path: String) = l,,6e1f
No signature found,"fun ProjectInternal.createSubproject(
        name: String,
        preApplyCode: Project.() -> Unit = {",,6e1f
No signature found,"fun buildProjectWithMPPAndStdlib(
        projectBuilder: ProjectBuilder.() -> Unit = {",,6e1f
No signature found,"fun Project.publishFakeResources(target: KotlinTarget) {
        project.multiplatformExtension.resourcesPublicationExtension?.publishResourcesAsKotlinComponent(
            target,
            resourcePathForSourceSet = {
                KotlinTargetResourcesPublication.ResourceRoot(
                    project.provider { File(it.name) }",,6e1f
No signature found,fun <K> FlowCollector<K>.bar(): K = n,"// WITH_STDLIB
// SKIP_TXT
// !DIAGNOSTICS: -CAST_NEVER_SUCCEEDS -UNCHECKED_CAST -UNUSED_PARAMETER -UNUSED_VARIABLE -OPT_IN_USAGE_ERROR -UNUSED_EXPRESSION",6e1f
No signature found,fun <K> FlowCollector<K>.foo(): K = n,,6e1f
No signature found,fun <K> K.bar3(): K = n,,6e1f
No signature found,fun <K> K.foo3(): K = n,,6e1f
fun bar2(),: Int = 1,,3846
fun foo2(),: Float = 1,,7e7a
fun foo7(),= n,,bc0d
No signature found,fun <L> flow(block: suspend FlowCollector<L>.() -> Unit) = F,,6e1f
fun poll1(flag: Boolean),": Flow<String> {
    return flow {
        val inv = if (flag) { ::bar2 }",,09fb
fun poll11(flag: Boolean),": Flow<String> {
    return flow {
        val inv = if (flag) { ::bar2 }",,82fb
fun poll12(flag: Boolean),": Flow<String> {
    return flow {
        val inv = if (flag) { ::bar3 }",,957f
fun poll13(flag: Boolean),": Flow<String> {
    return flow {
        val inv = if (flag) { ::bar2 }",,f61e
fun poll14(flag: Boolean),": Flow<String> {
    return flow {
        val inv = if (flag) { ::bar4 }",,193b
fun poll15(flag: Boolean),": Flow<String> {
    return flow {
        val inv = if (flag) { ::bar5 }",,6cd4
fun poll16(flag: Boolean),": Flow<String> {
    return flow {
        val inv = if (flag) { ::Foo6 }",,29ad
fun poll17(flag: Boolean),": Flow<String> {
    return flow {
        val inv = if (flag) { foo7() }",,c8ea
fun poll4(),": Flow<String> {
    return flow {
        val inv = try { ::bar }",,4588
fun poll41(),": Flow<String> {
    return flow {
        val inv = try { ::bar2 }",,08fc
fun poll42(),": Flow<String> {
    return flow {
        val inv = try { ::bar3 }",,3df7
fun poll43(),": Flow<String> {
    return flow {
        val inv = try { ::bar4 }",,a38d
fun poll44(),": Flow<String> {
    return flow {
        val inv = try { ::bar5 }",,1514
fun poll45(),": Flow<String> {
    return flow {
        val inv = try { ::Foo6 }",,60bd
fun poll46(),": Flow<String> {
    return flow {
        val inv = try { foo7() }",,68eb
fun poll5(),": Flow<String> {
    return flow {
        val inv = try { ::bar }",,7b43
fun poll51(),": Flow<String> {
    return flow {
        val inv = try { ::bar2 }",,1aac
fun poll52(),": Flow<String> {
    return flow {
        val inv = try { ::bar3 }",,4052
fun poll53(),": Flow<String> {
    return flow {
        val inv = try { ::bar4 }",,4e17
fun poll54(),": Flow<String> {
    return flow {
        val inv = try { ::bar5 }",,3c19
fun poll55(),": Flow<String> {
    return flow {
        val inv = try { ::Foo6 }",,c23a
fun poll56(),": Flow<String> {
    return flow {
        val inv = try { ::<!NEW_INFERENCE_NO_INFORMATION_FOR_PARAMETER!>Foo7<!> }",,7995
No signature found,fun <E : Out<T>> foo1(x: E) = 1,"// !CHECK_TYPE
// !DIAGNOSTICS: -UNUSED_PARAMETER",6e1f
No signature found,fun <F : Inv<T>> foo2(x: F) = 1,,6e1f
No signature found,fun <G : In<T>>  foo3(x: G) = 1,,6e1f
"fun foo2(a: A<out CharSequence>, b: A<in CharSequence>)","{
    a.foo1(<!ARGUMENT_TYPE_MISMATCH!>Out<CharSequence>()<!>)
    a.foo1<<!UPPER_BOUND_VIOLATED!>Out<CharSequence><!>>(<!ARGUMENT_TYPE_MISMATCH!>Out()<!>)

    a.foo1(Out())
    a.foo1(Out<Nothing>())

    a.foo2(Inv())
    a.foo2(<!ARGUMENT_TYPE_MISMATCH!>Inv<CharSequence>()<!>)
    a.foo2<<!UPPER_BOUND_VIOLATED!>Inv<CharSequence><!>>(<!ARGUMENT_TYPE_MISMATCH!>Inv()<!>)

    a.foo3(In())
    a.foo3(In<CharSequence>())
    a.foo3<In<CharSequence>>(In())

    b.foo1(Out())
    b.foo1(Out<CharSequence>())
    b.foo1<Out<CharSequence>>(Out())

    b.foo2(Inv())
    b.foo2(<!ARGUMENT_TYPE_MISMATCH!>Inv<CharSequence>()<!>)
    b.foo2<<!UPPER_BOUND_VIOLATED!>Inv<CharSequence><!>>(<!ARGUMENT_TYPE_MISMATCH!>Inv()<!>)


    b.foo3(<!ARGUMENT_TYPE_MISMATCH!>In<CharSequence>()<!>)
    b.foo3<<!UPPER_BOUND_VIOLATED!>In<CharSequence><!>>(<!ARGUMENT_TYPE_MISMATCH!>In()<!>)

    b.foo3(In<Any?>())
    b.foo3(In())
}",,fe15
No signature found,"fun <T, R> List<T>.myMap(block: (T) -> R): List<R> = n",,6e1f
fun test_1(),"{
    class Data(val x: Int)
    val datas: List<Data> = null!!
    val xs = datas.myMap(Data::x)
}",,dda0
fun box(),= e,,4f27
fun get(s: Int),= 1,// WITH_STDLIB,4037
fun box(),": String {
    val c = Cell()
    (c<!NO_SET_METHOD!>[0]<!>)++
    return ""OK""
}",,4f27
fun box(),= E,,4f27
fun f(),": String {
            return super<E>.f() + ""O""
        }",,f6fb
fun f(),": String {
            return super.f() + ""K""
        }",,f6fb
fun f(),"= """,,f6fb
fun <R> choose1(c: Out<Out<R>>),{},// !DIAGNOSTICS: -UNUSED_PARAMETER,80da
fun <R> choose2(c: In<In<R>>),{},,ea7e
fun <R> choose3(c: Inv<Inv<R>>),{},,4795
No signature found,"fun f(o: Out<Out<*>>, i: In<In<*>>, inv: Inv<Inv<*>>) {
    choose1(o)
    <!NEW_INFERENCE_NO_INFORMATION_FOR_PARAMETER!>choose2<!>(i)
    choose3(<!TYPE_MISMATCH!>inv<!>)
}",,6e1f
fun box(),": String {
    assertEquals(ln1p(-2.0), Double.NaN)
    assertEquals(ln1p(-1.0), Double.NEGATIVE_INFINITY)
    assertEquals(ln1p(0.0), 0.0)
    assertEquals(ln1p(1.0), 0.6931471805599453)
    assertEquals(js(""Math.log1p.called""), true)

    return ""OK""
}","// WITH_STDLIB
// TARGET_BACKEND: JS_IR
// FILE: main.js",4f27
fun testEmptyString(),"{
    js(<!JSCODE_NO_JAVASCRIPT_PRODUCED!>""""<!>)
}","// FIR_IDENTICAL
// ERROR_POLICY: SEMANTIC",768d
fun testStringWithSpaces(),"{
    js(<!JSCODE_NO_JAVASCRIPT_PRODUCED!>""\n \n$SPACE \t"" + "" ""<!>)
}",,fd12
fun testComment(),"{
    js(<!JSCODE_NO_JAVASCRIPT_PRODUCED!>""""""
        // just a comment
        $SPACE
    """"""<!>)
}",,1b74
fun test(),{},,fe98
fun test(),"{
        /*false*/super./*true*/test()
        /*false*/this@I()
    }",,fe98
fun invoke(),{},,0a26
fun a(),= 1,,9ea5
No signature found,fun Int.b() = 1,,6e1f
No signature found,fun Int.c(i: Int) = 1,,6e1f
No signature found,fun foo(a: Int = /,,6e1f
No signature found,"fun ((i: Int) -> Int).f() {
    /*false*/this(12)
}",,6e1f
fun main(args: Array<String>),"{
    id(id(123))
    expectedFun()
}",,5b61
fun getScriptDependencies(file: VirtualFile),": ScriptDependencies? {
        val ktFile = PsiManager.getInstance(project).findFile(file) as? KtFile ?: return null
        return getScriptConfiguration(ktFile)?.legacyDependencies
    }",,14cd
fun getScriptDependencies(file: PsiFile),": ScriptDependencies? {
        if (file !is KtFile) return null
        return getScriptConfiguration(file)?.legacyDependencies
    }",,d451
fun getScriptConfigurationResult(file: KtFile),: ScriptCompilationConfigurationResult? = n,,8f30
No signature found,"fun getScriptConfigurationResult(
        file: KtFile, providedConfiguration: ScriptCompilationConfiguration?
    ): ScriptCompilationConfigurationResult? = g",,6e1f
fun getScriptConfiguration(file: KtFile),: ScriptCompilationConfigurationWrapper? = g,,5950
fun getInstance(project: Project),": ScriptDependenciesProvider? =
            p",,f92b
fun foo(dd: T),: T = d,,3b5d
fun box(),": String {
    val a = A()
    return ""OK""
}",,4f27
fun useBbar(),"{
    createB().bar()
}",,2821
"fun doMultiFileTest(wholeFile: File, files: List<TestFile>)","{
        val isIgnored = InTextDirectivesUtils.isIgnoredTarget(backend, wholeFile)
        createEnvironmentWithMockJdkAndIdeaAnnotations(
            ConfigurationKind.ALL,
            files,
            getTestJdkKind(files),
            *listOfNotNull(writeJavaFiles(files)).toTypedArray()
        )
        loadMultiFiles(files)

        if (isMultiFileTest(files) && !InTextDirectivesUtils.isDirectiveDefined(wholeFile.readText(), ""TREAT_AS_ONE_FILE"")) {
            doTestMultiFile(files, !isIgnored)
        }",,9dba
"fun doTestMultiFile(files: List<TestFile>, reportProblems: Boolean)","{
        val expectedOccurrencesByOutputFile = LinkedHashMap<String, List<OccurrenceInfo>>()
        val globalOccurrences = ArrayList<OccurrenceInfo>()
        for (file in files) {
            readExpectedOccurrencesForMultiFileTest(file.name, file.content, expectedOccurrencesByOutputFile, globalOccurrences)
        }",,cb0e
fun isMultiFileTest(files: List<TestFile>),": Boolean {
            var kotlinFiles = 0
            for (file in files) {
                if (file.name.endsWith("".kt"")) {
                    kotlinFiles++
                }",,b68d
No signature found,"fun <T, C : MutableCollection<in T>> Iterable<T>.filterTo(destination: C, predicate: (T) -> Boolean) {}","// FIR_IDENTICAL
// !DIAGNOSTICS: -UNUSED_PARAMETER -UNUSED_ANONYMOUS_PARAMETER
// !CHECK_TYPE

// FILE: Clazz.java",6e1f
fun test(clazz: Clazz<out Any>),"{
    val result = java.util.ArrayList<Any>()
    clazz.foo().filterTo(result) { x -> true }",,9b20
fun box(),"=
        B",// FILE: test.kt,4f27
No signature found,"fun getO(x: T, z: String = """,,6e1f
No signature found,"fun getK(x: T, z: String = """,,6e1f
fun innerGetO(),= g,,bec9
fun lambdaGetK(),= {,,2f92
fun getOK(),"=
            I",,6fbd
fun box(),": String {
    assertEquals<Int>(2, WithCompanion.c, ""Field WithCompanion.c"")
    assertEquals<Int>(2, Object.c, ""Field Object"")
    return ""OK""
}","// TARGET_BACKEND: JVM
// WITH_STDLIB",4f27
fun simple(),: String = i,"// WITH_STDLIB
// WORKS_WHEN_VALUE_CLASS
// IGNORE_BACKEND: JVM
// LANGUAGE: +ValueClasses, +GenericInlineClassParameter",4e1d
fun simple(),: String = l,,4e1d
fun simple(),: String = a,,4e1d
fun simple(),: String = o,,4e1d
"fun testUnboxed(i: IcInt<Int>, l: IcLong<Long>, a: IcAny<Int>, o: IcOverIc<IcLong<Long>>)",": String =
    f",,9a26
No signature found,"fun testBoxed(i: IcInt<Int>?, l: IcLong<Long>?, a: IcAny<Int>?, o: IcOverIc<IcLong<Long>>?): String =
    f",,6e1f
fun testLocalVars(),": String {
    val i = IcInt(0)
    val l = IcLong(1L)
    val a = IcAny(2)
    val o = IcOverIc(IcLong(3))

    return foo(i::simple) + foo(l::simple) + foo(a::simple) + foo(o::simple)
}",,be6f
fun testGlobalProperties(),": String =
    f",,cc6d
fun testCapturedVars(),": String {
    return IcInt(2).let { foo(it::simple) }",,7669
No signature found,fun foo(init: () -> String): String = i,,6e1f
fun box(),": String {
    val i = IcInt(3)
    val l = IcLong(4)
    val a = IcAny(5)
    val o = IcOverIc(IcLong(6))

    if (testUnboxed(i, l, a, o) != ""345IcLong(l=6)"") return ""Fail 1 ${testUnboxed(i, l, a, o)}",,4f27
fun simpleFun(),{},"//class `:)` {
//    lateinit var f: String
//}

// Commented declarations won't compile with the current Kotlin",d415
No signature found,fun `strange!Fun`() {},"//    @Anno(name = ""Woofwoof"", size = StrangeEnum.`60x60`, `A B` = ""S"")
//    fun simpleFun2(a: String, b: String) {}",6e1f
No signature found,"fun strangeFun2(a: String, b: `A()B()`) {}",,6e1f
No signature found,"fun strangeFun3(a: String, b: `A B`) {}",,6e1f
No signature found,"fun strangeFun4(a: String, `A()B()`: String) {}",,6e1f
No signature found,fun strangeFun5(a: `A B`.C) {},,6e1f
fun extract(archive: File),"{
        fs.copy {
            it.from(archiveOperations.tarTree(archive))
            it.into(destination.parentFile)
        }",,fa96
fun box(),": String {
    foo() as Unit
    return ""OK""
}",,4f27
fun case_1(value_1: SealedClass),: Int = w,"// !DIAGNOSTICS: -UNUSED_EXPRESSION
// SKIP_TXT",df4a
fun case_2(value_1: SealedClass),: String = w,,0e54
fun case_3(value_1: SealedClassWithMethods),: String = w,,0f14
fun case_4(value_1: SealedClassWithObjects),: String = w,,b1dd
fun case_5(value_1: SealedClassMixed),: String = w,,de52
fun case_6(value_1: SealedClassMixed),: String = w,,7849
fun case_7(value_1: SealedClassEmpty),: String = w,,986f
No signature found,fun case_8(value: SealedClass?): String = w,,6e1f
No signature found,fun case_9(value: SealedClass?): String = w,,6e1f
fun box(),": String {
    val s = ""notA""
    val id = when (s) {
        ""a"" -> 1
        else -> null
    }",,4f27
fun A3(x: Any),"= ""","// !DIAGNOSTICS: -UNUSED_PARAMETER -UNUSED_VARIABLE
// !CHECK_TYPE
// FILE: a.kt",9dd7
fun bar(),"{
    A3("""") checkType { _<B>() }",,66c3
fun baz(),"{
    a.A1("""") // resolved to B constructor, OK
    a.<!INVISIBLE_REFERENCE!>A2<!>("""") // resolved to B constructor, INVISIBLE_MEMBER because type alias is private, OK

    a.A3("""") checkType { _<String>() }",,b22f
No signature found,"fun foo(block: String.() -> Unit) {
    ""Ok"".block()
}",,6e1f
No signature found,"fun bar(block: (String) -> Unit) {
    foo(block)
}",,6e1f
No signature found,"fun baz(block: String.() -> Unit) {
    block(""Ok"")
}",,6e1f
fun box(),": String {
    bar {
        assertEquals(""Ok"", it)
    }",,4f27
No signature found,"fun invoke(cause: Throwable?)
}

// MODULE: middle-common()()(top-common)
// FILE: middle.kt
actual abstract class CompletionHandlerBase actual constructor() : CompletionHandler {
    actual abstract override fun invoke(cause: Throwable?)
}","// SKIP_WHEN_OUT_OF_CONTENT_ROOT
// WITH_STDLIB
// MODULE: top-common
// FILE: top.kt",6e1f
No signature found,"fun inv<caret>oke(cause: Throwable?) {
    }","// MODULE: main-jvm()()(middle-common)
// FILE: bottom.kt",6e1f
fun foo(a: Int),"{
    @ann
    when (a) {
        1 -> {}",,0f65
fun <T> dispatchInline(),: T = (,"// NO_CHECK_LAMBDA_INLINING
// !LANGUAGE: +InlineClasses

// FILE: inline.kt",bacc
No signature found,fun <T> IC.extensionInline(): T = (,,6e1f
fun <T> normalInline(a: IC),: T = (,,babe
fun <T> extension(a: IC),: T = b,,194e
fun <T> dispatch(a: IC),: T = b,,5451
fun <T> normal(a: IC),: T = b,,ce59
fun call(ic: T),"fun interface FunIFace<T, R> {
    : R
}",,b8be
"fun <T, R> bar(value: T, f: FunIFace<T, R>)",": R {
    return f.call(value)
}",,0d35
fun box(),": String {
    var res = extension<Int>(IC(FooHolder(40))) + 3
    if (res != 43) return ""FAIL 2: $res""

    res = dispatch<Int>(IC(FooHolder(40))) + 4
    if (res != 44) return ""FAIL 3: $res""

    res = normal<Int>(IC(FooHolder(40))) + 5
    if (res != 45) return ""FAIL 4: $res""

    return ""OK""
}",,4f27
fun backendSpecificExplicitRoot(node: IrAnnotationContainer),": Boolean {
        val classId = when (node) {
            is IrFunction -> NativeRuntimeNames.Annotations.exportForCppRuntimeClassId
            is IrClass -> NativeRuntimeNames.Annotations.exportTypeInfoClassId
            else -> return false
        }",,7f84
fun backendSpecificSerializeAllMembers(irClass: IrClass),= !,,045b
fun visitMethodReturnType(element: Element),": Element =
        w",,e806
No signature found,"fun SmartPrinter.printAdditionalMethods() {
        println()
        val typeParameter = TypeVariable(""T"", listOf(IrTree.rootElement))
        printFunctionWithBlockBody(
            name = ""transformPostfix"",
            parameters = listOf(FunctionParameter(""body"", Lambda(receiver = typeParameter, returnType = StandardTypes.unit))),
            returnType = typeParameter,
            typeParameters = listOf(typeParameter),
            extensionReceiver = typeParameter,
            visibility = Visibility.PROTECTED,
            isInline = true,
        ) {
            println(""transformChildrenVoid()"")
            println(""this.body()"")
            println(""return this"")
        }",,6e1f
fun printMethodsForElement(element: Element),"{
        val parent = element.parentInVisitor
        if (!element.transformByChildrenVoid && parent == null) return
        printer.run {
            println()
            printVisitMethodDeclaration(element, hasDataParameter = false, modality = Modality.OPEN)
            if (element.transformByChildrenVoid && !element.isPackageFragmentChild) {
                printBlock {
                    println(element.visitorParameterName, "".transformChildren(this, null)"")
                    println(""return "", element.visitorParameterName)
                }",,4569
fun printVisitor(elements: List<Element>),"{
        super.printVisitor(elements)
        printer.run {
            println()
            val transformerParameter = FunctionParameter(""transformer"", visitorType)
            printFunctionWithBlockBody(
                name = ""transformChildrenVoid"",
                parameters = listOf(transformerParameter),
                returnType = StandardTypes.unit,
                extensionReceiver = IrTree.rootElement,
            ) {
                println(""transformChildren("", transformerParameter.name, "", null)"")
            }",,605a
fun benchmark(bh: Blackhole),"{
        analyzeGreenFile(bh)
    }",,8bbd
fun buildText(),"=
            """,,47fd
fun foo(),: Int = 1,,519f
fun bar(),"{
            |${(1..size).joinToString(""\n"") { ""    foo()"" }",,66c3
No signature found,"fun getValue(thisRef: Any?, prop: KProperty<*>): String = p","// PLATFORM_DEPENDANT_METADATA
// ALLOW_AST_ACCESS",6e1f
fun foo(),{},,519f
No signature found,"fun test(a: C?, nn: () -> Nothing?) {
    a ?: nn()
    a<!UNSAFE_CALL!>.<!>foo()

    a ?: return
    a.foo()
}",,6e1f
fun test1(),"{
        <!DEPRECATED_ACCESS_BY_SHORT_NAME!>foo()<!>
        bar()
        val a: Int = <!TYPE_MISMATCH!>baz()<!>
        val b: T = baz()
    }","// !LANGUAGE: -ProhibitVisibilityOfNestedClassifiersFromSupertypesOfCompanion
// !DIAGNOSTICS: -UNUSED_VARIABLE

// FILE: J.java",fa3b
fun baz(),: T = n,,b22f
fun test(),"{
            <!DEPRECATED_ACCESS_BY_SHORT_NAME!>foo()<!>
            bar()
            val a: Int = baz()
            val b: <!UNRESOLVED_REFERENCE!>T<!> = baz()
        }",,fe98
fun test(),"{
            <!DEPRECATED_ACCESS_BY_SHORT_NAME!>foo()<!>
            bar()
            val a: Int = baz()
            val b: <!UNRESOLVED_REFERENCE!>T<!> = baz()
        }",,fe98
fun bar(),{},,66c3
No signature found,fun <T> foo(f: () -> T): Inv<T> = T,// !DIAGNOSTICS: -UNUSED_PARAMETER,6e1f
fun myExit(),: Nothing = T,,0e7a
No signature found,"fun test(x: String?): Inv<String> {
    return foo {
        if (x == null) myExit()
        <!DEBUG_INFO_SMARTCAST!>x<!>
    }",,6e1f
fun box(),": String {
    val entries = MyEnum.entries
    val entry = entries[0]
    require(java.util.concurrent.TimeUnit.entries.size == java.util.concurrent.TimeUnit.values().size)
    return entry.toString()
}","// !LANGUAGE: +EnumEntries
// TARGET_BACKEND: JVM_IR
// FULL_JDK
// WITH_STDLIB

// FILE: MyEnum.java",4f27
No signature found,"fun <T : TypeMirror> create(t: T, javac: JavacWrapper) = w",,6e1f
fun findAnnotation(fqName: FqName),= t,,4216
No signature found,fun equals(other: Any?) = (,,6e1f
fun hashCode(),= t,,6874
fun toString(),= t,,a535
fun findAnnotation(fqName: FqName),= e,,4216
fun assertEnabled(),"{
    assertFailsWith<AssertionError> {
        @OptIn(kotlin.experimental.ExperimentalNativeApi::class)
        assert(false)
    }",// ASSERTIONS_MODE: always-enable,ce75
No signature found,"fun doCall(block: ()-> Unit, block2: ()-> Unit, finallyBlock2: ()-> Unit) {
    try {
         block()
         block2()
    }",// FILE: 1.kt,6e1f
"fun test1(h: Holder, doReturn: Int)",": String {
    doCall (
            {
                if (doReturn < 1) {
                    h.value += ""OK_NONLOCAL""
                    return ""OK_NONLOCAL""
                }",,059e
"fun test2(h: Holder, doReturn: Int)",": String {
    doCall (
            {
                if (doReturn < 1) {
                    h.value += ""OK_NONLOCAL""
                    return ""OK_NONLOCAL""
                }",,6a3a
fun box(),": String {
    var h = Holder()
    val test10 = test1(h, 0)
    if (test10 != ""OK_NONLOCAL"" || h.value != ""OK_NONLOCAL, OK_FINALLY"") return ""test10: ${test10}",,4f27
fun foo(x: T),"fun interface IFoo<T> {
    : T
}","// TARGET_BACKEND: JVM
// JVM_TARGET: 1.8
// SAM_CONVERSIONS: INDY

// CHECK_BYTECODE_TEXT
// JVM_IR_TEMPLATES
// 1 java/lang/invoke/LambdaMetafactory",a834
fun foo1(fs: IFoo<Z>),= f,,07cb
fun box(),": String {
    val t = foo1 { Z(it.value!! + 41) }",,4f27
fun myAssert(condition: Boolean),"{
    contract {
        returns() implies (condition)
    }","// !LANGUAGE: +AllowContractsForCustomFunctions +UseReturnsEffect
// !OPT_IN: kotlin.contracts.ExperimentalContracts
// !DIAGNOSTICS: -INVISIBLE_REFERENCE -INVISIBLE_MEMBER",e0bd
No signature found,"fun testAssertSmartcast(x: Any?) {
    myAssert(x is String)
    x.length
}",,6e1f
No signature found,"fun testInvertedAssert(x: Any?) {
    myAssert(x !is String)
    x.<!UNRESOLVED_REFERENCE!>length<!>
}",,6e1f
No signature found,"fun testSpilling(x: Any?) {
    if (x != null) {
        myAssert(x is String)
        x.length
    }",,6e1f
No signature found,"fun testAssertInIf(x: Any?) {
    if (myAssert(x is String) == Unit) {
        x.length
    }",,6e1f
No signature found,"fun testTryCatch(x: Any?) {
    try {
        myAssert(x is String)
        x.length
    }",,6e1f
No signature found,"fun testUncertainFlow(x: Any?) {
    repeat(x.toString().length) {
        myAssert(x is String)
        x.length
    }",,6e1f
No signature found,"fun testAtLeastOnceFlow(x: Any?) {
    do {
        myAssert(x is String)
        x.length
    }",,6e1f
fun test(a: Int),"{
    if (a <!UNRESOLVED_REFERENCE!>in<!><!SYNTAX!><!> ) {}",,688e
"fun <R, D> acceptChildren(visitor: FirVisitor<R, D>, data: D)",{},,b2f8
"fun <D> transformChildren(transformer: FirTransformer<D>, data: D)",": FirBackingFieldReferenceImpl {
        return this
    }",,963c
No signature found,"fun File.matchesDependency(dependency: String): Boolean {
    val path = Paths.get(dependency)
    return if (path.isAbsolute) {
        path.isSameFileAs(this.toPath())
    }",,6e1f
No signature found,fun targetDependency(target: TargetWithSanitizer = T,,6e1f
fun targetDependency(target: KonanTarget),: Buildable = t,,034a
fun apply(project: Project),"{
        project.apply<PlatformManagerPlugin>()
        project.apply<NativeDependenciesBasePlugin>()
        project.extensions.create<NativeDependenciesExtension>(""nativeDependencies"", project)
    }",,8971
"fun add(index: Int, element: T)",": Boolean {
            val oldSize = _size

            // Grow the array if needed.
            if (oldSize == hashes.size) {
                val newSize = if (oldSize > 0) oldSize * 2 else 2
                hashes = hashes.copyOf(newSize)
                values = values.copyOf(newSize)
            }",,57a4
fun copyInSameArray(),": CustomArray<Int> {
        val array = CustomArray<Int>()
        for (i in 0 until 2 * BENCHMARK_SIZE) {
            array.add(0, i)
        }",// Shift the array if needed.,c2b3
fun f(),"{
    invoker(
    l@{
        return@l 11 // expects Function, but should expect Int
    }",//kt-411 Wrong type expected when returning from a function literal,f6fb
No signature found,fun invoker(gen : () -> Int) : Int  = 0,,6e1f
fun t1(),"{
    val v = l@{
        return@l 111
    }",//more tests,9870
fun t2(),": String {
    val g : ()-> Int = l@{
        if (true) {
            return@l 1
        }",,6b57
fun t3(),": String {
    invoker(
    l@{
        if (true) {
            <!RETURN_NOT_ALLOWED!>return@t3<!> ""1""
        }",,4e19
fun t4(),": Int {
    val h :  ()-> String = l@{
        return@l ""a""
    }",,cef9
fun inner(),": String {
        return ""2""
    }",,7082
fun foo(s: S<String>),": String {
    class Local {
        fun bar() = s.string
    }","// WITH_STDLIB
// WORKS_WHEN_VALUE_CLASS
// LANGUAGE: +ValueClasses, +GenericInlineClassParameter",a673
fun box(),= f,,4f27
fun box(),": String =
    ""","// TARGET_BACKEND: JVM
// WITH_STDLIB

// FILE: anonymousObject.kt",4f27
fun toString(),"fun String.z(): Any {
    return object {
        override : String =
            this@z
    }",,a535
fun toString(),"fun String.iz(): Any {
    return object {
        override : String =
            this@iz
    }",,a535
"fun matches(startIndex: Int, testString: CharSequence, matchResult: MatchResultImpl)",": Int {
        if (children.isEmpty()) {
            return -1
        }",,f714
fun first(set: AbstractSet),: Boolean = c,,62ff
fun hasConsumed(matchResult: MatchResultImpl),": Boolean {
        return !(matchResult.getEnd(groupIndex) >= 0 && matchResult.getStart(groupIndex) == matchResult.getEnd(groupIndex))
    }",,bc4e
fun processSecondPassInternal(),": AbstractSet {
        val fSet = this.fSet
        if (!fSet.secondPassVisited) {
            val newFSet = fSet.processSecondPass()
            @OptIn(ExperimentalNativeApi::class)
            assert(newFSet == fSet)
        }",,f870
No signature found,"fun builder(block: () -> Unit): Boolean {
    block()
    return true
}",,6e1f
fun unitFunction(),"{
    return
}",,9cec
fun test(b: Boolean),"{
    builder { <expr>unitFunction()</expr> }",,69ac
fun libCommonMainExpectFun(),": Unit {
        println(""actualized in iosMain"")
        libCommonMainTopLevelFun()
        println(CArrayPointer::class)
    }",,a5ef
fun additionalFunInIosActual(),"{
        println(""additional fun in lib iosMain"")
    }",,a9b8
fun libLinuxMainFun(),: LibCommonMainIface = L,,5583
fun main(args: Array<String>),"{
    val comparator = <!FUNCTION_CALL_EXPECTED!><!NO_VALUE_FOR_PARAMETER!>Comparator<!><Long?><!>
}",// ISSUE: KT-54874,5b61
No signature found,"fun foo(x: Number, y: String?): String {
    val result = ""abcde $x ${x as Int}",// !CHECK_TYPE,6e1f
"fun <R, D> accept(visitor: IrElementVisitor<R, D>, data: D)",": R =
        v",,af8a
"fun <D> transform(transformer: IrElementTransformer<D>, data: D)",": IrCatch =
        a",,4177
"fun <D> acceptChildren(visitor: IrElementVisitor<Unit, D>, data: D)","{
        catchParameter.accept(visitor, data)
        result.accept(visitor, data)
    }",,a229
"fun <D> transformChildren(transformer: IrElementTransformer<D>, data: D)","{
        catchParameter = catchParameter.transform(transformer, data) as IrVariable
        result = result.transform(transformer, data)
    }",,e8d0
fun box(),": String {
    val bs1 = B(15)
    assertEquals(90, bs1.value)

    val bs2 = B()
    assertEquals(72 * 18, bs2.value)

    return ""OK""
}",// EXPECTED_REACHABLE_NODES: 1344,4f27
fun a(),": String {
        return ""OK""
    }","// TARGET_BACKEND: JVM

// WITH_STDLIB",9ea5
fun box(),": String {
    return A.Z.p
}",,4f27
fun box(),= (,,4f27
"fun createAllDiagnosticComponents(
        session: FirSession,
        reporter: DiagnosticReporter,
        mppKind: MppCheckerKind,
    )",": DiagnosticCollectorComponents {
        val regularComponents = buildList {
            add(DeclarationCheckersDiagnosticComponent(session, reporter, mppKind))
            add(ExpressionCheckersDiagnosticComponent(session, reporter, mppKind))
            add(TypeCheckersDiagnosticComponent(session, reporter, mppKind))
            add(ControlFlowAnalysisDiagnosticComponent(session, reporter, mppKind))
            if (mppKind == MppCheckerKind.Common) {
                add(ErrorNodeDiagnosticCollectorComponent(session, reporter))
                add(LanguageVersionSettingsDiagnosticComponent(session, reporter))
            }",,6e9e
"fun create(
        session: FirSession,
        scopeSession: ScopeSession,
        mppKind: MppCheckerKind
    )",": SimpleDiagnosticsCollector {
        return SimpleDiagnosticsCollector(session, scopeSession) { reporter ->
            createAllDiagnosticComponents(session, reporter, mppKind)
        }",,927e
fun funInCompanion(),{},// !LANGUAGE: +InlineClasses,a4d5
fun inInlineClass(),{},,9473
fun getLightClass(classOrObject: KtClassOrObject),": KtLightClass?

    abstract fun getLightClassForScript(script: KtScript): KtLightClass?

    abstract fun getFakeLightClass(classOrObject: KtClassOrObject): KtFakeLightClass

    abstract fun getLightFacade(file: KtFile): KtLightClassForFacade?

    abstract fun createFacadeForSyntheticFile(file: KtFile): KtLightClassForFacade

    abstract fun getFacadeClasses(facadeFqName: FqName, scope: GlobalSearchScope): Collection<KtLightClassForFacade>

    // Returns only immediately declared classes/objects, package classes are not included (they have no declarations)
    abstract fun findClassOrObjectDeclarationsInPackage(packageFqName: FqName, searchScope: GlobalSearchScope): Collection<KtClassOrObject>

    /*
    * Finds files whose package declaration is exactly {@code fqName}",,f91f
"fun findFilesForPackage(packageFqName: FqName, searchScope: GlobalSearchScope)",": Collection<KtFile>

    abstract fun findFilesForFacade(facadeFqName: FqName, searchScope: GlobalSearchScope): Collection<KtFile>

    abstract fun findFilesForFacadeByPackage(packageFqName: FqName, searchScope: GlobalSearchScope): Collection<KtFile>

    abstract fun findFilesForScript(scriptFqName: FqName, searchScope: GlobalSearchScope): Collection<KtScript>

    abstract fun findClassOrObjectDeclarations(fqName: FqName, searchScope: GlobalSearchScope): Collection<KtClassOrObject>

    abstract fun packageExists(fqName: FqName, scope: GlobalSearchScope): Boolean

    abstract fun getSubPackages(fqn: FqName, scope: GlobalSearchScope): Collection<FqName>

    abstract fun getScriptClasses(scriptFqName: FqName, scope: GlobalSearchScope): Collection<PsiClass>

    abstract fun getKotlinInternalClasses(fqName: FqName, scope: GlobalSearchScope): Collection<PsiClass>

    abstract fun getFacadeClassesInPackage(packageFqName: FqName, scope: GlobalSearchScope): Collection<KtLightClassForFacade>

    abstract fun getFacadeNames(packageFqName: FqName, scope: GlobalSearchScope): Collection<String>

    companion object {
        @JvmStatic
        fun getInstance(project: Project): KotlinAsJavaSupport {
            return project.getService( KotlinAsJavaSupport::class.java)
        }",,6f6f
"fun foo(a: A, ka: KA)","{
    ka.contains("""")
    ka.contains(<!CONSTANT_EXPECTED_TYPE_MISMATCH!>1<!>)
    """" in ka
    <!CONSTANT_EXPECTED_TYPE_MISMATCH!>1<!> in ka
}","// !DIAGNOSTICS: -UNUSED_PARAMETER -UNUSED_VARIABLE -PARAMETER_NAME_CHANGED_ON_OVERRIDE
// SCOPE_DUMP: KA:contains

// FILE: A.java",ab44
fun foo(),<!> = 2,// FIR_IDENTICAL,519f
fun bar(),<!> = 4,,66c3
fun test(),"{
         fun Foo.bar() {}",,fe98
fun bar(),": Any
}

interface IFoo : IBar {
    fun foo(): Any
    override : X<String>
}","// WITH_STDLIB
// WORKS_WHEN_VALUE_CLASS
// LANGUAGE: +ValueClasses, +GenericInlineClassParameter",66c3
fun foo(),: X<String> = X,,519f
fun bar(),: X<String> = X,,66c3
fun box(),": String {
    val t: IFoo = TestX()
    val tFoo = t.foo()
    if (tFoo !is X<*>) {
        throw AssertionError(""X expected: $tFoo"")
    }",,4f27
"fun <R, D> accept(visitor: FirVisitor<R, D>, data: D)",": R =
        v",,06e4
No signature found,"fun <E : FirElement, D> transform(transformer: FirTransformer<D>, data: D): E =
        t",,6e1f
fun usa<caret>ge(j: JavaDeclaration),= j,// FILE: usage.kt,b581
"fun addConvention(subject: Any, name: String, plugin: Any)","{
        (subject as HasConvention).convention.plugins[name] = plugin
    }",,671d
fun getInstance(),: CompatibilityConventionRegistrar = C,,da61
No signature found,"fun <T : JsNode> replaceNames(node: T, replaceMap: Map<JsName, JsExpression>): T {
    return if (replaceMap.isEmpty()) node else NameReplacingVisitor(replaceMap).accept(node)!!
}",,6e1f
No signature found,"fun <T : JsNode> replaceThisReference(node: T, replacement: JsExpression) {
    ThisReplacingVisitor(replacement).accept(node)
}",,6e1f
No signature found,"fun foo(a: A, block: (A) -> String): String = b",// FILE: test.kt,6e1f
fun box(),"{
    foo(A(""O"", 123))
    {
            (
                x
                    ,
                y
            )
        ->
        x + y
    }",,4f27
fun <T> magic(),: T = n,// !CHECK_TYPE,dd70
fun <E> foo(),"=
        o",,8931
fun bar(),"{
        x = <!ASSIGNMENT_TYPE_MISMATCH!>y<!>
        x = foo<CharSequence>()
        y = foo<String>()

        x.prop.checkType { _<CharSequence>() }",,66c3
fun foo(x: String),": String
}

class BaseImpl(val s: String) : Base {
    override : String = ""Base: ${s}",// EXPECTED_REACHABLE_NODES: 1293,f5be
fun newBase(s: String),: Base = B,,a3ce
fun box(),": String {
    assertEquals(""Base: test:!!"", Derived().foo(""!!""), ""delegation by function expression"")

    return ""OK""
}",,4f27
fun foo(),": String {
    var s: String?
    s = null
    s?.length
    s<!UNSAFE_CALL!>.<!>length
    if (<!SENSELESS_COMPARISON!>s == null<!>) return s!!
    var t: String? = ""y""
    if (t == null) t = ""x""
    var x: Int? = null
    if (x == null) <!ASSIGNMENT_TYPE_MISMATCH!>x += null<!>
    return t + s
}",,519f
No signature found,fun String?.gav() {},,6e1f
No signature found,"fun bar(s: String?) {
    if (s != null) return
    s.gav()
    s <!USELESS_CAST!>as? String<!>
    s as String?
    s <!CAST_NEVER_SUCCEEDS!>as<!> String
}",,6e1f
fun box(),": String {
    val f = A::class.constructors.single()
    val parameters = f.parameters

    f.callBy(mapOf(
            *((1..70)).map { i -> parameters[i - 1] to i }","// TARGET_BACKEND: JVM
// WITH_REFLECT",4f27
fun box(),": String {
    var sum = 0u
    for (el in arrayOf(1u, 2u, 3u)) {
        sum += el
    }",// WITH_STDLIB,4f27
fun checkOverflow(value: String),= i,,9b68
fun foo(),"{
    var a = 0
    <!ASSIGNED_VALUE_IS_NEVER_READ!>a<!> += 10 + a
}",,519f
No signature found,"fun f(e: Exception, e2: java.lang.Exception, e3: kotlin.<!API_NOT_AVAILABLE!>Exception<!>) {
}","// !LANGUAGE: +TypeAliases
// !API_VERSION: 1.0
// FILE: test.kt",6e1f
No signature found,"fun getValue(thisRef: Any?, property: KProperty<*>): Int {
        return value
    }","// LANGUAGE: +MultiPlatformProjects
// WITH_STDLIB

// MODULE: common
// FILE: common.kt",6e1f
No signature found,"fun setValue(thisRef: Any?, property: KProperty<*>, value: Int) {
    }",,6e1f
fun foo(),{ a = 42 },,519f
fun foo(),{},,519f
fun bar11(foo: Foo),"{
        foos.add(Foo(HashMap(foo.attributes))) // foo.attributes is unresolved but not marked
    }","// FIR_IDENTICAL
//KT-3344 InternalError in compiler when type arguments are not specified",9b33
fun typed(),: T = a,"// WITH_STDLIB
// WORKS_WHEN_VALUE_CLASS
// LANGUAGE: +ValueClasses",a6e7
fun <T> takeResult(r: Result<T>),{},,b473
fun takeResultOfInt(r: Result<Int>),{},,5c20
fun takeInt(i: Int),{},,7c7d
fun box(),": String {
    val asInt = Result<Int>(19)
    val asString = Result<String>(""sample"")
    val asResult = Result<Result<Int>>(asInt)
    val asResultCtor = Result<Result<Int>>(Result<Int>(10))

    takeResult(asInt)
    takeResult(asString)
    takeResult(asResult)
    takeResult(asResultCtor)

    takeResultOfInt(asInt)
    takeInt(asInt.typed())

    val unboxedInt = asInt.typed()
    val unboxedString = asString.typed()
    val unboxedResult = asResult.typed()
    val unboxedAsCtor = asResultCtor.typed()

    if (unboxedInt != 19) return ""fail 1""
    if (unboxedString != ""sample"") return ""fail 2""
    if (unboxedResult.typed() != 19) return ""fail 3""
    if (unboxedAsCtor.typed() != 10) return ""fail 4""

    if (asResult.typed().typed() != 19) return ""fail 5""
    if (asResultCtor.typed().typed() != 10) return ""fail 6""

    return ""OK""
}",,4f27
No signature found,"fun changeFile(
        fileName: String,
        transform: (String) -> String,
    ) {
        val file = module.sourcesDirectory.resolve(fileName)
        writeFile(fileName, transform(file.readText()))
    }",,6e1f
"fun replaceFileWithVersion(fileName: String, version: String)","{
        val file = module.sourcesDirectory.resolve(fileName)
        val chosenRevision = module.sourcesDirectory.resolve(""$fileName.$version"")
        Files.delete(file)
        Files.copy(chosenRevision, file)
        addToModifiedFiles(file)
    }",,6435
fun deleteFile(fileName: String),"{
        val file = module.sourcesDirectory.resolve(fileName)
        file.deleteExisting()
        addToRemovedFiles(file)
    }",,25d5
"fun createFile(fileName: String, content: String)","{
        writeFile(fileName, content)
    }",,2271
"fun createPredefinedFile(fileName: String, version: String)","{
        val file = module.sourcesDirectory.resolve(fileName)
        val chosenRevision = module.sourcesDirectory.resolve(""$fileName.$version"")
        Files.copy(chosenRevision, file)
        addToModifiedFiles(file)
    }",,0b47
"fun writeFile(fileName: String, newContent: String)","{
        val file = module.sourcesDirectory.resolve(fileName)
        file.writeText(newContent)
        addToModifiedFiles(file)
    }",,478a
fun addToModifiedFiles(file: Path),"{
        sourcesChanges = SourcesChanges.Known(
            modifiedFiles = sourcesChanges.modifiedFiles + file.toFile(),
            removedFiles = sourcesChanges.removedFiles,
        )
    }",,eb95
fun addToRemovedFiles(file: Path),"{
        sourcesChanges = SourcesChanges.Known(
            modifiedFiles = sourcesChanges.modifiedFiles,
            removedFiles = sourcesChanges.removedFiles + file.toFile(),
        )
    }",,bd96
No signature found,"fun compile(
        forceOutput: LogLevel?,
        assertions: context(Module, ScenarioModule) CompilationOutcome.() -> Unit,
    ) {
        module.compileIncrementally(
            sourcesChanges,
            strategyConfig,
            forceOutput,
            compilationConfigAction = { compilationOptionsModifier?.invoke(it) }",,6e1f
No signature found,"fun module(
        moduleName: String,
        dependencies: List<ScenarioModule>,
        additionalCompilationArguments: List<String>,
        compilationOptionsModifier: ((JvmCompilationConfiguration) -> Unit)?,
        incrementalCompilationOptionsModifier: ((IncrementalJvmCompilationConfiguration<*>) -> Unit)?,
    ): ScenarioModule {
        val transformedDependencies = dependencies.map { (it as ScenarioModuleImpl).module }",,6e1f
No signature found,"fun BaseCompilationTest.scenario(strategyConfig: CompilerExecutionStrategyConfiguration, action: Scenario.() -> Unit) {
    action(ScenarioDsl(Project(strategyConfig, workingDirectory), strategyConfig))
}",,6e1f
fun tenUInt(),= 1,"// KJS_WITH_FULL_RUNTIME
// EXPECTED_REACHABLE_NODES: 1625
// MODULE: lib
// FILE: lib.kt",567c
fun tenULong(),= 1,,4a48
fun box(),": String {

    if (tenUInt() != 10U) return ""fail 1""

    if (tenULong() != 10UL) return ""fail 2""

    return ""OK""
}",,4f27
"fun getSamTypeForValueParameter(
        valueParameter: ValueParameterDescriptor,
        carefulApproximationOfContravariantProjection: Boolean,
    )",": KotlinType? {
        val singleArgumentType: KotlinType
        val originalSingleArgumentType: KotlinType?
        val varargElementType = valueParameter.varargElementType
        if (varargElementType != null) {
            singleArgumentType = varargElementType
            originalSingleArgumentType = valueParameter.original.varargElementType
            assert(originalSingleArgumentType != null) {
                ""Value parameter and original value parameter have inconsistent varargs: "" +
                        valueParameter + ""; "" + valueParameter.original
            }",,1c07
No signature found,"fun KotlinType.removeExternalProjections(carefulApproximationOfContravariantProjection: Boolean): KotlinType? {
        val newArguments = arguments.mapIndexed { i, argument ->
            if (carefulApproximationOfContravariantProjection && argument.projectionKind == Variance.IN_VARIANCE) {
                // Just erasing `in` from the type projection would lead to an incorrect type for the SAM adapter,
                // and error at runtime on JVM if invokedynamic + LambdaMetafactory is used, see KT-51868.
                // So we do it ""carefully"". If we have a class `A<T>` and a method that takes e.g. `A<in String>`, we check
                // if `T` has a non-trivial upper bound. If it has one, we don't attempt to perform a SAM conversion at all.
                // Otherwise we erase the type to `Any?`, so `A<in String>` becomes `A<Any?>`, which is the computed SAM type.
                val parameter = constructor.parameters.getOrNull(i) ?: return null
                val upperBound = parameter.upperBounds.singleOrNull()?.upperIfFlexible() ?: return null
                if (!upperBound.isNullableAny()) return null

                upperBound.asTypeProjection()
            }",,6e1f
fun isSamType(type: KotlinType),": Boolean {
        val descriptor = type.constructor.declarationDescriptor
        return descriptor is ClassDescriptor && descriptor.isFun
    }",,e2f3
fun create(originalType: KotlinType),": SamType? {
        return if (isSamType(originalType)) SamType(originalType) else null
    }",,58de
fun main(args: Array<String>),"{
    print(args[0]);
}",// MAIN_ARGS: [Hello_world!],5b61
No signature found,"fun getValue(thisRef: Any?, property: <!UNRESOLVED_REFERENCE!>KProperty<!><*>): Any? =
    i","// FIR_IDENTICAL
// !LANGUAGE: +ProhibitSmartcastsOnLocalDelegatedProperty",6e1f
fun failsWithClassCastException(),"{
    val sometimesNotInt: Any? by AlternatingDelegate()

    if (sometimesNotInt is Int) {
        <!SMARTCAST_IMPOSSIBLE!>sometimesNotInt<!>.inc()
    }",,3bc1
fun processKarmaStackTrace(),"{
        val stackTrace = """"""AssertionError: Expected value to be true.
            at AssertionError_init_0 (/Users/user/repos/check-kotlin-js-test/build/js/packages_imported/kotlin/1.3.0-SNAPSHOT/kotlin/exceptions.kt:102:36 <- /Users/user/repos/check-kotlin-js-test/build/js/packages/check-kotlin-js-test-test/adapter.js:33390:22)
            at DefaultJsAsserter.failWithMessage_0 (/Users/user/repos/check-kotlin-js-test/build/js/packages_imported/kotlin-test/1.3.0-SNAPSHOT/src/main/kotlin/kotlin/test/DefaultJsAsserter.kt:80:18 <- /Users/user/repos/check-kotlin-js-test/build/js/packages/check-kotlin-js-test-test/adapter.js:1569:13)
            at DefaultJsAsserter.assertTrue_o10pc4${'$'}",,3042
fun processWebpackName(),"{
        val processedLine = processWebpackName(
            ""at MyTest../kotlin/check-js-test-test.js.MyTest.foo (/src/test/kotlin/MyTest.kt:7:8)""
        )
        assertEquals(
            ""at MyTest.foo (/src/test/kotlin/MyTest.kt:7:8)"",
            processedLine
        )
    }",,52bc
fun notProcessNotWebpackName(),"{
        val line = ""at DefaultJsAsserter.assertTrue(/src/main/kotlin/kotlin/test/DefaultJsAsserter.kt:67)""
        assertEquals(
            line,
            processWebpackName(line)
        )
    }",,d95d
fun notProcessShortPah(),"{
        val line = ""at Foo.bar(../Foo.kt)""
        assertEquals(
            line,
            processWebpackName(line)
        )
    }",,86ed
fun notProcessMessage(),"{
        val line = ""AssertionError: Expected value to be true.""
        assertEquals(
            line,
            processWebpackName(line)
        )
    }",,6a28
"fun string(startOffset: Int, endOffset: Int, type: IrType, value: String)",": IrConstImpl<String> =
            I",,f3b5
"fun int(startOffset: Int, endOffset: Int, type: IrType, value: Int)",": IrConstImpl<Int> =
            I",,3594
"fun constNull(startOffset: Int, endOffset: Int, type: IrType)",": IrConstImpl<Nothing?> =
            I",,ff25
"fun boolean(startOffset: Int, endOffset: Int, type: IrType, value: Boolean)",": IrConstImpl<Boolean> =
            I",,ce74
"fun constTrue(startOffset: Int, endOffset: Int, type: IrType)",": IrConstImpl<Boolean> =
            b",,3327
"fun constFalse(startOffset: Int, endOffset: Int, type: IrType)",": IrConstImpl<Boolean> =
            b",,ec91
"fun long(startOffset: Int, endOffset: Int, type: IrType, value: Long)",": IrConstImpl<Long> =
            I",,0f1d
"fun float(startOffset: Int, endOffset: Int, type: IrType, value: Float)",": IrConstImpl<Float> =
            I",,ef67
"fun double(startOffset: Int, endOffset: Int, type: IrType, value: Double)",": IrConstImpl<Double> =
            I",,ee07
"fun char(startOffset: Int, endOffset: Int, type: IrType, value: Char)",": IrConstImpl<Char> =
            I",,bf7b
"fun byte(startOffset: Int, endOffset: Int, type: IrType, value: Byte)",": IrConstImpl<Byte> =
            I",,b88d
"fun short(startOffset: Int, endOffset: Int, type: IrType, value: Short)",": IrConstImpl<Short> =
            I",,3f03
"fun defaultValueForType(startOffset: Int, endOffset: Int, type: IrType)",": IrConstImpl<*> {
            if (type.isMarkedNullable()) return constNull(startOffset, endOffset, type)
            return when (type.getPrimitiveType()) {
                PrimitiveType.BOOLEAN -> boolean(startOffset, endOffset, type, false)
                PrimitiveType.CHAR -> char(startOffset, endOffset, type, 0.toChar())
                PrimitiveType.BYTE -> byte(startOffset, endOffset, type, 0)
                PrimitiveType.SHORT -> short(startOffset, endOffset, type, 0)
                PrimitiveType.INT -> int(startOffset, endOffset, type, 0)
                PrimitiveType.FLOAT -> float(startOffset, endOffset, type, 0.0F)
                PrimitiveType.LONG -> long(startOffset, endOffset, type, 0)
                PrimitiveType.DOUBLE -> double(startOffset, endOffset, type, 0.0)
                else -> constNull(startOffset, endOffset, type.makeNullable())
            }",,2b4e
No signature found,"fun <T> IrConst<T>.copyWithOffsets(startOffset: Int, endOffset: Int) =
    I",,6e1f
"fun <T> IrConstImpl(
    startOffset: Int,
    endOffset: Int,
    type: IrType,
    kind: IrConstKind<T>,
    value: T,
)",= I,,9e17
fun breakContinueInWhen(i: Int),"{
    for (y in 0..10) {
        when(i) {
            0 -> <!BREAK_OR_CONTINUE_IN_WHEN!>continue<!>
            1 -> <!BREAK_OR_CONTINUE_IN_WHEN!>break<!>
            2 -> {
                for(z in 0..10) {
                    break
                }",// !LANGUAGE: -AllowBreakAndContinueInsideWhen,fb04
"fun breakContinueInWhenWithWhile(i: Int, j: Int)","{
    while (i > 0) {
        when (i) {
            0 -> <!BREAK_OR_CONTINUE_IN_WHEN!>continue<!>
            1 -> <!BREAK_OR_CONTINUE_IN_WHEN!>break<!>
            2 -> {
                while (j > 0) {
                    break
                }",,615b
"fun breakContinueInWhenWithDoWhile(i: Int, j: Int)","{
    do {
        when (i) {
            0 -> <!BREAK_OR_CONTINUE_IN_WHEN!>continue<!>
            1 -> <!BREAK_OR_CONTINUE_IN_WHEN!>break<!>
            2 -> {
                do {
                    if (j == 5) break
                    if (j == 10) continue
                }",,ae14
fun labeledBreakContinue(i: Int),"{
    outer@ for (y in 0..10) {
        when (i) {
            0 -> continue@outer
            1 -> break@outer
        }",,e0d7
fun k(),"= ""","// Fails on native when run with `-Pkotlin.internal.native.test.cacheMode=STATIC_EVERYWHERE`.
// Looks like the call to `k` fails as `k` is not exported from the lib module.
// IGNORE_NATIVE: cacheMode=STATIC_EVERYWHERE
// IGNORE_NATIVE: cacheMode=STATIC_PER_FILE_EVERYWHERE
// IGNORE_NATIVE: cacheMode=STATIC_USE_HEADERS_EVERYWHERE
// MODULE: lib
// FILE: Z.kt",20fe
fun box(),= Z,,4f27
fun Inner(x: String),{},"// !DIAGNOSTICS: -UNUSED_PARAMETER
// SKIP_TXT
// FILE: Outer.kt",e120
fun baz(),"{
            // Diagnostic here could be better (why can't I call the constructor above?)
            Inner<!NO_VALUE_FOR_PARAMETER!>()<!>
            Inner(<!CONSTANT_EXPECTED_TYPE_MISMATCH!>1<!>)
            Inner("""")
        }",,b22f
fun foo(),"{
    Outer.Inner<!NO_VALUE_FOR_PARAMETER!>()<!>
    Outer.Inner(<!CONSTANT_EXPECTED_TYPE_MISMATCH!>1<!>)
    Outer.Inner("""")
}",,519f
fun bar(),"{
    Inner<!NO_VALUE_FOR_PARAMETER!>()<!>
    Inner(<!CONSTANT_EXPECTED_TYPE_MISMATCH!>1<!>)
    Inner("""")

    with(Outer()) {
        Inner()
        Inner(1)
        Inner("""")
    }",// FILE: imported.kt,66c3
fun incI(),"{
    i++
}","// EXPECTED_REACHABLE_NODES: 1289
// http://youtrack.jetbrains.com/issue/KT-4225
// Compiler to JavaScript produces semantically wrong code",94f1
fun incJ(a: Any),"{
    j++
}",,263d
No signature found,fun foo(f: () -> Unit) = f,,6e1f
fun box(),": String {
    val bar = 1

    val f = foo {
        incI()
        incJ(if (bar == 2) ""A"" else ""B"")
    }",,4f27
No signature found,"fun test(expected: String, initCode: String, getResult: () -> String) {
    buffer = """"

    eval(""kotlin.kotlin.io.output = new $initCode"")

    print(""Hello"")
    print("", World"")
    print(""\n^^\n^^\n^^"")
    println()
    println(""***"")
    print(""##"")
    print(null)
    print(23)
    print(""##"")
    println()

    val actual = getResult()

    assertEquals(expected, actual, initCode)
}","// DONT_TARGET_EXACT_BACKEND: WASM
// WASM_MUTE_REASON: UNSUPPORTED_JS_INTEROP
// IGNORE_BACKEND: JS_IR
// IGNORE_BACKEND: JS_IR_ES6
// KJS_WITH_FULL_RUNTIME
// SKIP_MINIFICATION
// This test uses eval
// SKIP_NODE_JS",6e1f
fun box(),": String {
    test(EXPECTED, ""kotlin.kotlin.io.NodeJsOutput(outputStream)"") {
        buffer
    }",,4f27
fun box(),": String {
    return Foo.FOO.value
}","// !LANGUAGE: +JvmFieldInInterface +NestedClassesInAnnotations
// TARGET_BACKEND: JVM

// WITH_STDLIB
// FILE: Foo.kt",4f27
No signature found,fun foo(t: <!UNRESOLVED_REFERENCE!>T<!>) = <,,6e1f
fun foo(t: T),= t,,6c6b
fun foo(t: T),= t,,6c6b
"fun consumerApiUsage(project: Project, platformType: KotlinPlatformType)",= p,,f4eb
fun consumerApiUsage(target: KotlinTarget),": Usage =
        c",,81ed
"fun consumerRuntimeUsage(project: Project, platformType: KotlinPlatformType)",= p,,33e2
fun consumerRuntimeUsage(target: KotlinTarget),= c,,80be
"fun producerApiUsage(project: Project, platformType: KotlinPlatformType)",= p,,ed99
fun producerApiUsage(target: KotlinTarget),= p,,0f51
"fun producerRuntimeUsage(project: Project, platformType: KotlinPlatformType)",= p,,472c
fun producerRuntimeUsage(target: KotlinTarget),= p,,cd03
fun execute(details: CompatibilityCheckDetails<Usage>),= w,,4a6b
fun execute(details: CompatibilityCheckDetails<Usage>),= w,,4a6b
fun execute(details: CompatibilityCheckDetails<Usage>),= w,,4a6b
fun execute(details: CompatibilityCheckDetails<Usage>),= w,,4a6b
No signature found,fun execute(details: MultipleCandidatesDetails<Usage?>) = d,,6e1f
fun execute(details: MultipleCandidatesDetails<Usage>),= d,,1448
No signature found,fun execute(details: MultipleCandidatesDetails<Usage?>) = w,,6e1f
No signature found,"fun MultipleCandidatesDetails<Usage?>.chooseCandidateByName(name: String?): Unit {
        closestMatch(candidateValues.single { it?.name == name }",,6e1f
"fun setupAttributesMatchingStrategy(
        attributesSchema: AttributesSchema,
        isKotlinGranularMetadata: Boolean,
        isKotlinResourcesCompatibilityRuleEnabled: Boolean
    )","{
        attributesSchema.attribute(USAGE_ATTRIBUTE) { strategy ->
            strategy.compatibilityRules.add(KotlinJavaRuntimeJarsCompatibility::class.java)
            strategy.disambiguationRules.add(KotlinUsagesDisambiguation::class.java)

            strategy.compatibilityRules.add(KotlinCinteropCompatibility::class.java)
            strategy.disambiguationRules.add(KotlinCinteropDisambiguation::class.java)

            if (isKotlinGranularMetadata) {
                strategy.compatibilityRules.add(KotlinMetadataCompatibility::class.java)
                strategy.disambiguationRules.add(KotlinMetadataDisambiguation::class.java)
            }",,6b44
fun compute(),": String {
    var result = """"
    for (x in listOf(""A"", ""B"")) {
        try {
            val y = ""y""
            result += y
            return result
        }","// WITH_STDLIB
// FILE: test.kt",cd3b
fun box(),"{
    compute()
}",,4f27
fun createS64(),": S64 {
    val s2 = S2(0, 0)
    val s4 = S4(s2, s2)
    val s8 = S8(s4, s4)
    val s16 = S16(s8, s8)
    val s32 = S32(s16, s16)
    return S64(s32, s32)
}","// TARGET_BACKEND: JVM_IR
// WITH_REFLECT
// LANGUAGE: +ValueClasses",ce7e
fun box(),": String {
    val copyFun = D::class.memberFunctions.single { it.name == ""copy"" }",,4f27
fun test(),"{
        A1()
        A2
    }",,fe98
fun testAccess(),"{
    E1
    <!INVISIBLE_REFERENCE!>NestedEntry<!>
    <!INVISIBLE_REFERENCE!>A1<!>()
    <!INVISIBLE_REFERENCE!>A2<!>
}",,ffc5
fun box(),"{
    val a = A()
    val b = B(4)
    val c = C()
    val foo = G(Int::class)
}","// FIR_IDENTICAL
// WITH_STDLIB
// SKIP_TXT
// !LANGUAGE: +InstantiationOfAnnotationClasses",4f27
fun buildKotlinToolingMetadata(),= p,,8544
fun taskNameForKotlinModule(moduleName: String),: String = l,,7a0a
fun buildKotlinToolingMetadata(),": KotlinToolingMetadata

    @TaskAction
    internal fun createToolingMetadataFile() {
        /* Ensure output directory exists and is empty */
        outputDirectory.mkdirs()
        outputDirectory.listFiles().orEmpty().forEach { file -> file.deleteRecursively() }",,8544
No signature found,"fun KotlinProjectExtension.getKotlinToolingMetadata(): KotlinToolingMetadata {
    return KotlinToolingMetadata(
        schemaVersion = KotlinToolingMetadata.currentSchemaVersion,
        buildSystem = ""Gradle"",
        buildSystemVersion = project.gradle.gradleVersion,
        buildPlugin = project.plugins.withType(KotlinBasePluginWrapper::class.java).joinToString("";"") { it.javaClass.canonicalName }",,6e1f
No signature found,"fun KotlinProjectExtension.buildProjectSettings(): KotlinToolingMetadata.ProjectSettings {
    return KotlinToolingMetadata.ProjectSettings(
        isHmppEnabled = project.isKotlinGranularMetadataEnabled,
        isCompatibilityMetadataVariantEnabled = project.isCompatibilityMetadataVariantEnabled,
        isKPMEnabled = false
    )
}",,6e1f
No signature found,"fun KotlinProjectExtension.buildProjectTargets(): List<KotlinToolingMetadata.ProjectTargetMetadata> {
    val targets = when (this) {
        is KotlinMultiplatformExtension -> this.targets.toSet()
        is KotlinSingleTargetExtension<*> -> setOf(this.target)
        else -> emptySet()
    }",,6e1f
fun buildTargetMetadata(target: KotlinTarget),": KotlinToolingMetadata.ProjectTargetMetadata {
    return KotlinToolingMetadata.ProjectTargetMetadata(
        target = buildTargetString(target),
        platformType = target.platformType.name,
        extras = buildTargetMetadataExtras(target)
    )
}",,9551
fun buildTargetString(target: KotlinTarget),": String {
    return if (target is GeneratedSubclass) {
        return target.publicType().canonicalName
    }",,7bf2
fun buildTargetMetadataExtras(target: KotlinTarget),": KotlinToolingMetadata.ProjectTargetMetadata.Extras {
    return KotlinToolingMetadata.ProjectTargetMetadata.Extras(
        jvm = buildJvmExtrasOrNull(target),
        android = buildAndroidExtrasOrNull(target),
        js = buildJsExtrasOrNull(target),
        native = buildNativeExtrasOrNull(target)
    )
}",,c8d5
fun buildJvmExtrasOrNull(target: KotlinTarget),": KotlinToolingMetadata.ProjectTargetMetadata.JvmExtras? {
    if (target !is KotlinJvmTarget) return null
    @Suppress(""DEPRECATION"")
    return KotlinToolingMetadata.ProjectTargetMetadata.JvmExtras(
        withJavaEnabled = target.withJavaEnabled,
        jvmTarget = target.compilations.findByName(KotlinCompilation.MAIN_COMPILATION_NAME)
            ?.compilerOptions?.options?.jvmTarget?.orNull?.target
    )
}",,d77d
fun buildAndroidExtrasOrNull(target: KotlinTarget),": KotlinToolingMetadata.ProjectTargetMetadata.AndroidExtras? {
    if (target !is KotlinAndroidTarget) return null
    val androidExtension = target.project.extensions.findByType(BaseExtension::class.java)
    return KotlinToolingMetadata.ProjectTargetMetadata.AndroidExtras(
        sourceCompatibility = androidExtension?.compileOptions?.sourceCompatibility.toString(),
        targetCompatibility = androidExtension?.compileOptions?.targetCompatibility.toString()
    )
}",,444e
fun buildJsExtrasOrNull(target: KotlinTarget),": KotlinToolingMetadata.ProjectTargetMetadata.JsExtras? {
    if (target !is KotlinJsSubTargetContainerDsl) return null
    return KotlinToolingMetadata.ProjectTargetMetadata.JsExtras(
        isBrowserConfigured = target.isBrowserConfigured,
        isNodejsConfigured = target.isNodejsConfigured
    )
}",,7c97
fun buildNativeExtrasOrNull(target: KotlinTarget),": KotlinToolingMetadata.ProjectTargetMetadata.NativeExtras? {
    if (target !is KotlinNativeTarget) return null
    return KotlinToolingMetadata.ProjectTargetMetadata.NativeExtras(
        konanTarget = target.konanTarget.name,
        konanVersion = target.project.konanVersion,
        konanAbiVersion = KotlinAbiVersion.CURRENT.toString()
    )
}",,5cf4
fun copy(),": FirSyntheticPropertySymbol

    @SymbolInternals
    val syntheticProperty: FirSyntheticProperty
        get() = f",,5070
fun id(),= t,// !DIAGNOSTICS: -UNUSED_PARAMETER -UNUSED_VARIABLE,9d99
fun foobar(x: Any),{},,4286
No signature found,fun foo(block: () -> E) {},,6e1f
No signature found,fun bar(block: () -> Out<E>) {},,6e1f
"fun test(a: A<out CharSequence>, z: Out<CharSequence>)","{
    a.foo {
        val x: String = <!CONSTANT_EXPECTED_TYPE_MISMATCH!>1<!> // Should be no TYPE_MISMATCH_DUE_TO_TYPE_PROJECTIONS
        <!TYPE_MISMATCH, TYPE_MISMATCH!>""""<!>
    }",,8143
fun foo(),"}

<!WRONG_MODIFIER_TARGET!>inline<!> external enum class <!ENUM_CLASS_IN_EXTERNAL_DECLARATION_WARNING, WRONG_EXTERNAL_DECLARATION!>E<!> {
    A
}","// FIR_IDENTICAL
// !LANGUAGE: +InlineClasses, -JvmInlineValueClasses, +JsExternalPropertyParameters
// !DIAGNOSTICS: +ENUM_CLASS_IN_EXTERNAL_DECLARATION_WARNING",519f
"fun check(declaration: FirDeclaration, context: CheckerContext, reporter: DiagnosticReporter)","{
        if (declaration !is FirMemberDeclaration) return
        if (declaration is FirConstructor || declaration is FirTypeAlias) return

        val processed = mutableSetOf<Name>()
        val cycles = mutableSetOf<Name>()
        val graph = declaration.typeParameters.associate { param ->
            param.symbol.name to param.symbol.resolvedBounds.flatMap { extractTypeParamNames(it) }",,ee93
"fun findCycles(
            node: Name
        )","{
            if (processed.add(node)) {
                path.add(node)
                graphFunc(node).forEach { nextNode ->
                    findCycles(nextNode)
                }",,3b9e
No signature found,fun FirTypeParameterSymbol.originalBounds() = r,,6e1f
No signature found,"fun FirTypeRef.unwrapBound(): List<FirTypeRef> =
        i",,6e1f
fun extractTypeParamNames(ref: FirTypeRef),": Set<Name> =
        r",,18ad
fun extractTypeParamName(type: ConeKotlinType),": Name? =
        (",,e930
fun main(),"{
    iFlow { emit(1) }","// FIR_IDENTICAL
// !DIAGNOSTICS: -UNUSED_PARAMETER
// !OPT_IN: kotlin.RequiresOptIn",d987
No signature found,fun <K> iFlow(block: suspend iFlowCollector<in K>.() -> Unit): iFlow<K> = T,,6e1f
No signature found,fun foo(f: () -> Int) {},// !DIAGNOSTICS: -UNUSED_PARAMETER,6e1f
No signature found,fun foo(f: () -> Unit) {},,6e1f
No signature found,"fun test(f: () -> Int) {
            <!DEBUG_INFO_CALL(""fqName: Test1.foo; typeCall: function"")!><!COMPATIBILITY_WARNING!>foo<!>(f)<!>
        }",,6e1f
fun run(),"fun interface KRunnable {
        
    }",,354f
No signature found,fun foo(f: () -> Unit) {},,6e1f
fun foo(f: KRunnable),{},,a9ca
No signature found,"fun test(f: () -> Int) {
            <!DEBUG_INFO_CALL(""fqName: Test2.Scope1.foo; typeCall: function"")!>foo(<!UNSUPPORTED_FEATURE!>f<!>)<!>
        }",,6e1f
No signature found,fun foo(f: () -> Int) = 1,,6e1f
No signature found,"fun foo(f: () -> Unit) = """,,6e1f
No signature found,"fun test(f: () -> Int) {
        val result = foo(f)
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Int"")!>result<!>
    }",,6e1f
"fun createPartialLinkageSupportForLinker(
    partialLinkageConfig: PartialLinkageConfig,
    allowErrorTypes: Boolean,
    builtIns: IrBuiltIns,
    messageLogger: IrMessageLogger
)",: PartialLinkageSupportForLinker = i,,33ac
fun shouldBeSkipped(declaration: IrDeclaration),= p,,88d8
fun exploreClassifiers(fakeOverrideBuilder: IrLinkerFakeOverrideProvider),"{
        val entries = fakeOverrideBuilder.fakeOverrideCandidates
        if (entries.isEmpty()) return

        val toExclude = buildSet {
            for (clazz in entries.keys) {
                if (classifierExplorer.exploreSymbol(clazz.symbol) != null) {
                    this += clazz
                }",,602f
fun exploreClassifiersInInlineLazyIrFunction(function: IrFunction),"{
        classifierExplorer.exploreIrElement(function)
    }",,fe91
No signature found,"fun generateStubsAndPatchUsages(symbolTable: SymbolTable, roots: () -> Sequence<IrModuleFragment>) {
        generateStubsAndPatchUsagesInternal(symbolTable) { patcher.patchModuleFragments(roots()) }",,6e1f
"fun generateStubsAndPatchUsages(symbolTable: SymbolTable, root: IrDeclaration)","{
        generateStubsAndPatchUsagesInternal(symbolTable) { patcher.patchDeclarations(listOf(root)) }",,f12e
fun collectAllStubbedSymbols(),": Set<IrSymbol> {
        return stubGenerator.allStubbedSymbols
    }",,ec61
No signature found,"fun generateStubsAndPatchUsagesInternal(symbolTable: SymbolTable, patchIrTree: () -> Unit) {
        // Generate stubs.
        for (symbol in symbolTable.descriptorExtension.allUnboundSymbols) {
            stubGenerator.getDeclaration(symbol)
        }",,6e1f
No signature found,"fun foo(x: String, block: (String) -> String) = b",// WITH_STDLIB,6e1f
fun box(),": String {
    fun bar(y: String) = y + ""cde""

    val res = foo(""abc"") { bar(it) }",,4f27
fun toString(),: String = w,,a535
fun invariant(type: KType),": KTypeProjection =
            K",,2820
fun contravariant(type: KType),": KTypeProjection =
            K",,5933
fun covariant(type: KType),": KTypeProjection =
            K",,270f
fun apply(s: S),"fun interface F<S> {
    
}","// FIR_IDENTICAL
// !LANGUAGE: +SamConversionForKotlinFunctions +SamConversionPerArgument +FunctionalInterfaceConversion
// !CHECK_TYPE",ae58
"fun f_t(f1: F<T>, f2: F<T>)","fun <R> f_r(f1: F<R>, f2: F<R>)
    fun <R> f_pr(f1: F<PR<T, R>>, f2: F<PR<T, R>>)
}

fun test(
    k: K<String>,
    f_string: F<String>,
    f_int: F<Int>,
    f_pr: F<PR<String, Int>>
) {
    k.f_t(f_string) { it checkType { _<String>() }",,1fab
fun addTests(info: List<TestInfo>),"{
        infos.addAll(info)
    }",,16d7
fun generate(),"{
        FileWriter(File(flavourFolder, flavourName.replaceFirstChar(Char::uppercaseChar) + "".java"").also { it.parentFile.mkdirs() }",,3be5
fun generateTestName(fileName: String),": String {
        var result = NameUtils.sanitizeAsJavaIdentifier(FileUtil.getNameWithoutExtension(StringUtil.capitalize(fileName)))

        var i = 0
        while (generatedTestNames.contains(result)) {
            result += ""_"" + i++
        }",,b758
"fun generateTestMethod(p: Printer, testName: String, className: String, filePath: String)","{
        p.println(""public void test$testName() throws Exception {"")
        p.pushIndent()
        p.println(""invokeBoxMethod($className.class, \""$filePath\"", \""OK\"");"")
        p.popIndent()
        p.println(""}",,a531
fun registerExtensionPoint(project: Project),"{
        CoreApplicationEnvironment.registerExtensionPoint(
            project.extensionArea,
            extensionPointName.name,
            extensionClass
        )
    }",,2e14
"fun registerExtension(project: Project, extension: T)","{
        project.extensionArea.getExtensionPoint(extensionPointName).registerExtension(extension, project)
    }",,1f7e
fun getInstances(project: Project),": List<T> {
        val projectArea = project.extensionArea
        if (!projectArea.hasExtensionPoint(extensionPointName.name)) return listOf()

        return projectArea.getExtensionPoint(extensionPointName).extensions.toList()
    }",,8b1e
"fun <R, D> accept(visitor: FirVisitor<R, D>, data: D)",": R =
        v",,06e4
No signature found,"fun <E : FirElement, D> transform(transformer: FirTransformer<D>, data: D): E =
        t",,6e1f
No signature found,"fun generateSerializerExtensions(codegen: ImplementationBodyCodegen, metadataPlugin: SerializationDescriptorSerializerPlugin?) {
            val serializableClass = getSerializableClassDescriptorBySerializer(codegen.descriptor) ?: return
            val serializerCodegen = if (serializableClass.isEnumWithLegacyGeneratedSerializer()) {
                SerializerForEnumsCodegen(codegen, serializableClass)
            }",,6e1f
fun generateGenericFieldsAndConstructor(typedConstructorDescriptor: ClassConstructorDescriptor),"{
        serializableDescriptor.declaredTypeParameters.forEachIndexed { i, _ ->
            codegen.v.newField(
                OtherOrigin(codegen.myClass.psiOrParent), ACC_PRIVATE or ACC_SYNTHETIC,
                ""$typeArgPrefix$i"", kSerializerType.descriptor, null, null
            )
        }",,60dc
No signature found,"fun ExpressionCodegen.generateSerialDescriptor(descriptorVar: Int, isStatic: Boolean) = w",,6e1f
No signature found,fun ExpressionCodegen.instantiateNewDescriptor(isStatic: Boolean) = w,,6e1f
No signature found,fun ExpressionCodegen.addElementsContentToDescriptor(descriptorVar: Int) = w,,6e1f
No signature found,"fun ExpressionCodegen.addSyntheticAnnotationsToDescriptor(descriptorVar: Int, annotated: Annotated, functionToCall: String) =
        w",,6e1f
fun generateSerialDesc(),"{
        var flags = ACC_PRIVATE or ACC_FINAL or ACC_SYNTHETIC
        if (staticDescriptor) flags = flags or ACC_STATIC
        codegen.v.newField(
            OtherOrigin(codegen.myClass.psiOrParent), flags,
            serialDescField, descType.descriptor, null, null
        )
        // todo: lazy initialization of $$serialDesc ?
        if (!staticDescriptor) return
        val expr = codegen.createOrGetClInitCodegen()
        expr.generateSerialDescriptor(0, true)
    }",,b8e3
No signature found,"fun InstructionAdapter.stackSerialClassDesc(classDescVar: Int?) {
        if (staticDescriptor)
            getstatic(serializerAsmType.internalName, serialDescField, descType.descriptor)
        else {
            load(0, serializerAsmType)
            getfield(serializerAsmType.internalName, serialDescField, descType.descriptor)
        }","// use null to put value on stack, use number to store it to var",6e1f
fun generateSerializableClassProperty(property: PropertyDescriptor),"{
        codegen.generateMethod(property.getter!!) { _, _ ->
            stackSerialClassDesc(null)
            areturn(descType)
        }",,51ef
fun generateTypeParamsSerializersGetter(function: FunctionDescriptor),= c,,e095
fun generateChildSerializersGetter(function: FunctionDescriptor),"{
        codegen.generateMethod(function) { _, expressionCodegen ->
            val size = serializableProperties.size
            iconst(size)
            newarray(kSerializerType)
            for (i in 0 until size) {
                dup() // array
                iconst(i) // index
                val prop = serializableProperties[i]
                assert(
                    stackValueSerializerInstanceFromSerializerWithoutSti(
                        expressionCodegen,
                        codegen,
                        prop,
                        this@SerializerCodegenImpl
                    )
                ) { ""Property ${prop.name}",,5bd8
"fun generateSave(
        function: FunctionDescriptor
    )","{
        codegen.generateMethod(function) { signature, expressionCodegen ->
            // fun save(output: KOutput, obj : T)
            val outputVar = 1
            val objVar = 2
            val descVar = 3
            stackSerialClassDesc(descVar)
            val objType = signature.valueParameters[1].asmType
            // output = output.writeBegin(classDesc, new KSerializer[0])
            load(outputVar, encoderType)
            load(descVar, descType)
            invokeinterface(
                encoderType.internalName, CallingConventions.begin,
                ""("" + descType.descriptor +
                        "")"" + kOutputType.descriptor
            )
            store(outputVar, kOutputType)
            if (serializableDescriptor.isInternalSerializable) {
                val sig = StringBuilder(""(${objType.descriptor}",,3e6e
No signature found,"fun InstructionAdapter.genArrayOfTypeParametersSerializers() {
        val size = serializableDescriptor.declaredTypeParameters.size
        iconst(size)
        newarray(kSerializerType) // todo: use some predefined empty array, if size is 0
        for (i in 0 until size) {
            dup() // array
            iconst(i) // index
            load(0, kSerializerType) // this.serialTypeI
            getfield(codegen.typeMapper.mapClass(codegen.descriptor).internalName, ""$typeArgPrefix$i"", kSerializerType.descriptor)
            astore(kSerializerType)
        }",,6e1f
"fun generateLoad(
        function: FunctionDescriptor
    )","{
        codegen.generateMethod(function) { _, expressionCodegen ->
            // fun load(input: KInput): T
            val inputVar = 1
            val descVar = 2
            val indexVar = 3
            val bitMaskBase = 4
            val blocksCnt = serializableProperties.bitMaskSlotCount()
            val bitMaskOff = fun(it: Int): Int { return bitMaskBase + bitMaskSlotAt(it) }",,6b75
No signature found,"fun InstructionAdapter.callReadProperty(
        expressionCodegen: ExpressionCodegen,
        property: SerializableProperty,
        propertyType: Type,
        index: Int,
        inputVar: Int,
        descriptorVar: Int,
        propertyVar: Int
    ) {
        // propX := input.readXxxValue(value)
        load(inputVar, kInputType)
        load(descriptorVar, descType)
        iconst(index)

        val sti = getSerialTypeInfo(property, propertyType)
        val useSerializer = stackValueSerializerInstanceFromSerializer(expressionCodegen, codegen, sti, this@SerializerCodegenImpl)
        val unknownSer = (!useSerializer && sti.elementMethodPrefix.isEmpty())
        if (unknownSer) {
            aconst(codegen.typeMapper.mapType(property.type))
            AsmUtil.wrapJavaClassIntoKClass(this)
        }",,6e1f
fun produceCall(isUpdatable: Boolean),"{
            invokeinterface(
                kInputType.internalName,
                (CallingConventions.decode) + sti.elementMethodPrefix + (if (useSerializer) ""Serializable"" else """") + CallingConventions.elementPostfix,
                ""("" + descType.descriptor + ""I"" +
                        (if (useSerializer) kSerialLoaderType.descriptor else """")
                        + (if (unknownSer) AsmTypes.K_CLASS_TYPE.descriptor else """")
                        + (if (isUpdatable) sti.type.descriptor else """")
                        + "")"" + (sti.type.descriptor)
            )
        }",,08fe
No signature found,"fun InstructionAdapter.buildExternalConstructorDesc(propsStartVar: Int, bitMaskBase: Int): String {
        val constructorDesc = StringBuilder(""("")
        var propVar = propsStartVar
        for (property in properties.serializableConstructorProperties) {
            val propertyType = codegen.typeMapper.mapType(property.type)
            constructorDesc.append(propertyType.descriptor)
            load(propVar, propertyType)
            propVar += propertyType.size
        }",,6e1f
No signature found,"fun InstructionAdapter.genSetSerializableStandaloneProperties(
        expressionCodegen: ExpressionCodegen, propVarStart: Int, resultVar: Int, bitMaskPos: (Int) -> Int
    ) {
        var propVar = propVarStart
        val offset = properties.serializableConstructorProperties.size
        for ((index, property) in properties.serializableStandaloneProperties.withIndex()) {
            val i = index + offset
            //check if property has been seen and should be set
            val nextLabel = Label()
            // seen = bitMask & 1 << pos != 0
            genValidateProperty(i, bitMaskPos(i))
            if (property.optional) {
                // if (seen)
                //    set
                ificmpeq(nextLabel)
            }",,6e1f
No signature found,"fun Array<Array<Array<Array<Array<Array<Array<Array<Array<Array<Array<Array<Array<Array<Array<LongArray>>>>>>>>>>>>>>>.dimensions() = """,,6e1f
fun box(),": String =
    a",,4f27
fun updateFrom(from: IrTypeParameter),"{
        super.updateFrom(from)
        index = from.index
        variance = from.variance
        isReified = from.isReified
        // Do not copy superTypes. You typically want a remapping for a group of type parameters at a time, see IrTypeParameterRemapper.
    }",,b1ba
fun test(),"{
    val map = emptyMap<Int, Int>()
    var optimized = """"
    for (i in 0..map.size - 1) optimized += map[i]
}",// TARGET_BACKEND: JVM_IR,fe98
fun bar(),{},"// !LANGUAGE: -ProhibitVisibilityOfNestedClassifiersFromSupertypesOfCompanion
// FILE: J.java",66c3
fun test2(),"{
        <!UNRESOLVED_REFERENCE!>foo<!>()
        bar()
        boo()
    }",,30bb
fun test(),"{
            <!UNRESOLVED_REFERENCE!>foo<!>()
            bar()
            boo()
        }",,fe98
fun test(),"{
            <!UNRESOLVED_REFERENCE!>foo<!>()
            bar()
            boo()
        }",,fe98
fun bar(),{},,66c3
No signature found,"fun <T : Inv<*>?, F: Inv<out Any>?, G : Inv<*>> test1(t: T, f: F, g: G?) {
    if (t != null && f != null && g != null) {
        t.value
        f.value
        g.value
    }",,6e1f
No signature found,"fun <T : K, K : Inv<*>?> test2(t: T) {
    if (t != null) {
        t.value
    }",,6e1f
No signature found,"fun <T : Inv<K>?, K : Inv<*>?> test3(t: T) {
    if (t != null) {
        t.value
    }",,6e1f
fun ensureAllMessagesPresent(),"{
        KtDefaultErrorMessagesParcelize.MAP.verifyMessages(KtErrorsParcelize)
    }",,2e2a
fun f(a: List<Any>),= a,// FIR_IDENTICAL,444e
fun deserializeJsIrProgramFragment(input: ByteArray),": JsIrProgramFragments {
    return JsIrAstDeserializer(input).readFragments()
}",,f95d
fun readByte(),": Byte {
        return buffer.get()
    }",,f606
fun readBoolean(),": Boolean {
        return readByte() != 0.toByte()
    }",,cb14
fun readInt(),": Int {
        return buffer.int
    }",,8579
fun readDouble(),": Double {
        return buffer.double
    }",,8023
fun readString(),": String {
        val length = readInt()
        val offset = buffer.position()
        val result = String(source, offset, length, SerializationCharset)
        buffer.position(offset + length)
        return result
    }",,b49c
No signature found,"fun <reified T> readArray(readElement: () -> T): Array<T> {
        return Array<T>(readInt()) { readElement() }",,6e1f
No signature found,"fun readRepeated(readElement: () -> Unit) {
        var length = readInt()
        while (length-- > 0) {
            readElement()
        }",,6e1f
No signature found,"fun <T> readList(readElement: () -> T): List<T> {
        val length = readInt()
        val result = ArrayList<T>(length)
        for (i in 0 until length) {
            result.add(readElement())
        }",,6e1f
No signature found,"fun <T> ifTrue(then: () -> T): T? {
        return if (readBoolean()) then() else null
    }",,6e1f
fun readFragments(),": JsIrProgramFragments {
        return JsIrProgramFragments(readFragment(), ifTrue { readFragment() }",,eb12
fun readFragment(),": JsIrProgramFragment {
        return JsIrProgramFragment(readString(), readString()).apply {
            readRepeated {
                importedModules += JsImportedModule(
                    externalName = stringTable[readInt()],
                    internalName = nameTable[readInt()],
                    plainReference = ifTrue { readExpression() }",,e393
fun readIrIcClassModel(),": JsIrIcClassModel {
        return JsIrIcClassModel(readList { nameTable[readInt()] }",,7a91
fun readTestEnvironment(),": JsIrProgramTestEnvironment {
        return JsIrProgramTestEnvironment(stringTable[readInt()], stringTable[readInt()])
    }",,ffe0
fun readStatement(),": JsStatement {
        return withComments {
            withLocation {
                with(StatementIds) {
                    when (val id = readByte().toInt()) {
                        RETURN -> {
                            JsReturn(ifTrue { readExpression() }",,cc6f
fun readExpression(),": JsExpression {
        return withComments {
            withLocation {
                with(ExpressionIds) {
                    when (val id = readByte().toInt()) {
                        THIS_REF -> {
                            JsThisRef()
                        }",,cecc
fun readFunction(),": JsFunction {
        return JsFunction(scope, readBlock(), """").apply {
            readRepeated { parameters += readParameter() }",,f572
fun readJsImportedModule(),": JsImportedModule {
        return JsImportedModule(
            stringTable[readInt()],
            nameTable[readInt()],
            ifTrue { readExpression() }",,78f6
fun readParameter(),": JsParameter {
        return JsParameter(nameTable[readInt()]).apply {
            hasDefaultValue = readBoolean()
        }",,90f7
fun readCompositeBlock(),": JsCompositeBlock {
        return JsCompositeBlock().apply {
            readRepeated { statements += readStatement() }",,ddcb
fun readBlock(),": JsBlock {
        return ifTrue { readCompositeBlock() }",,8d2b
fun readVars(),": JsVars {
        return JsVars(readBoolean()).apply {
            readRepeated {
                vars += withLocation {
                    JsVars.JsVar(nameTable[readInt()], ifTrue { readExpression() }",,15b7
fun readName(),": JsName {
        val identifier = stringTable[readInt()]
        val name = ifTrue {
            JsScope.declareTemporaryName(identifier)
        }",,3316
fun readLocalAlias(),": LocalAlias {
        return LocalAlias(
            nameTable[readInt()],
            ifTrue { stringTable[readInt()] }",,b8cc
fun readComment(),": JsComment {
        val text = readString()
        return ifTrue { JsMultiLineComment(text) }",,1bec
No signature found,"fun <T : JsNode> withLocation(action: () -> T): T {
        return ifTrue {
            val deserializedFile = ifTrue { stringTable[readInt()] }",,6e1f
No signature found,"fun <T : JsNode> withComments(action: () -> T): T {
        return action().apply {
            ifTrue { this.commentsBeforeNode = readArray { readComment() }",,6e1f
No signature found,fun <@OnlyInputTypes M> strictId(arg: M): M = a,// !DIAGNOSTICS: -UNUSED_PARAMETER -UNUSED_VARIABLE,6e1f
No signature found,"fun <@OnlyInputTypes S> strictSelect(arg1: S, arg2: S): S = a",,6e1f
"fun testOK(first: First, bound: Bound, second: Second)","{
    strictId(Inv(15))
    strictId(Inv(""foo""))
    strictId(Inv(first))
    strictId(InvB(first))
    strictId(In(first))
    strictId(InB(first))
    strictId(Out(first))
    strictId(OutB(first))
    strictId(Inv(Inv(Inv(first))))

    strictSelect(Inv(first), Inv(first))
    strictSelect(InvB(first), InvB(first))

    strictSelect(Out(first), Out(bound))
    strictSelect(OutB(first), OutB(bound))
    strictSelect(In(first), In(bound))
    strictSelect(InB(first), InB(bound))

    val out: Out<Bound> = strictSelect(Out(first), Out(second))
    val outb: OutB<Bound> = strictSelect(OutB(first), OutB(second))
    strictSelect<Out<Bound>>(Out(first), Out(second))
    strictSelect<OutB<Bound>>(OutB(first), OutB(second))
}",,f586
"fun testFail(first: First, bound: Bound, second: Second)","{
    <!TYPE_INFERENCE_ONLY_INPUT_TYPES_ERROR!>strictSelect<!>(InvB(first), InvB(bound))
    <!TYPE_INFERENCE_ONLY_INPUT_TYPES_ERROR!>strictSelect<!>(Inv(first), Inv(bound))
    <!TYPE_INFERENCE_ONLY_INPUT_TYPES_ERROR!>strictSelect<!>(Out(first), Out(second))
    <!TYPE_INFERENCE_ONLY_INPUT_TYPES_ERROR!>strictSelect<!>(In(first), In(second))
    <!TYPE_INFERENCE_ONLY_INPUT_TYPES_ERROR!>strictSelect<!>(InB(first), InB(second))
    <!TYPE_INFERENCE_ONLY_INPUT_TYPES_ERROR!>strictSelect<!>(Out(Inv(first)), Out(Inv(second)))
    <!TYPE_INFERENCE_ONLY_INPUT_TYPES_ERROR!>strictSelect<!>(In(Inv(first)), In(Inv(second)))
}",,69d2
fun main(),"{
    libCommonMainTopLevelFun()
    libCommonMainInternalFun()
}",,d987
No signature found,"fun createDescriptorOptionalBuiltIns(
        library: KotlinLibrary,
        languageVersionSettings: LanguageVersionSettings,
        storageManager: StorageManager,
        builtIns: KotlinBuiltIns?,
        packageAccessHandler: PackageAccessHandler?,
        lookupTracker: LookupTracker
    ): ModuleDescriptorImpl {

        val libraryProto = parseModuleHeader(library.moduleHeaderData)

        val moduleName = Name.special(libraryProto.moduleName)
        val moduleOrigin = DeserializedKlibModuleOrigin(library)

        val moduleDescriptor = if (builtIns != null)
            descriptorFactory.createDescriptor(moduleName, storageManager, builtIns, moduleOrigin)
        else
            descriptorFactory.createDescriptorAndNewBuiltIns(moduleName, storageManager, moduleOrigin)

        val provider = createPackageFragmentProvider(
            library,
            packageAccessHandler,
            packageFragmentNames = libraryProto.packageFragmentNameList,
            storageManager,
            moduleDescriptor,
            configuration = CompilerDeserializationConfiguration(languageVersionSettings),
            compositePackageFragmentAddend = runIf(library.isNativeStdlib || library.isJsStdlib || library.isWasmStdlib) {
                functionInterfacePackageFragmentProvider(storageManager, moduleDescriptor)
            }",,6e1f
"fun createCachedPackageFragmentProvider(
        byteArrays: List<ByteArray>,
        storageManager: StorageManager,
        moduleDescriptor: ModuleDescriptor,
        configuration: DeserializationConfiguration,
        lookupTracker: LookupTracker
    )",": PackageFragmentProvider {
        val deserializedPackageFragments = packageFragmentsFactory.createCachedPackageFragments(
            byteArrays, moduleDescriptor, storageManager
        )

        val provider = PackageFragmentProviderImpl(deserializedPackageFragments)
        return initializePackageFragmentProvider(provider, deserializedPackageFragments, storageManager,
            moduleDescriptor, configuration, null, lookupTracker)
    }",,a13a
No signature found,"fun createPackageFragmentProvider(
        library: KotlinLibrary,
        packageAccessHandler: PackageAccessHandler?,
        packageFragmentNames: List<String>,
        storageManager: StorageManager,
        moduleDescriptor: ModuleDescriptor,
        configuration: DeserializationConfiguration,
        compositePackageFragmentAddend: PackageFragmentProvider?,
        lookupTracker: LookupTracker
    ): PackageFragmentProvider {

        val deserializedPackageFragments = packageFragmentsFactory.createDeserializedPackageFragments(
            library, packageFragmentNames, moduleDescriptor, packageAccessHandler, storageManager, configuration
        )

        // Generate empty PackageFragmentDescriptor instances for packages that aren't mentioned in compilation units directly.
        // For example, if there's `package foo.bar` directive, we'll get only PackageFragmentDescriptor for `foo.bar`, but
        // none for `foo`. Various descriptor/scope code relies on presence of such package fragments, and currently we
        // don't know if it's possible to fix this.
        // TODO: think about fixing issues in descriptors/scopes
        val packageFqNames = deserializedPackageFragments.mapTo(mutableSetOf()) { it.fqName }",,6e1f
fun canSynthesizeEnumEntries(),"fun initializePackageFragmentProvider(
        provider: PackageFragmentProviderImpl,
        fragmentsToInitialize: List<DeserializedPackageFragment>,
        storageManager: StorageManager,
        moduleDescriptor: ModuleDescriptor,
        configuration: DeserializationConfiguration,
        compositePackageFragmentAddend: PackageFragmentProvider?,
        lookupTracker: LookupTracker
    ): PackageFragmentProvider {

        val notFoundClasses = NotFoundClasses(storageManager, moduleDescriptor)

        val annotationAndConstantLoader = AnnotationAndConstantLoaderImpl(
            moduleDescriptor,
            notFoundClasses,
            KlibMetadataSerializerProtocol
        )

        val enumEntriesDeserializationSupport = object : EnumEntriesDeserializationSupport {
            override : Boolean = moduleDescriptor.platform.isJvm()
        }",,5010
"fun createForwardDeclarationHackPackagePartProvider(
        storageManager: StorageManager,
        module: ModuleDescriptorImpl
    )",": PackageFragmentProviderImpl {
        fun createPackage(kind: NativeForwardDeclarationKind) =
            ForwardDeclarationsPackageFragmentDescriptor(
                storageManager,
                module,
                kind.packageFqName,
                kind.superClassName,
                kind.classKind,
                isExpect = true
            )

        val packageFragmentProvider = PackageFragmentProviderImpl(
            NativeForwardDeclarationKind.entries.map { createPackage(it) }",,8e20
fun play(),"{
        ReentrantLock().withLock {
            launch {
                pumpEvents()
            }","// FIR_IDENTICAL
// ISSUE: KT-55072",69f4
fun launch2(),"{
                pumpEvents()
            }",,f584
fun pumpEvents(),{},,9356
No signature found,fun launch(block: suspend Any.() -> Unit) {},,6e1f
fun bar2(),: Int = 1,"// WITH_STDLIB
// SKIP_TXT
// !DIAGNOSTICS: -CAST_NEVER_SUCCEEDS -UNCHECKED_CAST -UNUSED_PARAMETER -UNUSED_VARIABLE -OPT_IN_USAGE_ERROR -UNUSED_EXPRESSION",3846
fun foo2(),: Float = 1,,7e7a
No signature found,fun <L> flow(block: suspend FlowCollector<L>.() -> Unit) = F,,6e1f
fun poll81(),": Flow<String> {
    return flow {
        val inv = ::bar2 <!TYPE_INFERENCE_ONLY_INPUT_TYPES_ERROR!>in<!> setOf(::foo2)
        <!DEBUG_INFO_MISSING_UNRESOLVED!>inv<!>()
    }",,029f
fun poll83(),": Flow<String> {
    return flow {
        val inv = ::bar4 <!TYPE_INFERENCE_ONLY_INPUT_TYPES_ERROR!>in<!> setOf(::foo4)
        <!DEBUG_INFO_ELEMENT_WITH_ERROR_TYPE!>inv<!>
    }",,08ae
fun defaultMessageCollector(isVerbose: Boolean),= P,,5d34
fun info(message: String),"{
        if (isVerbose) {
            messageCollector.report(INFO, PREFIX + message)
        }",,0d0a
fun warn(message: String),"{
        messageCollector.report(WARNING, PREFIX + message)
    }",,7d11
fun error(message: String),"{
        messageCollector.report(ERROR, PREFIX + message)
    }",,4df8
fun exception(e: Throwable),"{
        val stacktrace = run {
            val writer = StringWriter()
            e.printStackTrace(PrintWriter(writer))
            writer.toString()
        }",,6f48
fun makeWriter(severity: CompilerMessageSeverity),": PrintWriter {
        return PrintWriter(MessageCollectorBackedWriter(messageCollector, severity))
    }",,7fd6
"fun foo(i4: Int, i5: Int)","{
    sb.appendLine(""hello $i4 $i5"")
}",,cbcb
"fun bar(i1: Int, i2: Int)","{
    foo(i1, i2)
}",,5374
fun box(),": String {
    bar(1, 8)

    assertEquals(""hello 1 8\n"", sb.toString())
    return ""OK""
}",,4f27
fun suspendThere(v: String),: String = s,"// TARGET_BACKEND: JVM
// FULL_JDK
// WITH_STDLIB
// WITH_COROUTINES
// CHECK_TAIL_CALL_OPTIMIZATION
// JVM_ABI_K1_K2_DIFF: KT-63864",4d2d
fun suspendHere(),: String = s,,3da9
fun mainSuspend(),= s,,dde5
No signature found,"fun builder(c: suspend () -> Unit) {
    c.startCoroutine(EmptyContinuation)
}",,6e1f
fun box(),": String {
    var result = """"

    builder {
        result = mainSuspend()
    }",,4f27
"fun getCompilationNpmRequirements(projectPath: String, compilationName: String)",": Set<NpmDependencyDeclaration> =
        b",,40ee
fun addTaskRequirements(task: RequiresNpmDependencies),"{
        val requirements = task.requiredNpmDependencies

        _byTask[task.getPath()] = requirements

        val requiredNpmDependencies = requirements
            .asSequence()
            .map { it.createDependency(task.compilation.target.project.objects) }",,5607
fun m(),"{
}",,6af2
fun getJavaObjectType1(),":Class<*> {
    // LDC Ljava/lang/Integer;.class
    return Int::class.javaObjectType
}",,9f5d
fun getJavaObjectType2(),":Class<*> {
    // LDC Ljava/lang/Integer;.class
    return Integer::class.javaObjectType
}",,44e5
fun getJavaObjectType3(),":Class<*> {
    // LDC Ljava/lang/Void;.class
    return Void::class.javaObjectType
}",,b05c
fun getJavaObjectType4(),":Class<*> {
    // LDC Ljava/lang/Boolean;.class
    return Boolean::class.javaObjectType
}",,acae
fun getJavaObjectType5(),":Class<*>? {
    // LDC LA;.class
    return A::class.javaObjectType
}",,1484
No signature found,"fun <reified T : Any> getJavaObjectType6(): Class<*> {
    // INVOKESTATIC kotlin/jvm/internal/Intrinsics.reifiedOperationMarker
    // LDC Ljava/lang/Object;.class
    return T::class.javaObjectType
}",,6e1f
fun getJavaObjectType7(),":Class<*> {
    // INVOKEVIRTUAL java/lang/Object.getClass
    return A()::class.javaObjectType
}",,f5c6
fun getJavaObjectType8(),":Class<*> {
    val i: Int? = 1
    // LDC Ljava/lang/Integer;.class
    return i!!::class.javaObjectType
}",,209c
fun getJavaObjectType9(),":Class<*> {
    val i: Int = 1
    // LDC Ljava/lang/Integer;.class
    return i::class.javaObjectType
}",,03d8
fun getJavaObjectType10(),":Class<*> {
    // GETSTATIC kotlin/Unit.INSTANCE
    // INVOKEVIRTUAL java/lang/Object.getClass
    return m()::class.javaObjectType
}",,cd9b
fun get(vararg x: Int),= x,,66c8
fun get(vararg x: Unit),= x,,6716
fun test1(a: A),": Int {
    return a.get(1)
}",,5e28
fun test2(a: A),": Int {
    return a.get(1, 2)
}",,2a2a
fun test3(b: B),": Int {
    return b.get(Unit, Unit)
}",,2775
fun box(),": String {
    var result = test1(A())
    if (result != 1) return ""fail1: $result""

    result = test2(A())
    if (result != 2) return ""fail2: $result""

    result = test3(B())
    if (result != 2) return ""fail3: $result""

    return ""OK""
}",,4f27
No signature found,"fun foo(p1: String?, p2: String?) {
    if (p2 != null) {
        val v = p1 ?: p2
        val size = v.length
    }","// !DIAGNOSTICS: -UNUSED_VARIABLE

// KT-5335",6e1f
No signature found,"fun computeClasspathChanges(
        classpathSnapshotFiles: ClasspathSnapshotFiles,
        lookupStorage: LookupStorage,
        storeCurrentClasspathSnapshotForReuse: (currentClasspathSnapshot: List<AccessibleClassSnapshot>, shrunkCurrentClasspathAgainstPreviousLookups: List<AccessibleClassSnapshot>) -> Unit,
        reporter: ClasspathSnapshotBuildReporter
    ): ProgramSymbolSet {
        val currentClasspathSnapshot = reporter.measure(GradleBuildTime.LOAD_CURRENT_CLASSPATH_SNAPSHOT) {
            val classpathSnapshot =
                CachedClasspathSnapshotSerializer.load(classpathSnapshotFiles.currentClasspathEntrySnapshotFiles, reporter)
            reporter.measure(GradleBuildTime.REMOVE_DUPLICATE_CLASSES) {
                classpathSnapshot.removeDuplicateAndInaccessibleClasses()
            }",,6e1f
"fun computeChangedAndImpactedSet(
        currentClassSnapshots: List<AccessibleClassSnapshot>,
        previousClassSnapshots: List<AccessibleClassSnapshot>,
        reporter: ClasspathSnapshotBuildReporter
    )",": ProgramSymbolSet {
        val currentClasses: Map<ClassId, AccessibleClassSnapshot> = currentClassSnapshots.associateBy { it.classId }",,624e
"fun computeClassChanges(
        currentClassSnapshots: List<AccessibleClassSnapshot>,
        previousClassSnapshots: List<AccessibleClassSnapshot>,
        metrics: BuildMetricsReporter<GradleBuildTime, GradleBuildPerformanceMetric>
    )",": ProgramSymbolSet {
        val (currentKotlinClassSnapshots, currentJavaClassSnapshots) = currentClassSnapshots.partition { it is KotlinClassSnapshot }",,67db
"fun computeKotlinClassChanges(
        currentClassSnapshots: List<KotlinClassSnapshot>,
        previousClassSnapshots: List<KotlinClassSnapshot>
    )",": ProgramSymbolSet {
        val (coarseGrainedCurrentClassSnapshots, fineGrainedCurrentClassSnapshots) =
            currentClassSnapshots.partition { it.classMemberLevelSnapshot == null }",,708a
"fun computeCoarseGrainedKotlinClassChanges(
        currentClassSnapshots: List<KotlinClassSnapshot>,
        previousClassSnapshots: List<KotlinClassSnapshot>
    )",": ProgramSymbolSet {
        // Note: We have removed unchanged classes earlier in computeChangedAndImpactedSet method, so here we only have changed classes.
        return ProgramSymbolSet.Collector().run {
            (currentClassSnapshots + previousClassSnapshots).forEach {
                when (it) {
                    is RegularKotlinClassSnapshot -> addClass(it.classId)
                    is PackageFacadeKotlinClassSnapshot -> addPackageMembers(it.classId.packageFqName, it.packageMemberNames)
                    is MultifileClassKotlinClassSnapshot -> addPackageMembers(it.classId.packageFqName, it.constantNames)
                }",,eec4
"fun computeFineGrainedKotlinClassChanges(
        currentClassSnapshots: List<KotlinClassSnapshot>,
        previousClassSnapshots: List<KotlinClassSnapshot>
    )",": ProgramSymbolSet {
        val workingDir =
            FileUtil.createTempDirectory(this::class.java.simpleName, ""_WorkingDir_${UUID.randomUUID()}",,afe7
No signature found,"fun DirtyData.toProgramSymbols(allClasses: Iterable<AccessibleClassSnapshot>): ProgramSymbolSet {
        val changedProgramSymbols = dirtyLookupSymbols.toProgramSymbolSet(allClasses)

        // Check whether there is any info in this DirtyData that has not yet been converted to `changedProgramSymbols`
        val (changedLookupSymbols, changedFqNames) = changedProgramSymbols.toChangesEither().let {
            it.lookupSymbols.toSet() to it.fqNames.toSet()
        }",,6e1f
"fun computeImpactedSymbols(changes: ProgramSymbolSet, allClasses: Iterable<AccessibleClassSnapshot>)",": ProgramSymbolSet {
        val impactedSymbolsResolver = AllImpacts.getResolver(allClasses)
        return ProgramSymbolSet.Collector().apply {
            // Add impacted classes
            val impactedClasses = findReachableNodes(changes.classes, impactedSymbolsResolver::getImpactedClasses)
            addClasses(impactedClasses)

            // Add impacted class members
            val classMembers = changes.classMembers.map { ClassMembers(it.key, it.value) }",,18b5
fun test(),"{
    Parent.a
    Parent.a = 11
    Parent.b
    Parent.b = 22
    Parent.foo()
    Parent.baz()

    Child.a
    Child.a = 33
    Child.b
    Child.b = 44
    Child.c
    Child.c = 55
    Child.foo()
    Child.bar()
    Child.baz()
}",// FILE: Child.java,fe98
fun box(),": String {
    lateinit var s: String

    try {
        sb.appendLine(s)
    }",,4f27
"fun onInserted(position: Int, count: Int)",{},"// STRIP_METADATA
// TODO: Re-enable metadata generation",7a45
No signature found,"fun parse(rawValue: String, onError: (reason: String) -> Nothing): Option<Set<SharedCommonizerTarget>> {
        return try {
            Option(
                this, rawValue.split("";"")
                    .map { it.trim() }",,6e1f
"fun buildSkiaNativeIndexImpl(library: NativeLibrary, verbose: Boolean)",": IndexerResult {
    val result = SkiaNativeIndexImpl(library, verbose)
    return buildNativeIndexImpl(result)
}",,d194
No signature found,"fun convertType(type: CValue<CXType>, typeAttributes: CValue<CXTypeAttributes>?): Type {
        if (type.kind == CXTypeKind.CXType_Record) {
            val decl: StructDecl = getStructDeclAt(clang_getTypeDeclaration(type))
            if (decl.isSkiaSharedPointer) {
                return ManagedType(decl)
            }",,6e1f
fun isFuncDeclEligible(cursor: CValue<CXCursor>),": Boolean =
            c",,363c
No signature found,fun String.isUnknownTemplate() = /,,6e1f
No signature found,"fun CValue<CXCursor>.containsTemplates(): Boolean {
    var ret = false
    visitChildren(this) { childCursor, _ ->
        when (childCursor.kind) {
            CXCursorKind.CXCursor_TemplateRef -> {
                ret = true
                CXChildVisitResult.CXChildVisit_Break
            }",,6e1f
No signature found,"fun CValue<CXCursor>.containsOnlySkiaSharedPointerTemplates(): Boolean {
    var ret = true
    visitChildren(this) { childCursor, _ ->
        when (childCursor.kind) {
            CXCursorKind.CXCursor_TemplateRef ->
                if (childCursor.spelling == ""sk_sp"" && !childCursor.containsTemplates()) {
                    CXChildVisitResult.CXChildVisit_Continue
                }",,6e1f
"fun subSequence(startIndex: Int, endIndex: Int)",= T,// WITH_STDLIB,fe95
fun get(index: Int),= s,,60cf
fun box(),": String {
    val s = StringBuilder()

    for ((index, x) in cs.withIndex()) {
        s.append(""$index:$x;"")
    }",,4f27
fun existingMethod(),"val existingParam: Int
}

// MODULE: m2-jvm()()(m1-common)
// FILE: jvm.kt

open class InjectedEmptySuperClass()

actual open class Foo : InjectedEmptySuperClass() {
    actual  {}","// FIR_IDENTICAL
// MODULE: m1-common
// FILE: common.kt",6c23
fun example(),"{
    val a = if (true) true else false
    val b = <!INVALID_IF_AS_EXPRESSION!>if<!> (true) else false
    val c = <!INVALID_IF_AS_EXPRESSION!>if<!> (true) true
    val d = <!INVALID_IF_AS_EXPRESSION!>if<!> (true) true else;
    val e = if (true) {}",// !DIAGNOSTICS: -UNUSED_VARIABLE,29b8
fun t(),": Boolean {
        return <!INVALID_IF_AS_EXPRESSION!>if<!> (true) true
    }",,8234
fun box(),": String {
    var r = test()
    if (r != ""01"") throw AssertionError(r.toString())
    return ""OK""
}",// WITH_STDLIB,4f27
fun test(),": String {
    var r = """"
    for ((i, _) in (1..'c' - 'a').withIndex()) {
        r += i.toString()
    }",,fe98
fun box(),": String {
    for (i in 1..7 step 2) {
    }","// TARGET_BACKEND: JVM_IR

// IMPORTANT!
// Please, when your changes cause failures in bytecodeText tests for 'for' loops,
// examine the resulting bytecode shape carefully.
// Range and progression-based loops generated with Kotlin compiler should be
// as close as possible to Java counter loops ('for (int i = a; i < b; ++i) { ... }').
// Otherwise it may result in performance regression due to missing HotSpot optimizations.
// Run Kotlin compiler benchmarks (https://github.com/Kotlin/kotlin-benchmarks)
// with compiler built from your changes if you are not sure.",4f27
No signature found,"fun call(s: () -> String): String {
    return s()
}","// TARGET_BACKEND: JVM
// FILE: JClass.java",6e1f
fun box(),": String {
    return call(JClass(""OK"")::field)
}",,4f27
fun test(list: ArrayList<Some>),"{
    JavaClass.foo(list)
}","// FULL_JDK
// FILE: JavaClass.java",cdc5
fun foo(),= 1,"// FIR_IDENTICAL
// !LANGUAGE: +ContextReceivers",519f
fun foo(),= 2,,519f
fun bar(),"{
        val x = this@Context.foo()
    }",,66c3
fun getTypeArgument(typeParameterDescriptor: TypeParameterDescriptor),": TypeArgument

        object NoExplicitArguments : TypeArgumentsMapping(emptyList()) {
            private val emptyIterator = mapOf<Nothing, Nothing>().iterator()

            override : TypeArgument =
                TypeArgumentPlaceholder

            override fun iterator() = emptyIterator
        }",,1d11
fun getTypeArgument(typeParameterDescriptor: TypeParameterDescriptor),": TypeArgument =
                t",,1d11
fun iterator(),= t,,c20a
"fun mapTypeArguments(call: KotlinCall, descriptor: CallableDescriptor)",": TypeArgumentsMapping {
        if (call.typeArguments.isEmpty()) {
            return TypeArgumentsMapping.NoExplicitArguments
        }",,2f1f
No signature found,"fun S.foo(x: Int, s: S): S = t","// TARGET_BACKEND: JVM_IR
// WITH_REFLECT
// LANGUAGE: +ValueClasses",6e1f
fun compoundType(vararg types: Type),= l,,9d41
fun bar(u: S),: T = t,,fb47
fun bar(u: S),: U = t,,fb47
fun box(),": String {
    assertEquals(listOf(Int::class.java, String::class.java), ::S.parameters.map { it.type.javaType }",,4f27
fun test(),"{
        KotlinIrSignatureVersion.CURRENTLY_SUPPORTED_VERSIONS.forEach { irSignatureVersion ->
            val abiSignatureVersion = AbiSignatureVersions.resolveByVersionNumber(irSignatureVersion.number)
            assertTrue(abiSignatureVersion.isSupportedByAbiReader) {
                ""IR signature version $irSignatureVersion is not supported by the ABI reader""
            }",,fe98
fun box(),": String {
    main(arrayOf(""OK""))
    return sb.toString()
}",,4f27
fun main(args : Array<String>),"{
    run {
        sb.append(args[0])
    }",,e094
No signature found,"fun run(f: () -> Unit) {
    f()
}",,6e1f
No signature found,fun Number.times(length: Length): Length = L,"/**
 * This is a header comment that should be prepended to the distance/entities.kt file.
 */

// MODULE: distance
// FILE: entities.kt",6e1f
No signature found,fun Number.times(surfaceArea: SurfaceArea): SurfaceArea = S,,6e1f
No signature found,fun Number.times(volume: Volume): Volume = V,,6e1f
No signature found,fun Length.times(factor: Number): Length = L,,6e1f
No signature found,fun Length.times(length: Length): SurfaceArea = S,,6e1f
No signature found,fun Length.times(surfaceArea: SurfaceArea): Volume = V,,6e1f
No signature found,fun SurfaceArea.times(factor: Number): SurfaceArea = S,,6e1f
No signature found,fun SurfaceArea.times(length: Length): Volume = V,,6e1f
No signature found,fun Volume.times(factor: Number): Volume = V,,6e1f
No signature found,fun Volume.times(density: Density): Mass = M,,6e1f
No signature found,fun Density.times(volume: Volume): Mass = M,,6e1f
fun surfaceArea(),"{
    with(Ball(10.Meters)) {
        assertEquals(314.SquareMeters, surfaceArea1)
        assertEquals(314.SquareMeters, surfaceArea2)
        assertEquals(314.SquareMeters, surfaceArea3)
    }",,c0b9
fun volume(),"{
    with(Ball(20.Meters)) {
        assertEquals(18840.CubicMeters, volume1)
        assertEquals(18840.CubicMeters, volume2)
        assertEquals(18840.CubicMeters, volume3)
    }",,4f8f
fun mass(),"{
    assertEquals(6.Kilograms, 5.CubicMeters * Density.AIR)
    assertEquals(3500.Kilograms, 3.5.CubicMeters * Density.WATER)
}",,abad
fun foo(),"{
    val result: A<String> = A<String> { x, y -> 1 }","// FIR_IDENTICAL
// !DIAGNOSTICS: -UNUSED_VARIABLE -UNUSED_ANONYMOUS_PARAMETER

// FILE: A.java",519f
fun test(),"{
    val f = fun(): () -> Int = { <expr>54</expr> }",,fe98
No signature found,"fun <T> runTwice(block: () -> T): T {
    contract {
        callsInPlace(block, InvocationKind.AT_LEAST_ONCE)
    }","// !LANGUAGE: +AllowContractsForCustomFunctions +UseCallsInPlaceEffect
// !OPT_IN: kotlin.contracts.ExperimentalContracts
// !DIAGNOSTICS: -INVISIBLE_REFERENCE -INVISIBLE_MEMBER",6e1f
No signature found,"fun <T> runOnce(block: () -> T): T {
    contract {
        callsInPlace(block, InvocationKind.EXACTLY_ONCE)
    }",,6e1f
fun valueReassignment(),"{
    val x: Int
    <!UNINITIALIZED_VARIABLE!>x<!>.inc()
    runTwice { <!VAL_REASSIGNMENT!>x<!> = 42 }",,64cc
fun shadowing(),"{
    val x: Int
    runTwice { val x: Int; x = 42; x.inc() }",,a847
No signature found,"fun branchingFlow(a: Any?) {
    val x: Int
    <!UNINITIALIZED_VARIABLE!>x<!>.inc()
    if (a is String) {
        runTwice { <!VAL_REASSIGNMENT!>x<!> = 42 }",,6e1f
No signature found,"fun branchingFlowWithMissingBranches(a: Any?) {
    val x: Int
    if (a is String) {
        runTwice { <!VAL_REASSIGNMENT!>x<!> = 42 }",,6e1f
fun repeatingFlow(n: Int),"{
    val x: Int
    <!UNINITIALIZED_VARIABLE!>x<!>.inc()

    for (i in 1..n) {
        runTwice { <!VAL_REASSIGNMENT!>x<!> = 42 }",,37d2
fun repeatingFlow2(n: Int),"{
    val x: Int

    for (i in 1..n) {
        runTwice { <!VAL_REASSIGNMENT!>x<!> = 42 }",,f863
fun test(),"{
        foo()
    }",// FILE: a.kt,fe98
fun box(),": String {
    C().test()
    return result
}",,4f27
fun foo(),"{
        result = ""OK""
    }",// FILE: b.kt,519f
fun foo(),": String
}

interface CompositeCodeBlock: CodeBlock {
    override : String {
        return ""OK""
    }","// MODULE: lib
// FILE: A.kt",519f
fun box(),": String {
    return KotlinForLoopBody().foo()
}",,4f27
No signature found,"fun `rerun cinterop after a header changing`(gradleVersion: GradleVersion) {
        nativeProject(""cinterop-kt-53191"", gradleVersion = gradleVersion) {
            val headerFile = projectPath.resolve(""native_lib/nlib.h"").toFile()

            build("":compileKotlinLinux"") {
                assertTasksExecuted("":cinteropNlibLinux"")
            }",,6e1f
No signature found,"fun `cinterop gives hint about -fmodules`(gradleVersion: GradleVersion) {
        nativeProject(""cinterop-fmodules"", gradleVersion = gradleVersion) {
            val defFile = projectPath.resolve(""native_lib/nlib.def"").toFile()

            buildAndFail("":cinteropNlibIosX64"") {
                assertOutputContains(""Try adding `-compiler-option -fmodules` to cinterop."")
            }",,6e1f
fun cinteropWithDefFileFromTaskOutput(gradleVersion: GradleVersion),"{
        nativeProject(""cinterop-with-def-creation-task"", gradleVersion = gradleVersion) {

            val defFilePath = projectPath.resolve(""def/cinterop.def"").toFile().canonicalFile.absolutePath

            build("":assemble"") {
                assertTasksUpToDate("":createDefFileTask"") // this task does not have any action, so it always just UpToDate
                extractNativeTasksCommandLineArgumentsFromOutput("":cinteropCinteropNative"", toolName = NativeToolKind.C_INTEROP) {
                    assertCommandLineArgumentsContainSequentially(""-def"", defFilePath)
                }",,701f
fun cinteropWithExplicitPassingHeader(gradleVersion: GradleVersion),"{
        nativeProject(""cinterop-with-header"", gradleVersion = gradleVersion) {
            val dummyHeaderPath = projectPath.resolve(""libs"").resolve(""include"").resolve(""dummy.h"").toFile().canonicalPath
            build("":assemble"") {
                assertTasksExecuted("":cinteropCinteropNative"")
                extractNativeTasksCommandLineArgumentsFromOutput("":cinteropCinteropNative"", toolName = NativeToolKind.C_INTEROP) {
                    assertCommandLineArgumentsContainSequentially(""-header"", dummyHeaderPath)
                    assertCommandLineArgumentsContainSequentially(""-Ilibs/include"")
                    assertCommandLineArgumentsContainSequentially(""-pkg"", ""cinterop"")
                    assertCommandLineArgumentsDoNotContain(""-def"")
                }",,3d37
fun cinteropWithoutDefinitionFileAndPackageName(gradleVersion: GradleVersion),"{
        nativeProject(""cinterop-with-header"", gradleVersion = gradleVersion) {
            buildGradleKts.replaceText(""packageName(\""cinterop\"")"", """")
            buildAndFail("":cinteropCinteropNative"") {
                assertOutputContains(
                    """"""
                    |For the Cinterop task, either the `definitionFile` or `packageName` parameter must be specified, however, neither has been provided.
                    |
                    |More info here: https://kotlinlang.org/docs/multiplatform-dsl-reference.html#cinterops 
                    """""".trimMargin()
                )
            }",,25cf
fun cinteropWithOptionalDefFileAndConfigurationCache(gradleVersion: GradleVersion),"{
        nativeProject(
            ""cinterop-with-header"",
            gradleVersion = gradleVersion,
            buildOptions = defaultBuildOptions.copy(
                configurationCache = true
            )
        ) {
            val dummyHeaderPath = projectPath.resolve(""libs"").resolve(""include"").resolve(""dummy.h"").toFile().canonicalPath
            // first build with non-existing .def file and configuration cache enabled
            build("":assemble"") {
                assertTasksExecuted("":cinteropCinteropNative"")
                extractNativeTasksCommandLineArgumentsFromOutput("":cinteropCinteropNative"", toolName = NativeToolKind.C_INTEROP) {
                    assertCommandLineArgumentsContainSequentially(""-header"", dummyHeaderPath)
                    assertCommandLineArgumentsContainSequentially(""-Ilibs/include"")
                    assertCommandLineArgumentsContainSequentially(""-pkg"", ""cinterop"")
                    assertCommandLineArgumentsDoNotContain(""-def"")
                }",,8686
No signature found,"fun <R> fun1(p: () -> R) {
    inlineFun {
        p()
    }","// FIR_IDENTICAL
// !DIAGNOSTICS: -UNUSED_EXPRESSION -UNUSED_PARAMETER -UNUSED_VARIABLE -NOTHING_TO_INLINE",6e1f
No signature found,"fun <R> fun1ValueArgument(p: () -> R) {
    inlineFun ({
                   p()
               }",,6e1f
No signature found,"fun <R> fun3(p: () -> R) {
    inlineFun {
        <!RETURN_NOT_ALLOWED!>return<!>;
    }",,6e1f
No signature found,"fun <R> fun3ValueArgument(p: () -> R) {
    inlineFun ({
                   <!RETURN_NOT_ALLOWED!>return<!>;
               }",,6e1f
No signature found,"fun <R> fun4(p: () -> R) {
    inlineFun lambda@ {
        return@lambda p();
    }",,6e1f
No signature found,"fun <R> fun4ValueArgument(p: () -> R) {
    inlineFun (lambda@ {
        return@lambda p();
    }",,6e1f
No signature found,"fun <R> inlineFun(crossinline p: () -> R) {
    p()
}",,6e1f
No signature found,"fun )
val a = f",,6e1f
No signature found,"fun @[a] T.foo(a : ) : bar

val a = f",,6e1f
No signature found,"fun @[a()] T.<>(a : foo) : bar

val a = f",,6e1f
No signature found,"fun T.foo<, T, , T>(a : foo) : bar
val a = f",,6e1f
fun foo(),: = a;,,519f
No signature found,fun = p,,6e1f
fun (),val open_fun = o,,f1dc
fun (),val final_fun = f,,f1dc
fun (),val where_fun = f,,f1dc
fun where_fun(),= f,,b3e5
fun outer(),"{
    bar(fun )

    bar(fun T)
    bar(fun T.)
    bar(fun @[a])


    bar(public fun ())
    bar(open fun ())
    bar(final fun ())

    bar(fun () where T: V)
}",,59f5
fun lib1CommonFun(),: Int = 1,,02b9
fun test(),": String {
        return a + inlineFun()
    }","// WITH_STDLIB
// WORKS_WHEN_VALUE_CLASS
// LANGUAGE: +ValueClasses, +GenericInlineClassParameter",fe98
fun inlineFun(),": String = """,,9506
fun box(),": String {
    val f = Foo(""O"")
    return f.test()
}",,4f27
fun foo(),{},// FILE: a.kt,519f
fun bar(),"{
    foo()
}",,66c3
fun box(),": String {
    val list1 = ArrayList<Int>()
    val range1 = 8 downTo 3 step 2
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }","// Auto-generated by org.jetbrains.kotlin.generators.tests.GenerateRangesCodegenTestData. DO NOT EDIT!
// WITH_STDLIB",4f27
fun t<caret>tt(),"{
    @Anno(""property $prop"")
    var <@Anno(""type parameter $prop"") T : @Anno(""bound $prop"") List<@Anno(""nested bound $prop"") String>> @receiver:Anno(""receiver $prop"") @Anno(
        ""receiver type $prop""
    ) List<@Anno(""nested receiver type $prop"")>.variableToResolve: @Anno(""return type $prop"") Collection<@Anno(""nested return type $prop"") List<@Anno(
        ""nested nested return type $prop""
    ) Int>>
    @Anno(""getter $prop"")
    get() = ""str""
    @Anno(""setter $prop"")
    set(@Anno(""setter parameter $prop"") value) = Unit
}",// BODY_RESOLVE,0146
fun foo(),": String = ""","// WITH_STDLIB
// WORKS_WHEN_VALUE_CLASS
// LANGUAGE: +ValueClasses",519f
fun foo(),: String = y,,519f
fun foo(),": String = """,,519f
fun foo(),": String = """,,519f
fun foo(),": String = """,,519f
fun foo(),": String = """,,519f
fun foo(),": String = """,,519f
"fun check(message: String, iFoo: IFoo)","{
    val actual = iFoo.foo()
    if (actual != ""OK"")
        throw Exception(""$message: \""$actual\"" != OK"")
}",,268d
fun box(),": String {
    check(""IcStr"", IcStr(""O""))
    check(""IcInt"", IcInt(42))
    check(""IcLong"", IcLong(42L))
    check(""IcAny"", IcAny(""""))
    check(""IcOverIc"", IcOverIc(IcLong(42L)))
    check(""IcOverSuperInterface"", IcOverSuperInterface(IcInt(42)))

    return ""OK""
}",,4f27
fun updateFrom(from: IrElement),"{
        startOffset = from.startOffset
        endOffset = from.endOffset
    }",,7b4b
No signature found,"fun IrElementBuilder.setSourceRange(from: IrElement) {
    startOffset = from.startOffset
    endOffset = from.endOffset
}",,6e1f
fun x(),"{

}",,7869
fun invoke(),: Foo { return this },,0a26
fun bar(),= x,,66c3
fun x(),{},,7869
fun invoke(),: Bar { return this },,0a26
fun baz(),"{
        x() // Should resolve to fun x()
    }",,b22f
No signature found,fun T.toFirSourceElement(kind: KtFakeSourceElementKind? = n,,6e1f
No signature found,"fun T.getReferencedNameAsName(): Name
    abstract fun T.getLabelName(): String?
    abstract fun T.getExpressionInParentheses(): T?
    abstract fun T.getAnnotatedExpression(): T?
    abstract fun T.getLabeledExpression(): T?
    abstract fun T.getChildNodeByType(type: IElementType): T?
    abstract val T?.receiverExpression: T?
    abstract val T?.selectorExpression: T?
    abstract val T?.arrayExpression: T?
    abstract val T?.indexExpressions: List<T>?
    abstract val T.isVararg: Boolean

    /**** Class name utils ****/
    inline fun <T> withChildClassName(
        name: Name,
        isExpect: Boolean,
        forceLocalContext: Boolean = f",,6e1f
No signature found,"fun <T> withChildClassNameRegardlessLocalContext(
        name: Name,
        isExpect: Boolean,
        l: () -> T,
    ): T {
        context.className = context.className.child(name)
        val previousIsExpect = context.containerIsExpect
        context.containerIsExpect = previousIsExpect || isExpect
        val dispatchReceiversNumber = context.dispatchReceiverTypesStack.size
        return try {
            l()
        }",,6e1f
No signature found,"fun <R> withForcedLocalContext(block: () -> R): R {
        val oldForcedLocalContext = context.inLocalContext
        context.inLocalContext = true
        val oldClassNameBeforeLocalContext = context.classNameBeforeLocalContext
        if (!oldForcedLocalContext) {
            context.classNameBeforeLocalContext = context.className
        }",,6e1f
fun registerSelfType(selfType: FirResolvedTypeRef),"{
        context.dispatchReceiverTypesStack.add(selfType.type as ConeClassLikeType)
    }",,ba5a
No signature found,"fun <T> withCapturedTypeParameters(
        status: Boolean,
        declarationSource: KtSourceElement? = n",,6e1f
No signature found,"fun <T> withContainerSymbol(
        symbol: FirBasedSymbol<*>,
        isLocal: Boolean = f",,6e1f
No signature found,"fun addCapturedTypeParameters(
        status: Boolean,
        declarationSource: KtSourceElement?,
        currentFirTypeParameters: List<FirTypeParameterRef>,
    ) {
        context.pushFirTypeParameters(status, currentFirTypeParameters)
    }",,6e1f
fun callableIdForName(name: Name),"=
        w",,f8b2
fun currentDispatchReceiverType(),: ConeClassLikeType? = c,,e6ce
fun dispatchReceiverForInnerClassConstructor(),": ConeClassLikeType? {
        val dispatchReceivers = context.dispatchReceiverTypesStack
        return dispatchReceivers.getOrNull(dispatchReceivers.lastIndex - 1)
    }",,07ee
fun callableIdForClassConstructor(),": CallableId {
        val packageName = if (context.inLocalContext) {
            CallableId.PACKAGE_FQ_NAME_FOR_LOCAL
        }",,2ce0
No signature found,"fun <T> MutableList<T>.removeLast(): T {
        return removeAt(size - 1)
    }",,6e1f
No signature found,"fun <T> MutableList<T>.pop(): T? {
        val result = lastOrNull()
        if (result != null) {
            removeAt(size - 1)
        }",,6e1f
No signature found,"fun FirExpression.toReturn(
        baseSource: KtSourceElement? = s",,6e1f
No signature found,"fun FirFunctionTarget.bindToErrorFunction(message: String, kind: DiagnosticKind) {
                bind(
                    buildErrorFunction {
                        source = baseSource
                        moduleData = baseModuleData
                        origin = FirDeclarationOrigin.Source
                        diagnostic = ConeSimpleDiagnostic(message, kind)
                        symbol = FirErrorFunctionSymbol()
                    }",,6e1f
No signature found,"fun T?.toDelegatedSelfType(firClass: FirRegularClassBuilder): FirResolvedTypeRef =
        t",,6e1f
No signature found,"fun T?.toDelegatedSelfType(firObject: FirAnonymousObjectBuilder): FirResolvedTypeRef =
        t",,6e1f
No signature found,"fun T?.toDelegatedSelfType(typeParameters: List<FirTypeParameterRef>, symbol: FirClassLikeSymbol<*>): FirResolvedTypeRef {
        return buildResolvedTypeRef {
            source = this@toDelegatedSelfType?.toFirSourceElement(KtFakeSourceElementKind.ClassSelfTypeRef)
            type = ConeClassLikeTypeImpl(
                symbol.toLookupTag(),
                typeParameters.map { ConeTypeParameterTypeImpl(it.symbol.toLookupTag(), false) }",,6e1f
fun constructorTypeParametersFromConstructedClass(ownerTypeParameters: List<FirTypeParameterRef>),": List<FirTypeParameterRef> {
        return ownerTypeParameters.mapNotNull {
            val declaredTypeParameter = (it as? FirTypeParameter) ?: return@mapNotNull null
            buildConstructedClassTypeParameterRef {
                source = declaredTypeParameter.symbol.source?.fakeElement(KtFakeSourceElementKind.ConstructorTypeParameter)
                symbol = declaredTypeParameter.symbol
            }",,bfc2
fun createErrorConstructorBuilder(diagnostic: ConeDiagnostic),"=
        F",,9692
No signature found,fun FirLoopBuilder.prepareTarget(firLabelUser: Any): FirLoopTarget = p,,6e1f
No signature found,"fun FirLoopBuilder.prepareTarget(label: FirLabel?): FirLoopTarget {
        this.label = label
        val target = FirLoopTarget(label?.name)
        context.firLoopTargets += target
        return target
    }",,6e1f
No signature found,"fun FirLoopBuilder.configure(target: FirLoopTarget, generateBlock: () -> FirBlock): FirLoop {
        block = generateBlock()
        val loop = build()
        val stackTopTarget = context.firLoopTargets.removeLast()
        assert(target == stackTopTarget) {
            ""Loop target preparation and loop configuration mismatch""
        }",,6e1f
No signature found,"fun FirLoopJumpBuilder.bindLabel(expression: T): FirLoopJumpBuilder {
        val labelName = expression.getLabelName()
        val lastLoopTarget = context.firLoopTargets.lastOrNull()
        val sourceElement = expression.toFirSourceElement()
        if (labelName == null) {
            target = lastLoopTarget ?: FirLoopTarget(labelName).apply {
                bind(
                    buildErrorLoop(
                        sourceElement,
                        ConeSimpleDiagnostic(""Cannot bind unlabeled jump to a loop"", DiagnosticKind.JumpOutsideLoop)
                    )
                )
            }",,6e1f
fun generateConstantExpressionByLiteral(expression: T),": FirExpression {
        val type = expression.elementType
        val text: String = expression.asText
        val sourceElement = expression.toFirSourceElement()

        fun reportIncorrectConstant(kind: DiagnosticKind): FirErrorExpression {
            return buildErrorExpression {
                source = sourceElement
                diagnostic = ConeSimpleDiagnostic(""Incorrect constant expression: $text"", kind)
            }",,07be
No signature found,"fun ExceptionAttachmentBuilder.withSourceElementEntry(name: String, element: T?) {
        when (element) {
            is PsiElement -> withPsiEntry(name, element)
            else -> withEntry(name, element) { it.asText }",,6e1f
"fun convertUnaryPlusMinusCallOnIntegerLiteralIfNecessary(
        source: T,
        receiver: FirExpression,
        operationToken: IElementType,
    )",": FirExpression? {
        if (receiver !is FirLiteralExpression<*>) return null
        if (receiver.kind != ConstantValueKind.IntegerLiteral) return null
        if (operationToken != PLUS && operationToken != MINUS) return null

        val value = receiver.value as Long
        val convertedValue = when (operationToken) {
            MINUS -> -value
            PLUS -> value
            else -> error(""Should not be here"")
        }",,1a75
No signature found,"fun Array<out T?>.toInterpolatingCall(
        base: T,
        getElementType: (T) -> IElementType = {",,6e1f
No signature found,"fun generateIncrementOrDecrementBlock(
        // Used to obtain source-element or text
        wholeExpression: T,
        operationReference: T?,
        receiver: T?,
        callName: Name,
        prefix: Boolean,
        convert: T.() -> FirExpression,
    ): FirExpression {
        val unwrappedReceiver = receiver.unwrap() ?: return buildErrorExpression {
            diagnostic = ConeSyntaxDiagnostic(""Inc/dec without operand"")
        }",,6e1f
No signature found,"fun T?.unwrap(): T? {
        // NOTE: By removing surrounding parentheses and labels, FirLabels will NOT be created for those labels.
        // This should be fine since the label is meaningless and unusable for a ++/-- argument or assignment LHS.
        var unwrapped = this
        while (true) {
            unwrapped = when (unwrapped?.elementType) {
                PARENTHESIZED -> unwrapped?.getExpressionInParentheses()
                LABELED_EXPRESSION -> unwrapped?.getLabeledExpression()
                ANNOTATED_EXPRESSION -> unwrapped?.getAnnotatedExpression()
                else -> return unwrapped
            }",,6e1f
No signature found,"fun generateIncrementOrDecrementBlockForArrayAccess(
        wholeExpression: T,
        operationReference: T?,
        receiver: T,
        callName: Name,
        prefix: Boolean,
        convert: T.() -> FirExpression,
    ): FirExpression {
        val array = receiver.arrayExpression
        val isInc = when (callName) {
            OperatorNameConventions.INC -> true
            OperatorNameConventions.DEC -> false
            else -> error(""Unexpected operator: $callName"")
        }",,6e1f
fun buildGetCall(sourceKind: KtFakeSourceElementKind),"=
                b",,a8be
"fun buildSetCall(argumentExpression: FirExpression, sourceElementKind: KtFakeSourceElementKind)",= b,,b686
"fun buildIncDecCall(kind: KtFakeSourceElementKind, receiver: FirExpression)",= b,,b1ab
No signature found,"fun buildBlockPossiblyUnderSafeCall(
        receiver: T?,
        convert: T.() -> FirExpression,
        sourceElementForError: KtSourceElement?,
        init: FirBlockBuilder.(receiver: FirExpression) -> Unit = {",,6e1f
No signature found,"fun T?.generateAssignment(
        baseSource: KtSourceElement?,
        arrayAccessSource: KtSourceElement?,
        rhsExpression: FirExpression,
        operation: FirOperation,
        annotations: List<FirAnnotation>,
        // Effectively `value = r",,6e1f
No signature found,"fun putAssignmentToSafeCall(
        safeCallNonAssignment: FirSafeCallExpression,
        baseSource: KtSourceElement?,
        rhsExpression: FirExpression,
        annotations: List<FirAnnotation>,
    ): FirSafeCallExpression {
        val nestedAccess = safeCallNonAssignment.selector as FirQualifiedAccessExpression

        val assignment = buildVariableAssignment {
            source = baseSource
            lValue = nestedAccess
            rValue = rhsExpression
            this.annotations += annotations
        }",,6e1f
No signature found,"fun generateAugmentedArraySetCall(
        receiver: FirExpression, // a.get(x,y)
        baseSource: KtSourceElement?,
        arrayAccessSource: KtSourceElement?,
        operation: FirOperation,
        annotations: List<FirAnnotation>,
        rhs: T?,
        convert: T.() -> FirExpression,
    ): FirStatement {
        require(receiver is FirFunctionCall) {
            ""Array access should be desugared to a function call, but $receiver is found""
        }",,6e1f
fun generate(),"{
            if (classBuilder.classKind != ClassKind.OBJECT) {
                generateComponentFunctions()
                generateCopyFunction()
            }",,3be5
fun generateComponentFunctions(),"{
            var componentIndex = 1
            for ((sourceNode, firProperty) in zippedParameters) {
                if (!firProperty.isVal && !firProperty.isVar) continue
                val name = Name.identifier(""component$componentIndex"")
                componentIndex++
                val componentFunction = buildSimpleFunction {
                    source = sourceNode?.toFirSourceElement(KtFakeSourceElementKind.DataClassGeneratedMembers)
                    moduleData = baseModuleData
                    origin = FirDeclarationOrigin.Synthetic.DataClassMember
                    returnTypeRef = firProperty.returnTypeRef.copyWithNewSourceKind(KtFakeSourceElementKind.DataClassGeneratedMembers)
                    this.name = name
                    status = FirDeclarationStatusImpl(firProperty.visibility, Modality.FINAL).apply {
                        isOperator = true
                    }","// Refer to (IR utils or FIR backend) DataClassMembersGenerator for generating equals, hashCode, and toString",c9e8
fun generateCopyFunction(),"{
            classBuilder.addDeclaration(
                classBuilder.createDataClassCopyFunction(
                    ClassId(packageFqName, classFqName, isLocal = false),
                    source,
                    currentDispatchReceiverType(),
                    zippedParameters,
                    isFromLibrary = false,
                    createClassTypeRefWithSourceKind,
                    createParameterTypeRefWithSourceKind,
                    { src, kind -> src?.toFirSourceElement(kind) }",,64a9
No signature found,"fun FirRegularClass.initContainingClassForLocalAttr() {
        if (isLocal) {
            val currentDispatchReceiverType = currentDispatchReceiverType()
            if (currentDispatchReceiverType != null) {
                containingClassForLocalAttr = currentDispatchReceiverType.lookupTag
            }",,6e1f
No signature found,"fun FirRegularClassBuilder.initCompanionObjectSymbolAttr() {
        companionObjectSymbol = (declarations.firstOrNull { it is FirRegularClass && it.isCompanion }",,6e1f
No signature found,"fun FirCallableDeclaration.initContainingClassAttr() {
        initContainingClassAttr(context)
    }",,6e1f
"fun buildLabel(rawName: String, source: KtSourceElement)",": FirLabel {
        val firLabel = buildLabel {
            name = KtPsiUtil.unquoteIdentifier(rawName)
            this.source = source
        }",,bc44
"fun getForbiddenLabelKind(rawName: String, isMultipleLabel: Boolean)",: ForbiddenLabelKind? = w,,d289
No signature found,"fun buildExpressionHandlingErrors(
        element: FirElement?,
        elementSource: KtSourceElement,
        forbiddenLabelKind: ForbiddenLabelKind?,
        forbiddenLabelSource: KtSourceElement?,
    ): FirElement {
        return if (element != null) {
            if (forbiddenLabelKind != null) {
                require(forbiddenLabelSource != null)
                buildErrorExpression {
                    this.source = element.source
                    this.expression = element as? FirExpression
                    diagnostic = when (forbiddenLabelKind) {
                        ForbiddenLabelKind.UNDERSCORE_IS_RESERVED -> ConeUnderscoreIsReserved(forbiddenLabelSource)
                        ForbiddenLabelKind.MULTIPLE_LABEL -> ConeMultipleLabelsAreForbidden(forbiddenLabelSource)
                    }",,6e1f
No signature found,"fun convertFirSelector(
        firSelector: FirQualifiedAccessExpression,
        source: KtSourceElement?,
        receiver: FirExpression,
    ): FirQualifiedAccessExpression {
        return if (firSelector is FirImplicitInvokeCall) {
            buildImplicitInvokeCall {
                this.source = source
                annotations.addAll(firSelector.annotations)
                typeArguments.addAll(firSelector.typeArguments)
                explicitReceiver = firSelector.explicitReceiver
                argumentList = buildArgumentList {
                    arguments.add(receiver)
                    arguments.addAll(firSelector.arguments)
                }",,6e1f
No signature found,"fun convertValueParameterName(
        safeName: Name,
        valueParameterDeclaration: ValueParameterDeclaration,
        rawName: () -> String?,
    ): Name {
        return if (valueParameterDeclaration == ValueParameterDeclaration.LAMBDA && rawName() == ""_""
            ||
            valueParameterDeclaration == ValueParameterDeclaration.CATCH &&
            safeName.asString() == ""_""
        ) {
            SpecialNames.UNDERSCORE_FOR_UNUSED_VAR
        }",,6e1f
fun buildErrorTopLevelDestructuringDeclaration(source: KtSourceElement),= b,,eccf
fun createNoTypeForParameterTypeRef(parameterSource: KtSourceElement),": FirErrorTypeRef {
        return buildErrorTypeRef {
            source = parameterSource
            diagnostic = ConeSimpleDiagnostic(""No type for parameter"", DiagnosticKind.ValueParameterWithNoTypeAnnotation)
        }",,386b
No signature found,"fun <TBase, TSource : TBase, TParameter : TBase> FirRegularClassBuilder.createDataClassCopyFunction(
    classId: ClassId,
    sourceElement: TSource,
    dispatchReceiver: ConeClassLikeType?,
    zippedParameters: List<Pair<TParameter, FirProperty>>,
    isFromLibrary: Boolean,
    createClassTypeRefWithSourceKind: (KtFakeSourceElementKind) -> FirTypeRef,
    createParameterTypeRefWithSourceKind: (FirProperty, KtFakeSourceElementKind) -> FirTypeRef,
    toFirSource: (TBase?, KtFakeSourceElementKind) -> KtSourceElement?,
    addValueParameterAnnotations: FirValueParameterBuilder.(TParameter) -> Unit,
    isVararg: (TParameter) -> Boolean,
): FirSimpleFunction {
    fun generateComponentAccess(
        parameterSource: KtSourceElement?,
        firProperty: FirProperty,
        classTypeRefWithCorrectSourceKind: FirTypeRef,
        firPropertyReturnTypeRefWithCorrectSourceKind: FirTypeRef,
    ) =
        buildPropertyAccessExpression {
            this.source = parameterSource
            coneTypeOrNull = firPropertyReturnTypeRefWithCorrectSourceKind.coneTypeOrNull
            this.dispatchReceiver = buildThisReceiverExpression {
                this.source = parameterSource
                calleeReference = buildImplicitThisReference {
                    boundSymbol = this@createDataClassCopyFunction.symbol
                }",,6e1f
No signature found,fun List<FirAnnotationCall>.filterConstructorPropertyRelevantAnnotations(isVar: Boolean) = f,,6e1f
No signature found,fun List<FirAnnotationCall>.filterStandalonePropertyRelevantAnnotations(isVar: Boolean) = f,,6e1f
"fun check(declaration: KtDeclaration, descriptor: DeclarationDescriptor, context: DeclarationCheckerContext)","{
        if (descriptor !is MemberDescriptor || !descriptor.isExternal) return

        val trace = context.trace
        if (descriptor !is FunctionDescriptor) {
            val target = when (descriptor) {
                is PropertyDescriptor -> ""property""
                is ClassDescriptor -> ""class""
                else -> ""non-function declaration""
            }",,5073
fun foo(),{},"// FIR_IDENTICAL
//KT-2069 Cannot call super method when superclass has type parameters",519f
fun bar(),"{
        super<T1>.foo()
    }",,66c3
No signature found,"fun doCreateIndex(index: AbstractPsiBasedDeclarationProvider.Index) {
        for (file in packageFiles) {
            for (declaration in file.declarations) {
                assert(fqName == file.packageFqName) { ""Files declaration utils contains file with invalid package"" }",,6e1f
No signature found,fun getAllDeclaredSubPackages(nameFilter: (Name) -> Boolean): Collection<FqName> = a,,6e1f
fun getPackageFiles(),= p,,b306
fun containsFile(file: KtFile),= f,,338a
fun toString(),"= """,,a535
No signature found,"fun test(s: () -> String): String {
    return s()
}","// TARGET_BACKEND: JVM
// WITH_STDLIB
// FILE: 1.kt",6e1f
fun box(),": String {
    return test(Foo(""OK"")::a)
}",// FILE: 2.kt,4f27
No signature found,"fun report(severity: CompilerMessageSeverity, message: String, location: CompilerMessageSourceLocation?) {
        if (severity.isError) {
            errors.add(message)
        }",,6e1f
fun clear(),"{
        errors.clear()
    }",,44a6
fun hasErrors(),": Boolean =
        e",,f971
fun box(),": String {
    val x = MyNumber('*'.code).toChar()
    if (x != '*') return ""Fail 1: $x""

    val y = java.lang.Integer('+'.code).toChar()
    if (y != '+') return ""Fail 2: $y""

    return ""OK""
}","// TARGET_BACKEND: JVM_IR
// ISSUE: KT-23447
// WITH_STDLIB

// FILE: MyNumber.java",4f27
fun bar(),": String = ""","// EXPECTED_REACHABLE_NODES: 1265
// RUN_PLAIN_BOX_FUNCTION
// INFER_MAIN_MODULE
// SKIP_MINIFICATION
// SKIP_NODE_JS
// SKIP_DCE_DRIVEN

// MODULE: exportProtectedMembers
// FILE: lib.kt",66c3
fun returnAny(),": Any
}

class C : I {
    override suspend : IC = IC(""OK"")
}",,cac3
No signature found,"fun <reified T : Enum<T>> myValues(): String {
    val values = enumValues<T>()
    return ""OK""
}",,6e1f
No signature found,"fun <reified T : Enum<T>> value(): String {
    val values = enumValueOf<T>(""123"")
    return ""OK""
}",,6e1f
fun main(),"{
    myValues<Z>()
    value<Z>()
}",,d987
"fun lightClassesToCheck(ktFiles: List<KtFile>, module: KtTestModule, testServices: TestServices)",": Collection<PsiClass> {
        val fqName = LightClassTestCommon.fqNameInTestDataFile(testDataPath.toFile())

        val ktFile = ktFiles.first()
        return listOfNotNull(findLightClass(fqName, ktFile.project))
    }",,32bf
fun foo(),{},"// FIR_IDENTICAL
// ISSUE: KT-57211",519f
No signature found,"fun test(v: Any?) {
    (v as? String)?.let { <expr>it</expr> ->
        it.length
    }",,6e1f
No signature found,"fun `serialize - deserialize - String`() {
        val context = TestIdeaKotlinSerializationContext()
        val serializer = IdeaKotlinExtrasSerializer.javaIoSerializable<String>()
        val binary = assertNotNull(
            serializer.serialize(context, ""Sunny Cash""),
            ""Failed to serialize: ${context.logger.reports}",,6e1f
No signature found,"fun `serialize - deserialize - non serializable object`() {
        class ThisIsNotSerializable

        val context = TestIdeaKotlinSerializationContext()
        val serializer = IdeaKotlinExtrasSerializer.javaIoSerializable<ThisIsNotSerializable>()
        assertNull(serializer.serialize(context, ThisIsNotSerializable()), ""Expected null return value for non serializable object"")

        val serializationFailureReportsCount = context.logger.reports.count { report ->
            report.message.startsWith(IdeaKotlinJavaIoSerializableExtrasSerializer.ErrorMessages.SERIALIZATION_FAILURE)
        }",,6e1f
fun readResolve(),"fun `serialize - deserialize - exception during deserialization`() {
        data class TestException(override val message: String) : Exception(message)

        val exception = TestException(""Failed in 'readResolve()'"")

        class NotDeserializable : Serializable {
            : Any = throw exception
        }",,ee9e
No signature found,fun <T> FunctionalList<T>.plus(element: T) : FunctionalList<T> = o,"// FIR_IDENTICAL
//KT-1191 Wrong detection of unused parameters",6e1f
fun foo(unused: Int),= o,,bba9
fun doSmth(i: String),= 4,,0e53
No signature found,"fun test_1(f: () -> Unit) {
    contract { callsInPlace(f, InvocationKind.EXACTLY_ONCE) }",// ISSUE: KT-63414,6e1f
No signature found,"fun test_2(f: () -> Int): Int {
    contract { callsInPlace(f, InvocationKind.EXACTLY_ONCE) }",// should be ok,6e1f
No signature found,"fun test_3(f: () -> Unit) {
    <!WRONG_INVOCATION_KIND!>contract { callsInPlace(f, InvocationKind.EXACTLY_ONCE) }",// should be ok,6e1f
No signature found,"fun test_4(f: () -> Unit) {
    contract { callsInPlace(f, InvocationKind.EXACTLY_ONCE) }",,6e1f
No signature found,"fun test_5(f: () -> Unit) {
    contract { callsInPlace(f, InvocationKind.EXACTLY_ONCE) }",// should be ok,6e1f
No signature found,"fun test_6(f: () -> Int): Int {
    contract { callsInPlace(f, InvocationKind.EXACTLY_ONCE) }",// should be ok,6e1f
No signature found,"fun test_7(f: () -> Unit) {
    <!WRONG_INVOCATION_KIND!>contract { callsInPlace(f, InvocationKind.EXACTLY_ONCE) }",// should be ok,6e1f
No signature found,"fun test_8(f: () -> Int): Int {
    contract { callsInPlace(f, InvocationKind.EXACTLY_ONCE) }",,6e1f
fun foo(),: Char = ',// EXPECTED_REACHABLE_NODES: 1293,519f
fun foo(),": Any
}

class B : A(), I

fun typeOf(x: dynamic): String = j",,519f
fun box(),": String {
    val b = B()
    val i: I = B()
    val a: A = B()

    val r1 = typeOf(b.asDynamic().foo())
    if (r1 != ""object"") return ""fail1: $r1""

    val r2 = typeOf(i.asDynamic().foo())
    if (r2 != ""object"") return ""fail2: $r2""

    val r3 = typeOf(a.asDynamic().foo())
    if (r3 != ""object"") return ""fail3: $r3""

    val x4 = b.foo()
    val r4 = typeOf(x4)
    if (r4 != ""number"") return ""fail4: $r4""

    val x5 = i.foo()
    val r5 = typeOf(x5)
    if (r5 != ""object"") return ""fail5: $r5""

    val x6 = a.foo()
    val r6 = typeOf(x6)
    if (r6 != ""number"") return ""fail6: $r6""

    return ""OK""
}",,4f27
fun box(),": String {
    var result = """"
    val a = A(1, ""a"")
    val b = a.copy()
    if (b.a == 1 && b.b == ""a"") {
        result += ""1""
    }",,4f27
fun get(i: Int),= 0,// !DIAGNOSTICS: -UNUSED_PARAMETER,e829
"fun set(i: Int, newValue: Int)",{},,516f
"fun set(i: Int, newValue: String)",{},,5f4e
fun testLegal(),"{
    ++Legal[0]
    Legal[0]++
    Legal[0] += 1
}",,341e
fun get(i: Int),= 0,,e829
"fun set(i: Int, newValue: String)",{},,5f4e
fun testMismatchingTypes(),"{
    <!ARGUMENT_TYPE_MISMATCH!>++MismatchingTypes[0]<!>
    <!ARGUMENT_TYPE_MISMATCH!>MismatchingTypes[0]++<!>
    MismatchingTypes[0] <!UNRESOLVED_REFERENCE!>+=<!> 1
}",,1393
fun get(i: Int),= 0,,e829
"fun set(i: Int, j: Int, newValue: Int)",{},,1c1b
"fun get(i: Int, j: Int)",= 0,,dcd0
"fun set(i: Int, newValue: Int)",{},,516f
fun testMismatchingArities(),"{
    <!NO_VALUE_FOR_PARAMETER!>++MismatchingArities1[0]<!>
    <!NO_VALUE_FOR_PARAMETER!>MismatchingArities1[0]++<!>
    MismatchingArities1[0] <!UNRESOLVED_REFERENCE!>+=<!> 1

    ++<!NO_VALUE_FOR_PARAMETER!>MismatchingArities2[0]<!>
    <!NO_VALUE_FOR_PARAMETER!>MismatchingArities2[0]<!>++
    <!NO_VALUE_FOR_PARAMETER!>MismatchingArities2[0]<!> += 1
}",,6611
fun createPointer(),: KtSymbolPointer<KtPackageSymbol> = K,,ffc4
No signature found,"fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as KtFirPackageSymbol

        if (fqName != other.fqName) return false
        if (token != other.token) return false

        return true
    }",,6e1f
fun hashCode(),": Int {
        var result = fqName.hashCode()
        result = 31 * result + token.hashCode()
        return result
    }",,6874
fun copy(),= K,,5070
fun isValid(),: Boolean = p,,a2fc
No signature found,"fun <reified T : Any> Sequence<*>.firstIsInstanceOrNull(): T? {
    for (element in this) if (element is T) return element
    return null
}",,6e1f
No signature found,"fun <reified T : Any> Iterable<*>.firstIsInstanceOrNull(): T? {
    for (element in this) if (element is T) return element
    return null
}",,6e1f
No signature found,"fun <reified T : Any> Array<*>.firstIsInstanceOrNull(): T? {
    for (element in this) if (element is T) return element
    return null
}",,6e1f
No signature found,"fun <reified T> Sequence<*>.firstIsInstance(): T {
    for (element in this) if (element is T) return element
    throw NoSuchElementException(""No element of given type found"")
}",,6e1f
No signature found,"fun <reified T> Iterable<*>.firstIsInstance(): T {
    for (element in this) if (element is T) return element
    throw NoSuchElementException(""No element of given type found"")
}",,6e1f
No signature found,"fun <reified T> Array<*>.firstIsInstance(): T {
    for (element in this) if (element is T) return element
    throw NoSuchElementException(""No element of given type found"")
}",,6e1f
No signature found,"fun <reified T> Iterable<*>.filterIsInstanceWithChecker(additionalChecker: (T) -> Boolean): List<T> {
    val result = arrayListOf<T>()
    for (element in this) {
        if (element is T && additionalChecker(element)) {
            result += element
        }",,6e1f
No signature found,"fun <reified T : Any> Iterable<*>.lastIsInstanceOrNull(): T? {
    when (this) {
        is List<*> -> {
            for (i in this.indices.reversed()) {
                val element = this[i]
                if (element is T) return element
            }",,6e1f
No signature found,"fun <T, reified R> Iterable<T>.partitionIsInstance(): Pair<List<R>, List<T>> {
    val first = ArrayList<R>()
    val second = ArrayList<T>()
    for (element in this) {
        if (element is R) {
            first.add(element)
        }",,6e1f
No signature found,"fun <reified T> List<*>.castAll(): List<@kotlin.internal.NoInfer T> {
    for (element in this) element as T
    @Suppress(""UNCHECKED_CAST"")
    return this as List<T>
}",,6e1f
No signature found,"fun <reified T> Collection<*>.castAll(): Collection<@kotlin.internal.NoInfer T> {
    for (element in this) element as T
    @Suppress(""UNCHECKED_CAST"")
    return this as Collection<T>
}",,6e1f
No signature found,fun <T> sequenceOfLazyValues(vararg elements: () -> T): Sequence<T> = e,,6e1f
No signature found,"fun <T1, T2> Pair<T1, T2>.swap(): Pair<T2, T1> = P",,6e1f
No signature found,fun <reified T : Any> Any?.safeAs(): @kotlin.internal.NoInfer T? = t,,6e1f
No signature found,fun <reified T : Any> Any?.cast(): T = t,,6e1f
No signature found,fun <reified T : Any> Any?.assertedCast(message: () -> String): T = t,,6e1f
No signature found,"fun <T : Any> constant(calculator: () -> T): T {
    val cached = constantMap[calculator]
    @Suppress(""UNCHECKED_CAST"")
    if (cached != null) return cached as T

    // safety check
    val fields = calculator::class.java.declaredFields.filter { it.modifiers.and(Modifier.STATIC) == 0 }",,6e1f
No signature found,"fun String.indexOfOrNull(char: Char, startIndex: Int = 0",,6e1f
No signature found,"fun String.lastIndexOfOrNull(char: Char, startIndex: Int = l",,6e1f
No signature found,"fun <T, R : Any> Iterable<T>.firstNotNullResult(transform: (T) -> R?): R? {
    for (element in this) {
        val result = transform(element)
        if (result != null) return result
    }",,6e1f
No signature found,"fun <T, R : Any> Array<T>.firstNotNullResult(transform: (T) -> R?): R? {
    for (element in this) {
        val result = transform(element)
        if (result != null) return result
    }",,6e1f
No signature found,"fun <T> Iterable<T>.sumByLong(selector: (T) -> Long): Long {
    var sum: Long = 0
    for (element in this) {
        sum += selector(element)
    }",,6e1f
No signature found,"fun <T, C : Collection<T>, O> C.ifNotEmpty(body: C.() -> O?): O? = i",,6e1f
No signature found,"fun <T, O> Array<out T>.ifNotEmpty(body: Array<out T>.() -> O?): O? = i",,6e1f
No signature found,"fun <T> measureTimeMillisWithResult(block: () -> T): Pair<Long, T> {
    val start = System.currentTimeMillis()
    val result = block()
    return Pair(System.currentTimeMillis() - start, result)
}",,6e1f
No signature found,"fun <T, C : MutableCollection<in T>> Iterable<Iterable<T>>.flattenTo(c: C): C {
    for (element in this) {
        c.addAll(element)
    }",,6e1f
No signature found,"fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapToNullable(destination: C, transform: (T) -> Iterable<R>?): C? {
    for (element in this) {
        val list = transform(element) ?: return null
        destination.addAll(list)
    }",,6e1f
No signature found,"fun <T, R> Iterable<T>.same(extractor: (T) -> R): Boolean {
    val iterator = iterator()
    val firstValue = extractor(iterator.next())
    while (iterator.hasNext()) {
        val item = iterator.next()
        val value = extractor(item)
        if (value != firstValue) {
            return false
        }",,6e1f
No signature found,"fun <R> runIf(condition: Boolean, block: () -> R): R? = i",,6e1f
No signature found,"fun <R> runUnless(condition: Boolean, block: () -> R): R? = i",,6e1f
No signature found,"fun <A : B, B> A.butIf(condition: Boolean, block: (A) -> B): B = i",,6e1f
No signature found,"fun <T, R> Collection<T>.foldMap(transform: (T) -> R, operation: (R, R) -> R): R {
    val iterator = iterator()
    var result = transform(iterator.next())
    while (iterator.hasNext()) {
        result = operation(result, transform(iterator.next()))
    }",,6e1f
No signature found,"fun <E> MutableList<E>.trimToSize(newSize: Int) {
    subList(newSize, size).clear()
}",,6e1f
No signature found,"fun <K, V, VA : V> MutableMap<K, V>.getOrPut(key: K, defaultValue: (K) -> VA, postCompute: (VA) -> Unit): V {
    val value = get(key)
    return if (value == null) {
        val answer = defaultValue(key)
        put(key, answer)
        postCompute(answer)
        answer
    }",,6e1f
No signature found,"fun <T> Set<T>.compactIfPossible(): Set<T> =
    w",,6e1f
No signature found,"fun <K, V> Map<K, V>.compactIfPossible(): Map<K, V> =
    w",,6e1f
No signature found,"fun <T, R : T> R.applyIf(`if`: Boolean, body: R.() -> T): T =
    i",,6e1f
No signature found,"fun <T> Boolean.ifTrue(body: () -> T?): T? =
    i",,6e1f
No signature found,"fun <T> Boolean.ifFalse(body: () -> T?): T? =
    i",,6e1f
No signature found,"fun <T, K> List<T>.flatGroupBy(keySelector: (T) -> Collection<K>): Map<K, List<T>> {
    return flatGroupBy(keySelector, keyTransformer = { it }",,6e1f
No signature found,"fun <T, U, K, V> List<T>.flatGroupBy(
    keySelector: (T) -> Collection<U>,
    keyTransformer: (U) -> K,
    valueTransformer: (T) -> V
): Map<K, List<V>> {
    val result = mutableMapOf<K, MutableList<V>>()
    for (element in this) {
        val keys = keySelector(element)
        val value = valueTransformer(element)
        for (key in keys) {
            val transformedKey = keyTransformer(key)
            // Map.computeIfAbsent is missing in JDK 1.6
            var list = result[transformedKey]
            if (list == null) {
                list = mutableListOf()
                result[transformedKey] = list
            }",,6e1f
No signature found,"fun <T, K> List<T>.flatAssociateBy(selector: (T) -> Collection<K>): Map<K, T> {
    return buildMap {
        for (value in this@flatAssociateBy) {
            for (key in selector(value)) {
                put(key, value)
            }",,6e1f
No signature found,fun <E> MutableList<E>.popLast(): E = r,,6e1f
No signature found,"fun <K : Enum<K>, V> enumMapOf(vararg pairs: Pair<K, V>): EnumMap<K, V> = E",,6e1f
No signature found,"fun <T : Enum<T>> enumSetOf(element: T, vararg elements: T): EnumSet<T> = E",,6e1f
No signature found,"fun shouldNotBeCalled(message: String = """,,6e1f
No signature found,"fun <T, R> Iterable<T>.zipWithDefault(other: Iterable<R>, leftDefault: () -> T, rightDefault: () -> R): List<Pair<T, R>> {
    val leftIterator = this.iterator()
    val rightIterator = other.iterator()
    return buildList {
        while (leftIterator.hasNext() && rightIterator.hasNext()) {
            add(leftIterator.next() to rightIterator.next())
        }",,6e1f
No signature found,"fun <T, R> Iterable<T>.zipWithNulls(other: Iterable<R>): List<Pair<T?, R?>> {
    return zipWithDefault(other, { null }",,6e1f
No signature found,"fun unreachableBranch(argument: Any?): Nothing {
    error(""This argument should've been processed by previous when branches but it wasn't: $argument"")
}",,6e1f
No signature found,"fun <T, A : Appendable> Iterable<T>.joinToWithBuffer(
    buffer: A,
    separator: CharSequence = ""","/**
 * Calls [appendElement] on [buffer] for all the elements, also appending [separator] between them and using the given [prefix]
 * and [postfix] if supplied.
 *
 * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]
 * elements will be appended, followed by the [truncated] string (which defaults to ""..."").
 */",6e1f
No signature found,"fun inlineFun(a: A, lambda: (A) -> String = A","// SKIP_INLINE_CHECK_IN: inlineFun$default
// FILE: 1.kt",6e1f
fun box(),": String {
    return inlineFun(A())
}",,4f27
fun box(),": String {
    assertEquals(3, A::class.constructors.size)
    assertEquals(1, B::class.constructors.size)

    assertTrue(Collections.disjoint(A::class.members, A::class.constructors))
    assertTrue(Collections.disjoint(B::class.members, B::class.constructors))

    assertEquals(1, C.Nested::class.constructors.size)
    assertEquals(1, C.Inner::class.constructors.size)

    return ""OK""
}","// TARGET_BACKEND: JVM

// WITH_REFLECT",4f27
fun getPackage(),= j,// EXPECTED_REACHABLE_NODES: 1303,5656
fun box(),": String {
    val a = B()

    assertEquals(42, a.x)
    assertEquals(15, a.y)
    a.y = 13
    assertEquals(30, a.y)
    assertEquals(55, a.z)

    val d: dynamic = B()

    assertEquals(42, d.getX_())
    assertEquals(15, d.getY_())
    d.setY_(13)
    assertEquals(30, d.getY_())
    assertEquals(55, d.getZ_())

    return ""OK""
}",,4f27
fun file2(),{},,fa9f
fun memberFun(),"val memberProp: Int
    class Nested
    inner class Inner
}
actual <!EXPECT_AND_ACTUAL_IN_THE_SAME_MODULE!>class CommonClass<!> {
    actual  {}","// MODULE: common
// TARGET_PLATFORM: Common",a83f
No signature found,"fun <!EXPECT_AND_ACTUAL_IN_THE_SAME_MODULE!>commonFun<!>()
actual fun <!EXPECT_AND_ACTUAL_IN_THE_SAME_MODULE!>commonFun<!>() {}",,6e1f
fun memberFun(),"val memberProp: Int
    class Nested
    inner class Inner
}
actual <!EXPECT_AND_ACTUAL_IN_THE_SAME_MODULE!>class IntermediateClass<!> {
    actual  {}",,a83f
No signature found,"fun <!EXPECT_AND_ACTUAL_IN_THE_SAME_MODULE!>intermediateFun<!>()
actual fun <!EXPECT_AND_ACTUAL_IN_THE_SAME_MODULE!>intermediateFun<!>() {}",,6e1f
fun memberFun(),"val memberProp: Int
    class Nested
    inner class Inner
}
actual <!EXPECT_AND_ACTUAL_IN_THE_SAME_MODULE!>class PlatformClass<!> {
    actual  {}",,a83f
No signature found,"fun <!EXPECT_AND_ACTUAL_IN_THE_SAME_MODULE!>platformFun<!>()
actual fun <!EXPECT_AND_ACTUAL_IN_THE_SAME_MODULE!>platformFun<!>() {}",,6e1f
fun <K> id(x: K),: K = x,"// TARGET_BACKEND: JVM_IR
// IGNORE_BACKEND_K1: JVM_IR",cbda
fun box(),": String {
    val x4: String.() -> String = if (true) {fun String.(): String { return ""this"" }",,4f27
No signature found,"fun String.(): String { return ""this"" }",,6e1f
No signature found,"fun String.(): String { return ""this"" }",,6e1f
No signature found,"fun String.(): String { return ""this"" }",,6e1f
fun suspendWithValue(v: String),: String = s,"// WITH_STDLIB
// WITH_COROUTINES
// JVM_ABI_K1_K2_DIFF: KT-63864",57d2
fun suspendWithException(e: Exception),: String = s,,b533
No signature found,"fun run(c: suspend Controller.() -> String) {
        c.startCoroutine(this, handleResultContinuation {
            globalResult = it
        }",,6e1f
No signature found,fun builder(expectException: Boolean = f,,6e1f
fun commonThrow(t: Throwable),"{
    throw t
}",,1caa
fun box(),": String {
    builder {
        try {
            try {
                suspendWithValue(""<ignored>"")
                suspendWithValue(""OK"")
            }",,4f27
No signature found,"fun A.invoke() = """,,6e1f
No signature found,"fun A.invoke(i: Int) = """,,6e1f
fun foo(),= A,,519f
No signature found,"fun B.test(): String {
    if (A()() != ""##"") return ""fail1""
    if (A()(1) != ""#1"") return ""fail2""
    if (foo()() != ""##"") return ""fail3""
    if (foo()(42) != ""#42"") return ""fail4""
    if ((foo())(42) != ""#42"") return ""fail5""
    if ({ -> A()}",,6e1f
fun box(),: String = B,,4f27
fun box(),: String = A,,4f27
fun main(args: Array<String>),"{
    for (arg in args)
        println(arg)

    // or
    println()
    for (i in args.indices)
        println(args[i])
}","// MAIN_ARGS: [a,b,c]",5b61
fun test(),"= """,// FIR_IDENTICAL,fe98
fun test(),"= """,,fe98
fun intArray(),= i,"// IMPORTANT!
// Please, when your changes cause failures in bytecodeText tests for 'for' loops,
// examine the resulting bytecode shape carefully.
// Range and progression-based loops generated with Kotlin compiler should be
// as close as possible to Java counter loops ('for (int i = a; i < b; ++i) { ... }').
// Otherwise it may result in performance regression due to missing HotSpot optimizations.
// Run Kotlin compiler benchmarks (https://github.com/Kotlin/kotlin-benchmarks)
// with compiler built from your changes if you are not sure.",3346
fun longArray(),= l,,38ae
fun f(),": Int {
    var n = 0
    for (i in intArray()) {
        n++
    }",,f6fb
fun use(dummy: InternalDummy),"{
        if (dummy.x != ""InternalDummy.x"") throw AssertionError(""dummy.x = ${dummy.x}",,bb50
fun foo(),= 1,"// FIR_IDENTICAL
// Functions can be recursively annotated",519f
fun bar(),= 2,,66c3
fun simple(),"{
    }",,4e1d
fun generic(list: List<String>),"{
    }",,99a1
fun applySomething(build: Build),= w,"// JVM_ABI_K1_K2_DIFF: KT-63960, KT-63963, KT-63964",d498
fun box(),= O,// !LANGUAGE: +ProperVisibilityForCompanionObjectInstanceField,4f27
No signature found,fun <T> foo(f: (T) -> String) {},,6e1f
fun test(),"{
    <caret>foo { x: Int -> ""$x""}",,fe98
No signature found,"fun Test.plus(p: Int): Test {
    return Test(result + p)
}",// FILE: 1.kt,6e1f
No signature found,"fun Test.inc(): Test {
    return Test(result + 1)
}",,6e1f
fun box(),": String {
    z = Test(1)
    z += 1
    if (result.result != 2) return ""fail 1: ${result.result}",// FILE: 2.kt,4f27
fun extractAttributeFromAnnotation(annotation: FirAnnotation),": ConeAttribute<*>? {
        val sign = when (annotation.annotationTypeRef.coneTypeSafe<ConeClassLikeType>()?.classId) {
            PositiveClassId -> ConeNumberSignAttribute.Sign.Positive
            NegativeClassId -> ConeNumberSignAttribute.Sign.Negative
            else -> return null
        }",,24db
No signature found,"fun convertAttributeToAnnotation(attribute: ConeAttribute<*>): FirAnnotation? {
        if (attribute !is ConeNumberSignAttribute) return null
        val classId = when (attribute.sign) {
            ConeNumberSignAttribute.Sign.Positive -> PositiveClassId
            ConeNumberSignAttribute.Sign.Negative -> NegativeClassId
        }",,6e1f
fun toString(),": String = """,,a535
fun toString(),": String = """,,a535
fun toString(),": String {
            return property.toString()
        }",,a535
No signature found,"fun classify(compilation: KotlinCompilation<*>): SourceSetTree? {
        return when (this) {
            is Default -> SourceSetTree(compilation.name)
            is Property -> property.awaitFinalValue()
            is Value -> tree
            is Name -> SourceSetTree(name)
            is None -> null
        }",,6e1f
No signature found,"fun foo(x: String?): Int {
    var y: Any
    loop@ while (true) {
        y = when (x) {
            null -> break@loop
            ""abc"" -> return 0
            ""xyz"" -> return 1
            else -> x.length
        }",// !CHECK_TYPE,6e1f
fun f(),{},"// TARGET_BACKEND: JVM
// LANGUAGE: +MultiPlatformProjects
// MODULE: m1-common
// FILE: common.kt",f6fb
fun f(),{},,f6fb
fun g(),{},,4958
fun testAsmVersionForBundledKotlinCompiler(),"{
        val field = RecordComponentVisitor::class.java.getDeclaredField(""api"").also { it.isAccessible = true }",,626e
No signature found,"fun TargetListBuilder.propertyTargets(backingField: Boolean, delegate: Boolean) {
        if (backingField) extraTargets(FIELD)
        if (delegate) {
            onlyWithUseSiteTarget(VALUE_PARAMETER, PROPERTY_GETTER, PROPERTY_SETTER, FIELD)
        }",,6e1f
"fun T_MEMBER_PROPERTY(backingField: Boolean, delegate: Boolean)","=
        t",,be3e
"fun T_TOP_LEVEL_PROPERTY(backingField: Boolean, delegate: Boolean)","=
        t",,2b5a
No signature found,"fun targetList(vararg target: KotlinTarget, otherTargets: TargetListBuilder.() -> Unit = {",,6e1f
fun extraTargets(vararg targets: KotlinTarget),"{
            canBeSubstituted = targets.toList()
        }",,d05b
fun onlyWithUseSiteTarget(vararg targets: KotlinTarget),"{
            onlyWithUseSiteTarget = targets.toList()
        }",,24e1
fun build(),= A,,5bf9
"fun printFactory(generationPath: File, model: Model)",: GeneratedFile = p,,1906
No signature found,"fun SmartPrinter.printFactoryMethod(factoryMethod: FactoryMethod) {
    println()
    printFunctionDeclaration(
        name = factoryMethod.name,
        parameters = factoryMethod.parameters,
        returnType = factoryMethod.element,
        typeParameters = factoryMethod.element.params,
        allParametersOnSeparateLines = factoryMethod.parameters.size > MAX_FUNCTION_PARAMETERS_ON_ONE_LINE,
    )
    println()
}",,6e1f
fun testFun_generated(),{},,6d6e
No signature found,"fun generateFunctions(callableId: CallableId, context: MemberGenerationContext?): List<FirNamedFunctionSymbol> {
        if (context != null) return emptyList()
        if (callableId.callableName != TEST_FUN_NAME) return emptyList()
        val function = createTopLevelFunction(Key, callableId, session.builtinTypes.unitType.type) {
            visibility = Visibilities.Private
            status { isSuspend = true }",,6e1f
fun getTopLevelCallableIds(),": Set<CallableId> {
        return matchedPackageNames.map { CallableId(it, TEST_FUN_NAME) }",,4f74
No signature found,"fun FirDeclarationPredicateRegistrar.registerPredicates() {
        register(PREDICATE)
    }",,6e1f
fun box(),": String {
    val t1: Any = ""3""
    val t2: Any = 3
    val t3: Any = ""4""
    val t4: Any = 4
    if (t3 == t4) return ""fail""
    return if (t1 != t2) ""OK"" else ""fail""
}",// EXPECTED_REACHABLE_NODES: 1280,4f27
fun testInvoke(),"{
    operator fun Nothing.invoke(): Nothing = this
    todo()<!UNREACHABLE_CODE!>()<!>
}",,abc9
fun testInvokeWithLambda(),"{
    operator fun Nothing.invoke(i: Int, f: () -> Int) = f
    todo()<!UNREACHABLE_CODE!>(1){ 42 }",,0380
fun todo(),: Nothing = t,,4113
fun <T> id(x: T),: T = x,"// WITH_STDLIB
// WORKS_WHEN_VALUE_CLASS
// LANGUAGE: +ValueClasses",2066
fun <T> inlinedId(x: T),: T = x,,07d6
No signature found,fun <T> T.idExtension(): T = t,,6e1f
No signature found,fun <T> T.inlinedIdExtension(): T = t,,6e1f
fun test(f: Foo),"{
    inlinedId(f) // box
    inlinedId(f).idExtension() // box

    f.inlinedIdExtension() // box

    val a = inlinedId(f).idExtension() // box unbox
    val b = inlinedId(f).inlinedIdExtension() // box unbox
}",,4ba3
fun box(),": String {
    val f = Foo(11)

    id(inlinedId(f))
    inlinedId(id(f))

    inlinedId(f) // box
    inlinedId(f).idExtension() // box

    f.inlinedIdExtension() // box

    val a = inlinedId(f).idExtension() // box unbox
    val b = inlinedId(f).inlinedIdExtension() // box unbox

    if (a.value != 11) return ""fail 1""
    if (b.value != 11) return ""fail 2""

    if (inlinedId(Foo(10)).value != 10) return ""fail 3""
    if (Foo(20).inlinedIdExtension().value != 20) return ""fail 4""

    return ""OK""
}",,4f27
fun bar(j: J),= <,"// SKIP_TXT
// !LANGUAGE: -EnhanceNullabilityOfPrimitiveArrays
// FILE: J.java",bb32
fun <T> refreshOnUpdate(initialValue: T),= R,"// FIR_IDENTICAL
// !DIAGNOSTICS: -UNUSED_PARAMETER",8827
No signature found,"fun getValue(thisRef: Foo, property: KProperty<*>): T = T",,6e1f
No signature found,"fun setValue(thisRef: Foo, property: KProperty<*>, value: T) {}",,6e1f
No signature found,fun String.relativeToPackage() = g,,6e1f
fun getPackageFqName(),: FqName = F,,d0d2
fun isScript(),: Boolean = i,,6486
fun getType(),: IStubFileElementType<KotlinFileStub> = K,,fac2
fun toString(),": String = """,,a535
fun findImportsByAlias(alias: String),": List<KotlinImportDirectiveStub> {
        val importList = childrenStubs.firstOrNull { it.stubType == IMPORT_LIST }",,2fd6
"fun forFile(packageFqName: FqName, isScript: Boolean)",: KotlinFileStubImpl = K,,f281
fun forFileFacadeStub(facadeFqName: FqName),: KotlinFileStubImpl = K,,c15b
No signature found,"fun forMultifileClassStub(packageFqName: FqName, facadeFqName: FqName, partNames: List<String>?): KotlinFileStubImpl =
            K",,6e1f
"fun <R, D> accept(visitor: FirVisitor<R, D>, data: D)",": R =
        v",,06e4
No signature found,"fun <E : FirElement, D> transform(transformer: FirTransformer<D>, data: D): E =
        t",,6e1f
fun testKaptGenerateStubsTask(gradleVersion: GradleVersion),"{
        project(""kapt2/simple"", gradleVersion) {
            javaSourcesDir()
                .resolve(""Foo.kt"")
                .writeText(
                    """"""
                    class Foo : Bar {
                        // The fields and methods are ordered such that any sorting by KGP will be detected.
                        val fooField1 = 1
                        val fooField3 = 3
                        val fooField2 = 2
                        fun fooMethod1() {}",,4e73
fun fooMethod3(),{},,4a54
fun fooMethod2(),{},,f3e3
fun barMethod1(),{},,8e0d
fun barMethod3(),{},,cd1e
fun barMethod2(),{},,2918
No signature found,"fun TestProject.buildAndSnapshotStubFiles(): Map<File, String> {
                lateinit var stubFiles: Map<File, String>
                build("":kaptGenerateStubsKotlin"") {
                    assertTasksExecuted("":kaptGenerateStubsKotlin"")
                    stubFiles = projectPath
                        .resolve(""build/tmp/kapt3/stubs"")
                        .toFile()
                        .allJavaFiles()
                        .associateWith {
                            it.readText()
                        }",,6e1f
fun fooMethod1(),"{ println(""Method body changed!"") }",,e6c3
fun fooMethod3(),{},,4a54
fun fooMethod2(),{},,f3e3
fun foo(),": Int {
    var sum = 0
    for (c in ""239"")
        sum += (c.toInt() - '0'.toInt())
    return sum
}",// WITH_STDLIB,519f
fun box(),": String {
    val f = foo()
    return if (f == 14) ""OK"" else ""Fail $f""
}",,4f27
fun foo(t: T),"public fun dummy() // to avoid loading as SAM interface
    }

    public interface Sub: Super<String> {
        override fun foo(t: String)
    }",,6c6b
No signature found,"fun get(id: Foo.Id) = """,// EXPECTED_REACHABLE_NODES: 1281,6e1f
No signature found,"fun get(id: Bar.Id) = """,,6e1f
No signature found,"fun get(id: E1.Id) = """,,6e1f
No signature found,"fun get(id: E2.Id) = """,,6e1f
No signature found,"fun get(id: O1.Id) = """,,6e1f
No signature found,"fun get(id: O2.Id) = """,,6e1f
fun box(),": String {
    var service = Service()
    if (service[Bar.Id(12)] != ""Bar getter"") return ""Fail with /**/Bar overload""
    if (service[Foo.Id(6)] != ""Foo getter"") return ""Fail with Foo overload""
    if (service[E1.Id.A] != ""E1 getter"") return ""Fail with E1 overload""
    if (service[E2.Id.A] != ""E2 getter"") return ""Fail with E2 overload""
    if (service[O1.Id] != ""O1 getter"") return ""Fail with O1 overload""
    if (service[O2.Id] != ""O2 getter"") return ""Fail with O2 overload""
    return ""OK""
}",,4f27
fun getMap(),= M,,1055
fun testTopLevelInt(),"{
        assertEquals(0, a.value)
        assertEquals(0, a.getAndSet(3))
        assertTrue(a.compareAndSet(3, 8))
        a.lazySet(1)
        assertEquals(1, a.value)
        assertEquals(1, a.getAndSet(2))
        assertEquals(2, a.value)
        assertEquals(2, a.getAndIncrement())
        assertEquals(3, a.value)
        assertEquals(3, a.getAndDecrement())
        assertEquals(2, a.value)
        assertEquals(2, a.getAndAdd(2))
        assertEquals(4, a.value)
        assertEquals(7, a.addAndGet(3))
        assertEquals(7, a.value)
        assertEquals(8, a.incrementAndGet())
        assertEquals(8, a.value)
        assertEquals(7, a.decrementAndGet())
        assertEquals(7, a.value)
        assertTrue(a.compareAndSet(7, 10))
    }",,42ac
fun testTopLevelLong(),"{
        assertEquals(2424920024888888848, b.value)
        b.lazySet(8424920024888888848)
        assertEquals(8424920024888888848, b.value)
        assertEquals(8424920024888888848, b.getAndSet(8924920024888888848))
        assertEquals(8924920024888888848, b.value)
        assertEquals(8924920024888888849, b.incrementAndGet())
        assertEquals(8924920024888888849, b.value)
        assertEquals(8924920024888888849, b.getAndDecrement())
        assertEquals(8924920024888888848, b.value)
        assertEquals(8924920024888888848, b.getAndAdd(100000000000000000))
        assertEquals(9024920024888888848, b.value)
        assertEquals(-198452011965886959, b.addAndGet(-9223372036854775807))
        assertEquals(-198452011965886959, b.value)
        assertEquals(-198452011965886958, b.incrementAndGet())
        assertEquals(-198452011965886958, b.value)
        assertEquals(-198452011965886959, b.decrementAndGet())
        assertEquals(-198452011965886959, b.value)
    }",,eba4
fun testTopLevelBoolean(),"{
        assertTrue(c.value)
        c.lazySet(false)
        assertFalse(c.value)
        assertTrue(!c.getAndSet(true))
        assertTrue(c.compareAndSet(true, false))
        assertFalse(c.value)
    }",,4039
fun testTopLevelRef(),"{
        assertEquals(8, abcNode.value.b.c.d)
        val newNode = ANode(BNode(CNode(76)))
        assertEquals(8, abcNode.getAndSet(newNode).b.c.d)
        assertEquals(76, abcNode.value.b.c.d)
        val l = IntArray(4){i -> i}",,af64
fun testTopLevelArrayOfNulls(),"{
        assertEquals(null, stringAtomicNullArr[0].value)
        assertTrue(stringAtomicNullArr[0].compareAndSet(null, ""aa""))
        stringAtomicNullArr[1].lazySet(""aa"")
        assertTrue(stringAtomicNullArr[0].value == stringAtomicNullArr[1].value)
    }",,c0d4
fun testIntArray(),"{
        assertTrue(intArr[0].compareAndSet(0, 3))
        assertEquals(0, intArr[1].value)
        intArr[0].lazySet(5)
        assertEquals(5, intArr[0].value + intArr[1].value + intArr[2].value)
        assertTrue(intArr[0].compareAndSet(5, 10))
        assertEquals(10, intArr[0].getAndDecrement())
        assertEquals(9, intArr[0].value)
        intArr[2].value = 2
        assertEquals(2, intArr[2].value)
        assertTrue(intArr[2].compareAndSet(2, 34))
        assertEquals(34, intArr[2].value)
    }",,1dab
fun testLongArray(),"{
        longArr[0].value = 2424920024888888848
        assertEquals(2424920024888888848, longArr[0].value)
        longArr[0].lazySet(8424920024888888848)
        assertEquals(8424920024888888848, longArr[0].value)
        val ac = longArr[0].value
        longArr[3].value = ac
        assertEquals(8424920024888888848, longArr[3].getAndSet(8924920024888888848))
        assertEquals(8924920024888888848, longArr[3].value)
        val ac1 = longArr[3].value
        longArr[4].value = ac1
        assertEquals(8924920024888888849, longArr[4].incrementAndGet())
        assertEquals(8924920024888888849, longArr[4].value)
        assertEquals(8924920024888888849, longArr[4].getAndDecrement())
        assertEquals(8924920024888888848, longArr[4].value)
        longArr[4].value = 8924920024888888848
        assertEquals(8924920024888888848, longArr[4].getAndAdd(100000000000000000))
        val ac2 = longArr[4].value
        longArr[1].value = ac2
        assertEquals(9024920024888888848, longArr[1].value)
        assertEquals(-198452011965886959, longArr[1].addAndGet(-9223372036854775807))
        assertEquals(-198452011965886959, longArr[1].value)
        assertEquals(-198452011965886958, longArr[1].incrementAndGet())
        assertEquals(-198452011965886958, longArr[1].value)
        assertEquals(-198452011965886959, longArr[1].decrementAndGet())
        assertEquals(-198452011965886959, longArr[1].value)
    }",,78ec
fun testBooleanArray(),"{
        assertFalse(booleanArr[1].value)
        booleanArr[1].compareAndSet(false, true)
        booleanArr[0].lazySet(true)
        assertFalse(booleanArr[2].getAndSet(true))
        assertTrue(booleanArr[0].value && booleanArr[1].value && booleanArr[2].value)
    }",,0c6d
fun testRefArray(),"{
        val a2 = ANode(BNode(CNode(2)))
        val a3 = ANode(BNode(CNode(3)))
        refArr[0].value = a2
        assertEquals(2, refArr[0].value!!.b.c.d)
        assertTrue(refArr[0].compareAndSet(a2, a3))
        assertEquals(3, refArr[0].value!!.b.c.d)
        val r0 = refArr[0].value
        refArr[3].value = r0
        assertEquals(3, refArr[3].value!!.b.c.d)
        val a = abcNode.value
        assertTrue(refArr[3].compareAndSet(a3, a))
    }",,2cbb
fun box(),": String {
    val primitiveTest = TopLevelPrimitiveTest()
    primitiveTest.testTopLevelInt()
    primitiveTest.testTopLevelLong()
    primitiveTest.testTopLevelBoolean()
    primitiveTest.testTopLevelRef()
    primitiveTest.testTopLevelArrayOfNulls()

    val arrayTest = TopLevelArrayTest()
    arrayTest.testIntArray()
    arrayTest.testLongArray()
    arrayTest.testBooleanArray()
    arrayTest.testRefArray()
    return ""OK""
}",,4f27
No signature found,fun inAA(crossinline modifier: (String) -> String): String = m,"// IGNORE_BACKEND: JVM
// IGNORE_BACKEND_MULTI_MODULE: JVM, JVM_MULTI_MODULE_IR_AGAINST_OLD
// FILE: a.kt",6e1f
fun test(),: String = i,,fe98
fun box(),: String = B,,4f27
fun asString(),: String = r,,4527
fun replaceRenderConfiguration(renderConfiguration: FirDiagnosticCodeMetaRenderConfiguration),"{
        this.renderConfiguration = renderConfiguration
    }",,ffb5
fun asString(codeMetaInfo: CodeMetaInfo),": String {
        if (codeMetaInfo !is FirDiagnosticCodeMetaInfo) return """"
        return (getTag(codeMetaInfo)
                + getAttributesString(codeMetaInfo)
                + getParamsString(codeMetaInfo))
            .replace(crossPlatformLineBreak, """")
    }",,9cab
fun getParamsString(codeMetaInfo: FirDiagnosticCodeMetaInfo),": String {
        if (!renderParams) return """"
        val params = mutableListOf<String>()

        val diagnostic = codeMetaInfo.diagnostic

        val renderer = RootDiagnosticRendererFactory(diagnostic)
        if (renderer is AbstractKtDiagnosticWithParametersRenderer) {
            renderer.renderParameters(diagnostic).mapTo(params) {
                it.toString().replace(""\"""", ""\\\"""")
            }",,2988
fun getTag(codeMetaInfo: FirDiagnosticCodeMetaInfo),": String {
        return codeMetaInfo.diagnostic.factory.name
    }",,88bc
fun toString(),: String = d,,a535
No signature found,"fun newValue(element: KtElement?, instruction: InstructionWithValue?): PseudoValue {
        return PseudoValueImpl((instruction?.let { """" }",,6e1f
fun invoke(arg2: T),": R =
            f",,943b
fun text(),"{
    ""direct:a"" to ""mock:a""
    ""direct:a"" on {it.body == ""<hello/>""}",,63f6
No signature found,"fun bar(f :  (Int, Int) -> Int) {}",,6e1f
No signature found,fun bar1(f :  (Int) -> Int) {},,6e1f
No signature found,fun bar2(f :  () -> Int) {},,6e1f
No signature found,"fun String.to(dest : String) {

}",,6e1f
No signature found,"fun String.on(predicate :  (s : URI) -> Boolean) : URI {
    return URI(this)
}",,6e1f
fun to(dest : String),{},,d2d0
fun createPointer(),: KtSymbolPointer<KtValueParameterSymbol> = w,,ffc4
No signature found,fun equals(other: Any?): Boolean = i,,6e1f
fun hashCode(),: Int = c,,6874
fun addAll(other: BuildPerformanceMetrics<T>),"{
        for ((bt, timeNs) in other.myBuildMetrics) {
            add(bt, timeNs)
        }",,d407
No signature found,"fun add(metric: T, value: Long = 1",,6e1f
fun asMap(),": Map<T, Long> = m",,e724
fun foo(),": Int {
    return when (J.create()) {
        J.A -> 1
        J.B -> 2
        else -> 0
    }",// FIR_IDENTICAL,519f
No signature found,fun FirFunction.computeJvmSignature(typeConversion: (FirTypeRef) -> ConeKotlinType? = F,,6e1f
No signature found,"fun FirFunction.computeJvmDescriptor(
    customName: String? = n",,6e1f
No signature found,"fun ConeKotlinType.computeJvmDescriptorRepresentation(
    typeConversion: (FirTypeRef) -> ConeKotlinType? = F",,6e1f
No signature found,"fun StringBuilder.appendConeType(
    coneType: ConeKotlinType, typeConversion: (FirTypeRef) -> ConeKotlinType?,
    visitedTypeParameters: MutableSet<FirTypeParameterSymbol>,
) {
    (coneType as? ConeClassLikeType)?.let {
        val classId = it.lookupTag.classId
        if (classId.packageFqName.toString() == ""kotlin"") {
            PRIMITIVE_TYPE_OR_ARRAY_SIGNATURE[classId.shortClassName.identifier]?.let { signature ->
                append(signature)
                return
            }",,6e1f
fun appendClassLikeType(type: ConeClassLikeType),"{
        val baseClassId = type.lookupTag.classId
        // TODO: what about primitive arrays?
        val classId = JavaToKotlinClassMap.mapKotlinToJava(baseClassId.asSingleFqName().toUnsafe()) ?: baseClassId
        if (classId == StandardClassIds.Array) {
            append(""["")
            type.typeArguments.forEach { typeArg ->
                when (typeArg) {
                    ConeStarProjection -> append(""*"")
                    is ConeKotlinTypeProjection -> appendConeType(typeArg.type, typeConversion, visitedTypeParameters)
                }",,1720
No signature found,"fun FirTypeRef.isVoid(): Boolean {
    return when (this) {
        is FirJavaTypeRef -> {
            val type = type
            type is JavaPrimitiveType && type.type == null
        }",,6e1f
"fun createCacheManager(icContext: IncrementalCompilationContext, args: K2JVMCompilerArguments)",": IncrementalJvmCachesManager =
        o",,1045
fun close(),"{
                val platformCachesDump = this.platformCache.dump() +
                        ""\n=============\n"" +
                        this.inputsCache.dump().replace(""rebuild-out"", ""out"")

                testLookupTracker.lookups.mapTo(testLookupTracker.savedLookups) { LookupSymbol(it.name, it.scopeFqName) }",,7e58
fun getLookupTrackerDelegate(),= t,,0d06
fun foo(),"}

fun box(): String {
    try {
        WithNative().foo()
        return ""Link error expected""
    }","// TARGET_BACKEND: JVM
// IGNORE_BACKEND: ANDROID

// FULL_JDK",519f
No signature found,"fun getValue(instance: Any?, property: KProperty<*>) = t","// TARGET_BACKEND: JVM
// WITH_REFLECT",6e1f
No signature found,"fun check(block: () -> Unit) {
    try {
        block()
        throw AssertionError(""No IllegalPropertyDelegateAccessException has been thrown"")
    }",,6e1f
fun box(),": String {
    check { ::topLevel.getDelegate() }",,4f27
No signature found,fun <expr>doSmth</expr>(i: String) = 4,,6e1f
"fun genCall(
        callableMethod: IrCallableMethod,
        codegen: ExpressionCodegen,
        expression: IrFunctionAccessExpression,
        isInsideIfCondition: Boolean,
    )","{
        val element = IrInlineFunctionSource(expression)
        val descriptor = expression.symbol.owner.suspendFunctionOriginal().toIrBasedDescriptor()
        if (!codegen.state.globalInlineContext.enterIntoInlining(descriptor, element) { reportOn, callee ->
                codegen.context.ktDiagnosticReporter.at((reportOn as IrInlineFunctionSource).ir, codegen.irFunction.fileParent)
                    .report(JvmBackendErrors.INLINE_CALL_CYCLE, callee.name)
            }",,dab4
"fun genInlineCall(
        callableMethod: IrCallableMethod,
        codegen: ExpressionCodegen,
        expression: IrFunctionAccessExpression,
        isInsideIfCondition: Boolean,
    )","fun genCycleStub(text: String, codegen: ExpressionCodegen) {
        AsmUtil.genThrow(codegen.visitor, ""java/lang/UnsupportedOperationException"", ""Call is a part of inline call cycle: $text"")
    }",,113c
fun box(),": String {
    val ok = Result.success(""OK"")
    return ok.getOrNull()!!
}",// WITH_STDLIB,4f27
fun yield(k: K),{},// ISSUE: KT-65341,ffca
No signature found,fun <T> generate(lambda: Controller<T>.() -> Unit) {},,6e1f
fun bar(x: String),{},,4de0
No signature found,"fun foo0(x: String?) {
    generate {
        bar(""$v abc${x!!}",,6e1f
No signature found,"fun foo1(x: String?) {
    generate {
        bar(""$v abc${when { x != null -> x else -> null}",,6e1f
fun <E> id(e: E),: E = e,,dd08
No signature found,"fun foo2(x: String?) {
    generate {
        bar(""$v abc${id(this)}",,6e1f
fun box(),": String {
    foo0(null)
    foo1(null)
    foo2(null)

    return ""OK""
}",,4f27
fun check(element: IrElement),"{
        element.accept(Checker(), Visibles(emptySet(), mutableSetOf()))
    }",,77a0
"fun visitTypeAccess(element: IrElement, type: IrType)","{
            if (type !is IrSimpleType) return
            if (type.classifier is IrTypeParameterSymbol && type.classifier.owner !in this.typeParameters) {
                reportError(element, ""Type parameter ${type.classifier.owner.render()}",,8936
"fun visitValueAccess(element: IrElement, variable: IrValueDeclaration)","{
            if (variable !in this.values) {
                reportError(element, ""Value ${variable.render()}",,8ed2
"fun extend(newTypeParameters: Collection<IrTypeParameter>, newValues: Collection<IrValueDeclaration>)",": Visibles =
            V",,9410
"fun visitElement(element: IrElement, data: Visibles)","{
            element.acceptChildren(this, data)
        }",,32de
"fun visitClass(declaration: IrClass, data: Visibles)","{
            val newVisibles = data.extend(declaration.typeParameters, listOfNotNull(declaration.thisReceiver))
            for (superType in declaration.superTypes) {
                newVisibles.visitTypeAccess(declaration, superType)
            }",,c956
"fun visitFunction(declaration: IrFunction, data: Visibles)","{
            val newVisibles = data.extend(
                declaration.typeParameters,
                listOfNotNull(declaration.dispatchReceiverParameter, declaration.extensionReceiverParameter) + declaration.valueParameters
            )

            newVisibles.visitTypeAccess(declaration, declaration.returnType)
            super.visitFunction(declaration, newVisibles)
        }",,3e92
"fun visitAnonymousInitializer(declaration: IrAnonymousInitializer, data: Visibles)","{
            val primaryConstructor = declaration.parentAsClass.primaryConstructor()
            if (primaryConstructor == null) {
                super.visitAnonymousInitializer(declaration, data)
            }",,9870
"fun visitField(declaration: IrField, data: Visibles)","{
            data.visitTypeAccess(declaration, declaration.type)
            if (declaration.initializer == null) {
                return super.visitField(declaration, data)
            }",,72d5
"fun visitBlock(expression: IrBlock, data: Visibles)","{
            // Entering a new scope
            super.visitBlock(expression, data.extend(emptySet(), emptySet()))
        }",,5f4e
"fun visitVariable(declaration: IrVariable, data: Visibles)","{
            data.visitTypeAccess(declaration, declaration.type)
            super.visitVariable(declaration, data)
            data.values.add(declaration)
        }",,2297
"fun visitTypeAlias(declaration: IrTypeAlias, data: Visibles)","{
            val newVisibles = data.extend(declaration.typeParameters, emptySet())
            newVisibles.visitTypeAccess(declaration, declaration.expandedType)
            super.visitTypeAlias(declaration, newVisibles)
        }",,72c3
"fun visitTypeParameter(declaration: IrTypeParameter, data: Visibles)","{
            for (superType in declaration.superTypes) {
                data.visitTypeAccess(declaration, superType)
            }",,4130
"fun visitValueParameter(declaration: IrValueParameter, data: Visibles)","{
            data.visitTypeAccess(declaration, declaration.type)
            declaration.varargElementType?.let { data.visitTypeAccess(declaration, it) }",,18af
"fun visitValueAccess(expression: IrValueAccessExpression, data: Visibles)","{
            data.visitValueAccess(expression, expression.symbol.owner)
            super.visitValueAccess(expression, data)
        }",,de04
No signature found,"fun visitMemberAccess(expression: IrMemberAccessExpression<*>, data: Visibles) {
            for (i in 0 until expression.typeArgumentsCount) {
                expression.getTypeArgument(i)?.let { data.visitTypeAccess(expression, it) }",,6e1f
"fun visitCatch(aCatch: IrCatch, data: Visibles)","{
            // catchParameter only has scope over result expression, so create a new scope
            super.visitCatch(aCatch, data.extend(emptySet(), emptySet()))
        }",,4885
"fun visitTypeOperator(expression: IrTypeOperatorCall, data: Visibles)","{
            data.visitTypeAccess(expression, expression.typeOperand)
            super.visitTypeOperator(expression, data)
        }",,4b75
"fun visitClassReference(expression: IrClassReference, data: Visibles)","{
            // classType should only contain star projections, but check it to be sure.
            data.visitTypeAccess(expression, expression.classType)
            super.visitClassReference(expression, data)
        }",,3ab1
"fun visitVararg(expression: IrVararg, data: Visibles)","{
            data.visitTypeAccess(expression, expression.varargElementType)
            super.visitVararg(expression, data)
        }",,9538
"fun visitExpression(expression: IrExpression, data: Visibles)","{
            data.visitTypeAccess(expression, expression.type)
            super.visitExpression(expression, data)
        }",,8589
No signature found,fun IrClass.primaryConstructor(): IrConstructor? = c,,6e1f
No signature found,fun foo(a : Int = 1,,6e1f
No signature found,fun foo(a : Int = 1,,6e1f
No signature found,fun <!VIRTUAL_MEMBER_HIDDEN!>foo<!>(<!MULTIPLE_DEFAULTS_INHERITED_FROM_SUPERTYPES!>a : Int<!>) {},,6e1f
No signature found,fun <!VIRTUAL_MEMBER_HIDDEN!>foo<!>(<!MULTIPLE_DEFAULTS_INHERITED_FROM_SUPERTYPES!>a : Int<!>) {},,6e1f
fun exportedFun(),= 1,"// CHECK_TYPESCRIPT_DECLARATIONS
// RUN_PLAIN_BOX_FUNCTION
// SKIP_MINIFICATION
// SKIP_NODE_JS
// INFER_MAIN_MODULE

// MODULE: JS_TESTS
// FILE: file1.kt",b752
fun _fun(),= 1,,4ad1
No signature found,fun zzz(x: Int = 1,,6e1f
fun fileLevelExportedFun(),= 1,,d109
"fun createPerformanceManager(arguments: A, services: Services)",": CommonCompilerPerformanceManager =
        d",,b6ac
"fun execAndOutputXml(errStream: PrintStream, services: Services, vararg args: String)",": ExitCode {
        return exec(errStream, services, MessageRenderer.XML, args)
    }",,c2fb
"fun execFullPathsInMessages(errStream: PrintStream, args: Array<String>)",": ExitCode {
        return exec(errStream, Services.EMPTY, MessageRenderer.PLAIN_FULL_PATHS, args)
    }",// Used via reflection in KotlinCompilerBaseTask,151b
"fun execImpl(messageCollector: MessageCollector, services: Services, arguments: A)",": ExitCode {
        val performanceManager = createPerformanceManager(arguments, services)
        if (arguments.reportPerf || arguments.dumpPerf != null) {
            performanceManager.enableCollectingPerformanceStatistics()
        }",,bd35
No signature found,fun Throwable.hasOOMCause(): Boolean = w,,6e1f
No signature found,"fun MessageCollector.reportCompilationCancelled(e: CompilationCanceledException) {
        if (e !is IncrementalNextRoundException) {
            report(INFO, ""Compilation was canceled"", null)
        }",,6e1f
"fun setupCommonArguments(configuration: CompilerConfiguration, arguments: A)","{
        configuration.setupCommonArguments(arguments, this::createMetadataVersion)
    }",,2b18
fun createMetadataVersion(versionArray: IntArray),": BinaryVersion

    protected abstract fun setupPlatformSpecificArgumentsAndServices(
        configuration: CompilerConfiguration, arguments: A, services: Services
    )

    protected abstract fun doExecute(
        arguments: A,
        configuration: CompilerConfiguration,
        rootDisposable: Disposable,
        paths: KotlinPaths?
    ): ExitCode

    protected abstract fun MutableList<String>.addPlatformOptions(arguments: A)

    protected fun loadPlugins(paths: KotlinPaths?, arguments: A, configuration: CompilerConfiguration): ExitCode {
        val pluginClasspaths = arguments.pluginClasspaths.orEmpty().toMutableList()
        val pluginOptions = arguments.pluginOptions.orEmpty().toMutableList()
        val pluginConfigurations = arguments.pluginConfigurations.orEmpty().toMutableList()
        val messageCollector = configuration.getNotNull(MESSAGE_COLLECTOR_KEY)

        val useK2 = configuration.get(CommonConfigurationKeys.USE_FIR) == true

        val scriptingPluginClasspath = mutableListOf<String>()
        val scriptingPluginOptions = mutableListOf<String>()

        if (!arguments.disableDefaultScriptingPlugin) {
            scriptingPluginOptions.addPlatformOptions(arguments)
            val explicitScriptingPlugin =
                extractPluginClasspathAndOptions(pluginConfigurations).any { (_, classpath, _) ->
                    classpath.any { File(it).name.startsWith(PathUtil.KOTLIN_SCRIPTING_COMPILER_PLUGIN_NAME) }",,41de
"fun tryLoadScriptingPluginFromCurrentClassLoader(
        configuration: CompilerConfiguration,
        pluginOptions: List<String>,
        useK2: Boolean
    )",": Boolean =
        t",,6d5c
"fun processScriptPluginCliOptions(pluginOptions: List<String>, configuration: CompilerConfiguration)","{
        val cmdlineProcessorClass =
            if (pluginOptions.isEmpty()) null
            else PluginCliParser::class.java.classLoader.loadClass(SCRIPT_PLUGIN_COMMANDLINE_PROCESSOR_NAME)!!
        val cmdlineProcessor = cmdlineProcessorClass?.getDeclaredConstructor()?.newInstance() as? CommandLineProcessor
        if (cmdlineProcessor != null) {
            processCompilerPluginsOptions(configuration, pluginOptions, listOf(cmdlineProcessor))
        }",,3741
"fun checkPluginsArguments(
    messageCollector: MessageCollector,
    useK2: Boolean,
    pluginClasspaths: List<String>,
    pluginOptions: List<String>,
    pluginConfigurations: List<String>
)",": Boolean {
    var hasErrors = false

    for (classpath in pluginClasspaths) {
        if (!File(classpath).exists()) {
            messageCollector.report(ERROR, ""Plugin classpath entry points to a non-existent location: $classpath"")
        }",,687d
No signature found,"fun bar(s: () -> Unit) {
    (<!REDUNDANT_LABEL_WARNING!><!UNDERSCORE_IS_RESERVED!>_<!>@<!> s)()
}",// ISSUE: KT-65337,6e1f
fun existingMethodInBase(),"}

expect open class Foo : Base {
    fun existingMethod()
    val existingParam: Int
}","// WITH_STDLIB
// MODULE: m1-common
// FILE: common.kt",d06e
fun existingMethodInBase(),{},"// MODULE: m2-jvm()()(m1-common)
// FILE: jvm.kt",d06e
fun injected(),": Any = """,,8da7
fun existingMethod(),{},,6c23
fun injected(),": String = """,,8da7
No signature found,fun <T> Collection<T>.toArray(): Array<T> = t,// !DIAGNOSTICS: -UNCHECKED_CAST,6e1f
No signature found,fun Collection<String>.toArray2(): Array<String> = t,,6e1f
fun <T> toArray3(x: Collection<T>),: Array<T> = x,,d2d2
fun plus(x: Foo<T>),": Array<T> {
        return this + x
    }",,22ea
"fun use(arg: Array<String>, s: Collection<String>, x: Foo<String>)","{
    arr(<!NON_VARARG_SPREAD_ERROR!>*<!>arg)
    arr(<!NON_VARARG_SPREAD_ERROR!>*<!>s.toArray())
    arr(<!NON_VARARG_SPREAD_ERROR!>*<!>s.toArray2())
    arr(<!NON_VARARG_SPREAD_ERROR!>*<!>toArray3(s))
    arr(<!NON_VARARG_SPREAD_ERROR!>*<!>x + x)
    arr(<!NON_VARARG_SPREAD_ERROR!>*<!>(x + x))
}",,5d9b
fun arr(x: Array<String>),{},,55ca
No signature found,"fun foo(
        p: kotlin.(Mutable)List<Foo>!,
        p1: kotlin.(Mutable)Iterable<Foo>!,
        p2: Foo<kotlin.(Mutable)List<Foo!>!>,
        p2: kotlin.(Mutable)Set<kotlin.(Mutable)List<Foo!>!>
) {}",,6e1f
fun foo(list: List<Int>),"{
    val result: List<String> = list.map { a<caret>v }","// WITH_STDLIB
// IGNORE_FE10",8ac6
fun box(),": String {
    assertEquals(atanh(-1.0), Double.NEGATIVE_INFINITY)
    assertEquals(atanh(0.0), 0.0)
    assertEquals(atanh(0.5), 0.5493061443340548)
    assertEquals(atanh(1.0), Double.POSITIVE_INFINITY)

    assertEquals(js(""Math.atanh.called""), true)

    return ""OK""
}","// WITH_STDLIB
// TARGET_BACKEND: JS_IR
// FILE: main.js",4f27
fun foo(),= b,// FIR_IDENTICAL,519f
fun bar(),= b,,66c3
fun <T> baz(),": T {
    TODO()
}",,9424
No signature found,"fun equals3(a: Byte?, b: Byte?) = a",// !LANGUAGE: -ProperIeee754Comparisons,6e1f
No signature found,"fun equals4(a: Byte?, b: Byte?) = i",,6e1f
No signature found,"fun equals5(a: Any?, b: Any?) = i",,6e1f
No signature found,"fun less3(a: Byte?, b: Byte?) = a",,6e1f
No signature found,"fun less4(a: Byte?, b: Byte?) = i",,6e1f
No signature found,"fun less5(a: Any?, b: Any?) = i",,6e1f
fun renderClassId(classId: ClassId),"{
        builder.append(classId.relativeClassName.asString())
    }",,76ae
fun renderCallableId(callableId: CallableId),"{
        builder.append(callableId.callableName)
    }",,47ae
fun foo(),: Int = 0,// !DIAGNOSTICS: -UNUSED_EXPRESSION -UNUSED_PARAMETER,519f
No signature found,fun A.foo(): Double = 0,,6e1f
No signature found,fun Any.foo(): Float = 1,,6e1f
fun foo(),": String = """,,519f
fun foo(),: Int = 0,,519f
No signature found,fun B.foo(): Double = 0,,6e1f
fun call(a: Any),{},,9f63
fun testA(a: A),"{
    call(A::foo)
    call(A.Companion::foo)
}",,0f17
fun testB(b: B),"{
    call(B::foo)
    call(B()::foo)
    call(B.Companion::foo)
}",,96c0
fun visitCall(expression: IrCall),": IrExpression {
        val function = expression.symbol.owner
        val fqName = function.kotlinFqName
        if (function.valueParameters.isEmpty() || functions.none { fqName == it }",,4974
No signature found,"fun DeclarationIrBuilder.diagram(
        call: IrCall,
        delegate: FunctionDelegate,
        messageArgument: IrExpression?,
        roots: List<Node?>,
        dispatchRoot: Node? = n",,6e1f
No signature found,"fun recursive(
            index: Int,
            dispatch: IrExpression?,
            extension: IrExpression?,
            arguments: List<IrExpression?>,
            variables: List<IrTemporaryVariable>,
        ): IrExpression {
            if (index >= roots.size) {
                val prefix = buildMessagePrefix(messageArgument, delegate.messageParameter, roots, call)
                    ?.deepCopyWithSymbols(parent)
                val diagram = irDiagramString(sourceFile, prefix, call, variables)
                return delegate.buildCall(this, call, dispatch, extension, arguments, diagram)
            }",,6e1f
No signature found,"fun DeclarationIrBuilder.buildMessagePrefix(
        messageArgument: IrExpression?,
        messageParameter: IrValueParameter,
        roots: List<Node?>,
        original: IrCall,
    ): IrExpression? {
        return when {
            messageArgument is IrConst<*> -> messageArgument
            messageArgument is IrStringConcatenation -> messageArgument
            messageArgument is IrGetValue -> {
                if (messageArgument.type.isAssignableTo(context.irBuiltIns.stringType)) {
                    return messageArgument
                }",,6e1f
fun findDelegates(function: IrFunction),": List<FunctionDelegate> {
        val values = function.valueParameters
        if (values.isEmpty()) return emptyList()

        // Java static functions require searching by class
        val parentClassFunctions = (
                function.parentClassId
                    ?.let { context.referenceClass(it) }",,736f
fun isStringFunction(type: IrType),": Boolean =
        t",,05ef
fun isStringJavaSupplierFunction(type: IrType),": Boolean {
        val javaSupplier = context.referenceClass(ClassId.topLevel(FqName(""java.util.function.Supplier"")))
        return javaSupplier != null && type.isSubtypeOfClass(javaSupplier) &&
                type is IrSimpleType && (type.arguments.size == 1 && isStringSupertype(type.arguments.first()))
    }",,9a78
fun isStringSupertype(argument: IrTypeArgument),": Boolean =
        a",,c717
fun isStringSupertype(type: IrType),": Boolean =
        c",,cec7
No signature found,"fun IrType?.isAssignableTo(type: IrType?): Boolean {
        if (this != null && type != null) {
            if (isSubtypeOf(type, irTypeSystemContext)) return true
            val superTypes = (type.classifierOrNull as? IrTypeParameterSymbol)?.owner?.superTypes
            return superTypes != null && superTypes.all { isSubtypeOf(it, irTypeSystemContext) }",,6e1f
No signature found,"fun MessageCollector.info(expression: IrElement, message: String) {
        report(expression, CompilerMessageSeverity.INFO, message)
    }",,6e1f
No signature found,"fun MessageCollector.warn(expression: IrElement, message: String) {
        report(expression, CompilerMessageSeverity.WARNING, message)
    }",,6e1f
No signature found,"fun MessageCollector.report(expression: IrElement, severity: CompilerMessageSeverity, message: String) {
        report(severity, message, sourceFile.getCompilerMessageLocation(expression))
    }",,6e1f
No signature found,"fun <D : CallableDescriptor> ResolvedCall<D>.getParameterForArgument(): String = """,,6e1f
No signature found,"fun <D : CallableDescriptor> ResolvedCall<D>.updateD(d: D): D {
    this.d = d
    return d
}",,6e1f
fun test_1_1(resolvedCall: ResolvedCall<out CallableDescriptor>),"{
    resolvedCall.getParameterForArgument() // should be ok
}",,c6b8
fun test_1_2(resolvedCall: ResolvedCall<in CallableDescriptor>),"{
    resolvedCall.getParameterForArgument() // should be ok
}",,736a
fun test_1_3(resolvedCall: ResolvedCall<CallableDescriptor>),"{
    resolvedCall.getParameterForArgument() // should be ok
}",,922a
"fun test_2_1(resolvedCall: ResolvedCall<out CallableDescriptor>, d: CallableDescriptor)","{
    val x = resolvedCall.updateD(<!ARGUMENT_TYPE_MISMATCH!>d<!>) // should fail
}",,7007
"fun test_2_2(resolvedCall: ResolvedCall<in CallableDescriptor>, d: CallableDescriptor)","{
    val x = resolvedCall.updateD(d) // should be ok
}",,f366
"fun test_2_3(resolvedCall: ResolvedCall<CallableDescriptor>, d: CallableDescriptor)","{
    val x = resolvedCall.updateD(d) // should be ok
}",,8e4b
fun test(b: Boolean),"{
    <expr>object {
        fun getBool(): Boolean = b
    }",,69ac
fun plus(x : String),": MyString {
        s += x
        return this
    }",//KT-3869 Loops and finally: outer finally block not run,e6e1
fun toString(),": String {
        return s
    }",,a535
fun test1(),": MyString {
    var r = MyString()
    try {
        r + ""Try""

        while(r.toString() != """") {
            return r + ""Loop""
        }",,fa3b
fun test2(),": MyString {
    var r = MyString()
    try {
        r + ""Try""

        do {
            if (r.toString() != """") {
                return r + ""Loop""
            }",,30bb
fun test3(),": MyString {
    var r = MyString()
    try {
        r + ""Try""

        for(i in 1..2) {
            r + ""Loop""
            return r
        }",,a31f
fun box(),": String {
    if (test1().toString() != ""TryLoopFinally"") return ""fail1: ${test1()}",,4f27
fun box(),": String {
    var result = """"
    // See KT-14399
    listOf(Station(""O"", ""K"", 56)).forEachIndexed { i, (id, name, distance) -> result += ""$id$name$distance"" }",// WITH_STDLIB,4f27
No signature found,"fun get(thisRef: Any?, prop: KProperty<*>): String = p",// !DIAGNOSTICS: -UNUSED_PARAMETER,6e1f
No signature found,"fun set(thisRef: Any?, prop: KProperty<*>, value: String) {}",,6e1f
No signature found,"fun getValue(thisRef: Any?, prop: KProperty<*>): String = p",,6e1f
No signature found,"fun setValue(thisRef: Any?, prop: KProperty<*>, value: String) {}",,6e1f
No signature found,"fun get(thisRef: Any?, prop: KProperty<*>): String = p",,6e1f
No signature found,"fun set(thisRef: Any?, prop: KProperty<*>, value: String) {}",,6e1f
No signature found,"fun getValue(thisRef: Any?, prop: KProperty<*>): Int = 5",,6e1f
No signature found,"fun setValue(thisRef: Any?, prop: KProperty<*>, value: Int) {}",,6e1f
No signature found,"fun get(thisRef: Any?, prop: KProperty<*>): String = p",,6e1f
No signature found,"fun set(thisRef: Any?, prop: KProperty<*>, value: String) {}",,6e1f
No signature found,"fun OkDelegate.get(thisRef: Any?, prop: KProperty<*>): Int = 4",,6e1f
No signature found,"fun OkDelegate.set(thisRef: Any?, prop: KProperty<*>, value: Int) {}",,6e1f
No signature found,"fun CustomDelegate3.getValue(thisRef: Any?, prop: KProperty<*>): Int = 4",,6e1f
No signature found,"fun CustomDelegate3.setValue(thisRef: Any?, prop: KProperty<*>, value: Int) {}",,6e1f
fun test(),"{
        requireString(<!ARGUMENT_TYPE_MISMATCH!>a<!>)
        requireString(<!ARGUMENT_TYPE_MISMATCH!>aval<!>)
        requireString(b)
        requireInt(c)
        requireInt(d)
    }",,fe98
fun requireString(s: String),{},,0eae
fun requireInt(n: Int),{},,658d
fun runTest(),"{
        MainJava()
        MainKotlin()
        MainKotlinInternal()
        println(""src/main OK!"")

        TestJava()
        TestKotlin()
        TestKotlinInternal()
        println(""src/test OK!"")

        TestFixturesJava()
        TestFixturesKotlin()
        TestFixturesKotlinInternal()
        println(""src/testFixtures OK!"")

        FunctionalTestKotlin()
        FunctionalTestJava()
        println(""src/functionalTest OK!"")
    }",,3f77
fun bar(b: B),"{
    b.foo(null)
}",,2250
fun performTransformations(methodNode: MethodNode),"{
        normalizationMethodTransformer.transform(""fake"", methodNode)
        UninitializedStoresProcessor(methodNode).run()

        if (!mandatoryTransformationsOnly && canBeOptimized(methodNode) && !generationState.config.disableOptimization) {
            optimizationTransformer.transform(""fake"", methodNode)
        }",,4bae
fun canBeOptimized(node: MethodNode),": Boolean {
            if (node.tryCatchBlocks.size > TRY_CATCH_BLOCKS_SOFT_LIMIT) {
                if (getTotalFramesWeight(getTotalTcbSize(node), node) > MEMORY_LIMIT_BY_METHOD_MB)
                    return false
            }",,cc94
fun canBeOptimizedUsingSourceInterpreter(node: MethodNode),": Boolean {
            val methodSize = node.instructions.first.countInsnsWithFramesUntil(null)
            if (node.tryCatchBlocks.size > TRY_CATCH_BLOCKS_SOFT_LIMIT) {
                if (getTotalFramesWeight(getTotalTcbSize(node) * methodSize, node) > MEMORY_LIMIT_BY_METHOD_MB)
                    return false
            }",,9c5a
No signature found,"fun AbstractInsnNode?.countInsnsWithFramesUntil(end: AbstractInsnNode?): Int {
            var it = this
            var result = 0
            while (it != end && it != null) {
                // FastMethodAnalyzer will reuse the Frame instance when a pseudo-instruction or a NOP is followed
                // by anything other than a jump-targeted label, so those instructions consume no extra memory.
                // To avoid checking all jumps, here we assume all labels are potentially targeted.
                // (Effectively, all of this means that adding line numbers should not inhibit optimization.)
                val type = it.nodeType
                if ((type != AbstractInsnNode.LINE && type != AbstractInsnNode.FRAME && type != AbstractInsnNode.LABEL &&
                            it.opcode != Opcodes.NOP) || it.next?.nodeType == AbstractInsnNode.LABEL
                ) result++
                it = it.next
            }",,6e1f
"fun getTotalFramesWeight(size: Int, node: MethodNode)","=
            s",,f6b9
fun getTotalTcbSize(node: MethodNode),"=
            n",,f8e3
fun printInt(x: Int),= s,,e70c
No signature found,"fun foo(arg: Int?) {
    if (arg != null)
        printInt(arg)
}",,6e1f
fun box(),": String {
    foo(42)
    val nonConst = 42
    foo(nonConst)

    assertEquals(""42\n42\n"", sb.toString())
    return ""OK""
}",,4f27
fun get(),"fun interface Sam<T> {
    : T
}","// KOTLIN_CONFIGURATION_FLAGS: SAM_CONVERSIONS=CLASS
// WITH_SIGNATURES
// FILE: t.kt",7383
fun <T> expectsSam(sam: Sam<T>),= s,,b78c
No signature found,fun specializedSam(f: () -> String) = e,,6e1f
fun matches(ide: Ide),": Boolean

    operator fun invoke(): Boolean = m",,bbe9
No signature found,"fun invoke(block: () -> Unit): Unit {
        if (matches(IdeVersionConfigurator.currentIde)) {
            block()
        }",,6e1f
fun matches(ide: Ide),= !,,bbe9
No signature found,fun CompatibilityPredicate.or(other: CompatibilityPredicate): CompatibilityPredicate = o,,6e1f
fun matches(ide: Ide),= t,,bbe9
fun matches(ide: Ide),= i,,bbe9
fun get(version: Int),": Platform {
            return Platform.values().firstOrNull { it.version == version }",,3fa7
fun matches(ide: Ide),= i,,bbe9
fun matches(ide: Ide),= i,,bbe9
fun matches(ide: Ide),= i,,bbe9
fun matches(ide: Ide),= i,,bbe9
fun matches(ide: Ide),= i,,bbe9
fun setCurrentIde(project: Project),"{
        val platformVersion = project.rootProject.extensions.extraProperties[""versions.platform""].toString()
        val ideName = if (platformVersion.startsWith(""AS"")) platformVersion else ""IJ$platformVersion""
        currentIde = Ide.valueOf(ideName)
    }",,1067
fun matches(ide: Ide),= i,,bbe9
No signature found,"fun Base.zoo() {
            val x = property
        }",// !CHECK_TYPE,6e1f
fun foo(),"{
            baseFun()
            val x = property
            zoo()
            hoo()
        }",,519f
No signature found,"fun Child.voo() {
        val x = property
    }",,6e1f
No signature found,"fun Base.hoo() {
        val x = property
    }",,6e1f
fun baseFun(),{},,0bb3
fun caseForBase(),"{
        val base = Base(B())
        /*member of Base*/
        base.baseFun()
        base.property
        /*extensions*/
        base.hoo()
    }",,8d0a
fun caseForChild(),"{
        val child = Child(B())
        /*member of Base*/
        child.baseFun()
        child.property
        /*member of Child*/
        child.foo()
        /*extensions*/
        child.hoo()
        child.voo()
    }",,0a36
No signature found,"fun Base.zoo() {
            val x = property

        }",,6e1f
fun foo(),"{
            baseFun()
            val x = property
            zoo()
            hoo()
        }",,519f
No signature found,"fun Base.hoo() {
        val x = property
    }",,6e1f
fun baseFun(),{},,0bb3
fun caseForBase(),"{
        val base = Base(B())
        /*member of Base*/
        base.baseFun()
        base.property
        /*extensions*/
        base.hoo()
    }",,8d0a
fun caseForChild(),"{
        val child = x
        /*member of Base*/
        child.baseFun()
        child.property
        /*extensions*/
        child.hoo()
    }",,0a36
No signature found,"fun Base.zoo() {
                val x = property
            }",,6e1f
fun foo(),"{
                baseFun()
                val x = property
                zoo()
                hoo()
            }",,519f
No signature found,"fun Child.voo() {
            val x = property
        }",,6e1f
No signature found,"fun Base.hoo() {
            val x = property
        }",,6e1f
fun baseFun(),{},,0bb3
fun caseForBase(),"{
            val base = Base(B())
            /*member of Base*/
            base.baseFun()
            base.property
            /*extensions*/
            base.hoo()
        }",,8d0a
fun caseForChild(),"{
            val child = Child(B())
            /*member of Base*/
            child.baseFun()
            child.property
            /*member of Child*/
            child.foo()
            /*extensions*/
            child.hoo()
            child.voo()
        }",,0a36
No signature found,fun A?.get(i: Int): A? = t,"// TARGET_BACKEND: JVM_IR
// IGNORE_BACKEND_K1: JVM_IR",6e1f
No signature found,"fun A?.set(i: Int, v: A?): A? {
    cnt++
    return this
}",,6e1f
No signature found,"fun A?.inc(): A? {
    return this
}",,6e1f
No signature found,"fun test(a: A?) {
    ++a?.b
    ++a?.b?.c
    ++a?.b.c // "".c"" will be called anyway

    ++a?.b[0]
    ++a?.b?.c[0]
    ++a?.b.c[0] // "".c"" will be called anyway

    ++a?.b[0][0]
    ++a?.b?.c[0][0]
    ++a?.b.c[0][0] // "".c"" will be called anyway
}",,6e1f
fun box(),": String {
    test(null)
    if (cnt != 3) return ""fail 1: $cnt""

    cnt = 0
    test(A())
    if (cnt != 9) return ""fail 2: $cnt""

    return ""OK""
}",,4f27
fun <R> select(vararg x: R),= x,"// !DIAGNOSTICS: -UNUSED_PARAMETER
// Issues: KT-36816",1050
fun <S> main(x: S),"{
    select(Foo(x), Bar(x))
}",,7216
No signature found,fun <R> test(transform: () -> R) {},,6e1f
fun <K> foo(x: K),"{
    test { Inv(x) }",,82d5
fun <T> getT(),: T = n,,cb11
fun runTest1(),"{
    val worker = Worker.start()

    assertEquals(1, topInt)
    assertEquals(""string"", topString)
    assertEquals(42, topData.x)
    assertEquals(43, topSharedData.x)
    assertEquals(""top"", topSharedStringWithGetter)

    worker.execute(TransferMode.SAFE, { -> }","// OUTPUT_DATA_FILE: worker10.out
// DISABLE_NATIVE: gcType=NOOP
// FREE_COMPILER_ARGS: -opt-in=kotlin.experimental.ExperimentalNativeApi,kotlin.native.runtime.NativeRuntimeApi,kotlinx.cinterop.ExperimentalForeignApi",572a
fun runTest2(),"{
    semaphore.value = 0
    val worker = Worker.start()
    val future = worker.execute(TransferMode.SAFE, { null }",,0d14
fun runTest3(),"{
    semaphore.value = 0
    val worker = Worker.start()
    val future = worker.execute(TransferMode.SAFE, { null }",,37f8
No signature found,"fun <T: Any> ensureWeakIs(weak: WeakReference<T>, expected: T?) {
    assertEquals(expected, weak.get())
}",,6e1f
fun runTest4(),"{
    val worker = Worker.start()
    semaphore.value = 0
    val future = worker.execute(TransferMode.SAFE, { WeakReference(stableHolder1.get()) }",,6870
fun runTest5(),"{
    val worker = Worker.start()
    semaphore.value = 0
    val future = worker.execute(TransferMode.SAFE, { WeakReference(stableHolder2.get()) }",,a494
fun runTest6(),"{
    semaphore.value = 0
    val worker = Worker.start()
    val future = worker.execute(TransferMode.SAFE, { null }",,e7f9
fun foo(),= 4,// FIR_IDENTICAL,519f
No signature found,"fun transform(i: Int, tr: (<!WRONG_ANNOTATION_TARGET!>@special<!> Int) -> Int): Int = @",,6e1f
fun foo(i: Int),": Int {
    val j = @special i + 1
    if (j == 1) return foo(@special 42)
    return transform(@special j, @special { i: @base Int -> <!WRONG_ANNOTATION_TARGET!>@base<!> i * 2 }",,9471
"fun check(declaration: FirRegularClass, context: CheckerContext, reporter: DiagnosticReporter)","{
        declaration.superTypeRefs.firstOrNull()?.let { typeRef ->
            // compiler automatically adds java.lang.Record supertype, so we should check only for explicit type declarations
            if (typeRef.source != null && typeRef.coneTypeSafe<ConeClassLikeType>()?.fullyExpandedClassId(context.session) == JvmStandardClassIds.Java.Record) {
                reporter.reportOn(typeRef.source, FirJvmErrors.ILLEGAL_JAVA_LANG_RECORD_SUPERTYPE, context)
                return
            }",,f85c
fun enterCallable(),"{
        cacheStack += Fir2IrScopeCache()
    }",,4337
fun leaveCallable(),"{
        cacheStack.last().clear()
        cacheStack.removeAt(cacheStack.size - 1)
    }",,a375
fun getParameter(parameter: FirValueParameter),": IrValueParameterSymbol? {
        for (cache in cacheStack.asReversed()) {
            val local = cache.getParameter(parameter)
            if (local != null) return local
        }",,4655
fun getVariable(variable: FirVariable),": IrVariableSymbol? {
        return last { getVariable(variable) }",,a71e
fun getLocalFunctionSymbol(localFunction: FirFunction),": IrSimpleFunctionSymbol? {
        return last { getLocalFunction(localFunction) }",,94b1
fun getDelegatedProperty(property: FirProperty),": IrLocalDelegatedPropertySymbol? {
        return last { getDelegatedProperty(property) }",,d52f
No signature found,"fun <T> last(getter: Fir2IrScopeCache.() -> T?): T? {
        for (cache in cacheStack.asReversed()) {
            cache.getter()?.let { return it }",,6e1f
"fun putParameter(firParameter: FirValueParameter, irParameterSymbol: IrValueParameterSymbol)","{
        cacheStack.last().putParameter(firParameter, irParameterSymbol)
    }",,af01
"fun putVariable(firVariable: FirVariable, irVariableSymbol: IrVariableSymbol)","{
        cacheStack.last().putVariable(firVariable, irVariableSymbol)
    }",,33de
"fun putLocalFunction(firFunction: FirFunction, irFunctionSymbol: IrSimpleFunctionSymbol)","{
        cacheStack.last().putLocalFunction(firFunction, irFunctionSymbol)
    }",,de90
"fun putDelegatedProperty(firProperty: FirProperty, irPropertySymbol: IrLocalDelegatedPropertySymbol)","{
        cacheStack.last().putDelegatedProperty(firProperty, irPropertySymbol)
    }",,f553
fun isStarProjection(),= t,,d0a8
fun getProjectionKind(),= V,,af88
fun getType(),= _,,fac2
fun refine(kotlinTypeRefiner: KotlinTypeRefiner),: TypeProjection = t,,b531
fun replaceType(type: KotlinType),": TypeProjection {
        throw UnsupportedOperationException(""Replacing type for star projection is unsupported"")
    }",,4f45
"fun buildStarProjectionTypeByTypeParameters(
    typeParameters: List<TypeConstructor>,
    upperBounds: List<KotlinType>,
    builtIns: KotlinBuiltIns
)",= T,,3697
fun get(key: TypeConstructor),"=
            i",,4502
No signature found,"fun TypeParameterDescriptor.starProjectionType(): KotlinType {
    return when (val descriptor = this.containingDeclaration) {
        is ClassifierDescriptorWithTypeParameters -> {
            buildStarProjectionTypeByTypeParameters(
                typeParameters = descriptor.typeConstructor.parameters.map { it.typeConstructor }",,6e1f
fun isStarProjection(),= t,,d0a8
fun getProjectionKind(),= V,,af88
fun getType(),= n,,fac2
fun refine(kotlinTypeRefiner: KotlinTypeRefiner),: TypeProjection = t,,b531
fun replaceType(type: KotlinType),": TypeProjection {
        throw UnsupportedOperationException(""Replacing type for star projection is unsupported"")
    }",,4f45
"fun check(expression: FirFunctionCall, context: CheckerContext, reporter: DiagnosticReporter)","{
        val constructorSymbol = expression.calleeReference.toResolvedConstructorSymbol() ?: return
        val coneType = constructorSymbol.resolvedReturnTypeRef.coneType

        if (constructorSymbol.origin == FirDeclarationOrigin.Synthetic.TypeAliasConstructor && coneType.contains { it is ConeCapturedType }",,72c2
"fun transform(module: TestModule, inputArtifact: I)",": O?
    abstract fun shouldRunAnalysis(module: TestModule): Boolean
}

abstract class FrontendFacade<R : ResultingArtifact.FrontendOutput<R>>(
    val testServices: TestServices,
    final override val outputKind: FrontendKind<R>
) : AbstractTestFacade<ResultingArtifact.Source, R>() {
    final override val inputKind: TestArtifactKind<ResultingArtifact.Source>
        get() = SourcesKind

    override fun shouldRunAnalysis(module: TestModule): Boolean {
        return module.frontendKind == outputKind
    }",,ca44
fun analyze(module: TestModule),": R

    final override fun transform(module: TestModule, inputArtifact: ResultingArtifact.Source): R {
        // TODO: pass sources
        return analyze(module)
    }",,9283
fun shouldRunAnalysis(module: TestModule),": Boolean {
        return module.backendKind == outputKind
    }",,9681
fun shouldRunAnalysis(module: TestModule),": Boolean {
        return module.backendKind == inputKind && module.binaryKind == outputKind
    }",,9681
No signature found,"fun <TItem : KtElement> addItem(list: KtElement, allItems: List<TItem>, item: TItem, prefix: KtToken = K",,6e1f
No signature found,"fun <TItem : KtElement> addItemAfter(
        list: KtElement,
        allItems: List<TItem>,
        item: TItem,
        anchor: TItem?,
        prefix: KtToken = K",,6e1f
No signature found,"fun <TItem : KtElement> addItemBefore(
        list: KtElement,
        allItems: List<TItem>,
        item: TItem,
        anchor: TItem?,
        prefix: KtToken = K",,6e1f
No signature found,"fun <TItem : KtElement> removeItem(item: TItem) {
        var comma = item.siblings(withItself = false).firstOrNull { it !is PsiWhiteSpace && it !is PsiComment }",,6e1f
fun <T> listOf(),: List<T> = n,"// !CHECK_TYPE
// !DIAGNOSTICS: -UNUSED_PARAMETER -UNUSED_ANONYMOUS_PARAMETER -UNUSED_VARIABLE",313f
fun (x),"fun test(a: (Int) -> Int) {
    test( = 4)

    test( = x)

    test(: Int { checkSubtype<Int>(x); return 4 }",,e01b
fun (),"fun test2(a: () -> List<Int>) {
    test2( = listOf())
}",,f1dc
fun doTargetSpecificProcessing(),"{
        project.tasks.named(compilationInfo.compileAllTaskName).dependsOn(kotlinTask)
        // can be missing (e.g. in case of tests)
        if (compilationInfo.isMain) {
            compilationInfo.tcs.compilation.target.let { target ->
                project.locateTask<Task>(target.artifactsTaskName)?.dependsOn(kotlinTask)
            }",,de95
"fun doRegisterTask(project: Project, taskName: String)",": TaskProvider<out KotlinCompileCommon> {
        val configAction = KotlinCompileCommonConfig(compilationInfo)
        applyStandardTaskConfiguration(configAction)
        return tasksProvider.registerKotlinCommonTask(
            project,
            taskName,
            compilationInfo.compilerOptions.options as KotlinMultiplatformCommonCompilerOptions,
            configAction
        )
    }",,3efd
fun get(),": Step
}

class Outer(val k: String) {
    val obj = object : GetStep {
        override : Step = Step(::test)
    }","// TARGET_BACKEND: JVM
// JVM_TARGET: 1.8
// SAM_CONVERSIONS: INDY

// FILE: privateOuterClassMemberFun.kt",7383
fun test(s: String),= s,,f4d3
fun box(),": String =
    O",,4f27
fun foo(),"= ""","// WITH_STDLIB
// TARGET_BACKEND: JS_IR
// TARGET_BACKEND: JS_IR_ES6
// RUN_PLAIN_BOX_FUNCTION
// INFER_MAIN_MODULE

// MODULE: lib
// FILE: lib.kt",519f
fun bar(),{},"// ISSUE: KT-46072

// Case 1",66c3
fun f(),= <,,f6fb
No signature found,fun IA.extFun(x: IB) {},,6e1f
No signature found,fun IB.extFun(x: IA) {},,6e1f
fun testWithExpectedType(),"{
    val extFun_AA_B: IA.(IA) -> Unit = IB::<!NONE_APPLICABLE!>extFun<!> // extFun is unresolved, type of IB::extFun is implicit
}",,e715
"fun <R, D> accept(visitor: IrElementVisitor<R, D>, data: D)",": R =
        v",,af8a
"fun <D> acceptChildren(visitor: IrElementVisitor<Unit, D>, data: D)","{
        elements.forEach { it.accept(visitor, data) }",,a229
"fun <D> transformChildren(transformer: IrElementTransformer<D>, data: D)","{
        elements.transformInPlace(transformer, data)
    }",,e8d0
fun box(),": String {
    val p = J::foo
    assertEquals(""foo"", p.name)

    val j = J()
    p.set(j, ""OK"")
    return p.get(j)
}","// TARGET_BACKEND: JVM
// !LANGUAGE: +ReferencesToSyntheticJavaProperties

// WITH_STDLIB
// FILE: J.java",4f27
No signature found,fun <T> bar(action: () -> T): T = a,"// FIR_IDENTICAL
// SKIP_TXT
// FULL_JDK",6e1f
No signature found,fun bar(action: java.lang.Runnable) { },,6e1f
fun foo(),": String = """,,519f
fun main(),"{
    val x = bar() { foo() }",,d987
"fun initialize(
        trace: BindingTrace,
        codeAnalyzer: KotlinCodeAnalyzer,
        languageVersionSettings: LanguageVersionSettings,
        jvmTarget: JvmTarget,
    )","{
        javac = JavacWrapper.getInstance(project)
        super.initialize(trace, codeAnalyzer, languageVersionSettings, jvmTarget)
    }",,6a65
No signature found,"fun findClass(request: JavaClassFinder.Request) =
        /",,6e1f
No signature found,fun findClasses(request: JavaClassFinder.Request): List<JavaClass> = l,,6e1f
"fun findPackage(fqName: FqName, mayHaveAnnotations: Boolean)",= j,,3f8a
fun knownClassNamesInPackage(packageFqName: FqName),= j,,f1f5
fun canComputeKnownClassNamesInPackage(),: Boolean = t,,0df7
fun box(),": String {
    return if (D(0).b == 2) ""OK"" else ""fail""
}",// EXPECTED_REACHABLE_NODES: 1289,4f27
No signature found,fun <@A T> <expr>T</expr>.test() {},// LOOK_UP_FOR_ELEMENT_OF_TYPE: org.jetbrains.kotlin.psi.KtNameReferenceExpression,6e1f
fun foo(),: Foo? = n,,519f
fun noFiltering(),"{
        val randomTestOutput = List(100) { (Char.MIN_VALUE..Char.MAX_VALUE).random() }",,0d2e
fun noTCMessages(),"{
        val testOutput = """"""
            1
            2
            3
            4
            5
        """""".trimIndent()

        val (filteredOutput, testReport) = TCTestOutputFilter.filter(testOutput)
        testReport ?: throw AssertionError(""Test report expected"")

        assertTrue(testReport.isEmpty())
        assertTrue(testOutput == filteredOutput)
    }",,a711
fun mixedTCMessages(),"{
        val testOutput = """"""
            1
            ##teamcity[testSuiteStarted name='sample.test.Foo']
            2
            ##teamcity[testStarted name='passed']
            3
            ##teamcity[testFinished name='passed']
            4
            ##teamcity[testStarted name='failed']
            5
            ##teamcity[testFailed name='failed' details='foo: something went wrong!|n']
            6
            ##teamcity[testFinished name='failed']
            7
            ##teamcity[testIgnored name='ignored']
            8
            ##teamcity[testSuiteFinished name='sample.test.Foo']
            9
            ##teamcity[testSuiteStarted name='sample.test.Bar']
            10
            ##teamcity[testSuiteFinished name='sample.test.Bar']
            11
            ##teamcity[testSuiteStarted name='sample.test.Baz']
            12
            ##teamcity[testStarted name='passed']
            13
            ##teamcity[testFinished name='passed']
            14
            ##teamcity[testStarted name='failed']
            15
            ##teamcity[testFailed name='failed' details='baz: something went wrong!|n']
            16
            ##teamcity[testFinished name='failed']
            17
            ##teamcity[testIgnored name='ignored']
            18
            ##teamcity[testSuiteFinished name='sample.test.Baz']
            19
            
        """""".trimIndent()

        val (filteredOutput, testReport) = TCTestOutputFilter.filter(testOutput)
        testReport ?: throw AssertionError(""Test report expected"")

        assertTrue(!testReport.isEmpty())
        assertEquals(
            listOf(""sample.test.Foo.passed"", ""sample.test.Baz.passed""),
            testReport.passedTests.map(TestName::toString)
        )
        assertEquals(
            listOf(""sample.test.Foo.failed"", ""sample.test.Baz.failed""),
            testReport.failedTests.map(TestName::toString)
        )
        assertEquals(
            listOf(""sample.test.Foo.ignored"", ""sample.test.Baz.ignored""),
            testReport.ignoredTests.map(TestName::toString)
        )

        assertEquals(
            """"""
                |1
                |2
                |3
                |4
                |5
                |foo: something went wrong!
                |6
                |7
                |8
                |9
                |10
                |11
                |12
                |13
                |14
                |15
                |baz: something went wrong!
                |16
                |17
                |18
                |19
                |
            """""".trimMargin(),
            filteredOutput
        )
    }",,b43c
fun interruptedTestTCMessage(),"{
        val testOutput = """"""
            1
            ##teamcity[testSuiteStarted name='sample.test.Foo']
            2
            ##teamcity[testStarted name='passed']
            3
            ##teamcity[testFinished name='passed']
            4
            ##teamcity[testStarted name='failed']
            5
            
        """""".trimIndent()

        val (filteredOutput, testReport) = TCTestOutputFilter.filter(testOutput)
        testReport ?: throw AssertionError(""Test report expected"")

        assertTrue(!testReport.isEmpty())
        assertEquals(listOf(""sample.test.Foo.passed""), testReport.passedTests.map(TestName::toString))
        assertEquals(listOf(""sample.test.Foo.failed""), testReport.failedTests.map(TestName::toString))
        assertTrue(testReport.ignoredTests.isEmpty())

        assertEquals(
            """"""
                |1
                |2
                |3
                |4
                |5
                |
            """""".trimMargin(),
            filteredOutput
        )
    }",,fc92
No signature found,"fun arrayAccessRHS(a: Int?, b: Array<Int>) {
    b[0] = a!!
    checkSubtype<Int>(a)
}",// !CHECK_TYPE,6e1f
No signature found,"fun arrayAccessLHS(a: Int?, b: Array<Int>) {
    b[a!!] = a
    checkSubtype<Int>(a)
}",,6e1f
fun contains(element: T),": Boolean {
        TODO(""Not yet implemented"")
    }","// WITH_STDLIB

// FILE: test/B.java",4930
fun containsAll(elements: Collection<T>),": Boolean {
        TODO(""Not yet implemented"")
    }",,0208
fun isEmpty(),": Boolean {
        TODO(""Not yet implemented"")
    }",,464e
fun iterator(),": Iterator<T> {
        TODO(""Not yet implemented"")
    }",,c20a
fun get(index: Int),": F {
        TODO(""Not yet implemented"")
    }",,60cf
fun indexOf(element: F),": Int {
        TODO(""Not yet implemented"")
    }",,0df3
fun lastIndexOf(element: F),": Int {
        TODO(""Not yet implemented"")
    }",,594d
fun listIterator(),": ListIterator<F> {
        TODO(""Not yet implemented"")
    }",,d886
fun listIterator(index: Int),": ListIterator<F> {
        TODO(""Not yet implemented"")
    }",,1bc7
"fun subList(fromIndex: Int, toIndex: Int)",": List<F> {
        TODO(""Not yet implemented"")
    }",,2cf6
"fun check(declaration: KtDeclaration, descriptor: DeclarationDescriptor, context: DeclarationCheckerContext)","{
        if (!context.languageVersionSettings.supportsFeature(LanguageFeature.MultiPlatformProjects)) return
        if (context.languageVersionSettings.areExpectActualClassesStable) return
        if (descriptor !is TypeAliasDescriptor && descriptor !is ClassDescriptor) return
        check(declaration is KtClassOrObject || declaration is KtTypeAlias)

        // Common supertype of KtTypeAlias and KtClassOrObject is KtClassLikeDeclaration.
        // Common supertype of TypeAliasDescriptor and ClassDescriptor is ClassifierDescriptorWithTypeParameters.
        // The explicit casts won't be necessary when we start compiling kotlin with K2.
        @Suppress(""USELESS_IS_CHECK"") // K2 warning suppression, TODO: KT-62472
        check(declaration is KtClassLikeDeclaration)
        @Suppress(""USELESS_IS_CHECK"") // K2 warning suppression, TODO: KT-62472
        check(descriptor is ClassifierDescriptorWithTypeParameters)

        if (descriptor.isExpect || descriptor.isActual) {
            context.trace.report(Errors.EXPECT_ACTUAL_CLASSIFIERS_ARE_IN_BETA_WARNING.on(declaration))
        }",,5073
No signature found,"fun foo(x: String = ""","// EXPECTED_REACHABLE_NODES: 1281
// MODULE: lib
// FILE: lib.kt",6e1f
fun test(),= f,,fe98
fun box(),": String {
    val r = test()
    if (test() != ""xy;Xy;xY;XY"") return ""fail: $r""

    return ""OK""
}",,4f27
"fun getStaticMemberScopeForCallables(
        klass: FirClass,
        useSiteSession: FirSession,
        scopeSession: ScopeSession
    )","fun getUseSiteMemberScope(
        klass: FirClass,
        useSiteSession: FirSession,
        scopeSession: ScopeSession,
        memberRequiredPhase: FirResolvePhase?,
    ): FirTypeScope

    abstract : FirContainingNamesAwareScope?

    abstract fun getNestedClassifierScope(
        klass: FirClass,
        useSiteSession: FirSession,
        scopeSession: ScopeSession
    ): FirContainingNamesAwareScope?

    fun getStaticScope(
        klass: FirClass,
        useSiteSession: FirSession,
        scopeSession: ScopeSession
    ): FirContainingNamesAwareScope? {
        val nestedClassifierScope = getNestedClassifierScope(klass, useSiteSession, scopeSession)
        val callableScope = getStaticMemberScopeForCallables(klass, useSiteSession, scopeSession)

        return when {
            nestedClassifierScope != null && callableScope != null ->
                FirNameAwareCompositeScope(listOf(nestedClassifierScope, callableScope))
            else -> nestedClassifierScope ?: callableScope
        }",,1a6e
fun close(),"}

class C {
    class Resource : AutoCloseable {
        override  {
            throw UnsupportedOperationException()
        }",,7e58
No signature found,"fun <X : AutoCloseable> foo(x : X, body : (X) -> Unit) {
    }",,6e1f
fun p(),: Resource? = n,,f428
fun bar(),"{
        foo(<!ARGUMENT_TYPE_MISMATCH!>p()<!>) <!CANNOT_INFER_PARAMETER_TYPE!>{

        }",,66c3
fun zzz(value: T),": Unit
}

class Bbb<T>() : Aaa<T> {
    override  { }",// FIR_IDENTICAL,2fe1
fun foo(),"{
    var a = Bbb<Double>()
    a.zzz(10.0)
}",,519f
fun foo(),{},,519f
fun foo(),{},,519f
fun foo(),{},,519f
fun self(),: D = t,,af22
fun self(),= t,,af22
fun test(),"{
        val s : E = self()
    }",,fe98
fun protected_fun(),{},,e13b
fun protected_fun(),{},,e13b
fun test_fun_stays_protected(g: G),"{
    g.<!INVISIBLE_REFERENCE!>protected_fun<!>()
}",,ae8e
fun pi_fun(),{},//------------,9948
fun pi_fun(),{},,9948
fun pi_fun(),{},,9948
fun pi_fun(),{},,9948
fun foo(),{},,519f
fun foo(),{},,519f
fun foo(),{},,519f
fun foo(),{},,519f
fun foo(),{},,519f
fun foo(),{},,519f
fun foo(),{},,519f
fun f(),= o,"// EXPECTED_REACHABLE_NODES: 1302
// MODULE: lib
// FILE: lib.kt",f6fb
fun o(),": String

    abstract fun k(): String
}

inline fun foo(x: String): A {
    return object : A() {
        override : String = x

        override fun k(): String = ""K""
    }",,1549
fun box(),: String = f,,4f27
fun method(),= M,,f9b6
fun (),= <,,f1dc
fun doSmth(i: String),= 4,,0e53
No signature found,"fun <reified T : Any> Any.test1(): T? =
    i",,6e1f
fun test(arg: Any),"{
        arg as T
        useT(arg)
    }",,051b
fun useT(t: T),{},,8fe6
fun o(),{},"// SKIP_WHEN_OUT_OF_CONTENT_ROOT
// MODULE: lib
// MODULE_KIND: LibraryBinary
// FILE: lib.kt",1549
fun bar(),"}

abstract class FooImpl : Foo() {
    override fun <caret>bar() {

    }",,66c3
fun test(),= B,// FIR_IDENTICAL,fe98
fun render(diagnostic: KtDiagnostic),": String
    fun renderParameters(diagnostic: KtDiagnostic): Array<out Any?>
}

class SimpleKtDiagnosticRenderer(override val message: String) : KtDiagnosticRenderer {
    override : String {
        require(diagnostic is KtSimpleDiagnostic)
        return message
    }",,02dc
fun renderParameters(diagnostic: KtDiagnostic),": Array<out Any?> {
        require(diagnostic is KtSimpleDiagnostic)
        return emptyArray()
    }",,aaf8
fun render(diagnostic: KtDiagnostic),": String {
        return messageFormat.format(renderParameters(diagnostic))
    }",,02dc
fun renderParameters(diagnostic: KtDiagnostic),": Array<out Any?> {
        require(diagnostic is KtDiagnosticWithParameters1<*>)
        val context = RenderingContext.of(diagnostic.a)
        @Suppress(""UNCHECKED_CAST"")
        return arrayOf(renderParameter(diagnostic.a as A, rendererForA, context))
    }",,aaf8
fun renderParameters(diagnostic: KtDiagnostic),": Array<out Any?> {
        require(diagnostic is KtDiagnosticWithParameters2<*, *>)
        val context = RenderingContext.of(diagnostic.a, diagnostic.b)
        @Suppress(""UNCHECKED_CAST"")
        return arrayOf(
            renderParameter(diagnostic.a as A, rendererForA, context),
            renderParameter(diagnostic.b as B, rendererForB, context),
        )
    }",,aaf8
fun renderParameters(diagnostic: KtDiagnostic),": Array<out Any?> {
        require(diagnostic is KtDiagnosticWithParameters3<*, *, *>)
        val context = RenderingContext.of(diagnostic.a, diagnostic.b, diagnostic.c)
        @Suppress(""UNCHECKED_CAST"")
        return arrayOf(
            renderParameter(diagnostic.a as A, rendererForA, context),
            renderParameter(diagnostic.b as B, rendererForB, context),
            renderParameter(diagnostic.c as C, rendererForC, context),
        )
    }",,aaf8
fun renderParameters(diagnostic: KtDiagnostic),": Array<out Any?> {
        require(diagnostic is KtDiagnosticWithParameters4<*, *, *, *>)
        val context = RenderingContext.of(diagnostic.a, diagnostic.b, diagnostic.c, diagnostic.d)
        @Suppress(""UNCHECKED_CAST"")
        return arrayOf(
            renderParameter(diagnostic.a as A, rendererForA, context),
            renderParameter(diagnostic.b as B, rendererForB, context),
            renderParameter(diagnostic.c as C, rendererForC, context),
            renderParameter(diagnostic.d as D, rendererForD, context),
        )
    }",,aaf8
fun foo(),"{
        // val prop5: null
        val prop5 = A().a

        // val prop6: null
        val prop6 = A().a + 1

        val b = {
            // val prop11: null
            val prop11 = A().a

            // val prop12: null
            val prop12 = A().a + 1
        }",,519f
fun f(),"{
                // val prop9: null
                val prop9 = A().a

                // val prop10: null
                val prop10 = A().a + 1
            }",,f6fb
fun foo(),"{
    // val prop7: null
    val prop7 = A().a

    // val prop8: null
    val prop8 = A().a + 1
}",,519f
fun foo(),"{
    for (i in 1..2 step 4) {}",,519f
fun foo(),": String
}

<!APPROXIMATED_LOCAL_TYPE_WILL_BECOME_NULLABLE!>fun bar(condition: Boolean)<!> /*: I? */ =
    i","// ISSUE: KT-30054
// !LANGUAGE: -KeepNullabilityWhenApproximatingLocalType",519f
fun foo(),"= """,,519f
fun baz(),"= """,,b22f
fun main(),"{
    bar(false).<!UNRESOLVED_REFERENCE!>baz<!>()
    bar(false).foo()
    bar(false)<!UNNECESSARY_SAFE_CALL!>?.<!>foo()
}",,d987
fun foo(),"{
    test().
    test().
    fail()
}",// WITH_STDLIB,519f
fun test(),": String {
    return ""123""
}",,fe98
No signature found,"fun String.test(): String {
    return ""123""
}",,6e1f
No signature found,"fun String.fail(): String {
    throw AssertionError(""fail"")
}",,6e1f
fun bar(),"{
    ""123"".
    test
}",,66c3
fun baz(),"{
    E.
    SINGLE

    O::
    foo

    """"::
    fail
}",,b22f
fun foo(),{},,519f
fun toString(),= s,"// EXPECTED_REACHABLE_NODES: 1117
// IGNORE_BACKEND: JS",a535
No signature found,fun equals(other: Any?) = s,,6e1f
fun hashCode(),= s,,6874
fun toString(),= s,,a535
No signature found,fun equals(other: Any?) = s,,6e1f
fun hashCode(),= s,,6874
"fun testAnyBuiltins(x1: Any, x2: Any)",": String {
    val s = x1.toString()
    if (s != ""[object Object]"") return ""toString fail: ${s}",,b000
fun box(),": String {
    val resultC = testAnyBuiltins(C(), C())
    if (resultC != ""OK"") return resultC

    val resultD = testAnyBuiltins(D(), D())
    if (resultD != ""OK"") return resultD

    val resultE = testAnyBuiltins(E(), E())
    if (resultE != ""OK"") return resultE

    return ""OK""
}",,4f27
fun case1(),"{
    <!DEBUG_INFO_CALL(""fqName: libPackageCase1.listOf; typeCall: function"")!>listOf(elements = arrayOf(1))<!>
}","// FIR_IDENTICAL
// !DIAGNOSTICS: -UNUSED_VARIABLE -ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE -UNUSED_VALUE -UNUSED_PARAMETER -UNUSED_EXPRESSION
// SKIP_TXT",7602
fun <T> listOf(vararg elements: T),: List<T> = T,// FILE: Lib1.kt,c1aa
fun case2(),"{
    <!DEBUG_INFO_CALL(""fqName: libPackageCase2.listOf; typeCall: function"")!>listOf(elements = arrayOf(1))<!>
}",,cac0
fun <T> invoke(),: T = T,,d66c
fun <T> listOf(vararg elements: T),: List<T> = T,,c1aa
fun case3(),"{
    <!DEBUG_INFO_CALL(""fqName: testsCase3.A.invoke; typeCall: variable&invoke"")!>listOf(elements = arrayOf(1))<!>
}",,a2f4
fun <T> invoke(vararg elements: T),: List<T> = T,,9c15
fun <T> listOf(vararg elements: T),: List<T> = T,,c1aa
"fun <T> foo(t: T, l: MutableList<T>)",{},,916e
No signature found,fun use(vararg a: Any?) = a,,6e1f
fun test(ls: MutableList<String>),"{
    use(<caret>foo(11, ls))
}",,38fa
"fun analyze(graph: ControlFlowGraph, reporter: DiagnosticReporter, context: CheckerContext)","{
        // TODO, KT-59816: this is quadratic due to `graph.traverse`, surely there is a better way?
        for (subGraph in graph.subGraphs) {
            analyze(subGraph, reporter, context)
        }",,ab71
No signature found,"fun investigate(
        info: LambdaInvocationInfo,
        symbol: FirBasedSymbol<*>,
        requiredRange: EventOccurrencesRange,
        function: FirContractDescriptionOwner,
        reporter: DiagnosticReporter,
        context: CheckerContext
    ) {
        val foundRange = info[symbol]?.withoutMarker ?: EventOccurrencesRange.ZERO
        if (foundRange !in requiredRange) {
            reporter.reportOn(
                function.contractDescription?.source,
                FirErrors.WRONG_INVOCATION_KIND,
                symbol,
                requiredRange,
                foundRange,
                context
            )
        }",,6e1f
fun enterScope(legal: Boolean),"{
            scopeDepth++
            if (illegalScopeDepth == null && !legal) illegalScopeDepth = scopeDepth
        }",,eaf7
fun exitScope(),"{
            if (scopeDepth == illegalScopeDepth) illegalScopeDepth = null
            scopeDepth--
        }",,5da8
No signature found,"fun checkExpressionForLeakedSymbols(
            fir: FirExpression?,
            source: KtSourceElement? = f",,6e1f
No signature found,"fun visitNode(node: CFGNode<*>, data: IllegalScopeContext) {}",,6e1f
"fun visitFunctionEnterNode(node: FunctionEnterNode, data: IllegalScopeContext)","{
            // TODO, KT-59668: this is not how CFG works, this should be done by FIR tree traversal. Especially considering that
            //  none of these methods use anything from the CFG other than `node.fir`, which should've been a hint.
            data.enterScope(node.fir === rootFunction || node.fir.isInPlaceLambda())
        }",,c07f
"fun visitFunctionExitNode(node: FunctionExitNode, data: IllegalScopeContext)","{
            data.exitScope()
        }",,40db
"fun visitPropertyInitializerEnterNode(node: PropertyInitializerEnterNode, data: IllegalScopeContext)","{
            data.enterScope(false)
            data.checkExpressionForLeakedSymbols(node.fir.initializer)
        }",,63f0
"fun visitPropertyInitializerExitNode(node: PropertyInitializerExitNode, data: IllegalScopeContext)","{
            data.exitScope()
        }",,1344
"fun visitInitBlockEnterNode(node: InitBlockEnterNode, data: IllegalScopeContext)","{
            data.enterScope(false)
        }",,8a24
"fun visitInitBlockExitNode(node: InitBlockExitNode, data: IllegalScopeContext)","{
            data.exitScope()
        }",,ecef
"fun visitVariableAssignmentNode(node: VariableAssignmentNode, data: IllegalScopeContext)","{
            data.checkExpressionForLeakedSymbols(node.fir.rValue) { true }",,02c5
"fun visitVariableDeclarationNode(node: VariableDeclarationNode, data: IllegalScopeContext)","{
            data.checkExpressionForLeakedSymbols(node.fir.initializer) { true }",,c5c6
"fun visitFunctionCallNode(node: FunctionCallNode, data: IllegalScopeContext)","{
            val functionSymbol = node.fir.toResolvedCallableSymbol() as? FirFunctionSymbol<*>?
            val contractDescription = functionSymbol?.resolvedContractDescription

            val callSource = node.fir.explicitReceiver?.source ?: node.fir.source
            data.checkExpressionForLeakedSymbols(node.fir.explicitReceiver, callSource) {
                functionSymbol?.callableId?.isFunctionOrSuspendFunctionInvoke() != true && contractDescription?.getParameterCallsEffect(-1) == null
            }",,ff03
"fun visitFunctionCallNode(
            node: FunctionCallNode,
            data: PathAwareLambdaInvocationInfo
        )",": PathAwareLambdaInvocationInfo {
            var dataForNode = visitNode(node, data)

            val functionSymbol = node.fir.toResolvedCallableSymbol() as? FirFunctionSymbol<*>?
            val contractDescription = functionSymbol?.resolvedContractDescription

            dataForNode = dataForNode.checkReference(node.fir.explicitReceiver.toQualifiedReference()) {
                when {
                    functionSymbol?.callableId?.isFunctionOrSuspendFunctionInvoke() == true -> MarkedEventOccurrencesRange.ExactlyOnce(node)
                    else -> contractDescription.getParameterCallsEffect(-1)?.at(node)
                        ?: MarkedEventOccurrencesRange.Zero
                }",,06b7
No signature found,"fun collectDataForReference(reference: FirReference?): Boolean {
            contract {
                returns(true) implies (reference != null)
            }",,6e1f
No signature found,"fun PathAwareLambdaInvocationInfo.checkReference(
            reference: FirReference?,
            rangeGetter: () -> EventOccurrencesRangeAtNode
        ): PathAwareLambdaInvocationInfo {
            return if (collectDataForReference(reference)) addInvocationInfo(reference, rangeGetter()) else this
        }",,6e1f
No signature found,"fun PathAwareLambdaInvocationInfo.addInvocationInfo(
            reference: FirReference,
            range: EventOccurrencesRangeAtNode
        ): PathAwareLambdaInvocationInfo {
            val symbol = referenceToSymbol(reference)
            return if (symbol != null) addRange(symbol, range) else this
        }",,6e1f
No signature found,"fun FirTypeRef?.isFunctionTypeRef(session: FirSession): Boolean {
        return this?.coneType?.isSomeFunctionType(session) == true
    }",,6e1f
No signature found,"fun FirContractDescription?.getParameterCallsEffectDeclaration(index: Int): ConeCallsEffectDeclaration? {
        val effects = this?.effects?.map { it.effect }",,6e1f
No signature found,"fun FirFunctionCall.getArgumentCallsEffect(arg: FirExpression): EventOccurrencesRange? {
        val functionSymbol = (this.toResolvedCallableSymbol() as? FirFunctionSymbol<*>?)
        val contractDescription = functionSymbol?.resolvedContractDescription
        val resolvedArguments = argumentList as? FirResolvedArgumentList

        return if (functionSymbol != null && resolvedArguments != null) {
            val parameter = resolvedArguments.mapping[arg]
            contractDescription.getParameterCallsEffect(functionSymbol.valueParameterSymbols.indexOf(parameter?.symbol))
        }",,6e1f
No signature found,"fun FirContractDescription?.getParameterCallsEffect(index: Int): EventOccurrencesRange? {
        return getParameterCallsEffectDeclaration(index)?.kind
    }",,6e1f
No signature found,"fun FirFunction.isInPlaceLambda(): Boolean {
        return this is FirAnonymousFunction && this.isLambda && this.invocationKind != null
    }",,6e1f
No signature found,"fun FirExpression?.toQualifiedReference(): FirReference? {
        return (this?.unwrapArgument() as? FirQualifiedAccessExpression)?.calleeReference
    }",,6e1f
No signature found,fun referenceToSymbol(reference: FirReference?): FirBasedSymbol<*>? = w,,6e1f
fun bar(),= 1,,66c3
fun foo(),": Int {
    bar(null)
    return MyClass1.InternalClass.companionMethod() + 1
}",,519f
No signature found,fun bar(x: Any?): Any = x,,6e1f
fun box(),": String {
    if (0.toByte().compareTo(-0.0) != 1) return ""fail 1.1""
    if (0.toByte().compareTo(-0.0F) != 1) return ""fail 1.2""
    if (0.toByte().compareTo(Double.NaN) != -1) return ""fail 1.3""
    if (0.toByte().compareTo(Float.NaN) != -1) return ""fail 1.4""

    if (0.toShort().compareTo(-0.0) != 1) return ""fail 2.1""
    if (0.toShort().compareTo(-0.0F) != 1) return ""fail 2.2""
    if (0.toShort().compareTo(Double.NaN) != -1) return ""fail 2.3""
    if (0.toShort().compareTo(Float.NaN) != -1) return ""fail 2.4""

    if (0.compareTo(-0.0) != 1) return ""fail 3.1""
    if (0.compareTo(-0.0F) != 1) return ""fail 3.2""
    if (0.compareTo(Double.NaN) != -1) return ""fail 3.3""
    if (0.compareTo(Float.NaN) != -1) return ""fail 3.4""

    if (0.0F.compareTo(-0.0) != 1) return ""fail 4.1""
    if (0.0F.compareTo(-0.0F) != 1) return ""fail 4.2""
    if (0.0F.compareTo(Double.NaN) != -1) return ""fail 4.3""
    if (0.0F.compareTo(Float.NaN) != -1) return ""fail 4.4""

    if (0.0.compareTo(-0.0) != 1) return ""fail 5.1""
    if (0.0.compareTo(-0.0F) != 1) return ""fail 5.2""
    if (0.0.compareTo(Double.NaN) != -1) return ""fail 5.3""
    if (0.0.compareTo(Float.NaN) != -1) return ""fail 5.4""

    if (0L.compareTo(-0.0) != 1) return ""fail 6.1""
    if (0L.compareTo(-0.0F) != 1) return ""fail 6.2""
    if (0L.compareTo(Double.NaN) != -1) return ""fail 6.3""
    if (0L.compareTo(Float.NaN) != -1) return ""fail 6.4""


    if ((-0.0).compareTo(0.toByte()) != -1) return ""fail 7.1""
    if ((-0.0).compareTo(0.toShort()) != -1) return ""fail 7.2""
    if ((-0.0).compareTo(0) != -1) return ""fail 7.3""
    if ((-0.0).compareTo(0.0F) != -1) return ""fail 7.4""
    if ((-0.0).compareTo(0.0) != -1) return ""fail 7.5""
    if ((-0.0).compareTo(0L) != -1) return ""fail 7.6""

    if ((-0.0F).compareTo(0.toByte()) != -1) return ""fail 8.1""
    if ((-0.0F).compareTo(0.toShort()) != -1) return ""fail 8.2""
    if ((-0.0F).compareTo(0) != -1) return ""fail 8.3""
    if ((-0.0F).compareTo(0.0F) != -1) return ""fail 8.4""
    if ((-0.0F).compareTo(0.0) != -1) return ""fail 8.5""
    if ((-0.0F).compareTo(0L) != -1) return ""fail 8.6""

    if (Double.NaN.compareTo(0.toByte()) != 1) return ""fail 9.1""
    if (Double.NaN.compareTo(0.toShort()) != 1) return ""fail 9.2""
    if (Double.NaN.compareTo(0) != 1) return ""fail 9.3""
    if (Double.NaN.compareTo(0.0F) != 1) return ""fail 9.4""
    if (Double.NaN.compareTo(0.0) != 1) return ""fail 9.5""
    if (Double.NaN.compareTo(0L) != 1) return ""fail 9.6""

    if (Float.NaN.compareTo(0.toByte()) != 1) return ""fail 10.1""
    if (Float.NaN.compareTo(0.toShort()) != 1) return ""fail 10.2""
    if (Float.NaN.compareTo(0) != 1) return ""fail 10.3""
    if (Float.NaN.compareTo(0.0F) != 1) return ""fail 10.4""
    if (Float.NaN.compareTo(0.0) != 1) return ""fail 10.5""
    if (Float.NaN.compareTo(0L) != 1) return ""fail 10.6""

    return ""OK""
}",,4f27
fun a(),": String {

}",,9ea5
No signature found,"fun Bar.foo()
}

interface Bar {}",,6e1f
No signature found,"fun <T, R> myWith(argument: T, lambda: T.() -> R): R {
    argument.lambda()
}",,6e1f
No signature found,"fun Any.action(other: Any) {
    if (this is Foo) {
        with(other) {
            this as Bar
            <expr>foo</expr>()
        }",,6e1f
fun box(),": String {
    var foo = { 1 }",//KT-4656 Wrong capturing a function literal variable,4f27
fun b(),"= """,,4df1
No signature found,"fun loadClassAnnotations(container: ProtoContainer.Class): List<A> {
        val annotations = container.classProto.getExtension(protocol.classAnnotation).orEmpty()
        return annotations.map { proto -> loadAnnotation(proto, container.nameResolver) }",,6e1f
"fun loadCallableAnnotations(
        container: ProtoContainer,
        proto: MessageLite,
        kind: AnnotatedCallableKind
    )",": List<A> {
        val annotations = when (proto) {
            is ProtoBuf.Constructor -> proto.getExtension(protocol.constructorAnnotation)
            is ProtoBuf.Function -> proto.getExtension(protocol.functionAnnotation)
            is ProtoBuf.Property -> when (kind) {
                AnnotatedCallableKind.PROPERTY -> proto.getExtension(protocol.propertyAnnotation)
                AnnotatedCallableKind.PROPERTY_GETTER -> proto.getExtension(protocol.propertyGetterAnnotation)
                AnnotatedCallableKind.PROPERTY_SETTER -> proto.getExtension(protocol.propertySetterAnnotation)
                else -> error(""Unsupported callable kind with property proto"")
            }",,6aa5
No signature found,"fun loadPropertyBackingFieldAnnotations(container: ProtoContainer, proto: ProtoBuf.Property): List<A> {
        val annotations = protocol.propertyBackingFieldAnnotation?.let { proto.getExtension(it) }",,6e1f
No signature found,"fun loadPropertyDelegateFieldAnnotations(container: ProtoContainer, proto: ProtoBuf.Property): List<A> {
        val annotations = protocol.propertyDelegatedFieldAnnotation?.let { proto.getExtension(it) }",,6e1f
No signature found,"fun loadEnumEntryAnnotations(container: ProtoContainer, proto: ProtoBuf.EnumEntry): List<A> {
        val annotations = proto.getExtension(protocol.enumEntryAnnotation).orEmpty()
        return annotations.map { annotationProto ->
            loadAnnotation(annotationProto, container.nameResolver)
        }",,6e1f
No signature found,"fun loadValueParameterAnnotations(
        container: ProtoContainer,
        callableProto: MessageLite,
        kind: AnnotatedCallableKind,
        parameterIndex: Int,
        proto: ProtoBuf.ValueParameter
    ): List<A> {
        val annotations = proto.getExtension(protocol.parameterAnnotation).orEmpty()
        return annotations.map { annotationProto ->
            loadAnnotation(annotationProto, container.nameResolver)
        }",,6e1f
"fun loadExtensionReceiverParameterAnnotations(
        container: ProtoContainer,
        proto: MessageLite,
        kind: AnnotatedCallableKind
    )",": List<A> {
        val annotations = when (proto) {
            is ProtoBuf.Function -> protocol.functionExtensionReceiverAnnotation?.let { proto.getExtension(it) }",,9094
No signature found,"fun loadTypeAnnotations(proto: ProtoBuf.Type, nameResolver: NameResolver): List<A> {
        return proto.getExtension(protocol.typeAnnotation).orEmpty().map { loadAnnotation(it, nameResolver) }",,6e1f
No signature found,"fun loadTypeParameterAnnotations(proto: ProtoBuf.TypeParameter, nameResolver: NameResolver): List<A> {
        return proto.getExtension(protocol.typeParameterAnnotation).orEmpty().map { loadAnnotation(it, nameResolver) }",,6e1f
fun box(),": String {
    val a: A<String> = B()
    a.x = ""OK""
    return a.x
}","// JVM_ABI_K1_K2_DIFF: KT-63850, KT-63854",4f27
"fun removeRange(fromIndex: Int, toIndex: Int)",fun addAll(elements: FastArrayList<E>): Boolean = a,"// FIR_IDENTICAL
// WITH_STDLIB

// MODULE: m1-common
// FILE: common.kt",4fa1
No signature found,"fun setAddAll(index: Int, elements: FastArrayList<E>, offset: Int = 0",,6e1f
No signature found,"fun setAll(index: Int, elements: FastArrayList<E>, offset: Int = 0",,6e1f
No signature found,"fun addAll(elements: FastArrayList<E>, offset: Int = 0",,6e1f
fun removeToSize(size: Int),{},,1918
fun trimToSize(),"override fun removeRange(fromIndex: Int, toIndex: Int)
    fun ensureCapacity(minCapacity: Int)
    override val size: Int
    override fun isEmpty(): Boolean
    override fun contains(element: E): Boolean
    override fun containsAll(elements: Collection<E>): Boolean
    override operator fun get(index: Int): E
    override fun indexOf(element: E): Int
    override fun lastIndexOf(element: E): Int
    override fun iterator(): MutableIterator<E>
    override fun add(element: E): Boolean
    override fun remove(element: E): Boolean
    override fun addAll(elements: Collection<E>): Boolean
    override fun addAll(index: Int, elements: Collection<E>): Boolean
    override fun removeAll(elements: Collection<E>): Boolean
    override fun retainAll(elements: Collection<E>): Boolean
    override fun clear()
    override operator fun set(index: Int, element: E): E
    override fun add(index: Int, element: E)
    override fun removeAt(index: Int): E
    override fun listIterator(): MutableListIterator<E>
    override fun listIterator(index: Int): MutableListIterator<E>
    override fun subList(fromIndex: Int, toIndex: Int): MutableList<E>
}

// MODULE: m2-jvm()()(m1-common)
// FILE: jvm.kt

public actual open class FastArrayList<E> internal constructor(
    var array: Array<Any?>,
    var _size: Int = a",,4dc9
fun trimToSize(),{},,4dc9
fun ensureCapacity(minCapacity: Int),{},,f384
fun get(index: Int),: E = a,,60cf
"fun set(index: Int, element: E)",: E = e,,65db
fun add(element: E),: Boolean = t,,ec1d
"fun add(index: Int, element: E)",{},,cdbf
fun addAll(elements: Collection<E>),: Boolean = t,,b86a
"fun addAll(index: Int, elements: Collection<E>)",: Boolean = t,,d972
fun remove(element: E),: Boolean = t,,e37c
fun removeAt(index: Int),: E = a,,b29a
"fun removeRange(fromIndex: Int, toIndex: Int)",{},,4fa1
"fun setAll(index: Int, elements: FastArrayList<E>, offset: Int, size: Int)",{},,94d7
"fun addAll(elements: FastArrayList<E>, offset: Int, size: Int)",{},,2f86
fun clear(),{},,44a6
fun contains(element: E),: Boolean = f,,7379
fun indexOf(element: E),: Int = -,,6993
fun lastIndexOf(element: E),: Int = -,,4caa
No signature found,fun MyClass.test() {},,6e1f
fun foo(),"}
    }
}

// MODULE: m1-jvm()()(m1-common)
// FILE: jvm.kt
actual class A {
    actual class B {
        actual class C {
            actual fun <!ACTUAL_ANNOTATIONS_NOT_MATCH_EXPECT!>foo<!>() {}","// MODULE: m1-common
// FILE: common.kt",519f
No signature found,"fun test(handlers: Map<String, Element.()->Unit>) {

    handlers.getOrElse(""name"", { null }",// FIR_IDENTICAL,6e1f
No signature found,"fun <K,V> Map<K,V>.getOrElse(key: K, defaultValue: ()-> V) : V = t",,6e1f
fun box(),": String {
    do {
        try {
            break
        }",,4f27
No signature found,fun <E : CharSequence> foo1(x: E) {},// !DIAGNOSTICS: -UNUSED_PARAMETER,6e1f
No signature found,fun <E : CharSequence> E.foo2() {},,6e1f
No signature found,"fun <F : String?> bar(x: F) {
    A(<!TYPE_MISMATCH!>x<!>)
    A<<!UPPER_BOUND_VIOLATED!>F<!>>(x)

    foo1(<!TYPE_MISMATCH!>x<!>)
    foo1<<!UPPER_BOUND_VIOLATED!>F<!>>(x)

    x<!UNSAFE_CALL!>.<!>foo2()
    x.foo2<<!UPPER_BOUND_VIOLATED!>F<!>>()
}",,6e1f
fun box(),": String {
    return Z().f()
}","// TARGET_BACKEND: JVM_IR
// ISSUE: KT-65592

// FILE: A.java",4f27
fun foo(),"{
    p<caret>rintln()
}","// MODULE: dependency
// MODULE_KIND: LibraryBinary
// FILE: Declaration.kt",519f
fun foo(),{/* DeclarationStructureElement */},,519f
fun bar(),= 1,,66c3
No signature found,"fun <D> MutableMap<String, MutableSet<D>>.initAndAdd(key: String, value: D) {
    this.compute(key) { _, maybeValues ->
        val setOfValues = maybeValues ?: mutableSetOf()
        setOfValues.add(value)
        setOfValues
    }","// FULL_JDK
// STDLIB_JDK8
// !JVM_TARGET: 1.8",6e1f
No signature found,fun <T> genericSam(f: () -> T): Sam<T> = J,"// KOTLIN_CONFIGURATION_FLAGS: SAM_CONVERSIONS=CLASS
// WITH_SIGNATURES
// FILE: t.kt",6e1f
No signature found,fun <T> genericSamGet(f: () -> T): T = J,,6e1f
fun f(),": String {
    return ""f()""
}",,f6fb
No signature found,fun (suspend () -> Unit).extensionFunc() {},// ISSUE: KT-46288,6e1f
No signature found,fun parameterFunc(func: suspend () -> Unit) {},,6e1f
fun testFunc(),{},,db6d
fun main(),"{
    parameterFunc(::testFunc)
    (::testFunc).extensionFunc()
}",,d987
fun getInstance(project: Project),": ProjectIsolationStartParameterAccessor {
            return ProjectIsolationStartParameterAccessorG81(project.gradle)
        }",,f92b
No signature found,"fun `two apple frameworks get bundled to a fat framework`() {
        val project = buildProjectWithMPP {
            kotlin {
                iosX64 { binaries.framework(""foo"", listOf(DEBUG)) }",,6e1f
No signature found,"fun `single binary framework doesn't produce a fat framework`() {
        val project = buildProjectWithMPP {
            kotlin {
                iosX64 { binaries.framework(""foo"", listOf(DEBUG)) }",,6e1f
No signature found,fun `fat framework grouping -- different families`() = t,,6e1f
No signature found,fun `fat framework grouping -- different families and different names within one family`() = t,,6e1f
No signature found,fun `fat framework grouping -- build types intersection`() = t,,6e1f
No signature found,fun `fat framework grouping -- multiple build types`() = t,,6e1f
No signature found,"fun `fat framework contains framework name attribute`() {
        val project = buildProjectWithMPP {
            kotlin {
                iosX64 {
                    binaries.framework(""foo"", listOf(DEBUG)) { baseName = ""f1"" }",,6e1f
No signature found,"fun `consumable configurations of frameworks have correct dependencies on producing tasks`() {
        val project = buildProjectWithMPP {
            kotlin {
                iosX64 { binaries.framework(""foo"", listOf(DEBUG)) }",,6e1f
No signature found,"fun testFatFrameworkGrouping(
        vararg allExpectedFatFrameworks: String,
        configureTargets: KotlinMultiplatformExtension.() -> Unit,
    ) {
        val project = buildProjectWithMPP {
            kotlin {
                configureTargets()
            }",,6e1f
No signature found,"fun Project.assertConfigurationDoesntExist(name: String) {
        val configuration = project.configurations.findByName(name)
        if (configuration != null) fail(""'$name' configuration was not expected"")
    }",,6e1f
No signature found,"fun Project.assertConfigurationExists(name: String): Configuration {
        return project.configurations.findByName(name) ?: fail(""'$name' configuration was expected to be created"")
    }",,6e1f
fun box(),": String {
    val c = 3
    val d = 5
    var z = 0
    when(c) {
        5, 3 -> z++;
        else -> {
            z = -1000;
        }",// EXPECTED_REACHABLE_NODES: 1282,4f27
fun linuxArm64Test(),"= """,,d18c
No signature found,fun <T : Any> jso(): T = j,"// FIR_IDENTICAL
// ISSUE: KT-65255
// DIAGNOSTICS: -NOTHING_TO_INLINE -UNUSED_ANONYMOUS_PARAMETER",6e1f
No signature found,fun <T : Any> jso(block: @JsoDsl T.() -> Unit): T = j,,6e1f
"fun extractConstantValue(descriptor: DeclarationDescriptor, type: String)",": ConstantValue<*>? =
        d",,f628
"fun findOrGenerateCEnum(classDescriptor: ClassDescriptor, parent: IrDeclarationContainer)",": IrClass {
        val irClassSymbol = symbolTable.descriptorExtension.referenceClass(classDescriptor)
        return if (!irClassSymbol.isBound) {
            provideIrClassForCEnum(classDescriptor).also {
                it.patchDeclarationParents(parent)
                parent.declarations += it
            }",,bc0d
fun provideIrClassForCEnum(descriptor: ClassDescriptor),": IrClass =
            c",,8b53
fun createValueProperty(irClass: IrClass),": IrProperty {
        val propertyDescriptor = irClass.descriptor
                .findDeclarationByName<PropertyDescriptor>(""value"")
                ?: error(""No `value` property in ${irClass.name}",,f566
"fun createEnumEntry(enumDescriptor: ClassDescriptor, entryDescriptor: ClassDescriptor)",": IrEnumEntry {
        val enumEntry = symbolTable.descriptorExtension.declareEnumEntry(SYNTHETIC_OFFSET, SYNTHETIC_OFFSET,
                IrDeclarationOrigin.IR_EXTERNAL_DECLARATION_STUB, entryDescriptor
        )
        val constructorSymbol = symbolTable.descriptorExtension.referenceConstructor(enumDescriptor.unsubstitutedPrimaryConstructor!!)
        postLinkageSteps.add {
            enumEntry.initializerExpression = context.irFactory.createExpressionBody(
                    IrEnumConstructorCallImpl(
                            SYNTHETIC_OFFSET, SYNTHETIC_OFFSET,
                            type = irBuiltIns.unitType,
                            symbol = constructorSymbol,
                            typeArgumentsCount = 0,
                            valueArgumentsCount = constructorSymbol.owner.valueParameters.size,
                    ).also {
                        it.putValueArgument(0, extractEnumEntryValue(entryDescriptor))
                    }",,f7cd
fun extractEnumEntryValue(entryDescriptor: ClassDescriptor),": IrExpression =
            c",,fefb
fun createEnumPrimaryConstructor(descriptor: ClassDescriptor),": IrConstructor {
        val irConstructor = createConstructor(descriptor.unsubstitutedPrimaryConstructor!!)
        val builtIns = (irBuiltIns as IrBuiltInsOverDescriptors).builtIns
        val enumConstructor = builtIns.enum.constructors.single()
        val constructorSymbol = symbolTable.descriptorExtension.referenceConstructor(enumConstructor)
        val classSymbol = symbolTable.descriptorExtension.referenceClass(descriptor)
        val type = descriptor.defaultType.toIrType()
        postLinkageSteps.add {
            irConstructor.body = irBuiltIns.createIrBuilder(irConstructor.symbol, SYNTHETIC_OFFSET, SYNTHETIC_OFFSET)
                    .irBlockBody {
                        +IrEnumConstructorCallImpl(
                                startOffset, endOffset,
                                context.irBuiltIns.unitType,
                                constructorSymbol,
                                typeArgumentsCount = 1, // kotlin.Enum<T> has a single type parameter.
                                valueArgumentsCount = constructorSymbol.owner.valueParameters.size
                        ).apply {
                            putTypeArgument(0, type)
                        }",,7b0b
fun getInstance(project: Project),": LLFirSessionCache {
            return project.getService(LLFirSessionCache::class.java)
        }",,f92b
No signature found,"fun getSession(module: KtModule, preferBinary: Boolean = f",,6e1f
fun getSessionNoCaching(module: KtModule),": LLFirSession {
        return createSession(module)
    }",,da3c
fun getDanglingFileCachedSession(module: KtDanglingFileModule),": LLFirSession {
        if (module.isStable) {
            return getCachedSession(module, danglingFileSessionCache, ::createSession)
        }",,bd16
No signature found,"fun <T : KtModule> getCachedSession(module: T, storage: SessionStorage, factory: (T) -> LLFirSession): LLFirSession {
        checkCanceled()

        val session = if (module.supportsIsolatedSessionCreation) {
            storage.computeIfAbsent(module) { factory(module) }",,6e1f
fun checkSessionValidity(session: LLFirSession),"{
        require(session.isValid) { ""A session acquired via `getSession` should always be valid. Module: ${session.ktModule}",,2909
fun removeSession(module: KtModule),": Boolean {
        ApplicationManager.getApplication().assertWriteAccessAllowed()

        val didSourceSessionExist = removeSessionFrom(module, sourceCache)
        val didBinarySessionExist = module is KtBinaryModule && removeSessionFrom(module, binaryCache)
        val didDanglingFileSessionExist = module is KtDanglingFileModule && removeSessionFrom(module, danglingFileSessionCache)
        val didUnstableDanglingFileSessionExist = module is KtDanglingFileModule && removeSessionFrom(module, unstableDanglingFileSessionCache)

        return didSourceSessionExist || didBinarySessionExist || didDanglingFileSessionExist || didUnstableDanglingFileSessionExist
    }",,8a7e
"fun removeSessionFrom(module: KtModule, storage: SessionStorage)",: Boolean = s,,15b1
fun removeAllSessions(includeLibraryModules: Boolean),"{
        ApplicationManager.getApplication().assertWriteAccessAllowed()

        if (includeLibraryModules) {
            removeAllSessionsFrom(sourceCache)
            removeAllSessionsFrom(binaryCache)
        }",,28ea
fun removeUnstableDanglingFileSessions(),"{
        removeAllSessionsFrom(unstableDanglingFileSessionCache)
    }",,8cfe
fun removeContextualDanglingFileSessions(contextModule: KtModule),"{
        removeUnstableDanglingFileSessions()

        if (contextModule is KtDanglingFileModule) {
            removeAllMatchingSessionsFrom(danglingFileSessionCache) { it is KtDanglingFileModule && hasContextModule(it, contextModule) }",,7dea
"fun hasContextModule(module: KtDanglingFileModule, contextModule: KtModule)",": Boolean {
        return when (val candidate = module.contextModule) {
            contextModule -> true
            is KtDanglingFileModule -> hasContextModule(candidate, contextModule)
            else -> false
        }",,b3ff
fun removeAllDanglingFileSessions(),"{
        removeAllSessionsFrom(danglingFileSessionCache)
        removeAllSessionsFrom(unstableDanglingFileSessionCache)
    }",,1262
fun removeAllScriptSessions(),"{
        ApplicationManager.getApplication().assertWriteAccessAllowed()

        removeAllScriptSessionsFrom(sourceCache)
        removeAllScriptSessionsFrom(binaryCache)
    }",// Removing script sessions is only needed temporarily until KTIJ-25620 has been implemented.,32e5
fun removeAllScriptSessionsFrom(storage: SessionStorage),"{
        removeAllMatchingSessionsFrom(storage) { it is KtScriptModule || it is KtScriptDependencyModule }",,552a
fun removeAllSessionsFrom(storage: SessionStorage),"{
        storage.clear()
    }",,8c85
No signature found,"fun removeAllMatchingSessionsFrom(storage: SessionStorage, shouldBeRemoved: (KtModule) -> Boolean) {
        // Because this function is executed in a write action, we do not need concurrency guarantees to remove all matching sessions, so a
        // ""collect and remove"" approach also works.
        storage.keys.forEach { module ->
            if (shouldBeRemoved(module)) {
                storage.remove(module)
            }",,6e1f
fun createSession(module: KtModule),": LLFirSession {
        val sessionFactory = createPlatformAwareSessionFactory(module)
        return when (module) {
            is KtSourceModule -> sessionFactory.createSourcesSession(module)
            is KtLibraryModule, is KtLibrarySourceModule -> sessionFactory.createLibrarySession(module)
            is KtSdkModule -> sessionFactory.createBinaryLibrarySession(module)
            is KtScriptModule -> sessionFactory.createScriptSession(module)
            is KtDanglingFileModule -> {
                //  Dangling file context must have an analyzable session, so we can properly compile code against it.
                val contextSession = getSession(module.contextModule, preferBinary = false)
                sessionFactory.createDanglingFileSession(module, contextSession)
            }",,9ba0
fun createPlatformAwareSessionFactory(module: KtModule),": LLFirAbstractSessionFactory {
        val targetPlatform = module.platform
        return when {
            targetPlatform.all { it is JvmPlatform }",,d35e
fun dispose(),"{
    }",,94b2
No signature found,"fun LLFirSessionConfigurator.Companion.configure(session: LLFirSession) {
    val project = session.project
    for (extension in extensionPointName.getExtensionList(project)) {
        extension.configure(session)
    }",,6e1f
fun createEmptySession(),": FirSession {
    return object : FirSession(null, Kind.Source) {}",,07b9
"fun test(a: Char, b: Char)",": String {
    var s = """"
    for (i in a until b) {
        s += i
    }","// IMPORTANT!
// Please, when your changes cause failures in bytecodeText tests for 'for' loops,
// examine the resulting bytecode shape carefully.
// Range and progression-based loops generated with Kotlin compiler should be
// as close as possible to Java counter loops ('for (int i = a; i < b; ++i) { ... }').
// Otherwise it may result in performance regression due to missing HotSpot optimizations.
// Run Kotlin compiler benchmarks (https://github.com/Kotlin/kotlin-benchmarks)
// with compiler built from your changes if you are not sure.",1436
fun box(),": String {
    assertEquals(""Companion"", C.Companion.result)
    return OK.result
}","// TARGET_BACKEND: JVM

// WITH_STDLIB",4f27
No signature found,fun foo(f: () -> A): A = f,"// FIR_IDENTICAL
// DUMP_IR
// This test checks that unresolved typealias in an abbreviated type does not crash the compiler or result in a compilation error.
// Apparently, there's some demand for this behavior, see KT-45308, KT-58335.

// MODULE: a
// FILE: a.kt",6e1f
fun box(),: String = f,,4f27
fun test(b: Boolean),": Int {
    val n: Int = (<expr>b</expr>).hashCode()
    return n * 2
}",,69ac
fun test(),"{
    val buildee = build {
        typeVariableMutableProperty = {}","// ISSUE: KT-54400
// CHECK_TYPE_WITH_EXACT",fe98
No signature found,"fun <PTV> build(instructions: Buildee<PTV>.() -> Unit): Buildee<PTV> {
    return Buildee<PTV>().apply(instructions)
}",,6e1f
fun x(),{},,7869
No signature found,fun Int.invoke(): Foo = t,,6e1f
fun foo(),= x,,519f
No signature found,"fun Builder.begin(t: String) {
    content += ""<$t>""
}","// TARGET_BACKEND: JVM
//  ^ this test might be rather slow",6e1f
No signature found,"fun Builder.text(t: String) {
    content += t
}",,6e1f
No signature found,"fun Builder.end(t: String) {
    content += ""</$t>""
}",,6e1f
fun err(e: Throwable),{},,78f1
No signature found,"fun Builder.tag(t: String, body: Builder.() -> Unit) {
    begin(t)
    try {
        body()
    }",,6e1f
No signature found,"fun Builder.t2(body: Builder.() -> Unit) {
    tag(""t"", body)
    tag(""t"", body)
}",,6e1f
fun box(),": String {
    val b = Builder("""")
    b.t2 { t2 { t2 { t2 { t2 { t2 { t2 { text(""1"") }",,4f27
No signature found,"fun <T : DeclarationSymbolMarker> getClassifiersCompatibility(
        expectClassSymbol: RegularClassSymbolMarker,
        actualClassLikeSymbol: ClassLikeSymbolMarker,
        checkClassScopesCompatibility: Boolean,
        context: K1ExpectActualMatchingContext<T>,
    ): K1ExpectActualCompatibility<T> {
        val result = with(context) {
            getClassifiersCompatibility(expectClassSymbol, actualClassLikeSymbol, parentSubstitutor = null, checkClassScopesCompatibility)
        }",,6e1f
No signature found,"fun <T : DeclarationSymbolMarker> getCallablesCompatibility(
        expectDeclaration: CallableSymbolMarker,
        actualDeclaration: CallableSymbolMarker,
        parentSubstitutor: TypeSubstitutorMarker?,
        expectContainingClass: RegularClassSymbolMarker?,
        actualContainingClass: RegularClassSymbolMarker?,
        context: K1ExpectActualMatchingContext<T>,
    ): K1ExpectActualCompatibility<T> {
        val result = with(context) {
            getCallablesCompatibility(expectDeclaration, actualDeclaration, parentSubstitutor, expectContainingClass, actualContainingClass)
        }",,6e1f
No signature found,"fun K1ExpectActualMatchingContext<*>.getClassifiersCompatibility(
        expectClassSymbol: RegularClassSymbolMarker,
        actualClassLikeSymbol: ClassLikeSymbolMarker,
        parentSubstitutor: TypeSubstitutorMarker?,
        checkClassScopes: Boolean,
    ): K1ExpectActualCompatibility<*> = g",,6e1f
No signature found,"fun K1ExpectActualMatchingContext<*>.getClassifiersIncompatibility(
        expectClassSymbol: RegularClassSymbolMarker,
        actualClassLikeSymbol: ClassLikeSymbolMarker,
        parentSubstitutor: TypeSubstitutorMarker?,
        checkClassScopesCompatibility: Boolean,
    ): K1ExpectActualCompatibility.Incompatible.WeakIncompatible<*>? {
        // Can't check FQ names here because nested expected class may be implemented via actual typealias's expansion with the other FQ name
        require(expectClassSymbol.getName(this) == actualClassLikeSymbol.getName(this)) {
            ""This function should be invoked only for declarations with the same name: $expectClassSymbol, $actualClassLikeSymbol""
        }",,6e1f
No signature found,"fun K1ExpectActualMatchingContext<*>.areCompatibleSupertypes(
        expectClassSymbol: RegularClassSymbolMarker,
        actualClassSymbol: RegularClassSymbolMarker,
        substitutor: TypeSubstitutorMarker,
    ): Boolean {
        return when (allowTransitiveSupertypesActualization) {
            false -> areCompatibleSupertypesOneByOne(expectClassSymbol, actualClassSymbol, substitutor)
            true -> areCompatibleSupertypesTransitive(expectClassSymbol, actualClassSymbol, substitutor)
        }",,6e1f
No signature found,"fun K1ExpectActualMatchingContext<*>.areCompatibleSupertypesOneByOne(
        expectClassSymbol: RegularClassSymbolMarker,
        actualClassSymbol: RegularClassSymbolMarker,
        substitutor: TypeSubstitutorMarker,
    ): Boolean {
        // Subtract kotlin.Any from supertypes because it's implicitly added if no explicit supertype is specified,
        // and not added if an explicit supertype _is_ specified
        val expectSupertypes = expectClassSymbol.superTypes.filterNot { it.typeConstructor().isAnyConstructor() }",,6e1f
No signature found,"fun K1ExpectActualMatchingContext<*>.areCompatibleSupertypesTransitive(
        expectClassSymbol: RegularClassSymbolMarker,
        actualClassSymbol: RegularClassSymbolMarker,
        substitutor: TypeSubstitutorMarker,
    ): Boolean {
        val expectSupertypes = expectClassSymbol.superTypes.filterNot { it.typeConstructor().isAnyConstructor() }",,6e1f
No signature found,"fun K1ExpectActualMatchingContext<*>.getClassScopesIncompatibility(
        expectClassSymbol: RegularClassSymbolMarker,
        actualClassSymbol: RegularClassSymbolMarker,
        substitutor: TypeSubstitutorMarker,
    ): Incompatible.WeakIncompatible<*>? {
        val unfulfilled = arrayListOf<Pair<DeclarationSymbolMarker, Map<Incompatible<*>, List<DeclarationSymbolMarker?>>>>()

        val actualMembersByName = actualClassSymbol.collectAllMembers(isActualDeclaration = true).groupBy { it.getName(this) }",,6e1f
No signature found,"fun K1ExpectActualMatchingContext<*>.matchSingleExpectAgainstPotentialActuals(
        expectMember: DeclarationSymbolMarker,
        actualMembers: List<DeclarationSymbolMarker>,
        substitutor: TypeSubstitutorMarker?,
        expectClassSymbol: RegularClassSymbolMarker?,
        actualClassSymbol: RegularClassSymbolMarker?,
        unfulfilled: MutableList<Pair<DeclarationSymbolMarker, Map<Incompatible<*>, List<DeclarationSymbolMarker?>>>>?,
        checkClassScopesCompatibility: Boolean,
    ) {
        val mapping = actualMembers.keysToMap { actualMember ->
            when (expectMember) {
                is CallableSymbolMarker -> getCallablesCompatibility(
                    expectMember,
                    actualMember as CallableSymbolMarker,
                    substitutor,
                    expectClassSymbol,
                    actualClassSymbol
                )

                is RegularClassSymbolMarker -> {
                    val parentSubstitutor = substitutor?.takeIf { !innerClassesCapturesOuterTypeParameters }",,6e1f
No signature found,"fun K1ExpectActualMatchingContext<*>.getCallablesCompatibility(
        expectDeclaration: CallableSymbolMarker,
        actualDeclaration: CallableSymbolMarker,
        parentSubstitutor: TypeSubstitutorMarker?,
        expectContainingClass: RegularClassSymbolMarker?,
        actualContainingClass: RegularClassSymbolMarker?,
    ): K1ExpectActualCompatibility<*> {
        require(
            (expectDeclaration is ConstructorSymbolMarker && actualDeclaration is ConstructorSymbolMarker) ||
                    expectDeclaration.callableId.callableName == actualDeclaration.callableId.callableName
        ) {
            ""This function should be invoked only for declarations with the same name: $expectDeclaration, $actualDeclaration""
        }",,6e1f
No signature found,"fun K1ExpectActualMatchingContext<*>.getCallablesStrongIncompatibility(
        expectDeclaration: CallableSymbolMarker,
        actualDeclaration: CallableSymbolMarker,
        parentSubstitutor: TypeSubstitutorMarker?,
    ): Incompatible.StrongIncompatible<*>? {
        if (expectDeclaration is FunctionSymbolMarker != actualDeclaration is FunctionSymbolMarker) {
            return Incompatible.CallableKind
        }",,6e1f
No signature found,"fun K1ExpectActualMatchingContext<*>.getCallablesWeakIncompatibility(
        expectDeclaration: CallableSymbolMarker,
        actualDeclaration: CallableSymbolMarker,
        expectContainingClass: RegularClassSymbolMarker?,
        actualContainingClass: RegularClassSymbolMarker?,
    ): Incompatible.WeakIncompatible<*>? {
        val expectedTypeParameters = expectDeclaration.typeParameters
        val actualTypeParameters = actualDeclaration.typeParameters
        val expectedValueParameters = expectDeclaration.valueParameters
        val actualValueParameters = actualDeclaration.valueParameters

        if (actualDeclaration.hasStableParameterNames && !equalsBy(expectedValueParameters, actualValueParameters) { it.getName(this) }",,6e1f
No signature found,"fun K1ExpectActualMatchingContext<*>.valueParametersCountCompatible(
        expectDeclaration: CallableSymbolMarker,
        actualDeclaration: CallableSymbolMarker,
        expectValueParameters: List<ValueParameterSymbolMarker>,
        actualValueParameters: List<ValueParameterSymbolMarker>,
    ): Boolean {
        if (expectValueParameters.size == actualValueParameters.size) return true

        return if (expectDeclaration.isAnnotationConstructor() && actualDeclaration.isAnnotationConstructor()) {
            expectValueParameters.isEmpty() && actualValueParameters.all { it.hasDefaultValue }",,6e1f
No signature found,"fun K1ExpectActualMatchingContext<*>.areCompatibleTypeLists(
        expectedTypes: List<KotlinTypeMarker?>,
        actualTypes: List<KotlinTypeMarker?>,
    ): Boolean {
        for (i in expectedTypes.indices) {
            if (!areCompatibleExpectActualTypes(expectedTypes[i], actualTypes[i])) {
                return false
            }",,6e1f
No signature found,"fun K1ExpectActualMatchingContext<*>.areCompatibleClassKinds(
        expectClass: RegularClassSymbolMarker,
        actualClass: RegularClassSymbolMarker,
    ): Boolean {
        if (expectClass.classKind == actualClass.classKind) return true

        if (expectClass.classKind == ClassKind.CLASS && expectClass.isFinal(this@areCompatibleClassKinds) && expectClass.isCtorless(this@areCompatibleClassKinds)) {
            if (actualClass.classKind == ClassKind.OBJECT) return true
        }",,6e1f
No signature found,"fun areCompatibleModalities(
        expectModality: Modality?,
        actualModality: Modality?,
        expectContainingClassModality: Modality? = n",,6e1f
No signature found,"fun effectiveModality(declarationModality: Modality?, containingClassModality: Modality?): Modality? {
        return when (containingClassModality) {
            Modality.FINAL -> Modality.FINAL
            else -> declarationModality
        }",,6e1f
No signature found,"fun areCompatibleCallableVisibilities(
        expectVisibility: Visibility,
        expectModality: Modality?,
        actualVisibility: Visibility,
    ): Boolean {
        val compare = Visibilities.compare(expectVisibility, actualVisibility)
        return if (expectModality != Modality.FINAL) {
            // For overridable declarations visibility should match precisely, see KT-19664
            compare == 0
        }",,6e1f
No signature found,"fun K1ExpectActualMatchingContext<*>.areCompatibleClassVisibilities(
        expectClassSymbol: RegularClassSymbolMarker,
        actualClassSymbol: RegularClassSymbolMarker,
    ): Boolean {
        val expectVisibility = expectClassSymbol.visibility
        val actualVisibility = actualClassSymbol.visibility
        if (expectVisibility == actualVisibility) return true
        if (!allowClassActualizationWithWiderVisibility) return false
        val result = Visibilities.compare(actualVisibility, expectVisibility)
        return result != null && result > 0
    }",,6e1f
No signature found,"fun K1ExpectActualMatchingContext<*>.areCompatibleTypeParameterUpperBounds(
        expectTypeParameterSymbols: List<TypeParameterSymbolMarker>,
        actualTypeParameterSymbols: List<TypeParameterSymbolMarker>,
        substitutor: TypeSubstitutorMarker,
    ): Boolean {
        for (i in expectTypeParameterSymbols.indices) {
            val expectBounds = expectTypeParameterSymbols[i].bounds
            val actualBounds = actualTypeParameterSymbols[i].bounds
            if (
                expectBounds.size != actualBounds.size ||
                !areCompatibleTypeLists(expectBounds.map { substitutor.safeSubstitute(it) }",,6e1f
No signature found,"fun K1ExpectActualMatchingContext<*>.getTypeParametersVarianceOrReifiedIncompatibility(
        expectTypeParameterSymbols: List<TypeParameterSymbolMarker>,
        actualTypeParameterSymbols: List<TypeParameterSymbolMarker>,
    ): Incompatible.WeakIncompatible<*>? {
        if (!equalsBy(expectTypeParameterSymbols, actualTypeParameterSymbols) { it.variance }",,6e1f
No signature found,"fun K1ExpectActualMatchingContext<*>.getFunctionsIncompatibility(
        expectFunction: CallableSymbolMarker,
        actualFunction: CallableSymbolMarker,
    ): Incompatible.WeakIncompatible<*>? {
        if (!equalBy(expectFunction, actualFunction) { f -> f.isSuspend }",,6e1f
No signature found,"fun K1ExpectActualMatchingContext<*>.getPropertiesIncompatibility(
        expected: PropertySymbolMarker,
        actual: PropertySymbolMarker,
    ): Incompatible.WeakIncompatible<*>? {
        return when {
            !equalBy(expected, actual) { p -> p.isVar }",,6e1f
No signature found,"fun K1ExpectActualMatchingContext<*>.arePropertySettersWithCompatibleVisibilities(
        expected: PropertySymbolMarker,
        actual: PropertySymbolMarker,
    ): Boolean {
        val expectedSetter = expected.setter ?: return true
        val actualSetter = actual.setter ?: return true
        return areCompatibleCallableVisibilities(expectedSetter.visibility, expectedSetter.modality, actualSetter.visibility)
    }",,6e1f
No signature found,"fun List<ValueParameterSymbolMarker>.toTypeList(
        substitutor: TypeSubstitutorMarker,
        context: K1ExpectActualMatchingContext<*>,
    ): List<KotlinTypeMarker> = w",// ---------------------------------------- Utils ----------------------------------------,6e1f
No signature found,"fun <T, K> equalsBy(first: List<T>, second: List<T>, selector: (T) -> K): Boolean {
        for (i in first.indices) {
            if (selector(first[i]) != selector(second[i])) return false
        }",,6e1f
No signature found,"fun <T, K> equalBy(first: T, second: T, selector: (T) -> K): Boolean =
        s",,6e1f
No signature found,fun DeclarationSymbolMarker.getName(context: K1ExpectActualMatchingContext<*>): Name = w,,6e1f
No signature found,fun RegularClassSymbolMarker.isCtorless(context: K1ExpectActualMatchingContext<*>): Boolean = w,,6e1f
No signature found,fun RegularClassSymbolMarker.isFinal(context: K1ExpectActualMatchingContext<*>): Boolean = w,,6e1f
fun deserializeString(index: Int),": String {
        return libraryFile.string(index)
    }",,b737
fun deserializeName(index: Int),": Name {
        return internationService.name(Name.guessByFirstCharacter(deserializeString(index)))
    }",,6d23
fun deserializeNullableIrType(index: Int),: IrType? = i,,ea08
fun deserializeIrType(index: Int),": IrType {
        return irTypeCache.getOrPut(index) {
            val typeData = libraryFile.type(index)
            deserializeIrTypeData(typeData)
        }",,14ff
fun deserializeIrTypeArgument(proto: Long),": IrTypeArgument {
        val encoding = BinaryTypeProjection.decode(proto)

        if (encoding.isStarProjection) return IrStarProjectionImpl

        return makeTypeProjection(deserializeIrType(encoding.typeIndex), encoding.variance)
    }",,15dd
fun deserializeAnnotations(annotations: List<ProtoConstructorCall>),": List<IrConstructorCall> {
        return annotations.memoryOptimizedMap { bodyDeserializer.deserializeAnnotation(it) }",,2eff
fun deserializeSimpleTypeNullability(proto: ProtoSimpleTypeNullablity),= w,,dc51
fun deserializeSimpleType(proto: ProtoSimpleType),": IrSimpleType {
        val symbol = deserializeIrSymbolAndRemap(proto.classifier)
            .checkSymbolType<IrClassifierSymbol>(fallbackSymbolKind = /* just the first possible option */ CLASS_SYMBOL)

        val arguments = proto.argumentList.memoryOptimizedMap { deserializeIrTypeArgument(it) }",,c889
fun deserializeLegacySimpleType(proto: ProtoSimpleTypeLegacy),": IrSimpleType {
        val symbol = deserializeIrSymbolAndRemap(proto.classifier)
            .checkSymbolType<IrClassifierSymbol>(fallbackSymbolKind = /* just the first possible option */ CLASS_SYMBOL)

        val arguments = proto.argumentList.memoryOptimizedMap { deserializeIrTypeArgument(it) }",,23bb
fun deserializeTypeAbbreviation(proto: ProtoTypeAbbreviation),": IrTypeAbbreviation =
        I",,d34f
fun deserializeDynamicType(proto: ProtoDynamicType),": IrDynamicType {
        return if (proto.annotationCount == 0) {
            SIMPLE_DYNAMIC_TYPE
        }",,95b0
fun deserializeErrorType(proto: ProtoErrorType),": IrErrorType {
        if (!allowErrorNodes) throw IrDisallowedErrorNode(IrErrorType::class.java)
        val annotations = deserializeAnnotations(proto.annotationList)
        return IrErrorTypeImpl(null, annotations, Variance.INVARIANT)
    }",,9b36
fun deserializeDefinitelyNotNullType(proto: ProtoDefinitelyNotNullType),": IrSimpleType {
        assert(proto.typesCount == 1) { ""Only DefinitelyNotNull type is now supported"" }",,dff5
fun deserializeIrTypeData(proto: ProtoType),": IrType {
        return when (proto.kindCase) {
            DNN -> deserializeDefinitelyNotNullType(proto.dnn)
            SIMPLE -> deserializeSimpleType(proto.simple)
            LEGACYSIMPLE -> deserializeLegacySimpleType(proto.legacySimple)
            DYNAMIC -> deserializeDynamicType(proto.dynamic)
            ERROR -> deserializeErrorType(proto.error)
            else -> error(""Unexpected IrType kind: ${proto.kindCase}",// TODO support general case of intersection type,87e1
No signature found,"fun <T : IrDeclarationParent> T.usingParent(block: T.() -> Unit): T =
        t",,6e1f
fun deserializeIrSymbol(code: Long),": IrSymbol {
        return symbolDeserializer.deserializeIrSymbol(code)
    }",,b8d4
fun deserializeIrSymbolAndRemap(code: Long),": IrSymbol {
        // TODO: could be simplified
        return symbolDeserializer.deserializeIrSymbol(code).let {
            delegatedSymbolMap[it] ?: it
        }",,99e3
fun recordDelegatedSymbol(symbol: IrSymbol),"{
        if (symbol is IrDelegatingSymbol<*, *, *>) {
            delegatedSymbolMap[symbol] = symbol.delegate
        }",,69ff
fun eraseDelegatedSymbol(symbol: IrSymbol),"{
        if (symbol is IrDelegatingSymbol<*, *, *>) {
            delegatedSymbolMap.remove(symbol)
        }",,d4e3
No signature found,"fun withExternalValue(value: Boolean, fn: () -> Unit) {
        val oldExternalValue = isEffectivelyExternal
        isEffectivelyExternal = value
        try {
            fn()
        }",,6e1f
No signature found,"fun <T> withDeserializedIrDeclarationBase(
        proto: ProtoDeclarationBase,
        setParent: Boolean = t",,6e1f
No signature found,"fun deserializeIrTypeParameter(proto: ProtoTypeParameter, index: Int, isGlobal: Boolean, setParent: Boolean = t",,6e1f
No signature found,"fun deserializeIrValueParameter(proto: ProtoValueParameter, index: Int, setParent: Boolean = t",,6e1f
No signature found,"fun deserializeIrClass(proto: ProtoClass, setParent: Boolean = t",,6e1f
fun deserializeInlineClassRepresentation(proto: ProtoIrInlineClassRepresentation),": InlineClassRepresentation<IrSimpleType> =
        I",,81b4
fun deserializeMultiFieldValueClassRepresentation(proto: ProtoIrMultiFieldValueClassRepresentation),": MultiFieldValueClassRepresentation<IrSimpleType> {
        val names = proto.underlyingPropertyNameList.memoryOptimizedMap { deserializeName(it) }",,674d
fun computeMissingInlineClassRepresentationForCompatibility(irClass: IrClass),": InlineClassRepresentation<IrSimpleType> {
        // For inline classes compiled with 1.5.20 or earlier, try to reconstruct inline class representation from the single parameter of
        // the primary constructor. Something similar is happening in `DeserializedClassDescriptor.computeInlineClassRepresentation`.
        // This code will be unnecessary as soon as klibs compiled with Kotlin 1.5.20 are no longer supported.
        val ctor = irClass.primaryConstructor ?: error(""Inline class has no primary constructor: ${irClass.render()}",,eccf
No signature found,"fun deserializeIrTypeAlias(proto: ProtoTypeAlias, setParent: Boolean = t",,6e1f
No signature found,"fun deserializeErrorDeclaration(proto: ProtoErrorDeclaration, setParent: Boolean = t",,6e1f
"fun deserializeTypeParameters(protos: List<ProtoTypeParameter>, isGlobal: Boolean)",": List<IrTypeParameter> {
        // NOTE: fun <C : MutableCollection<in T>, T : Any> Array<out T?>.filterNotNullTo(destination: C): C
        return protos.memoryOptimizedMapIndexed { index, proto ->
            deserializeIrTypeParameter(proto, index, isGlobal).apply {
                superTypes = proto.superTypeList.memoryOptimizedMap { deserializeIrType(it) }",,dd56
fun deserializeValueParameters(protos: List<ProtoValueParameter>),": List<IrValueParameter> {
        return protos.memoryOptimizedMapIndexed { index, proto -> deserializeIrValueParameter(proto, index) }",,daf6
fun foo(),= 4,,519f
fun f(),= o,,f6fb
fun bar(),"= """,,66c3
fun ff(),= f,,2c99
No signature found,"fun IrType.checkObjectLeak(): Boolean {
        return if (this is IrSimpleType) {
            val signature = classifier.signature

            val possibleLeakedClassifier = (signature == null || signature.isLocal) && classifier !is IrTypeParameterSymbol

            possibleLeakedClassifier || arguments.any { it.typeOrNull?.checkObjectLeak() == true }",,6e1f
fun checkInlineBody(),"fun <T : IrFunction> T.withBodyGuard(block: T.() -> Unit) {
        val oldBodiesPolicy = deserializeBodies

        : Boolean = deserializeInlineFunctions && this is IrSimpleFunction && isInline

        try {
            deserializeBodies = oldBodiesPolicy || checkInlineBody() || returnType.checkObjectLeak()
            block()
        }",,c4d6
No signature found,"fun IrField.withInitializerGuard(isConst: Boolean, f: IrField.() -> Unit) {
        val oldBodiesPolicy = deserializeBodies

        try {
            deserializeBodies = isConst || oldBodiesPolicy || type.checkObjectLeak()
            f()
        }",,6e1f
fun loadStatementBodyProto(index: Int),": ProtoStatement {
        return libraryFile.statementBody(index)
    }",,6694
fun loadExpressionBodyProto(index: Int),": ProtoExpression {
        return libraryFile.expressionBody(index)
    }",,daac
fun deserializeExpressionBody(index: Int),": IrExpressionBody? {
        return if (deserializeBodies) {
            val bodyData = loadExpressionBodyProto(index)
            irFactory.createExpressionBody(bodyDeserializer.deserializeExpression(bodyData))
        }",,4301
fun deserializeStatementBody(index: Int),": IrElement? {
        return if (deserializeBodies) {
            val bodyData = loadStatementBodyProto(index)
            bodyDeserializer.deserializeStatement(bodyData)
        }",,1d8c
No signature found,"fun <reified S : IrFunctionSymbol, T : IrFunction> withDeserializedIrFunctionBase(
        proto: ProtoFunctionBase,
        setParent: Boolean = t",,6e1f
No signature found,"fun <T : IrFunction> T.withDeserializeBodies(block: T.() -> Unit) {
        val oldBodiesPolicy = deserializeBodies
        try {
            deserializeBodies = true
            usingParent { block() }",,6e1f
No signature found,"fun deserializeIrFunction(proto: ProtoFunction, setParent: Boolean = t",,6e1f
No signature found,"fun deserializeIrVariable(proto: ProtoVariable, setParent: Boolean = t",,6e1f
No signature found,"fun deserializeIrEnumEntry(proto: ProtoEnumEntry, setParent: Boolean = t",,6e1f
No signature found,"fun deserializeIrAnonymousInit(proto: ProtoAnonymousInit, setParent: Boolean = t",,6e1f
No signature found,"fun deserializeIrConstructor(proto: ProtoConstructor, setParent: Boolean = t",,6e1f
No signature found,"fun deserializeIrField(proto: ProtoField, isConst: Boolean, setParent: Boolean = t",,6e1f
No signature found,"fun deserializeIrLocalDelegatedProperty(
        proto: ProtoLocalDelegatedProperty,
        setParent: Boolean = t",,6e1f
No signature found,"fun deserializeIrProperty(proto: ProtoProperty, setParent: Boolean = t",,6e1f
fun deserializeIrDeclarationOrigin(protoName: Int),": IrDeclarationOrigin {
        val originName = libraryFile.string(protoName)
        return IrDeclarationOrigin.GeneratedByPlugin.fromSerializedString(originName)
            ?: declarationOriginIndex[originName]
            ?: IrDeclarationOriginImpl(originName)
    }",,4e02
No signature found,"fun deserializeDeclaration(proto: ProtoDeclaration, setParent: Boolean = t",,6e1f
"fun isSkippableFakeOverride(proto: ProtoDeclaration, parent: IrClass)",": Boolean {
        if (!platformFakeOverrideClassFilter.needToConstructFakeOverrides(parent)) return false

        val symbol = when (proto.declaratorCase!!) {
            IR_FUNCTION -> symbolDeserializer.deserializeIrSymbol(proto.irFunction.base.base.symbol)
            IR_PROPERTY -> symbolDeserializer.deserializeIrSymbol(proto.irProperty.base.symbol)
            // Don't consider IR_FIELDS here.
            else -> return false
        }",,2d59
No signature found,"fun <reified S : IrSymbol> IrSymbol.checkSymbolType(fallbackSymbolKind: SymbolKind?): S {
        if (this is S) return this // Fast pass.

        if (!partialLinkageEnabled)
            throw IrSymbolTypeMismatchException(S::class.java, this)

        return referenceDeserializedSymbol(
            symbolTable = symbolDeserializer.symbolTable,
            fileSymbol = null,
            symbolKind = fallbackSymbolKind ?: error(""No fallback symbol kind specified for symbol $this""),
            idSig = signature?.takeIf { it.isPubliclyVisible }",,6e1f
fun foo(),"{
    val i : Int? = 42
    if (i != null) {
        <!UNRESOLVED_REFERENCE!>doSmth<!> {
            val x = <!DEBUG_INFO_SMARTCAST!>i<!> + 1
        }",,519f
fun test(),": String  = """,,fe98
No signature found,"fun String.switchMapOnce(crossinline mapper: (String) -> String): String {
    Callable(::test)
    return { mapper(this) }",,6e1f
fun foo(x: Number),"{
    when (x as Int) {
        else -> checkSubtype<Int>(x)
    }",// !CHECK_TYPE,0744
fun srcAndTests(),{},,b26b
fun ambiguous(),{},,58ad
fun toString(element: SirElement),: String = e,,faef
"fun visitElement(element: SirElement, data: Unit)",": String {
        return ""UNKNOWN<${SirElement::class.simpleName}",,b1f0
"fun visitModule(module: SirModule, data: Unit)",: String = r,,2224
"fun visitEnum(enum: SirEnum, data: Unit)",: String = r,,9a75
"fun visitStruct(struct: SirStruct, data: Unit)",: String = r,,4412
"fun visitFunction(function: SirFunction, data: Unit)",: String = r,,22ac
No signature found,"fun render(
    base: SirElement,
    attributes: List<Pair<String, Any?>> = e",,6e1f
No signature found,"fun List<SirElement>.renderAsChildren(): String {
    return this.takeIf { isNotEmpty() }",,6e1f
No signature found,"fun List<Pair<String, Any?>>.renderAsAttributes(): String {
    return this.takeIf { isNotEmpty() }",,6e1f
fun checkReachableRecursively(from: KotlinSourceSet),"fun KotlinSourceSet.checkForCircularDependsOnEdges(other: KotlinSourceSet): Nothing? {
    val stack = mutableListOf(this)
    val visited = hashSetOf<KotlinSourceSet>()

     {
        if (!visited.add(from)) return
        stack += from
        if (this == from) {
            // CircularDependsOnEdges has severity FATAL, so this call will throw an exception
            project.reportDiagnostic(KotlinToolingDiagnostics.CircularDependsOnEdges(stack.map { it.name }",,baba
fun checkOverflow(value: String),= i,,9b68
fun checkOverflow(value: String),= i,,9b68
fun f_sumOf(),= l,,ce44
No signature found,"fun def(op: String, nullable: Boolean, legacy: Boolean = f",,6e1f
No signature found,"fun def(op: String, nullable: Boolean, legacy: Boolean = f",,6e1f
No signature found,"fun def(op: String, nullable: Boolean, legacy: Boolean = f",,6e1f
fun f_minMaxOf(),= s,,0f12
No signature found,"fun def(op: String, selectorType: String, nullable: Boolean, orNull: String = """,,6e1f
fun f_minMaxOfWith(),= s,,9fa5
No signature found,"fun def(op: String, nullable: Boolean, orNull: String = """,,6e1f
fun checkOverflow(value: String),= i,,9b68
"fun summaryDoc(isLeftToRight: Boolean, isIndexed: Boolean)","fun MemberBuilder.reduceDoc(fName: String): String {
        : String {
            val acc = ""current accumulator value""
            val element = if (isIndexed) ""each ${f.element}",,5c67
"fun paramDoc(isLeftToRight: Boolean, isIndexed: Boolean)",": String {
            val acc = ""current accumulator value""
            val element = if (isIndexed) ""the ${f.element}",,f157
fun emptyNote(isThrowing: Boolean),: String = i,,ea3a
fun checkOverflow(value: String),= i,,9b68
fun checkOverflow(value: String),= i,,9b68
"fun scanAccMutationNote(hasInitial: Boolean, f: Family)",": String {
        if (!hasInitial && f.isPrimitiveSpecialization) return """"

        val initialValueRequirement = if (hasInitial && f == Sequences)
            """"""The [initial] value should also be immutable (or should not be mutated)
            as it may be passed to [operation] function later because of sequence's lazy nature.
            """""" else
            """"
        return """"""
        Note that `acc` value passed to [operation] function should not be mutated;
        otherwise it would affect the previous value in resulting ${f.mapResult}",,478c
fun checkOverflow(value: String),= i,,9b68
"fun check(expression: FirQualifiedAccessExpression, context: CheckerContext, reporter: DiagnosticReporter)","{
        val reference = expression.calleeReference.resolved ?: return
        val symbol = reference.resolvedSymbol as? FirCallableSymbol ?: return
        if (reference.name == BUILTIN_SUSPEND_NAME ||
            symbol is FirNamedFunctionSymbol && symbol.name == BUILTIN_SUSPEND_NAME
        ) {
            checkSuspendModifierForm(expression, reference, symbol, context, reporter)
        }",,478b
No signature found,"fun checkSuspendModifierForm(
        expression: FirQualifiedAccessExpression,
        reference: FirResolvedNamedReference,
        symbol: FirCallableSymbol<*>,
        context: CheckerContext,
        reporter: DiagnosticReporter
    ) {
        if (symbol.callableId == KOTLIN_SUSPEND_BUILT_IN_FUNCTION_CALLABLE_ID) {
            if (reference.name != BUILTIN_SUSPEND_NAME ||
                expression.explicitReceiver != null ||
                expression.formOfSuspendModifierForLambdaOrFun() == null
            ) {
                reporter.reportOn(expression.source, FirErrors.NON_MODIFIER_FORM_FOR_BUILT_IN_SUSPEND, context)
            }",,6e1f
No signature found,"fun FirQualifiedAccessExpression.formOfSuspendModifierForLambdaOrFun(): SuspendCallArgumentKind? {
        if (this !is FirFunctionCall) return null
        val reference = this.calleeReference
        if (reference is FirResolvedCallableReference) return null
        if (typeArguments.any { it.source != null }",,6e1f
fun findEnclosingSuspendFunction(context: CheckerContext),": FirFunction? {
        return context.containingDeclarations.lastOrNull {
            when (it) {
                is FirAnonymousFunction ->
                    if (it.isLambda) it.typeRef.coneType.isSuspendOrKSuspendFunctionType(context.session) else it.isSuspend
                is FirSimpleFunction ->
                    it.isSuspend
                else ->
                    false
            }",,bef4
"fun isInScopeForDefaultParameterValues(enclosingSuspendFunction: FirFunction, context: CheckerContext)",": Boolean {
        val valueParameters = enclosingSuspendFunction.valueParameters
        for (declaration in context.containingDeclarations.asReversed()) {
            when {
                declaration is FirValueParameter && declaration in valueParameters && declaration.defaultValue != null -> return true
                declaration is FirAnonymousFunction && declaration.inlineStatus == InlineStatus.Inline -> continue
                declaration is FirFunction && !declaration.isInline -> return false
            }",,3c77
"fun checkNonLocalReturnUsage(enclosingSuspendFunction: FirFunction, context: CheckerContext)",": Boolean {
        val containingFunction = context.containingDeclarations.lastIsInstanceOrNull<FirFunction>() ?: return false
        return if (containingFunction is FirAnonymousFunction && enclosingSuspendFunction !== containingFunction) {
            containingFunction.inlineStatus.returnAllowed
        }",,89ab
No signature found,"fun checkRestrictsSuspension(
        expression: FirQualifiedAccessExpression,
        enclosingSuspendFunction: FirFunction,
        calledDeclarationSymbol: FirCallableSymbol<*>,
        context: CheckerContext
    ): Boolean {
        if (expression is FirFunctionCall && isCaseMissedByK1(expression)) {
            return true
        }",,6e1f
fun test(),"{
     *     TestScope.testLambda()        // ❌️K1 ❌️K2
     *     testLambda(TestScope)         // ✅️K1 ❌️K2  <-- Working K1 code now fails to compile
     *     testLambda.invoke(TestScope)  // ✅️K1 ✅️K2
     * }",,fe98
fun isCaseMissedByK1(expression: FirFunctionCall),": Boolean {
        val isInvokeFromExtensionFunctionType = expression is FirImplicitInvokeCall
                && expression.explicitReceiver?.resolvedType?.isExtensionFunctionType == true

        if (!isInvokeFromExtensionFunctionType) {
            return false
        }",,66df
No signature found,"fun ConeKotlinType.isRestrictSuspensionReceiver(session: FirSession): Boolean {
        when (this) {
            is ConeClassLikeType -> {
                val regularClassSymbol = fullyExpandedType(session).lookupTag.toFirRegularClassSymbol(session) ?: return false
                if (regularClassSymbol.getAnnotationByClassId(StandardClassIds.Annotations.RestrictsSuspension, session) != null) {
                    return true
                }",,6e1f
No signature found,"fun sameInstanceOfReceiver(
        useSiteReceiverExpression: FirExpression?,
        declarationSiteReceiverOwnerSymbol: FirBasedSymbol<*>?
    ): Boolean {
        if (declarationSiteReceiverOwnerSymbol == null || useSiteReceiverExpression == null) return false
        if (useSiteReceiverExpression is FirThisReceiverExpression) {
            return useSiteReceiverExpression.calleeReference.boundSymbol == declarationSiteReceiverOwnerSymbol
        }",,6e1f
No signature found,"fun FirQualifiedAccessExpression.computeReceiversInfo(
        session: FirSession,
        calledDeclarationSymbol: FirCallableSymbol<*>
    ): Triple<FirExpression?, FirExpression?, ConeKotlinType?> {
        val dispatchReceiver = dispatchReceiver
        if (this is FirImplicitInvokeCall &&
            dispatchReceiver != null && dispatchReceiver.resolvedType.isSuspendOrKSuspendFunctionType(session)
        ) {
            val variableForInvoke = dispatchReceiver
            val variableForInvokeType = variableForInvoke.resolvedType
            if (!variableForInvokeType.isExtensionFunctionType) return Triple(null, null, null)

            // `a.foo()` is resolved to invokeExtension, so it's been desugared to `foo.invoke(a)`
            // And we use the first argument (`a`) as an extension receiver
            return Triple(
                null,
                argumentList.arguments.getOrNull(0),
                variableForInvokeType.typeArguments.getOrNull(0) as? ConeKotlinType
            )
        }",,6e1f
No signature found,"fun checkCallableReference(
        expression: FirQualifiedAccessExpression,
        symbol: FirCallableSymbol<*>,
        reporter: DiagnosticReporter,
        context: CheckerContext,
    ) {
        if (symbol.callableId == StandardClassIds.Callables.coroutineContext) {
            reporter.reportOn(expression.calleeReference.source, FirErrors.UNSUPPORTED, ""Callable reference to suspend property"", context)
        }",,6e1f
fun testNothingToJava(),"{
        assertEquals(
            CacheStatus.INVALID,
            manager.loadDiff(
                actual = null,
                expected = CompositeLookupsCacheAttributes(1, setOf(""jvm""))
            ).status
        )
    }",,7a52
fun testNothingToJavaAndJs(),"{
        assertEquals(
            CacheStatus.INVALID,
            manager.loadDiff(
                actual = null,
                expected = CompositeLookupsCacheAttributes(1, setOf(""jvm"", ""js""))
            ).status
        )
    }",,7192
fun testJsToJava(),"{
        assertEquals(
            CacheStatus.INVALID,
            manager.loadDiff(
                actual = CompositeLookupsCacheAttributes(1, setOf(""jvm"")),
                expected = CompositeLookupsCacheAttributes(1, setOf(""js""))
            ).status
        )
    }",,ba31
fun testJsAndJavaToJava(),"{
        assertEquals(
            CacheStatus.VALID,
            manager.loadDiff(
                actual = CompositeLookupsCacheAttributes(1, setOf(""jvm"", ""js"")),
                expected = CompositeLookupsCacheAttributes(1, setOf(""jvm""))
            ).status
        )
    }",,a823
fun testJsAndJavaToJavaWithOtherVersion(),"{
        assertEquals(
            CacheStatus.INVALID,
            manager.loadDiff(
                actual = CompositeLookupsCacheAttributes(1, setOf(""jvm"", ""js"")),
                expected = CompositeLookupsCacheAttributes(2, setOf(""jvm""))
            ).status
        )
    }",,fcb6
fun testJavaToJsAndJava(),"{
        assertEquals(
            CacheStatus.INVALID,
            manager.loadDiff(
                actual = CompositeLookupsCacheAttributes(1, setOf(""jvm"")),
                expected = CompositeLookupsCacheAttributes(1, setOf(""jvm"", ""js""))
            ).status
        )
    }",,8bac
fun testDokka(gradleVersion: GradleVersion),"{
        project(
            ""simpleProject"",
            gradleVersion,
        ) {
            applyDokka()
            build(""compileKotlin"", ""dokkaHtml"", ""-Pkotlin.session.logger.root.path=$projectPath"") {
                assertFileContains(
                    fusStatisticsPath,
                    ""ENABLED_DOKKA"",
                    ""ENABLED_DOKKA_HTML""
                )
            }",,de73
fun testMetricCollectingOfApplyingCocoapodsPlugin(gradleVersion: GradleVersion),"{
        project(""native-cocoapods-template"", gradleVersion) {
            build(""assemble"", ""-Pkotlin.session.logger.root.path=$projectPath"") {
                assertFileContains(fusStatisticsPath, ""COCOAPODS_PLUGIN_ENABLED=true"", ""ENABLED_HMPP=true"", ""MPP_PLATFORMS"")
            }",,272f
fun testMetricCollectingForNative(gradleVersion: GradleVersion),"{
        nativeProject(
            ""native-incremental-simple"", gradleVersion, buildOptions = defaultBuildOptions.copy(
                nativeOptions = defaultBuildOptions.nativeOptions.copy(
                    incremental = true
                )
            )
        ) {
            build(""linkDebugExecutableHost"", ""-Pkotlin.session.logger.root.path=$projectPath"") {
                assertFileContains(fusStatisticsPath, ""KOTLIN_INCREMENTAL_NATIVE_ENABLED=true"")
            }",,f862
fun testMetricCollectingOfApplyingKotlinJsPlugin(gradleVersion: GradleVersion),"{
        project(""simple-js-library"", gradleVersion) {
            build(""assemble"", ""-Pkotlin.session.logger.root.path=$projectPath"") {
                assertFileContains(fusStatisticsPath, ""KOTLIN_JS_PLUGIN_ENABLED=true"")
            }",,675c
fun testAppliedPluginsMetricsAreNotCollectedInSimpleProject(gradleVersion: GradleVersion),"{
        project(""simpleProject"", gradleVersion) {
            build(""assemble"", ""-Pkotlin.session.logger.root.path=$projectPath"") {
                val fusStatisticsPath = fusStatisticsPath
                assertFileContains(
                    fusStatisticsPath,
                    *expectedMetrics,
                )
                assertFileDoesNotContain(
                    fusStatisticsPath,
                    ""ENABLED_DOKKA_HTML""
                ) // asserts that we do not put DOKKA metrics everywhere just in case
                assertFileDoesNotContain(fusStatisticsPath, ""KOTLIN_JS_PLUGIN_ENABLED"")
            }",,d606
fun testProjectWithBuildSrcForGradleVersion7(gradleVersion: GradleVersion),"{
        //KT-64022 there are a different build instances in buildSrc and rest project:
        project(
            ""instantExecutionWithBuildSrc"",
            gradleVersion,
        ) {
            build(""compileKotlin"", ""-Pkotlin.session.logger.root.path=$projectPath"") {
                assertFilesCombinedContains(
                    Files.list(projectPath.resolve(""kotlin-profile"")).toList(),
                    *expectedMetrics,
                    ""BUILD_SRC_EXISTS=true""
                )
            }",,b594
fun testProjectWithIncludedBuild(gradleVersion: GradleVersion),"{
        //KT-64022
        //there are a different build instances in buildSrc and rest project

        project(
            ""instantExecutionWithIncludedBuildPlugin"",
            gradleVersion,
            buildOptions = defaultBuildOptions.copy(configurationCache = true)
        ) {
            build(""compileKotlin"", ""-Pkotlin.session.logger.root.path=$projectPath"") {
                Files.list(projectPath.resolve(""kotlin-profile"")).forEach {
                    assertFileContains(it, *expectedMetrics)
                }",,73f5
fun testFusStatisticsForFailedBuild(gradleVersion: GradleVersion),"{
        project(
            ""simpleProject"",
            gradleVersion,
        ) {
            projectPath.resolve(""src/main/kotlin/helloWorld.kt"").modify {
                it.replace(""java.util.ArrayList"", """")
            }",,7906
fun testFusStatisticsForMultiproject(gradleVersion: GradleVersion),"{
        project(
            ""incrementalMultiproject"", gradleVersion,
        ) {
            //Collect metrics from BuildMetricsService also
            build(
                ""compileKotlin"", ""-Pkotlin.session.logger.root.path=$projectPath"",
                buildOptions = defaultBuildOptions.copy(buildReport = listOf(BuildReportType.FILE))
            ) {
                assertFileContains(
                    fusStatisticsPath,
                    ""CONFIGURATION_IMPLEMENTATION_COUNT=2"",
                    ""NUMBER_OF_SUBPROJECTS=2"",
                    ""COMPILATIONS_COUNT=2""
                )
            }",,746a
fun testFusStatisticsWithConfigurationCache(gradleVersion: GradleVersion),"{
        testFusStatisticsWithConfigurationCache(gradleVersion, false)
    }",,3443
fun testFusStatisticsWithConfigurationCacheAndProjectIsolation(gradleVersion: GradleVersion),"{
        testFusStatisticsWithConfigurationCache(gradleVersion, true)
    }",,6665
"fun testFusStatisticsWithConfigurationCache(gradleVersion: GradleVersion, isProjectIsolationEnabled: Boolean)","{
        project(
            ""simpleProject"",
            gradleVersion,
            buildOptions = defaultBuildOptions.copy(
                configurationCache = true,
                projectIsolation = isProjectIsolationEnabled,
                buildReport = listOf(BuildReportType.FILE)
            ),
        ) {
            build(
                ""compileKotlin"",
                ""-Pkotlin.session.logger.root.path=$projectPath"",
            ) {
                assertConfigurationCacheStored()
                assertFileContains(
                    fusStatisticsPath,
                    *expectedMetrics,
                    ""CONFIGURATION_IMPLEMENTATION_COUNT=1"",
                    ""NUMBER_OF_SUBPROJECTS=1"",
                    ""COMPILATIONS_COUNT=1"",
                    ""GRADLE_CONFIGURATION_CACHE_ENABLED=true"",
                    ""GRADLE_PROJECT_ISOLATION_ENABLED=$isProjectIsolationEnabled"",
                )
            }",,49be
fun testConfigurationTypeFusMetrics(gradleVersion: GradleVersion),"{
        project(""simpleProject"", gradleVersion) {
            build(
                ""compileKotlin"",
                ""-Pkotlin.session.logger.root.path=$projectPath"",
            ) {
                assertFileContains(
                    fusStatisticsPath,
                    ""CONFIGURATION_COMPILE_ONLY_COUNT=1"",
                    ""CONFIGURATION_API_COUNT=1"",
                    ""CONFIGURATION_IMPLEMENTATION_COUNT=1"",
                    ""CONFIGURATION_RUNTIME_ONLY_COUNT=1"",
                )
            }",,e291
No signature found,"fun TestProject.applyDokka() {
        buildGradle.replaceText(
            ""plugins {"",
            """"""
                    plugins {
                        id(""org.jetbrains.dokka"") version ""1.8.10""
                    """""".trimIndent()
        )
    }",,6e1f
No signature found,"fun <T> runReadAction(crossinline runnable: () -> T): T {
    return ApplicationManager.getApplication().runReadAction(Computable { runnable() }",,6e1f
No signature found,"fun <R> executeOnPooledThreadInReadAction(action: () -> R): R =
    A",,6e1f
No signature found,"fun <R> withDummyApplication(action: () -> R): R {
    val previousApplication = ApplicationManager.getApplication()
    val disposable = Disposer.newDisposable(""Application disposable for dummy application from Analysis API test framework"")
    try {
        MockApplication.setUp(disposable)
        return action()
    }",,6e1f
No signature found,"fun PsiElement?.position(): String {
    if (this == null) return ""(unknown)""
    return offsetToLineAndColumn(containingFile.viewProvider.document, textRange.startOffset).toString()
}",,6e1f
No signature found,"fun KtSymbol.getNameWithPositionString(): String {
    return when (val psi = this.psi) {
        is KtDeclarationWithBody -> psi.name
        is KtNamedDeclaration -> psi.name
        null -> ""null""
        else -> psi::class.simpleName
    }",,6e1f
No signature found,"fun String.indented(indent: Int): String {
    val indentString = "" "".repeat(indent)
    return indentString + replace(""\n"", ""\n$indentString"")
}",,6e1f
No signature found,"fun KtDeclaration.getNameWithPositionString(): String {
    return (presentation?.presentableText ?: name ?: this::class.simpleName) + ""@"" + position()
}",,6e1f
"fun findReferencesAtCaret(mainKtFile: KtFile, caretPosition: Int)",": List<KtReference> =
    m",,bca1
No signature found,fun PsiReference.unwrapMultiReferences(): List<PsiReference> = w,,6e1f
No signature found,"fun RegisteredDirectives.ignoreExceptionIfIgnoreDirectivePresent(ignoreDirective: Directive, action: () -> Unit) {
    var exception: Throwable? = null
    try {
        action()
    }",,6e1f
No signature found,"fun <T, R> Collection<T>.singleOrZeroValue(
    transformer: (T) -> R?,
    ambiguityValueRenderer: (R) -> String,
): R? {
    val newCollection = mapNotNull(transformer)
    return when (newCollection.size) {
        0 -> null
        1 -> newCollection.single()
        else -> error(buildString {
            appendLine(""Ambiguity values are not expected."")
            newCollection.joinTo(this, separator = ""\n"", transform = ambiguityValueRenderer)
        }",,6e1f
fun box(),= C,,4f27
fun make(x: String),"fun interface MakeC {
    : C
}","// TARGET_BACKEND: JVM
// JVM_TARGET: 1.8
// SAM_CONVERSIONS: INDY

// CHECK_BYTECODE_TEXT
// JVM_IR_TEMPLATES
// 0 java/lang/invoke/LambdaMetafactory
// 1 final synthetic class ConstructorReferenceKt\$box\$1",76f6
fun make(makeC: MakeC),= m,,4deb
fun box(),= m,,4f27
fun b(),"{
        class C<S> {
            fun f() {
                fun g(t: T): S? = null
            }",// WITH_SIGNATURES,4df1
fun bar(b: A<String>),{},"// FULL_JDK
// LANGUAGE: -JavaTypeParameterDefaultRepresentationWithDNN
// ISSUE: KT-65184

// FILE: A.java",dfb1
fun func(p: A<B<String>>),"{
}",,d87b
fun bar(b: Queue<String>),{},,c9d1
fun test(x : X),"{
    x.bar(<!TYPE_MISMATCH!>LinkedList<String?>()<!>)
    bar(<!TYPE_MISMATCH!>B<String?>()<!>)
    func(A<B<String>>())
    func(<!TYPE_MISMATCH!>A<B<String?>>()<!>)
    func(<!TYPE_MISMATCH!>A<B<String?>?>()<!>)
    func(<!TYPE_MISMATCH!>A<B<String>?>()<!>)
}",,f9ea
fun bar(b: Queue<String>),{},,c9d1
No signature found,"fun test(c: C, jj: LinkedList<String?>) {
    c.bar(<!TYPE_MISMATCH!>jj<!>)
}",,6e1f
No signature found,"fun addImplicitReceiver(name: Name?, value: ImplicitReceiverValue<*>): PersistentCheckerContext =
        c",,6e1f
fun addDeclaration(declaration: FirDeclaration),": PersistentCheckerContext =
        c",,db2e
fun dropDeclaration(),{},,d7b6
fun addCallOrAssignment(qualifiedAccessOrAnnotationCall: FirStatement),": PersistentCheckerContext =
        c",,354f
fun dropCallOrAssignment(),{},,c7d8
fun addGetClassCall(getClassCall: FirGetClassCall),": PersistentCheckerContext =
        c",,02dc
fun dropGetClassCall(),{},,ce6c
fun addAnnotationContainer(annotationContainer: FirAnnotationContainer),": PersistentCheckerContext =
        c",,b9a9
fun dropAnnotationContainer(),{},,f70a
fun addElement(element: FirElement),": PersistentCheckerContext =
        c",,6f4d
fun dropElement(),{},,b604
"fun addSuppressedDiagnostics(
        diagnosticNames: Collection<String>,
        allInfosSuppressed: Boolean,
        allWarningsSuppressed: Boolean,
        allErrorsSuppressed: Boolean
    )",": CheckerContextForProvider {
        if (diagnosticNames.isEmpty()) return this
        return copy(
            suppressedDiagnostics = suppressedDiagnostics.addAll(diagnosticNames),
            allInfosSuppressed = this.allInfosSuppressed || allInfosSuppressed,
            allWarningsSuppressed = this.allWarningsSuppressed || allWarningsSuppressed,
            allErrorsSuppressed = this.allErrorsSuppressed || allErrorsSuppressed
        )
    }",,b5f2
No signature found,"fun copy(
        implicitReceiverStack: PersistentImplicitReceiverStack = t",,6e1f
fun toggleContractBody(newValue: Boolean),": CheckerContextForProvider {
        check(isContractBody != newValue)

        return copy(isContractBody = newValue)
    }",,724c
fun enterContractBody(),: CheckerContextForProvider = t,,6f05
fun exitContractBody(),: CheckerContextForProvider = t,,88a9
No signature found,"fun setInlineFunctionBodyContext(context: FirInlineDeclarationChecker.InlineFunctionBodyContext) =
        c",,6e1f
fun unsetInlineFunctionBodyContext(),: CheckerContextForProvider = c,,7f8d
fun enterFile(file: FirFile),: CheckerContextForProvider = c,,0661
fun exitFile(file: FirFile),: CheckerContextForProvider = c,,a706
No signature found,"fun a(
    a : foo = t",,6e1f
fun foo(),"{
    for (a in b)
      b

    for (a in b) {}",,519f
fun bar(),": String
}

expect inline class Foo2(val x: Int)

expect <!ABSENCE_OF_PRIMARY_CONSTRUCTOR_FOR_VALUE_CLASS, ABSENCE_OF_PRIMARY_CONSTRUCTOR_FOR_VALUE_CLASS{JVM}","// !LANGUAGE: +InlineClasses, -JvmInlineValueClasses
// MODULE: m1-common
// FILE: common.kt",66c3
fun bar(),": String = """,,66c3
fun foo(),"}

expect class ValueInsideTypealias {
    @Ann
    val value: String
}","// WITH_STDLIB
// MODULE: m1-common
// FILE: common.kt",519f
fun withComplexAnn(),"}

expect class InnerClassInsideTypealias {
    class Foo {
        @Ann
        fun foo()
    }",,a80c
fun foo(),{},,519f
fun withComplexAnn(),{},,a80c
fun foo(),{},,519f
No signature found,"fun JsNode.fixForwardNameReferences() {
    accept(object : RecursiveJsVisitor() {
        val currentScope = mutableMapOf<String, JsName>()

        init {
            currentScope += collectDefinedNames(this@fixForwardNameReferences, skipLabelsAndCatches = true).associateBy { it.ident }",,6e1f
No signature found,"fun restore(ident: String, oldName: JsName?) {
            if (oldName == null) {
                currentScope -= ident
            }",,6e1f
fun visitFunction(x: JsFunction),"{
            val localVars = x.collectLocalVariables(skipLabelsAndCatches = true).toList()
            val backup = arrayOfNulls<JsName>(localVars.size)

            localVars.forEachIndexed { index, localVar ->
                backup[index] = currentScope[localVar.ident]
                currentScope[localVar.ident] = localVar
            }",,03d0
fun visitCatch(x: JsCatch),"{
            val name = x.parameter.name
            val oldName = currentScope[name.ident]
            currentScope[name.ident] = name

            super.visitCatch(x)

            restore(name.ident, oldName)
        }",,67fe
fun visitNameRef(nameRef: JsNameRef),"{
            super.visitNameRef(nameRef)
            if (nameRef.qualifier == null) {
                val ident = nameRef.ident
                val name = currentScope[ident]
                if (name != null) {
                    nameRef.name = name
                }",,662b
fun visitBreak(x: JsBreak),{},,c5e4
fun visitContinue(x: JsContinue),{},,7748
No signature found,"fun remove(element: Any?): Boolean {
        return true
    }","// SKIP_KT_DUMP
// TARGET_BACKEND: JVM
// FULL_JDK
// WITH_STDLIB

// FILE: 1.kt",6e1f
fun removeAll(elements: Collection<Any>),": Boolean {
        return false
    }",,2c22
fun first(),": Any {
        return 1
    }",,13a5
fun last(),": Any {
        return 10
    }",,a562
"fun test(a: A, b: B)","{
    a.size
    a.first()
    a.last()
    a.add(1)
    a.add(null)
    a.remove(1)
    a.remove(null)

    b.size
    b.first()
    b.last()
    b.add(1)
    b.add(null)
    b.remove(null)
}",,f913
fun getResources(),": String {
        return """"
    }",,dfa6
"fun check(declaration: FirClass, context: CheckerContext, reporter: DiagnosticReporter)","{
        checkParcelableClass(declaration, context, reporter)
        checkParcelerClass(declaration, context, reporter)
    }",,718b
"fun checkParcelableClass(klass: FirClass, context: CheckerContext, reporter: DiagnosticReporter)","{
        val symbol = klass.symbol
        if (!symbol.isParcelize(context.session, parcelizeAnnotations)) return
        val source = klass.source ?: return
        val classKind = klass.classKind

        if (klass is FirRegularClass) {
            if (classKind == ClassKind.ANNOTATION_CLASS || classKind == ClassKind.INTERFACE && !klass.isSealed) {
                reporter.reportOn(source, KtErrorsParcelize.PARCELABLE_SHOULD_BE_CLASS, context)
                return
            }",,8a33
"fun checkParcelerClass(klass: FirClass, context: CheckerContext, reporter: DiagnosticReporter)","{
        if (klass !is FirRegularClass || !klass.isCompanion) return
        if (klass.isSubclassOf(OLD_PARCELER_ID.toLookupTag(), context.session, isStrict = true)) {
            val strategy = if (klass.name == SpecialNames.NO_NAME_PROVIDED) {
                SourceElementPositioningStrategies.OBJECT_KEYWORD
            }",,c2df
No signature found,"fun FirClassSymbol<*>?.isParcelize(session: FirSession, parcelizeAnnotations: List<ClassId>): Boolean {
    contract {
        returns(true) implies (this@isParcelize != null)
    }",,6e1f
No signature found,"fun checkParcelizeClassSymbols(
    symbol: FirClassSymbol<*>,
    session: FirSession,
    predicate: (FirClassSymbol<*>) -> Boolean,
): Boolean {
    if (predicate(symbol)) return true
    return symbol.resolvedSuperTypeRefs.any { superTypeRef ->
        val superTypeSymbol = superTypeRef.type.toRegularClassSymbol(session)
            ?.takeIf { it.rawStatus.modality == Modality.SEALED }",,6e1f
No signature found,"fun FirRegularClass.hasCustomParceler(session: FirSession): Boolean {
    val companion = companionObjectSymbol ?: return false
    return lookupSuperTypes(companion, lookupInterfaces = true, deep = true, useSiteSession = session).any {
        it.classId in PARCELER_CLASS_IDS
    }",,6e1f
fun testValFromOtherModule(),"{
    js(<!JSCODE_CAN_NOT_VERIFY_JAVASCRIPT!>""var ${<!JSCODE_ARGUMENT_NON_CONST_EXPRESSION!>valFromOtherModule<!>}","// FIR_DIFFERENCE
// The difference is okay: K1 and K2 report a bit differently
// ERROR_POLICY: SEMANTIC

// MODULE: lib1
// FILE: A.kt",e2d0
fun testValFromOtherModule2(),"{
    js(<!JSCODE_CAN_NOT_VERIFY_JAVASCRIPT!>""var ${<!JSCODE_ARGUMENT_NON_CONST_EXPRESSION!>valFromOtherModule2<!>}",,f048
fun testValFromOtherFile(),"{
    js(<!JSCODE_CAN_NOT_VERIFY_JAVASCRIPT!>""var ${<!JSCODE_ARGUMENT_NON_CONST_EXPRESSION!>valFromOtherFile<!>}",,7702
fun testValFromOtherFile2(),"{
    js(<!JSCODE_CAN_NOT_VERIFY_JAVASCRIPT!>""var ${<!JSCODE_ARGUMENT_NON_CONST_EXPRESSION!>valFromOtherFile2<!>}",,3445
fun testValFromThisFile(),"{
    js(<!JSCODE_CAN_NOT_VERIFY_JAVASCRIPT!>""var ${<!JSCODE_ARGUMENT_NON_CONST_EXPRESSION!>valFromThisFile<!>}",,6cb9
fun testValFromThisFile2(),"{
    js(<!JSCODE_CAN_NOT_VERIFY_JAVASCRIPT!>""var ${<!JSCODE_ARGUMENT_NON_CONST_EXPRESSION!>valFromThisFile2<!>}",,d9c3
fun testValWithGetter(),"{
    js(<!JSCODE_CAN_NOT_VERIFY_JAVASCRIPT!>""var ${<!JSCODE_ARGUMENT_NON_CONST_EXPRESSION!>valWithGetter<!>}",,74c7
"fun check(declaration: FirDeclaration, context: CheckerContext, reporter: DiagnosticReporter)","{
        if (!context.isTopLevel) return
        if (!declaration.symbol.isEffectivelyExternal(context.session)) return

        if (declaration is FirFunction) {
            if (!declaration.hasAnnotation(WasmStandardClassIds.Annotations.WasmImport, context.session)) {
                reporter.reportOn(declaration.source, FirWasmErrors.WASI_EXTERNAL_FUNCTION_WITHOUT_IMPORT, context)
            }",,ee93
fun clear(),"{
        throw UnsupportedOperationException()
    }","// SKIP_JDK6
// TARGET_BACKEND: JVM
// FULL_JDK
// WITH_STDLIB",44a6
"fun put(key: Any, value: Any)",": Any? {
        throw UnsupportedOperationException()
    }",,c966
"fun putAll(from: Map<out Any, Any>)","{
        throw UnsupportedOperationException()
    }",,e895
fun remove(key: Any),": Any? {
        throw UnsupportedOperationException()
    }",,82ce
fun containsKey(key: Any),": Boolean {
        throw UnsupportedOperationException()
    }",,705c
fun containsValue(value: Any),": Boolean {
        throw UnsupportedOperationException()
    }",,b679
fun get(key: Any),": Any? {
        throw UnsupportedOperationException()
    }",,2785
fun isEmpty(),": Boolean {
        throw UnsupportedOperationException()
    }",,464e
"fun getOrDefault(key: Any, defaultValue: Any)",": Any {
        // this condition can not be true because of checkParameterIsNotNull/checkNotNullParameter checks in the begin of every method,
        // but it's left here to emphasize that we expect these parameters are not null
        if (key == null || defaultValue == null) {
            throw IllegalArgumentException(""fail"")
        }",,18a4
fun box(),": String {
    val a = A()
    if (a.getOrDefault(""abc"", ""xyz"") != ""cde"") return ""fail 1""
    if (a.getOrDefault(""56"", ""123"") != ""123"") return ""fail 2""

    val mm = a as MutableMap<Any?, Any?>
    if (mm.getOrDefault(""abc"", ""xyz"") != ""cde"") return ""fail 3""
    if (mm.getOrDefault(""56"", 123) != 123) return ""fail 4""
    if (mm.getOrDefault(1, ""456"") != ""456"") return ""fail 5""
    if (mm.getOrDefault(null, ""qwe"") != ""qwe"") return ""fail 6""

    try {
        // This is a known problem, there's no way to implement type-safe bridge/barrier properly:
        // 'override fun getOrDefault(key: Any, defaultValue: Any): Any' expects two not-nullable values,
        // and returning defaultValue if null was received seems incorrect here
        mm.getOrDefault(""abc"", null)
        return ""fail 7""
    }",,4f27
No signature found,fun A?.foo() {},"// IGNORE_BACKEND: WASM
// WASM_MUTE_REASON: IGNORED_IN_JS
// IGNORE_BACKEND: JS_IR
// IGNORE_BACKEND: JS_IR_ES6
// TODO: investigate should it be ran for JS or not
// IGNORE_BACKEND: JS

// JVM_ABI_K1_K2_DIFF: KT-63859

// See https://youtrack.jetbrains.com/issue/KT-14938
// WITH_REFLECT",6e1f
fun box(),": String =
        w",,4f27
fun main(),"{
        HashMap<String, T>()[""""]
    }",// KOTLIN_CONFIGURATION_FLAGS: +JVM.DISABLE_PARAM_ASSERTIONS,d987
fun foo(),"{
            Inner()
        }","// FIR_IDENTICAL
// SKIP_TXT",519f
No signature found,"fun String.genVariantMatchingName(expectedOptionalVariant: OptionalVariantSuffix): String? {
    if (expectedOptionalVariant == OptionalVariantSuffix.None) return this
    val variantMatch = OptionalVariantSuffix.anySuffixRegex.find(this) ?: return this
    if (variantMatch.groups[1]?.value != expectedOptionalVariant.name) return null
    return removeRange(variantMatch.range.first, variantMatch.range.last)
}",,6e1f
No signature found,"fun copyTestSources(
    testDataDir: File,
    sourceDestinationDir: File,
    filePrefix: String,
    optionalVariantSuffix: OptionalVariantSuffix = O",,6e1f
"fun copyDir(fromDir: File, toDir: File)","{
        FileUtil.ensureExists(toDir)
        for (file in fromDir.listFiles().orEmpty()) {
            if (file.isDirectory) {
                copyDir(file, File(toDir, file.name))
            }",,5fe2
No signature found,"fun getModificationsToPerform(
    testDataDir: File,
    moduleNames: Collection<String>?,
    allowNoFilesWithSuffixInTestData: Boolean,
    touchPolicy: TouchPolicy,
    optionalVariantSuffix: OptionalVariantSuffix = O",,6e1f
"fun getModificationsForIteration(newSuffix: String, touchSuffix: String, deleteSuffix: String)",": List<Modification> {

        fun splitToModuleNameAndFileName(fileName: String): Pair<String?, String> {
            val underscore = fileName.indexOf(""_"")

            if (underscore != -1) {
                var moduleName = fileName.substring(0, underscore)
                var moduleFileName = fileName.substring(underscore + 1)
                if (moduleName.all { it.isDigit() }",,d7c4
"fun perform(workDir: File, mapping: MutableMap<File, File>)",": File?

    override fun toString(): String = """,,2be8
"fun perform(workDir: File, mapping: MutableMap<File, File>)",": File? {
        val file = File(workDir, path)

        val oldLastModified = file.lastModified()
        file.delete()
        dataFile.copyTo(file)

        val newLastModified = file.lastModified()
        if (newLastModified <= oldLastModified) {
            //Mac OS and some versions of Linux truncate timestamp to nearest second
            file.setLastModified(oldLastModified + 1000)
        }",,2be8
"fun perform(workDir: File, mapping: MutableMap<File, File>)",": File? {
        val file = File(workDir, path)

        when (touchPolicy) {
            TouchPolicy.TIMESTAMP -> {
                val oldLastModified = file.lastModified()
                //Mac OS and some versions of Linux truncate timestamp to nearest second
                file.setLastModified(max(System.currentTimeMillis(), oldLastModified + 1000))
            }",,2be8
"fun perform(workDir: File, mapping: MutableMap<File, File>)",": File? {
        val fileToDelete = File(workDir, path)
        if (!fileToDelete.delete()) {
            throw AssertionError(""Couldn't delete $fileToDelete"")
        }",,2be8
fun toString(),": String = """,,a535
No signature found,"fun put(key: Any?, value: Any?): Any? {
        return null
    }","// SKIP_KT_DUMP
// TARGET_BACKEND: JVM
// FULL_JDK
// WITH_STDLIB

// FILE: Java1.java",6e1f
No signature found,"fun remove(key: Any?): Any? {
        return null
    }",,6e1f
"fun test(a: A, b: B)","{
    a.size
    a[true] = true
    a.put(null, null)
    a.get(true)
    a.get(null)
    a.remove(null)
    a.remove(true)

    b.size
    b.put(false, false)
    b.put(null, null)
    b[null] = null
    b[true] = true
    b.get(null)
    b.get(true)
    b.remove(null)
    b.remove(true)
}",,f913
No signature found,fun callLambdaWithoutContract(block: () -> Unit) = b,// WITH_STDLIB,6e1f
No signature found,"fun testIs(x: Any?) {
    var a = x
    val b = a
    if (a is String) x.<!UNRESOLVED_REFERENCE!>length<!>
    if (b is String) x.<!UNRESOLVED_REFERENCE!>length<!>
    val f = {
        if (a is String) x.<!UNRESOLVED_REFERENCE!>length<!>
        if (b is String) x.<!UNRESOLVED_REFERENCE!>length<!>
    }",,6e1f
No signature found,"fun testIsLambda(x: Any?) {
    var a = x
    val b = a
    if (a is String) x.<!UNRESOLVED_REFERENCE!>length<!>
    if (b is String) x.<!UNRESOLVED_REFERENCE!>length<!>
    callLambdaWithoutContract { a = """" }",,6e1f
No signature found,"fun testRequireIs(x: Any?) {
    var a = x
    val b = a
    val f: () -> Unit = {
        require(a is String)
        x.<!UNRESOLVED_REFERENCE!>length<!>
        require(b is String)
        x.<!UNRESOLVED_REFERENCE!>length<!>
    }",,6e1f
No signature found,"fun testRequireIsLambda(x: Any?) {
    var a = x
    val b = a
    callLambdaWithoutContract { a = """" }",,6e1f
No signature found,"fun testNotNull(x: String?) {
    var a = x
    val b = a
    if (a != null) x<!UNSAFE_CALL!>.<!>length
    if (b != null) x<!UNSAFE_CALL!>.<!>length
    val f = {
        if (a != null) x<!UNSAFE_CALL!>.<!>length
        if (b != null) x<!UNSAFE_CALL!>.<!>length
    }",,6e1f
No signature found,"fun testNotNullLambda(x: String?) {
    var a = x
    val b = a
    if (a != null) x<!UNSAFE_CALL!>.<!>length
    if (b != null) x<!UNSAFE_CALL!>.<!>length
    callLambdaWithoutContract { a = """" }",,6e1f
No signature found,"fun testRequireNotNull(x: String?) {
    var a = x
    val b = a
    val f: () -> Unit = {
        require(a != null)
        x<!UNSAFE_CALL!>.<!>length
        require(b != null)
        x<!UNSAFE_CALL!>.<!>length
    }",,6e1f
No signature found,"fun testRequireNotNullLambda(x: String?) {
    var a = x
    val b = a
    callLambdaWithoutContract { a = """" }",,6e1f
No signature found,"fun testNotNullViaVariable(x: String?) {
    val a = x != null
    var b = a
    val c = b
    if (b) x<!UNSAFE_CALL!>.<!>length
    if (c) x<!UNSAFE_CALL!>.<!>length
    val f = {
        if (b) x<!UNSAFE_CALL!>.<!>length
        if (c) x<!UNSAFE_CALL!>.<!>length
    }",,6e1f
No signature found,"fun testNotNullViaVariableLambda(x: String?) {
    val a = x != null
    var b = a
    val c = b
    if (b) x<!UNSAFE_CALL!>.<!>length
    if (c) x<!UNSAFE_CALL!>.<!>length
    callLambdaWithoutContract { b = true }",,6e1f
No signature found,"fun testRequireNotNullViaVariable(x: String?) {
    val a = x != null
    var b = a
    val c = b
    val f: () -> Unit = {
        require(b)
        x<!UNSAFE_CALL!>.<!>length
        require(c)
        x<!UNSAFE_CALL!>.<!>length
    }",,6e1f
No signature found,"fun testRequireNotNullViaVariableLambda(x: String?) {
    val a = x != null
    var b = a
    val c = b
    callLambdaWithoutContract { b = true }",,6e1f
No signature found,"fun set(k: String, v: ((String) -> Unit) -> Unit) {
        key += k
        v { value += it }",// See KT-14999,6e1f
fun box(),": String {
    Obj[""O""] = label@{ it(""K"") }",,4f27
"fun getOptions(enabledCompilerPlugins: List<String>, compilerPluginOptions: List<String>)",": List<String>?

    protected open fun getOptions(
        mavenProject: MavenProject,
        enabledCompilerPlugins: List<String>,
        compilerPluginOptions: List<String>
    ): List<String>? = g","// WITH_STDLIB
// LINK_VIA_SIGNATURES_K1
// DUMP_SIGNATURES

// MODULE: maven
// FILE: MavenProject.kt",e7b6
"fun getOptions(enabledCompilerPlugins: List<String>, compilerPluginOptions: List<String>)",": List<String>? {
        return null
    }",,e7b6
fun box(),": String {
    val result = SamWithReceiverMavenProjectImportHandler()
    return result.getOptions(emptyList(), emptyList())?.get(0) ?: ""OK""
}",,4f27
fun box(),": String {
    val x = ""OK""
    class Aaa {
        val y = x
    }",,4f27
fun test1(),"{
    val thread1 = Thread({<caret> println(""hello1"") }",,fa3b
fun toScheme(callContext: CallCheckerContext),": Scheme
    abstract fun isTypeFor(descriptor: CallableDescriptor): Boolean
}

private class InferenceDescriptorType(val descriptor: CallableDescriptor) : InferenceNodeType() {
    override : Scheme =
        descriptor.toScheme(callContext)
    override fun isTypeFor(descriptor: CallableDescriptor) = this.descriptor == descriptor
    override fun hashCode(): Int = 31 * descriptor.original.hashCode()
    override fun equals(other: Any?): Boolean =
        other is InferenceDescriptorType && other.descriptor.original == descriptor.original
}",,3d37
fun toScheme(callContext: CallCheckerContext),: Scheme = t,,3d37
fun isTypeFor(descriptor: CallableDescriptor),: Boolean = f,,eae3
fun hashCode(),: Int = 3,,6874
No signature found,"fun equals(other: Any?): Boolean =
        o",,6e1f
fun toScheme(callContext: CallCheckerContext),: Scheme = S,,3d37
fun isTypeFor(descriptor: CallableDescriptor),: Boolean = f,,eae3
fun hashCode(),: Int = S,,6874
No signature found,fun equals(other: Any?): Boolean = o,,6e1f
fun descriptorTypeOf(element: PsiElement),": InferenceNodeType =
        b",,1c60
fun kotlinTypeOf(element: KtExpression),= e,,d745
fun containerOf(element: PsiElement),": PsiElement? {
        var current: PsiElement? = element.parent
        while (current != null) {
            when (current) {
                is KtLambdaExpression, is KtFunction, is KtProperty, is KtPropertyAccessor ->
                    return current
                is KtClass, is KtFile -> break
            }",,6cce
fun containerNodeOf(element: PsiElement),"=
        c",,27b1
fun declaredSchemaOf(type: InferenceNodeType),": Scheme =
                t",,7dbf
fun currentInferredSchemeOf(type: InferenceNodeType),: Scheme? = n,,1244
"fun updatedInferredScheme(type: InferenceNodeType, scheme: Scheme)",{ },,6cde
fun containerOf(node: InferenceNode),": InferenceNode =
                c",,fd1e
fun kindOf(node: InferenceNode),= n,,270f
"fun schemeParameterIndexOf(
                node: InferenceNode,
                container: InferenceNode
            )",: Int = (,,d7b6
fun typeOf(node: InferenceNode),: InferenceNodeType = n,,d56b
fun referencedContainerOf(node: InferenceNode),": InferenceNode? {
                return null
            }",,40c3
fun descriptionFrom(token: String),": String {
                val fqName = FqName(token)
                val cls = callContext.moduleDescriptor.findClassAcrossModuleDependencies(
                    ClassId.topLevel(fqName)
                )
                return cls?.let {
                    it.annotations.findAnnotation(
                        ComposeFqNames.ComposableTargetMarker
                    )?.let { marker ->
                      marker.allValueArguments.firstNotNullOfOrNull { entry ->
                          val name = entry.key
                          if (
                              !name.isSpecial &&
                              name.identifier == ComposeFqNames.ComposableTargetMarkerDescription
                          ) {
                              (entry.value as? StringValue)?.value
                          }",,10a4
"fun reportCallError(node: InferenceNode, expected: String, received: String)","{
                if (expected != received) {
                    val expectedDescription = descriptionFrom(expected)
                    val receivedDescription = descriptionFrom(received)
                    callContext.trace.report(
                        ComposeErrors.COMPOSE_APPLIER_CALL_MISMATCH.on(
                            node.element,
                            expectedDescription,
                            receivedDescription
                        )
                    )
                }",,cf55
"fun reportParameterError(
                node: InferenceNode,
                index: Int,
                expected: String,
                received: String
            )","{
                if (expected != received) {
                    val expectedDescription = descriptionFrom(expected)
                    val receivedDescription = descriptionFrom(received)
                    callContext.trace.report(
                        ComposeErrors.COMPOSE_APPLIER_PARAMETER_MISMATCH.on(
                            node.element,
                            expectedDescription,
                            receivedDescription
                        )
                    )
                }",,4cbf
No signature found,"fun log(node: InferenceNode?, message: String) {
                // ignore log messages in the front-end
            }",,6e1f
fun getLazyScheme(node: InferenceNode),": LazyScheme? =
                c",,b507
"fun storeLazyScheme(node: InferenceNode, value: LazyScheme)","{
                callContext.trace.record(
                    FrontendWritableSlices.COMPOSE_LAZY_SCHEME,
                    node.type,
                    value
                )
            }",,5149
"fun registerModuleComponents(
        container: StorageComponentContainer,
        platform: TargetPlatform,
        moduleDescriptor: ModuleDescriptor
    )","{
        container.useInstance(this)
    }",,b47f
No signature found,"fun check(
        resolvedCall: ResolvedCall<*>,
        reportOn: PsiElement,
        context: CallCheckerContext
    ) {
        if (!resolvedCall.isComposableInvocation()) return
        callContext = context
        val bindingContext = callContext.trace.bindingContext
        val parameters = resolvedCall.candidateDescriptor.valueParameters.filter {
            (it.type.isFunctionType && it.type.hasComposableAnnotation()) || it.isSamComposable()
        }",,6e1f
No signature found,"fun resolvedCallToInferenceNode(resolvedCall: ResolvedCall<*>) =
        w",,6e1f
"fun argumentToInferenceNode(
        descriptor: ValueParameterDescriptor,
        element: PsiElement
    )",": InferenceNode {
        val bindingContext = callContext.trace.bindingContext
        val lambda = lambdaOrNull(element)
        if (lambda != null) return PsiElementNode(lambda, bindingContext)
        val parameter = findParameterReferenceOrNull(descriptor, element)
        if (parameter != null) return parameter
        return PsiElementNode(element, bindingContext)
    }",,a271
fun lambdaOrNull(element: PsiElement),": KtFunctionLiteral? {
        var container = (element as? KtLambdaArgument)?.children?.singleOrNull()
        while (true) {
            container = when (container) {
                null -> return null
                is KtLabeledExpression -> container.lastChild
                is KtFunctionLiteral -> return container
                is KtLambdaExpression -> container.children.single()
                else -> throw Error(""Unknown type: ${container.javaClass}",,6266
"fun descriptorToInferenceNode(
        descriptor: CallableDescriptor,
        element: PsiElement
    )",: InferenceNode = w,,abf1
"fun parameterDescriptorToInferenceNode(
        descriptor: ValueParameterDescriptor,
        element: PsiElement
    )",": InferenceNode {
        val parameter = findParameterReferenceOrNull(descriptor, element)
        return parameter ?: PsiElementNode(element, callContext.trace.bindingContext)
    }",,89a8
"fun findParameterReferenceOrNull(
        descriptor: ValueParameterDescriptor,
        element: PsiElement
    )",": InferenceNode? {
        val bindingContext = callContext.trace.bindingContext
        val declaration = descriptor.containingDeclaration
        var currentContainer: InferenceNode? = containerNodeOf(element)
        while (currentContainer != null) {
            val type = currentContainer.type
            if (type.isTypeFor(declaration)) {
                val index =
                    declaration.valueParameters.filter {
                        it.isComposableCallable(bindingContext) ||
                            it.isSamComposable()
                    }",,f066
No signature found,"fun Annotated.schemeItem(): Item {
    val explicitTarget = compositionTarget()
    val explicitOpen = if (explicitTarget == null) compositionOpenTarget() else null
    return when {
        explicitTarget != null -> Token(explicitTarget)
        explicitOpen != null -> Open(explicitOpen)
        else -> Open(-1, isUnspecified = true)
    }",,6e1f
No signature found,fun Annotated.scheme(): Scheme? = c,,6e1f
No signature found,"fun CallableDescriptor.toScheme(callContext: CallCheckerContext?): Scheme =
    s",,6e1f
No signature found,"fun CallableDescriptor.fileScopeTarget(callContext: CallCheckerContext): Item? =
    (",,6e1f
No signature found,fun KotlinType.toScheme(): Scheme = S,,6e1f
No signature found,"fun ValueParameterDescriptor.samComposableOrNull() =
    (",,6e1f
No signature found,"fun ValueParameterDescriptor.isSamComposable() =
    s",,6e1f
fun test(),: Unit {},// JVM_TARGET: 11,fe98
fun test(),": T {
        return null!!
    }",,fe98
fun box(),": String {
    val a = A(Unit)

    val test = ""Test ${a.component1()}",,4f27
fun test(),"{
    // @NotNull platform type
    val platformNN = J.staticNN
    // @Nullable platform type
    val platformN = J.staticN
    // platform type with no annotation
    val platformJ = J.staticJ

    val a: Any? = null

    if (<!SENSELESS_COMPARISON!>platformNN !== null<!>) {}","// !DIAGNOSTICS: -UNUSED_EXPRESSION

// FILE: J.java",fe98
fun add(s: String),: Boolean = t,// TARGET_BACKEND: JVM,39e3
fun isEmpty(),: Boolean = n,,464e
fun contains(o: String),: Boolean = n,,a88a
fun iterator(),: Iterator<String> = n,,c20a
fun containsAll(c: Collection<String>),: Boolean = n,,020c
fun get(index: Int),: String = n,,60cf
fun indexOf(o: String),: Int = n,,2f3f
fun lastIndexOf(o: String),: Int = n,,3f10
fun listIterator(),: ListIterator<String> = n,,d886
fun listIterator(index: Int),: ListIterator<String> = n,,1bc7
"fun subList(fromIndex: Int, toIndex: Int)",: List<String> = n,,2cf6
fun box(),": String {
    try {
        val a = C()
        if (!a.add("""")) return ""Fail 1""
        if (!(a as Addable).add("""")) return ""Fail 2""
        if (!(a as java.util.List<String>).add("""")) return ""Fail 3""
        return ""OK""
    }",,4f27
"fun get(i: Int, j: Int, k: Int)",= v,// WITH_STDLIB,3dc1
"fun set(i: Int, j: Int, k: Int, newValue: String)","{
        value = newValue
    }",,1468
fun box(),": String {
    var x = Host("""")
    run {
        x[0, 0, 0] += ""O""
        x[0, 0, 0] += ""K""
    }",,4f27
fun box(),"=
        i",,4f27
No signature found,"fun <T> getAndCheck(getFirst: () -> T, getSecond: () -> T) =
        g",,6e1f
fun notify(),"{
        steps += 1
    }",,2dc2
No signature found,"fun <R> runAndWait(block: () -> R) {
        val prev = steps
        val result = block()
        // During block() execution someone somewhere does notify().
        // In this loop we wait to read the result of that notify(), which acts as a synchronization point.
        while (steps <= prev) {}",,6e1f
fun increment(),"{ // Only Unit is allowed for return value
        println(""I'm here to make sure this function generates a frame. Here's an object: ${Any()}",,75b0
fun incrementBy(amount: NSNumber),"{ // Only Unit is allowed for return value
        println(""I'm here to make sure this function generates a frame. Here's an object: ${Any()}",,9f5e
"fun incrementOtherBy(other: Incrementor, amount: NSNumber)","{ // Only Unit is allowed for return value
        println(""I'm here to make sure this function generates a frame. Here's an object: ${Any()}",,21da
fun increment(),= p,,75b0
fun incrementBy(amount: NSNumber),= p,,9f5e
"fun incrementOtherBy(other: Incrementor, amount: NSNumber)",= p,,21da
fun increment(),= i,,75b0
fun incrementBy(amount: NSNumber),= i,,9f5e
"fun incrementOtherBy(other: Incrementor, amount: NSNumber)",= i,,21da
fun testIncrementorKt(),"{
    val incrementor = Incrementor()
    assertEquals(0, incrementor.counter.intValue)

    incrementor.increment()
    assertEquals(1, incrementor.counter.intValue)

    incrementor.incrementBy(NSNumber.numberWithInt(3))
    assertEquals(4, incrementor.counter.intValue)

    incrementor.counter = NSNumber.numberWithInt(7)
    assertEquals(7, incrementor.counter.intValue)

    incrementor.incrementBy(NSNumber.numberWithInt(2))
    assertEquals(9, incrementor.counter.intValue)

    val otherIncrementor = Incrementor()
    incrementor.incrementOtherBy(otherIncrementor, NSNumber.numberWithInt(5))
    assertEquals(9, incrementor.counter.intValue)
    assertEquals(5, otherIncrementor.counter.intValue)
}",,f403
fun testIncrementorObjC(),"{
    val incrementor = IncrementorViaObjC()
    assertEquals(0, incrementor.counter.intValue)

    incrementor.increment()
    assertEquals(1, incrementor.counter.intValue)

    incrementor.incrementBy(NSNumber.numberWithInt(3))
    assertEquals(4, incrementor.counter.intValue)

    incrementor.counter = NSNumber.numberWithInt(7)
    assertEquals(7, incrementor.counter.intValue)

    incrementor.incrementBy(NSNumber.numberWithInt(2))
    assertEquals(9, incrementor.counter.intValue)

    val otherIncrementor = Incrementor()
    incrementor.incrementOtherBy(otherIncrementor, NSNumber.numberWithInt(5))
    assertEquals(9, incrementor.counter.intValue)
    assertEquals(5, otherIncrementor.counter.intValue)
}","// Doing everything testIncrementorKt does, but via ObjC dynamic dispatch",8044
fun testIncrementorObjCInNewThread(),"{
    if (!isExperimentalMM()) // Cross-thread stuff doesn't work with the legacy MM
        return

    val incrementor = IncrementorViaObjCInNewThread()
    assertEquals(0, incrementor.counter.intValue)

    incrementor.increment()
    assertEquals(1, incrementor.counter.intValue)

    incrementor.incrementBy(NSNumber.numberWithInt(3))
    assertEquals(4, incrementor.counter.intValue)

    incrementor.counter = NSNumber.numberWithInt(7)
    assertEquals(7, incrementor.counter.intValue)

    incrementor.incrementBy(NSNumber.numberWithInt(2))
    assertEquals(9, incrementor.counter.intValue)

    val otherIncrementor = Incrementor()
    incrementor.incrementOtherBy(otherIncrementor, NSNumber.numberWithInt(5))
    assertEquals(9, incrementor.counter.intValue)
    assertEquals(5, otherIncrementor.counter.intValue)
}","// Doing everything testIncrementorKt does, but via ObjC dynamic dispatch and in a new NSThread",f24b
fun testIncrementorMix(),"{
    val objc = IncrementorViaObjC()
    val kt = objc.impl
    assertEquals(0, kt.counter.intValue)

    kt.increment()
    assertEquals(1, kt.counter.intValue)

    objc.increment()
    assertEquals(2, kt.counter.intValue)

    kt.counter = NSNumber.numberWithInt(7)
    assertEquals(7, kt.counter.intValue)

    objc.increment()
    assertEquals(8, kt.counter.intValue)

    objc.counter = NSNumber.numberWithInt(11)
    assertEquals(11, kt.counter.intValue)

    kt.increment()
    assertEquals(12, kt.counter.intValue)
}",// Mixing Kt and ObjC accesses,ea1d
fun testIncrementorMixInNewThread(),"{
    if (!isExperimentalMM()) // Cross-thread stuff doesn't work with the legacy MM
        return

    val objc = IncrementorViaObjCInNewThread()
    val kt = objc.impl
    assertEquals(0, kt.counter.intValue)

    kt.increment()
    assertEquals(1, kt.counter.intValue)

    objc.increment()
    assertEquals(2, kt.counter.intValue)

    kt.counter = NSNumber.numberWithInt(7)
    assertEquals(7, kt.counter.intValue)

    objc.increment()
    assertEquals(8, kt.counter.intValue)

    objc.counter = NSNumber.numberWithInt(11)
    assertEquals(11, kt.counter.intValue)

    kt.increment()
    assertEquals(12, kt.counter.intValue)
}",// Mixing Kt and ObjC accesses when ObjC happens in a different thread,3b78
fun build(),": FirAssignmentOperatorStatement {
        return FirAssignmentOperatorStatementImpl(
            source,
            annotations.toMutableOrEmpty(),
            operation,
            leftArgument,
            rightArgument,
        )
    }",,5bf9
No signature found,"fun buildAssignmentOperatorStatement(init: FirAssignmentOperatorStatementBuilder.() -> Unit): FirAssignmentOperatorStatement {
    contract {
        callsInPlace(init, InvocationKind.EXACTLY_ONCE)
    }",,6e1f
fun foo(),": Any
}

interface IDerived1 {
    : String
}",,519f
No signature found,"fun TestDSLClass.fibCombine(f: (Int) -> Int, n: Int) = i",,6e1f
No signature found,"fun TestDSLInterface.fibCombine(f: (Int) -> Int, n: Int) = i",,6e1f
No signature found,"fun TestDSLClassWithParam.fibCombine(f: (Int) -> Int, n: Int) = i",,6e1f
fun isStopped(),": Boolean
}

interface EventRo : Stoppable

interface Event : Stoppable {
    override : Boolean {
        return true
    }","// MODULE: lib
// FILE: lib.kt",36ac
fun box(),": String {
    if (lib.MouseEvent().isStopped()) {
        return ""OK""
    }",,4f27
"fun isCastPossible(fromType: KotlinType, toType: KotlinType)",": Boolean {
        return isCastToAForwardDeclaration(toType)
    }",,9fc5
fun isCastToAForwardDeclaration(forwardDeclarationType: KotlinType),": Boolean {
        val forwardDeclarationClassDescriptor = forwardDeclarationType.constructor.declarationDescriptor
        if (forwardDeclarationClassDescriptor !is ClassDescriptor) return false
        return forwardDeclarationClassDescriptor.getForwardDeclarationKindOrNull() != null
    }","/**
     * Here, we only check that we are casting to a forward declaration to suppress a CAST_NEVER_SUCCEEDS warning. The cast is further
     * checked in NativeForwardDeclarationRttiChecker.
     */",4a51
fun ok(),"= ""","// ISSUE: KT-52677
// MODULE: lib
// FILE: lib.kt",23f4
fun foo(),: Uuid { throw RuntimeException() },,519f
fun bar(),= f,,66c3
fun box(),= L,,4f27
No signature found,"fun add(element: Any?): Boolean {
        return true
    }","// SKIP_KT_DUMP
// TARGET_BACKEND: JVM
// FULL_JDK
// WITH_STDLIB

// FILE: Java1.java",6e1f
fun iterator(),": MutableIterator<Any> {
        return null!!
    }",,c20a
"fun test(a: A, b: B)","{
    a.size
    a.add(1)
    a.add(null)
    a.first()
    a.remove(1)
    a.removeAll(listOf(null))
    a.isNotEmpty()

    b.size
    b.add(1)
    b.add(null)
    b.first()
    b.remove(1)
    b.removeAll(listOf(null))
    b.isNotEmpty()
}",,f913
fun foo(),{},,519f
"fun processModule(module: TestModule, info: FirOutputArtifact)","{
        val visitor = Visitor()
        for (firFile in info.mainFirFiles.values) {
            firFile.acceptChildren(visitor, firFile)
        }",,1632
No signature found,"fun Collection<FirElement>.check(typeName: String) {
        assertions.assertTrue(this.isEmpty()) {
            buildString {
                val count = size
                if (count == 1) {
                    appendLine(""One $typeName type was found:"")
                }",,6e1f
"fun visitElement(element: FirElement, data: FirElement)","{
            if (element is FirDiagnosticHolder) {
                for (coneType in element.diagnostic.coneTypes()) {
                    checkElementWithConeType(element, coneType)
                }",,1da5
"fun visitResolvedTypeRef(resolvedTypeRef: FirResolvedTypeRef, data: FirElement)","{
            visitElement(resolvedTypeRef, data)
            checkElementWithConeType(resolvedTypeRef, resolvedTypeRef.type)
            resolvedTypeRef.delegatedTypeRef?.let { visitElement(it, data) }",,a316
"fun visitErrorTypeRef(errorTypeRef: FirErrorTypeRef, data: FirElement)","{
            visitElement(errorTypeRef, data)
            errorTypeRef.delegatedTypeRef?.let { visitElement(it, data) }",,fb77
"fun visitLoopJump(loopJump: FirLoopJump, data: FirElement)","{
            visitElement(loopJump, data)
            if (loopJump.target.labeledElement is FirErrorLoop) {
                visitElement(loopJump.target.labeledElement, data)
            }",,ae3f
"fun visitImplicitTypeRef(implicitTypeRef: FirImplicitTypeRef, data: FirElement)","{
            detectedImplicitTypesParents += data
        }",,52ad
"fun checkElementWithConeType(element: FirElement, type: ConeKotlinType)","{
            when (checkConeType(type)) {
                ConeTypeStatus.TypeVariableFound -> detectedTypeVariableTypesParents += element
                ConeTypeStatus.StubFound -> detectedStubTypesParents += element
                null -> {}",// --------------------------------------------------------------------------------------------,8e71
fun checkConeType(type: ConeKotlinType),": ConeTypeStatus? {
            var typeVariableFound = false
            var stubTypeFound = false
            type.contains {
                when (it) {
                    is ConeTypeVariableType -> typeVariableFound = true
                    is ConeStubType -> stubTypeFound = true
                    else -> {}",,4132
No signature found,fun ConeDiagnostic.coneTypes(): List<ConeKotlinType> = w,,6e1f
fun processAfterAllModules(someAssertionWasFailed: Boolean),{},,b888
fun get(),"fun interface KSupplier<T> {
    : T
}","// !LANGUAGE: +KotlinFunInterfaceConstructorReference

// WITH_STDLIB
// TARGET_BACKEND: JVM

// DONT_TARGET_EXACT_BACKEND: JVM
//  ^ old JVM BE generates bogus code

// FILE: funInterfaceConstructorThrowsNpe.kt",7383
fun box(),": String {
    try {
        ks(J.fn)
        return ""ks(null) should throw NPE""
    }",,4f27
"fun <From, To> copyNotNull(from: List<From>, to: List<To>)","where From : To, <expr>To</expr> : Any {
}",// WITH_STDLIB,c854
fun foo(),{},// FIR_IDENTICAL,519f
fun bar(),"{
        counter = 1
        foo()
        Z.counter = 1
        Z.foo()
    }",,66c3
fun test(),"{
            counter = 1
            foo()
            Z.counter = 1
            Z.foo()
        }",,fe98
fun aFun(),"{
        withLambda {
            counter = 1
            foo()
            Z.counter = 1
            Z.foo()
        }",,2948
fun test(),"{
            counter = 1
            foo()
            Z.counter = 1
            Z.foo()
        }",,fe98
No signature found,"fun Z.test() {
    counter = 1
    foo()
    Z.counter = 1
    Z.foo()
}",,6e1f
No signature found,fun withLambda(f: () -> Unit) {},,6e1f
No signature found,"fun <T : PhaseContext> PhaseEngine<T>.runFir2Ir(input: FirOutput.Full): Fir2IrOutput {
    return this.runPhase(Fir2IrPhase, input)
}",,6e1f
fun o(),": String
}

abstract class Bar : Foo() {
    @JsName(""oStable"")
    abstract fun String.o(): String

    override : String {
        return ""O"".o()
    }","// EXPECTED_REACHABLE_NODES: 1252
// IGNORE_BACKEND: JS
// RUN_PLAIN_BOX_FUNCTION
// INFER_MAIN_MODULE

// MODULE: lib
// FILE: lib.kt",1549
No signature found,"fun String.o(): String {
        return this
    }",,6e1f
fun toIsoString(),"{
        assertPrints(25.nanoseconds.toIsoString(), ""PT0.000000025S"")
        assertPrints(120.3.milliseconds.toIsoString(), ""PT0.120300S"")
        assertPrints(30.5.seconds.toIsoString(), ""PT30.500S"")
        assertPrints(30.5.minutes.toIsoString(), ""PT30M30S"")
        assertPrints(86420.seconds.toIsoString(), ""PT24H0M20S"")
        assertPrints(2.days.toIsoString(), ""PT48H"")
        assertPrints(Duration.ZERO.toIsoString(), ""PT0S"")
        assertPrints(Duration.INFINITE.toIsoString(), ""PT9999999999999H"")
    }",,c64e
fun toStringDefault(),"{
        assertPrints(45.days, ""45d"")
        assertPrints(1.5.days, ""1d 12h"")
        assertPrints(1230.minutes, ""20h 30m"")
        assertPrints(920.minutes, ""15h 20m"")
        assertPrints(1.546.seconds, ""1.546s"")
        assertPrints(25.12.milliseconds, ""25.12ms"")
    }",,d022
fun toStringDecimals(),"{
        assertPrints(1230.minutes.toString(DurationUnit.DAYS, 2), ""0.85d"")
        assertPrints(1230.minutes.toString(DurationUnit.HOURS, 2), ""20.50h"")
        assertPrints(1230.minutes.toString(DurationUnit.MINUTES), ""1230m"")
        assertPrints(1230.minutes.toString(DurationUnit.SECONDS), ""73800s"")
    }",,ee89
fun parse(),"{
        val isoFormatString = ""PT1H30M""
        val defaultFormatString = ""1h 30m""
        val singleUnitFormatString = ""1.5h""
        val invalidFormatString = ""1 hour 30 minutes""

        assertPrints(Duration.parse(isoFormatString), ""1h 30m"")
        assertPrints(Duration.parse(defaultFormatString), ""1h 30m"")
        assertPrints(Duration.parse(singleUnitFormatString), ""1h 30m"")
        assertFails { Duration.parse(invalidFormatString) }",,f787
fun parseIsoString(),"{
        val isoFormatString = ""PT1H30M""
        val defaultFormatString = ""1h 30m""

        assertPrints(Duration.parseIsoString(isoFormatString), ""1h 30m"")
        assertFails { Duration.parseIsoString(defaultFormatString) }",,2ebe
No signature found,"fun <T> deserializeAndLoadState(
    component: PersistentStateComponent<T>,
    clazz: Class<T> = C",// FILE: ComponentSerializationUtil.java,6e1f
No signature found,"fun use(beforeRunTask: BeforeRunTask<*>) {
    if (<!USELESS_IS_CHECK!>beforeRunTask is PersistentStateComponent<*><!>) {
        deserializeAndLoadState(beforeRunTask)
    }",,6e1f
fun greet(),"{
        println(""Hello, ${name}",// MAIN_ARGS: [Pavel],01d6
fun main(args: Array<String>),"{
    Greeter(args[0]).greet()
}",,5b61
No signature found,"fun KtReturnExpression.getTargetFunctionDescriptor(context: BindingContext): FunctionDescriptor? {
    val targetLabel = getTargetLabel()
    if (targetLabel != null) return context[LABEL_TARGET, targetLabel]?.let { context[FUNCTION, it] }",,6e1f
No signature found,"fun KtReturnExpression.getTargetFunction(context: BindingContext): KtCallableDeclaration? {
    return getTargetFunctionDescriptor(context)?.let { DescriptorToSourceUtils.descriptorToDeclaration(it) as? KtCallableDeclaration }",,6e1f
No signature found,"fun KtElement.isUsedAsExpression(context: BindingContext): Boolean =
    c",,6e1f
No signature found,"fun KtElement.recordUsedAsExpression(trace: BindingTrace, value: Boolean) {
    if (isUsedAsExpression(trace.bindingContext)) return
    trace.record(USED_AS_EXPRESSION, this, value)
}",,6e1f
No signature found,fun KtExpression.isUsedAsResultOfLambda(context: BindingContext): Boolean = c,,6e1f
No signature found,fun KtExpression.isUsedAsStatement(context: BindingContext): Boolean = !,,6e1f
No signature found,"fun <C : ResolutionContext<C>> ResolutionContext<C>.recordDataFlowInfo(expression: KtExpression?) {
    if (expression == null) return

    val typeInfo = trace.get(EXPRESSION_TYPE_INFO, expression)
    if (typeInfo != null) {
        trace.record(EXPRESSION_TYPE_INFO, expression, typeInfo.replaceDataFlowInfo(dataFlowInfo))
    }",,6e1f
No signature found,"fun BindingTrace.recordScope(scope: LexicalScope, element: KtElement?) {
    if (element != null) {
        record(LEXICAL_SCOPE, element, scope.takeSnapshot() as LexicalScope)
    }",,6e1f
No signature found,"fun BindingContext.getDataFlowInfoAfter(position: PsiElement): DataFlowInfo {
    for (element in position.parentsWithSelf) {
        (element as? KtExpression)?.let {
            val parent = it.parent
            //TODO: it's a hack because KotlinTypeInfo with wrong DataFlowInfo stored for call expression after qualifier
            if (parent is KtQualifiedExpression && it == parent.selectorExpression) return@let null
            this[EXPRESSION_TYPE_INFO, it]
        }",,6e1f
No signature found,"fun BindingContext.getDataFlowInfoBefore(position: PsiElement): DataFlowInfo {
    for (element in position.parentsWithSelf) {
        (element as? KtExpression)
            ?.let { this[DATA_FLOW_INFO_BEFORE, it] }",,6e1f
No signature found,"fun KtExpression.getReferenceTargets(context: BindingContext): Collection<DeclarationDescriptor> {
    val targetDescriptor = if (this is KtReferenceExpression) context[REFERENCE_TARGET, this] else null
    return targetDescriptor?.let { listOf(it) }",,6e1f
No signature found,"fun KtTypeReference.getAbbreviatedTypeOrType(context: BindingContext) =
    c",,6e1f
No signature found,"fun KtTypeElement.getAbbreviatedTypeOrType(context: BindingContext): KotlinType? {
    return when (val parent = parent) {
        is KtTypeReference -> parent.getAbbreviatedTypeOrType(context)
        is KtNullableType -> {
            val outerType = parent.getAbbreviatedTypeOrType(context)
            if (this is KtNullableType) outerType else outerType?.makeNotNullable()
        }",,6e1f
No signature found,"fun <T : PsiElement> KtElement.getParentOfTypeCodeFragmentAware(vararg parentClasses: Class<out T>): T? {
    PsiTreeUtil.getParentOfType(this, *parentClasses)?.let { return it }",,6e1f
"fun getEnclosingDescriptor(context: BindingContext, element: KtElement)",": DeclarationDescriptor {
    val declaration =
        element.getParentOfTypeCodeFragmentAware(KtNamedDeclaration::class.java)
            ?: throw KotlinExceptionWithAttachments(""No parent KtNamedDeclaration for of type ${element.javaClass}",,55cd
"fun getEnclosingFunctionDescriptor(context: BindingContext, element: KtElement, skipInlineFunctionLiterals: Boolean)",": FunctionDescriptor? {
    var current = element
    while (true) {
        val functionOrClass = current.getParentOfTypeCodeFragmentAware(KtFunction::class.java, KtClassOrObject::class.java)
        val descriptor = context.get(DECLARATION_TO_DESCRIPTOR, functionOrClass)
        if (functionOrClass is KtFunction) {
            if (descriptor is FunctionDescriptor) {
                if (skipInlineFunctionLiterals && isInlineableFunctionLiteral(
                        ((functionOrClass as? KtFunctionLiteral)?.parent as? KtExpression) ?: functionOrClass,
                        context
                    )) {
                    current = functionOrClass
                }",,396f
"fun isInlineableFunctionLiteral(expression: KtExpression, context: BindingContext)",": Boolean {
    if (expression !is KtLambdaExpression && !(expression is KtNamedFunction && expression.name == null)) {
        return false
    }",,e660
fun box(),": String {
    return Example.MESSAGE
}","// JDK_RELEASE: 14

// FILE: Example.java",4f27
fun main(),"{
    takeMutable(<!NULLABILITY_MISMATCH_BASED_ON_JAVA_ANNOTATIONS!>J.foo()<!>)
}","// NULLABILITY_ANNOTATIONS: @org.jetbrains.annotations:warn
// DIAGNOSTICS: -UNUSED_PARAMETER

// FILE: ReadOnly.java",d987
fun takeMutable(l: MutableList<String>),{},,11b1
No signature found,"fun createClassLoader(baseClassLoader: ClassLoader?): ClassLoader
}

interface KJvmCompiledModuleInMemory : KJvmCompiledModule {
    val compilerOutputFiles: Map<String, ByteArray>
}",,6e1f
No signature found,"fun createClassLoader(baseClassLoader: ClassLoader?): ClassLoader =
        U",,6e1f
No signature found,"fun createClassLoader(baseClassLoader: ClassLoader?): ClassLoader =
        i",,6e1f
fun openFindResources(name: String),: Enumeration<URL> = s,,8b33
fun openFindResource(name: String),: URL? = s,,d764
No signature found,"fun singleClassLoader(fallbackLoader: ClassLoader, parentLoader: ClassLoader?): ClassLoader? {
            tailrec fun ClassLoader.isAncestorOf(other: ClassLoader?): Boolean = when {
                other == null -> false
                this === other -> true
                else -> isAncestorOf(other.parent)
            }",,6e1f
fun findClass(name: String),: Class<*> = t,,0c51
fun getResourceAsStream(name: String),": InputStream? =
        s",,bdb8
fun findResources(name: String),": Enumeration<URL> =
        i",,4d01
fun findResource(name: String),": URL? =
        s",,c17b
fun foo(),= 7,,519f
fun <T> ofType(x: T),: T = x,// !DIAGNOSTICS: -UNUSED_PARAMETER,8eb2
fun foo(),{},,519f
fun foo(s: String),{},,b751
fun plusK1(s: String),= s,"// TARGET_BACKEND: JVM
// JVM_TARGET: 1.8
// SAM_CONVERSIONS: INDY
// FULL_JDK

// We generate 1 clause in '$deserializeLambda' for each unique possible combination of deserialized lambda parameters
// (that's all information stored during indy lambda serialization, anyway).

// CHECK_BYTECODE_TEXT
// JVM_IR_TEMPLATES
// 12 java/lang/invoke/LambdaMetafactory
// 1 (LOOKUP|TABLE)SWITCH
// 4 java/lang/String\.equals

// FILE: multipleTopLevelFunRefs.kt",1b30
fun plusK2(s: String),= s,,25a6
fun plusK3(s: String),= s,,5a0a
fun plusK4(s: String),= s,,2f59
fun box(),": String {
    val t1 = roundtrip(Sam(::plusK1)).get(""O"")
    if (t1 != ""OK"") return ""Failed: t1='$t1'""

    val t1a = roundtrip(Sam(::plusK1)).get(""O"")
    if (t1a != ""OK"") return ""Failed: t1a='$t1a'""

    val t1b = roundtrip(Sam(::plusK1)).get(""O"")
    if (t1b != ""OK"") return ""Failed: t1b='$t1b'""

    val t2 = roundtrip(Sam(::plusK2)).get(""O"")
    if (t2 != ""OK"") return ""Failed: t2='$t2'""

    val t2a = roundtrip(Sam(::plusK2)).get(""O"")
    if (t2a != ""OK"") return ""Failed: t2a='$t2a'""

    val t3 = roundtrip(Sam(::plusK3)).get(""O"")
    if (t3 != ""OK"") return ""Failed: t3='$t3'""

    val t4 = roundtrip(Sam(::plusK4)).get(""O"")
    if (t4 != ""OK"") return ""Failed: t4='$t4'""

    val t4a = roundtrip(Sam(::plusK4)).get(""O"")
    if (t4a != ""OK"") return ""Failed: t4a='$t4a'""

    return ""OK""
}",,4f27
fun <T> roundtrip(x: T),": T {
    val out1 = ByteArrayOutputStream()
    ObjectOutputStream(out1).writeObject(x)
    return ObjectInputStream(ByteArrayInputStream(out1.toByteArray())).readObject() as T
}",,2092
fun foo(),": T
}

interface IFoo2<out T> {
    : T
}","// WITH_STDLIB
// WORKS_WHEN_VALUE_CLASS
// LANGUAGE: +ValueClasses, +GenericInlineClassParameter",519f
fun foo(),: X<String> = X,,519f
fun box(),": String {
    val t1: IFoo1<Any> = Test()
    val foo1 = t1.foo()
    if (foo1 !is X<*>) {
        throw AssertionError(""foo1 !is X: $foo1"")
    }",,4f27
No signature found,"fun <I : ControlFlowInfo<I, *, *>> PathAwareControlFlowInfo<I>.join(
    other: PathAwareControlFlowInfo<I>,
    node: CFGNode<*>
): PathAwareControlFlowInfo<I> = m",,6e1f
No signature found,"fun visitSubGraph(node: CFGNodeWithSubgraphs<*>, graph: ControlFlowGraph): Boolean =
        t",,6e1f
No signature found,"fun visitEdge(from: CFGNode<*>, to: CFGNode<*>, metadata: Edge, data: PathAwareControlFlowInfo<I>): PathAwareControlFlowInfo<I> {
        val label = metadata.label
        return when {
            // Finally exit is splitting labeled flow. So if we have data for different labels, then
            // data for each only goes along an edge with the same label, and the leftover data
            // is forwarded along an UncaughtExceptionPath edge, if any, to the next finally block.
            from is FinallyBlockExitNode -> {
                if (label == UncaughtExceptionPath) {
                    data.mutate {
                        for (other in from.followingNodes) {
                            val otherLabel = from.edgeTo(other).label
                            if (otherLabel != UncaughtExceptionPath) {
                                it.remove(otherLabel)
                            }",,6e1f
No signature found,"fun visitNode(
        node: CFGNode<*>,
        data: PathAwareControlFlowInfo<I>
    ): PathAwareControlFlowInfo<I> = d",,6e1f
No signature found,"fun <T> withPropertySymbol(crossinline action: KtAnalysisSession.(KtPropertySymbol) -> T): T =
        c",,6e1f
No signature found,"fun <T> withAccessorSymbol(crossinline action: KtAnalysisSession.(KtPropertyAccessorSymbol) -> T): T =
        p",,6e1f
No signature found,fun String.abiName() = i,,6e1f
fun getName(),: String = _,,4692
fun hasTypeParameters(),": Boolean =
        h",,2c56
fun getTypeParameterList(),: PsiTypeParameterList? = _,,8dd2
fun getTypeParameters(),: Array<PsiTypeParameter> = _,,5399
fun isVarArgs(),: Boolean = f,,b8ca
fun computeThrowsList(builder: LightReferenceListBuilder),"{
        withAccessorSymbol { accessorSymbol ->
            accessorSymbol.computeThrowsList(
                builder,
                this@SymbolLightAccessorMethod,
                containingClass,
                accessorSite.toOptionalFilter(),
            )
        }",,620b
fun computeModifiers(modifier: String),": Map<String, Boolean>? = w",,69d8
fun isStatic(),: Boolean = w,,2f24
fun getModifierList(),: PsiModifierList = _,,6d4d
fun isConstructor(),: Boolean = f,,b602
fun isDeprecated(),: Boolean = _,,b4f8
fun getNameIdentifier(),: PsiIdentifier = K,,0a93
fun forceBoxedReturnType(propertySymbol: KtPropertySymbol),": Boolean {
        return propertySymbol.returnType.isPrimitive &&
                propertySymbol.getAllOverriddenSymbols().any { overriddenSymbol ->
                    !overriddenSymbol.returnType.isPrimitive
                }",,6cad
fun getReturnType(),: PsiType = _,,a725
fun suppressWildcards(),": Boolean? =
        w",,3679
No signature found,"fun isEquivalentTo(another: PsiElement?): Boolean {
        return super.isEquivalentTo(another) || basicIsEquivalentTo(this, another as? PsiField)
    }",,6e1f
No signature found,"fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (other !is SymbolLightAccessorMethod ||
            other.isGetter != isGetter ||
            other.isTopLevel != isTopLevel ||
            other.suppressStatic != suppressStatic ||
            other.ktModule != ktModule
        ) return false

        if (propertyAccessorDeclaration != null || other.propertyAccessorDeclaration != null) {
            return propertyAccessorDeclaration == other.propertyAccessorDeclaration
        }",,6e1f
fun hashCode(),: Int = p,,6874
fun getParameterList(),: PsiParameterList = _,,5ccf
fun isValid(),": Boolean =
        s",,a2fc
fun isOverride(),: Boolean = _,,bb34
fun getDefaultValue(),: PsiAnnotationMemberValue? = _,,403d
fun getText(),": String {
        return lightMemberOrigin?.auxiliaryOriginalElement?.text ?: super.getText()
    }",,dac9
fun getTextOffset(),": Int {
        return lightMemberOrigin?.auxiliaryOriginalElement?.textOffset ?: super.getTextOffset()
    }",,ae25
fun getTextRange(),": TextRange {
        return lightMemberOrigin?.auxiliaryOriginalElement?.textRange ?: super.getTextRange()
    }",,b737
fun f(),": String? {
    return ""Hello World""
  }",,f6fb
No signature found,"fun foo(x: String?, y: Any?) = x",,6e1f
fun foo(),{},"// TARGET_BACKEND: JVM
// WITH_REFLECT",519f
fun box(),": String {
    val ann = A::class.members.single { it.name == ""foo"" }",,4f27
No signature found,fun test(a: `$Test`.`$Inner`) {},"// FIR_BLOCKED: LC don't support names with $
// CORRECT_ERROR_TYPES

// FILE: $Test.java",6e1f
No signature found,fun test(a: `Test$`.`Inner$`) {},,6e1f
No signature found,"fun <T, E> foo(x: (T) -> E) {}",,6e1f
No signature found,"fun <T, E> foo2(x: (A, T) -> E) {}",,6e1f
fun baz(x: String),: Int = n,,e90a
fun bar(x: String),: Int = n,,4de0
fun main(),"{
    foo(::bar)
    foo(A()::baz)
    foo2(A::baz)
}",,d987
No signature found,"fun inlineRun(block: () -> Unit) {
    contract {
        callsInPlace(block, InvocationKind.AT_MOST_ONCE)
    }",// !DUMP_CFG,6e1f
No signature found,"fun myRun(block: () -> Unit) {
    contract {
        callsInPlace(block, InvocationKind.AT_MOST_ONCE)
    }",,6e1f
fun test_1(),"{
    val x: Int
    inlineRun {
        x = 1
    }",,dda0
fun test_2(),"{
    val x: Int
    myRun {
        x = 1
    }",,bb80
No signature found,"fun check(c: Class<*>, s: String) {
    if (c.toString() != s) error(""Fail, expected: $s, actual: $c"")
}","// WITH_STDLIB
// TARGET_BACKEND: JVM
// WORKS_WHEN_VALUE_CLASS
// LANGUAGE: +ValueClasses",6e1f
fun <reified T> reifiedCheck(asString: String),"{
    check(T::class.java, asString)
}",,716d
fun box(),": String {
    val i = IcInt(0)
    val l = IcLong(0)
    val a = IcAny(""foo"")
    val o = IcOverIc(IcLong(0))

    check(i.javaClass, ""class root.IcInt"")
    check(l.javaClass, ""class root.IcLong"")
    check(a.javaClass, ""class root.IcAny"")
    check(o.javaClass, ""class root.IcOverIc"")
    check(1u.javaClass, ""class kotlin.UInt"")

    check(i::class.java, ""class root.IcInt"")
    check(l::class.java, ""class root.IcLong"")
    check(a::class.java, ""class root.IcAny"")
    check(o::class.java, ""class root.IcOverIc"")
    check(1u::class.java, ""class kotlin.UInt"")

    reifiedCheck<IcInt>(""class root.IcInt"")
    reifiedCheck<IcLong>(""class root.IcLong"")
    reifiedCheck<IcAny>(""class root.IcAny"")
    reifiedCheck<IcOverIc>(""class root.IcOverIc"")
    reifiedCheck<UInt>(""class kotlin.UInt"")

    val arrI = arrayOf(i)
    check(arrI[0].javaClass, ""class root.IcInt"")

    val arrL = arrayOf(l)
    check(arrL[0].javaClass, ""class root.IcLong"")

    val arrA = arrayOf(a)
    check(arrA[0].javaClass, ""class root.IcAny"")

    val arrO = arrayOf(o)
    check(arrO[0].javaClass, ""class root.IcOverIc"")

    val arrU = arrayOf(1u)
    check(arrU[0].javaClass, ""class kotlin.UInt"")

    return ""OK""
}",,4f27
No signature found,fun <S : T> takeFoo(foo: Foo<in S>) {},// FIR_IDENTICAL,6e1f
No signature found,"fun <K : Out<L>, L : N, N: Number> main() {
    val foo = Foo<K>()
    Bar<Out<Int>>().takeFoo(foo) // error in 1.3.72, no error in 1.4.31
}",,6e1f
No signature found,"fun test1(x: ClassLevel1?) {
    if (x!! is ClassLevel2) {
        <!DEBUG_INFO_EXPRESSION_TYPE(""ClassLevel1 & ClassLevel1?"")!>x<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""ClassLevel1 & ClassLevel1?"")!>x<!>.<!UNRESOLVED_REFERENCE!>test2<!>()
    }","// !DIAGNOSTICS: -UNUSED_EXPRESSION
// SKIP_TXT",6e1f
No signature found,"fun case_2(x: Any?) {
    (x as ClassLevel1?)!!
    <!DEBUG_INFO_EXPRESSION_TYPE(""ClassLevel1? & kotlin.Any?"")!>x<!>
    <!DEBUG_INFO_EXPRESSION_TYPE(""ClassLevel1? & kotlin.Any?"")!>x<!><!UNSAFE_CALL!>.<!>test1()
}",,6e1f
No signature found,"fun case_3(x: Any?) {
    if (x as ClassLevel1? is ClassLevel1) {
        <!DEBUG_INFO_EXPRESSION_TYPE(""ClassLevel1? & kotlin.Any?"")!>x<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""ClassLevel1? & kotlin.Any?"")!>x<!><!UNSAFE_CALL!>.<!>test1()
    }",// TESTCASE NUMBER: 3,6e1f
No signature found,"fun case_4(x: Any?) {
    if ((x as Class).prop_8 != null) {
        <!DEBUG_INFO_EXPRESSION_TYPE(""Class & kotlin.Any & kotlin.Any?"")!>x<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""Class & kotlin.Any?""), DEBUG_INFO_SMARTCAST!>x<!>.prop_8<!UNSAFE_CALL!>.<!>prop_8
    }",,6e1f
fun case_5(x: Class),"{
    if (x<!UNNECESSARY_NOT_NULL_ASSERTION!>!!<!>.prop_8 != null) {
        <!DEBUG_INFO_EXPRESSION_TYPE(""Class"")!>x<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""Class"")!>x<!>.prop_8<!UNSAFE_CALL!>.<!>prop_8
    }",,8a54
fun foo(),"{/* DeclarationStructureElement */
    println("""")
}",,519f
fun x(),"{
    A.B.<expr>C()</expr>.x
}",,7869
fun test(),"{

}",,fe98
fun foo(),": String
}

private inline fun getHasFoo(s: String) = o",,519f
fun foo(),: String = s,,519f
fun box(),": String {
    val hasFoo = getHasFoo(""zzz"")
    checkClass(
        hasFoo::class,
        expectedQualifiedName = null,
        expectedSimpleName = null, // KT-64460: simpleName is explicitly prohibited in NATIVE backend
        expectedToStringName = ""class codegen.kclass.kclass0.MainKt\$1"",
        expectedInstance = hasFoo,
        expectedNotInstance = Any()
    )
    return ""OK""
}",,4f27
No signature found,"fun checkClass(
    clazz: KClass<*>,
    expectedQualifiedName: String?, expectedSimpleName: String?, expectedToStringName: String,
    expectedInstance: Any, expectedNotInstance: Any?
) {
    assertEquals(expectedQualifiedName, clazz.qualifiedName)
    assertEquals(expectedSimpleName, clazz.simpleName)
    assertEquals(expectedToStringName, clazz.toString())

    assertTrue(clazz.isInstance(expectedInstance))
    if (expectedNotInstance != null) assertTrue(!clazz.isInstance(expectedNotInstance))
}",,6e1f
"fun areTypesMayBeLowerAndUpperBoundsOfSameFlexibleTypeByMutability(a: ConeKotlinType, b: ConeKotlinType)",": Boolean {
        val classId = a.classId ?: return false
        val possiblePairBound = (baseCollectionToMutableEquivalent[classId] ?: mutableCollectionToBaseCollection[classId]) ?: return false

        return possiblePairBound == b.classId
    }",,e4b1
fun getBaseBoundFqNameByMutability(a: ConeKotlinType),": ClassId? {
        val classId = a.classId ?: return null

        if (classId in baseCollectionToMutableEquivalent) return classId

        return mutableCollectionToBaseCollection[classId]
    }",// We consider base bounds as not mutable collections,1d36
No signature found,fun <T> T.id() = t,"// TARGET_BACKEND: JVM_IR
// TARGET_BACKEND: NATIVE
// TARGET_BACKEND: WASM",6e1f
fun box(),": String {
    // STOP_EVALUATION_CHECKS
    if (toStringDouble1.id() != ""1.0"")    return ""Fail 1.1""
    if (toStringDouble2.id() != ""2.0"")    return ""Fail 1.2""
    if (toStringDouble3.id() != ""1.5"")    return ""Fail 1.3""

    if (toStringFloat1.id() != ""1.0"")     return ""Fail 2.1""
    if (toStringFloat2.id() != ""2.0"")     return ""Fail 2.2""
    if (toStringFloat3.id() != ""1.5"")     return ""Fail 2.3""

    // START_EVALUATION_CHECKS
    val localDoubleToString = 1.0.<!EVALUATED{IR}",,4f27
fun foo(),"@JsName(""foo"")
    fun bar()
}

interface J {
    

    fun bar()
}",// FIR_IDENTICAL,519f
fun bar(),<!> {},,66c3
fun foo(),<!> {},,519f
No signature found,"fun Project.isPluginApplied(pluginId: String): Boolean {
    val result = CompletableFuture<Boolean>()
    pluginManager.withPlugin(pluginId) {
        check(!result.isCompleted) {
            ""Plugin '$pluginId' was applied too late. It was expected to be applied during build script evaluation""
        }",,6e1f
No signature found,"fun bar(block: () -> String) : String {
    return block()
}",,6e1f
fun bar2(),": String {
    while (true) break
    return bar { return ""def"" }",,3846
"fun foobar(x: String, y: String, z: String)",= x,,b3c1
fun box(),": String {
    val test = foobar(""abc"", bar2(), ""ghi"")
    return if (test == ""abcdefghi"")
        ""OK""
    else ""Failed, test=$test""
}",,4f27
fun listProfileFiles(statisticsFolder: File),": List<File> {
            return Files.newDirectoryStream(statisticsFolder.toPath()).use { dirStream ->
                dirStream.map { it.toFile() }",,61f0
fun startBuildSession(buildUid: String),"{
        buildSession = BuildSession(buildUid)
    }",,eda6
fun isBuildSessionStarted(),= b,,4de4
fun getActiveBuildId(),= b,,cb52
fun storeMetricsIntoFile(buildId: String),"{
        try {
            statisticsFolder.mkdirs()
            val file = File(statisticsFolder, buildId + PROFILE_FILE_NAME_SUFFIX)

            FileOutputStream(file, true).bufferedWriter().use {
                metricsContainer.flush(it)
            }",,3667
fun clearOldFiles(),"{
        // Get list of existing files. Try to create folder if possible, return from function if failed to create folder
        val fileCandidates = listProfileFiles(statisticsFolder)

        for ((index, file) in fileCandidates.withIndex()) {
            val toDelete = if (index < fileCandidates.size - maxProfileFiles)
                true
            else {
                val lastModified = file.lastModified()
                (lastModified > 0) && (System.currentTimeMillis() - maxFileAge > lastModified)
            }",,ce61
fun finishBuildSession(),"{
        buildSession?.also {
            storeMetricsIntoFile(it.buildUid)
        }",,0850
No signature found,"fun report(metric: BooleanMetrics, value: Boolean, subprojectName: String?, weight: Long?) =
        m",,6e1f
No signature found,"fun report(metric: NumericalMetrics, value: Long, subprojectName: String?, weight: Long?) =
        m",,6e1f
No signature found,"fun report(metric: StringMetrics, value: String, subprojectName: String?, weight: Long?) =
        m",,6e1f
No signature found,"fun <K : Any?, V : Any?> returnTypeShared(field: KMutableProperty1<K, V>): KType {
    return field.returnType
}",,6e1f
fun not(),"= """,// EXPECTED_REACHABLE_NODES: 1284,df73
fun box(),= !,,4f27
No signature found,fun <!EXPOSED_FUNCTION_RETURN_TYPE!>invalid1<!>() = r,,6e1f
No signature found,fun <!EXPOSED_FUNCTION_RETURN_TYPE!>invalid2<!>() = M,,6e1f
No signature found,fun <!EXPOSED_FUNCTION_RETURN_TYPE!>invalid3<!>() = M,,6e1f
No signature found,fun <!EXPOSED_FUNCTION_RETURN_TYPE!>invalid4<!>() = r,,6e1f
No signature found,fun <!EXPOSED_FUNCTION_RETURN_TYPE!>invalid5<!>() = r,,6e1f
fun invalid5a(),= r,,cf9c
fun valid1(),= o,,64ce
fun valid2(),= o,,3262
fun valid3(),= M,,f048
fun valid4(),: My<Base> = M,,c824
fun valid5(),= r,,5f03
fun valid5a(),= M,,1389
fun valid6(),= r,,94fc
fun valid6a(),= r,,6727
fun valid6b(),= M,,3147
fun valid7(),= r,,4a22
fun box(),": String {
    val myThread: Thread = thread(start = false) {  }",// JDK_RELEASE: 11,4f27
"fun foo(
    string: String, int: Int,
    strings: List<String>, ints: List<Int>,

    aString: A<String>, aInt: A<Int>,
    aOutString: A<out String>, aOutInt: A<out Int>,
    aOutString2: AOut<String>, aOutInt2: AOut<Int>,
    aInString: A<in String>, aInInt: A<in Int>,
    aInString2: AIn<String>, aInInt2: AIn<Int>,

    bString: B<String>, bInt: B<Int>,
    bOutString: B<out String>, bOutInt: B<out Int>,
    bOutString2: BOut<String>, bOutInt2: BOut<Int>,
    bInString: B<in String>, bInInt: B<in Int>,
    bInString2: BIn<String>, bInInt2: BIn<Int>,

    a2: A2,

    e: E,
    i: I,

    ac: A<C>, ad: A<D>,

    tSub1: TSub1,
    tSub2: TSub2,

    aListInt: A<List<Int>>,
    aSetInt: A<Set<Int>>,
    aListString: A<List<String>>,

    mutableListAny: MutableList<Any>,
    listString: List<String>,
)","{
    ""a"" == ""b""
    1 == 2
    <!EQUALITY_NOT_APPLICABLE!>"""" == 2<!>

    <!EQUALITY_NOT_APPLICABLE!>string == int<!>
    strings == ints

    aString == aInt
    aOutString == aOutInt
    aInString == aInInt
    aOutString == aInInt
    aInString == aOutInt
    aOutString == aInt
    aInString == aInt
    aOutString2 == aOutInt2
    aInString2 == aInInt2
    aOutString2 == aInInt2
    aInString2 == aOutInt2
    aString == a2

    bString == bInt
    bOutString == bOutInt
    bInString == bInInt
    bOutString == bInInt
    bInString == bOutInt
    bOutString == bInt
    bInString == bInt
    bOutString2 == bOutInt2
    bInString2 == bInInt2
    bOutString2 == bInInt2
    bInString2 == bOutInt2

    <!INCOMPATIBLE_ENUM_COMPARISON_ERROR!>e == i<!>
    <!EQUALITY_NOT_APPLICABLE!>"""" == i<!>
    ac == ad

    tSub1 == tSub2

    aString == bString

    aListInt == aSetInt
    aSetInt == aListString
    aListString == aListInt

    aString == aListString
    bString == aListString

    mutableListAny == listString
}",,f6ce
fun box(),": String {
    val st = ST<String>(""O"", ""K"")
    return st.x1 + st.x2
}",,4f27
fun testFor(),"{
    val xs = IntArray(10) { i -> i }",// !LANGUAGE: +AllowBreakAndContinueInsideWhen,b009
fun testWhile(),"{
    var k = 0
    while (k < 10) {
        when {
            k > 2 -> break
        }",,baba
fun testDoWhile(),"{
    var k = 0
    do {
        when {
            k > 2 -> break
        }",,e88b
fun box(),": String {
    testFor()
    testWhile()
    testDoWhile()

    return ""OK""
}",,4f27
fun foo(),"{
        Outer.<!INVISIBLE_REFERENCE!>PrivateNested<!>()
        super.<!INVISIBLE_REFERENCE!>PrivateInner<!>()

        Outer.ProtectedNested()
        super.ProtectedInner()

        Outer.PublicNested()
        super.PublicInner()
    }",,519f
fun foo(),"{
    Outer.<!INVISIBLE_REFERENCE!>PrivateNested<!>()
    Outer().<!INVISIBLE_REFERENCE!>PrivateInner<!>()

    Outer.<!INVISIBLE_REFERENCE!>ProtectedNested<!>()
    Outer().<!INVISIBLE_REFERENCE!>ProtectedInner<!>()

    Outer.PublicNested()
    Outer().PublicInner()
}",,519f
"fun check(declaration: FirClass, context: CheckerContext, reporter: DiagnosticReporter)","{
        for (superType in declaration.superTypeRefs) {
            if (superType.coneType is ConeDynamicType) {
                reporter.reportOn(superType.source, FirErrors.DYNAMIC_SUPERTYPE, context)
            }",,718b
No signature found,"fun build(binaryModuleData: BinaryModuleData, init: Builder.() -> Unit = {",,6e1f
fun dependency(vararg path: Path),"{
            filtersMap.getValue(binaryModuleData.regular) += path
        }",,2b5d
"fun dependency(moduleData: FirModuleData, vararg path: Path)","{
            filtersMap.getOrPut(moduleData) {
                allRegularDependencies.add(moduleData)
                mutableSetOf()
            }",,b874
fun dependency(vararg path: String),"{
            path.mapTo(filtersMap.getValue(binaryModuleData.regular)) { Paths.get(it) }",,0f23
fun dependencies(paths: Collection<String>),"{
            paths.mapTo(filtersMap.getValue(binaryModuleData.regular)) { Paths.get(it) }",,27eb
"fun dependencies(moduleData: FirModuleData, paths: Collection<String>)","{
            paths.mapTo(
                filtersMap.getOrPut(moduleData) {
                    allRegularDependencies.add(moduleData)
                    mutableSetOf()
                }",,53bb
fun friendDependencies(paths: Collection<String>),"{
            paths.mapTo(filtersMap.getValue(binaryModuleData.friends)) { Paths.get(it) }",,c767
fun dependsOnDependencies(paths: Collection<String>),"{
            paths.mapTo(filtersMap.getValue(binaryModuleData.dependsOn)) { Paths.get(it) }",,c3a0
fun dependencies(paths: Collection<Path>),"{
            filtersMap.getValue(binaryModuleData.regular) += paths
        }",,8424
fun friendDependencies(paths: Collection<Path>),"{
            filtersMap.getValue(binaryModuleData.friends) += paths
        }",,5e1b
fun dependsOnDependencies(paths: Collection<Path>),"{
            filtersMap.getValue(binaryModuleData.dependsOn) += paths
        }",,b758
fun sourceFriendsDependencies(modules: Collection<FirModuleData>),"{
            allFriendsDependencies += modules
        }","// Potentially, a part of a public API, so we leave it even while it's unused",0d20
fun sourceDependsOnDependencies(modules: Collection<FirModuleData>),"{
            allDependsOnDependencies += modules
        }","// Potentially, a part of a public API, so we leave it even while it's unused",bfaf
fun build(),": DependencyListForCliModule {
            val pathFiltersMap: MutableMap<FirModuleData, LibraryPathFilter> = filtersMap
                .filterValues { it.isNotEmpty() }",,5bf9
fun bind(owner: Owner),"}

/**
 * A symbol whose [owner] is either [IrFile] or [IrExternalPackageFragment].
 */
sealed interface IrPackageFragmentSymbol : IrSymbol {
    @ObsoleteDescriptorBasedAPI
    override val descriptor: PackageFragmentDescriptor
}",,4cb1
fun check(),"{
        assert(false)
    }","// TARGET_BACKEND: JVM
// ASSERTIONS_MODE: jvm
// WITH_STDLIB
// WITH_COROUTINES",c89c
fun enableAssertions(),": Checker {
    val loader = Dummy::class.java.classLoader
    loader.setPackageAssertionStatus(""suspendFunctionAssertionsEnabled"", true)
    val c = loader.loadClass(""suspendFunctionAssertionsEnabled.Checker"")
    return c.newInstance() as Checker
}",,09a4
No signature found,"fun builder(c: suspend () -> Unit) {
    c.startCoroutine(EmptyContinuation)
}",,6e1f
fun box(),": String {
    var c = enableAssertions()
    try {
        builder { c.check() }",,4f27
fun x(),= 1,// DO_NOT_CHECK_NON_PSI_SYMBOL_RESTORE_K1,7869
"fun <R, D> acceptChildren(visitor: FirVisitor<R, D>, data: D)","{
        for (argument in arguments) {
            argument.accept(visitor, data)
        }",,b2f8
"fun <D> transformArguments(transformer: FirTransformer<D>, data: D)",": FirArgumentList

    override fun <D> transformChildren(transformer: FirTransformer<D>, data: D): FirElement {
        transformArguments(transformer, data)
        return this
    }",,24ab
"fun <D> transformArguments(transformer: FirTransformer<D>, data: D)",": FirArgumentList {
        mapping = mapping.mapKeys { (k, _) -> k.transformSingle(transformer, data) }",,24ab
fun computeMapping(),": LinkedHashMap<FirExpression, FirValueParameter> {
        @Suppress(""UNCHECKED_CAST"")
        return _mapping.filterValues { it != null }",,4cff
"fun <D> transformArguments(transformer: FirTransformer<D>, data: D)",": FirResolvedArgumentListForErrorCall {
        _mapping = _mapping.mapKeys { (k, _) -> k.transformSingle(transformer, data) }",,24ab
fun testAlreadyGenerated(),"{
        val testDir = KtTestUtil.tmpDir(""testDirectory"")
        val newFile = File(testDir, ""ProtoCompareGenerated.kt"")
        GenerateProtoBufCompare.generate(newFile, forbidGenerationOnTeamcity = false)

        KotlinTestUtils.assertEqualsToFile(newFile, FileUtil.loadFile(GenerateProtoBufCompare.DEST_FILE))
    }",,3515
fun memberFunction(),{},"// !LANGUAGE: +RepeatableAnnotations
// TARGET_BACKEND: JVM_IR
// WITH_STDLIB
// FULL_JDK
// JVM_TARGET: 1.8
// FILE: box.kt",299f
No signature found,"fun topLevelFunction2(
    @A(""parameter1"") @A(""parameter2"")
    parameter: String
) {}",,6e1f
No signature found,"fun foo(child: Child<*>) {
    child.foo
}",// ISSUE: KT-66638,6e1f
fun b_fun(),{},"// FIR_IDENTICAL
// !DIAGNOSTICS: -UNUSED_VARIABLE",0c55
fun test(param: String),"{

    val local_val = 4
    val bar = fun B.(fun_param: Int) {
        param.length
        b_fun()
        val inner_bar = local_val + fun_param

        <!UNRESOLVED_REFERENCE!>bar<!>
    }",,659e
fun foo(),= 1,,519f
fun invoke(),= 1,,0a26
fun invoke(),= 1,,0a26
fun invoke(),= 1,,0a26
"fun test(with: WithClassObject, without: WithoutClassObject, obj: Obj)","{
    with.<!UNRESOLVED_REFERENCE!>Nested<!>()
    with.<!UNRESOLVED_REFERENCE!>NestedWithClassObject<!>
    with.<!UNRESOLVED_REFERENCE!>NestedWithClassObject<!>()
    with.<!UNRESOLVED_REFERENCE!>NestedWithClassObject<!>.foo()
    with.<!UNRESOLVED_REFERENCE!>NestedEnum<!>.A
    with.<!UNRESOLVED_REFERENCE!>NestedObj<!>
    with.<!UNRESOLVED_REFERENCE!>NestedObj<!>()
    with.<!UNRESOLVED_REFERENCE!>NestedObj<!>.foo()

    without.<!UNRESOLVED_REFERENCE!>Nested<!>()
    without.<!UNRESOLVED_REFERENCE!>NestedWithClassObject<!>
    without.<!UNRESOLVED_REFERENCE!>NestedWithClassObject<!>()
    without.<!UNRESOLVED_REFERENCE!>NestedWithClassObject<!>.foo()
    without.<!UNRESOLVED_REFERENCE!>NestedEnum<!>.A
    without.<!UNRESOLVED_REFERENCE!>NestedObj<!>
    without.<!UNRESOLVED_REFERENCE!>NestedObj<!>()
    without.<!UNRESOLVED_REFERENCE!>NestedObj<!>.foo()

    obj.<!UNRESOLVED_REFERENCE!>Nested<!>()
    obj.<!UNRESOLVED_REFERENCE!>NestedWithClassObject<!>
    obj.<!UNRESOLVED_REFERENCE!>NestedWithClassObject<!>()
    obj.<!UNRESOLVED_REFERENCE!>NestedWithClassObject<!>.foo()
    obj.<!UNRESOLVED_REFERENCE!>NestedEnum<!>.A
    obj.<!UNRESOLVED_REFERENCE!>NestedObj<!>
    obj.<!UNRESOLVED_REFERENCE!>NestedObj<!>()
    obj.<!UNRESOLVED_REFERENCE!>NestedObj<!>.foo()
}",,df09
fun bas(),: Int = n,,85ea
fun bas2(),: Int = n,,9a97
fun bar(),= b,,66c3
fun bar(i: Int),= 2,,6102
fun bar2(),= b,,3846
fun bar2(i: Int),= 2,,f9bb
fun bas(),: Int = n,,85ea
fun bas2(),: Int = n,,9a97
fun bar(),= b,,66c3
fun bar(i: Int),= 2,,6102
fun bar2(),= b,,3846
fun bar2(i: Int),= 2,,f9bb
fun bas(),: Int = n,,85ea
fun bas2(),: Int = n,,9a97
fun bar(),= b,,66c3
fun bar(i: Int),= 2,,6102
fun bar2(),= <,,3846
fun bar2(i: Int),= 2,,f9bb
fun bas(),: Int = n,,85ea
fun bas2(),: Int = n,,9a97
fun bar(),= b,,66c3
fun bar(i: Int),= 2,,6102
fun bar2(),= <,,3846
fun bar2(i: Int),= 2,,f9bb
fun bas(),: Int = n,,85ea
fun bas2(),: Int = n,,9a97
fun bar(),= b,,66c3
fun bar(i: Int),= 2,,6102
fun bar2(),: Int = b,,3846
fun bar2(i: Int),= 2,,f9bb
fun getInstance(project: Project),= C,,f92b
fun fib(a: Int),: Int = i,,995b
fun testIndexArrayElementGetting(),"{
        clazz.intArr[8].value = 3
        val i = fib(4)
        val j = fib(5)
        assertEquals(3, clazz.intArr[i + j].value)
        assertEquals(3, clazz.intArr[fib(4) + fib(5)].value)
        clazz.longArr[3].value = 100
        assertEquals(100, clazz.longArr[fib(6) - fib(5)].value)
        assertEquals(100, clazz.longArr[(fib(6) + fib(4)) % 8].value)
        assertEquals(100, clazz.longArr[(fib(6) + fib(4)) % 8].value)
        assertEquals(100, clazz.longArr[(fib(4) + fib(5)) % fib(5)].value)
    }",,64f7
fun box(),": String {
    val testClass = IndexArrayElementGetterTest()
    testClass.testIndexArrayElementGetting()
    return ""OK""
}",,4f27
"fun visitAnnotation(desc: String, visible: Boolean)","fun transformMetadataInClassFile(bytes: ByteArray, transform: (fieldName: String, value: Any?) -> Any?): ByteArray {
    val writer = ClassWriter(0)
    ClassReader(bytes).accept(object : ClassVisitor(Opcodes.API_VERSION, writer) {
        override : AnnotationVisitor {
            val superVisitor = super.visitAnnotation(desc, visible)
            if (desc == JvmAnnotationNames.METADATA_DESC) {
                return object : AnnotationVisitor(Opcodes.API_VERSION, superVisitor) {
                    override fun visit(name: String, value: Any) {
                        super.visit(name, transform(name, value) ?: value)
                    }",,56d4
fun visitArray(name: String),": AnnotationVisitor {
                        val entries = arrayListOf<String>()
                        val arrayVisitor = { super.visitArray(name) }",,4f10
No signature found,"fun visit(name: String?, value: Any) {
                                entries.add(value as String)
                            }",,6e1f
fun visitEnd(),"{
                                @Suppress(""UNCHECKED_CAST"")
                                val result = transform(name, entries.toTypedArray()) as Array<String>? ?: entries.toTypedArray()
                                if (result.isEmpty()) return
                                with(arrayVisitor()) {
                                    for (value in result) {
                                        visit(null, value)
                                    }",,fec4
fun test(x: Boolean),"{
    when (<expr>x</expr>) {}",,932e
fun box(),": String {
    val prop = ::state

    assertEquals("""", prop.getter.invoke())
    assertEquals("""", prop.getter())

    prop.setter(""OK"")

    return prop.get()
}","// TARGET_BACKEND: JVM

// WITH_REFLECT",4f27
fun bar1(x : Season),": String {
        when (x) {
            Season.WINTER, Season.SPRING -> return ""winter_spring""
            Season.SPRING -> return ""spring""
            Season.SUMMER -> return ""summer""
            else -> return ""autumn""
        }",,8293
fun bar2(y : Season),": String {
        return bar3(y) { x ->
            when (x) {
                Season.WINTER, Season.SPRING -> ""winter_spring""
                Season.SPRING -> ""spring""
                Season.SUMMER -> ""summer""
                else -> ""autumn""
            }",,a749
No signature found,"fun bar3(x : Season, block : (Season) -> String) = b",,6e1f
No signature found,"fun renderReference(symbol: FirBasedSymbol<*>): String {
        if (symbol !is FirCallableSymbol) return super.renderReference(symbol)
        return symbol.callableId.toString() + if (symbol !is FirEnumEntrySymbol && symbol.isStatic) ""*s"" else """"
    }",,6e1f
No signature found,"fun t(addCommaWarning: <expr>@Anno</expr> Boolean) {

}",// LOOK_UP_FOR_ELEMENT_OF_TYPE: org.jetbrains.kotlin.psi.KtAnnotationEntry,6e1f
fun foo(),= A,// FIR_IDENTICAL,519f
fun bar(),= A,,66c3
"fun main(b: B, c: C)","{
    b.foo()<!UNSAFE_CALL!>.<!>length
    b.foo()?.length
    b.foo2()<!UNSAFE_CALL!>.<!>length
    b.foo2()?.length
    b.foo3()<!UNSAFE_CALL!>.<!>length
    b.foo3()?.length
    <!RECEIVER_NULLABILITY_MISMATCH_BASED_ON_JAVA_ANNOTATIONS!>b.foo4()<!>.length
    b.foo4()?.length

    b.bar(<!NULL_FOR_NONNULL_TYPE!>null<!>)
    b.bar("""")
    b.bar2(<!NULL_FOR_NONNULL_TYPE!>null<!>)
    b.bar2("""")
    b.bar3(<!NULL_FOR_NONNULL_TYPE!>null<!>)
    b.bar3("""")
    b.bar4(<!NULLABILITY_MISMATCH_BASED_ON_JAVA_ANNOTATIONS!>null<!>)
    b.bar4("""")

    c.foo4()<!UNSAFE_CALL!>.<!>length
    c.foo4()?.length
    c.bar4(<!NULL_FOR_NONNULL_TYPE!>null<!>)
    c.bar4("""")
}","// FIR_IDENTICAL
// !DIAGNOSTICS: -UNUSED_VARIABLE -UNUSED_PARAMETER
// JSR305_GLOBAL_REPORT: warn
// JSR305_MIGRATION_REPORT: strict

// FILE: A.java",f1fa
fun exitProcess(status: Int),": Nothing {
    kotlin.system.exitProcess(0)
}",,3b2d
fun <T> produce(),: T = T,,f2cd
fun foo(),"{
    var c: MutableSet<String>? = null
    c = HashSet()

    c<!UNNECESSARY_NOT_NULL_ASSERTION!>!!<!>.d = produce()
}",,519f
fun box(),": String {
    testR0xE0()
    testR0xE1()
    testR0xE2()
    testR0xE3()
    testR0xE4()
    testR0xE5()
    testR1xE0()
    testR1xE1()
    testR1xE2()
    testR1xE3()
    testR1xE4()
    testR1xE5()
    return ""OK""
}","// Auto-generated by GenerateInRangeExpressionTestData. Do not edit!
// WITH_STDLIB",4f27
fun testR0xE0(),"{
    // with possible local optimizations
    if (-1L in 1L downTo 3L != range0.contains(-1L)) throw AssertionError()
    if (-1L !in 1L downTo 3L != !range0.contains(-1L)) throw AssertionError()
    if (!(-1L in 1L downTo 3L) != !range0.contains(-1L)) throw AssertionError()
    if (!(-1L !in 1L downTo 3L) != range0.contains(-1L)) throw AssertionError()
    // no local optimizations
    if (element0 in 1L downTo 3L != range0.contains(element0)) throw AssertionError()
    if (element0 !in 1L downTo 3L != !range0.contains(element0)) throw AssertionError()
    if (!(element0 in 1L downTo 3L) != !range0.contains(element0)) throw AssertionError()
    if (!(element0 !in 1L downTo 3L) != range0.contains(element0)) throw AssertionError()
}",,41a3
fun testR0xE1(),"{
    // with possible local optimizations
    if (0L in 1L downTo 3L != range0.contains(0L)) throw AssertionError()
    if (0L !in 1L downTo 3L != !range0.contains(0L)) throw AssertionError()
    if (!(0L in 1L downTo 3L) != !range0.contains(0L)) throw AssertionError()
    if (!(0L !in 1L downTo 3L) != range0.contains(0L)) throw AssertionError()
    // no local optimizations
    if (element1 in 1L downTo 3L != range0.contains(element1)) throw AssertionError()
    if (element1 !in 1L downTo 3L != !range0.contains(element1)) throw AssertionError()
    if (!(element1 in 1L downTo 3L) != !range0.contains(element1)) throw AssertionError()
    if (!(element1 !in 1L downTo 3L) != range0.contains(element1)) throw AssertionError()
}",,ea22
fun testR0xE2(),"{
    // with possible local optimizations
    if (1L in 1L downTo 3L != range0.contains(1L)) throw AssertionError()
    if (1L !in 1L downTo 3L != !range0.contains(1L)) throw AssertionError()
    if (!(1L in 1L downTo 3L) != !range0.contains(1L)) throw AssertionError()
    if (!(1L !in 1L downTo 3L) != range0.contains(1L)) throw AssertionError()
    // no local optimizations
    if (element2 in 1L downTo 3L != range0.contains(element2)) throw AssertionError()
    if (element2 !in 1L downTo 3L != !range0.contains(element2)) throw AssertionError()
    if (!(element2 in 1L downTo 3L) != !range0.contains(element2)) throw AssertionError()
    if (!(element2 !in 1L downTo 3L) != range0.contains(element2)) throw AssertionError()
}",,9568
fun testR0xE3(),"{
    // with possible local optimizations
    if (2L in 1L downTo 3L != range0.contains(2L)) throw AssertionError()
    if (2L !in 1L downTo 3L != !range0.contains(2L)) throw AssertionError()
    if (!(2L in 1L downTo 3L) != !range0.contains(2L)) throw AssertionError()
    if (!(2L !in 1L downTo 3L) != range0.contains(2L)) throw AssertionError()
    // no local optimizations
    if (element3 in 1L downTo 3L != range0.contains(element3)) throw AssertionError()
    if (element3 !in 1L downTo 3L != !range0.contains(element3)) throw AssertionError()
    if (!(element3 in 1L downTo 3L) != !range0.contains(element3)) throw AssertionError()
    if (!(element3 !in 1L downTo 3L) != range0.contains(element3)) throw AssertionError()
}",,1206
fun testR0xE4(),"{
    // with possible local optimizations
    if (3L in 1L downTo 3L != range0.contains(3L)) throw AssertionError()
    if (3L !in 1L downTo 3L != !range0.contains(3L)) throw AssertionError()
    if (!(3L in 1L downTo 3L) != !range0.contains(3L)) throw AssertionError()
    if (!(3L !in 1L downTo 3L) != range0.contains(3L)) throw AssertionError()
    // no local optimizations
    if (element4 in 1L downTo 3L != range0.contains(element4)) throw AssertionError()
    if (element4 !in 1L downTo 3L != !range0.contains(element4)) throw AssertionError()
    if (!(element4 in 1L downTo 3L) != !range0.contains(element4)) throw AssertionError()
    if (!(element4 !in 1L downTo 3L) != range0.contains(element4)) throw AssertionError()
}",,798f
fun testR0xE5(),"{
    // with possible local optimizations
    if (4L in 1L downTo 3L != range0.contains(4L)) throw AssertionError()
    if (4L !in 1L downTo 3L != !range0.contains(4L)) throw AssertionError()
    if (!(4L in 1L downTo 3L) != !range0.contains(4L)) throw AssertionError()
    if (!(4L !in 1L downTo 3L) != range0.contains(4L)) throw AssertionError()
    // no local optimizations
    if (element5 in 1L downTo 3L != range0.contains(element5)) throw AssertionError()
    if (element5 !in 1L downTo 3L != !range0.contains(element5)) throw AssertionError()
    if (!(element5 in 1L downTo 3L) != !range0.contains(element5)) throw AssertionError()
    if (!(element5 !in 1L downTo 3L) != range0.contains(element5)) throw AssertionError()
}",,57bf
fun testR1xE0(),"{
    // with possible local optimizations
    if (-1L in 3L downTo 1L != range1.contains(-1L)) throw AssertionError()
    if (-1L !in 3L downTo 1L != !range1.contains(-1L)) throw AssertionError()
    if (!(-1L in 3L downTo 1L) != !range1.contains(-1L)) throw AssertionError()
    if (!(-1L !in 3L downTo 1L) != range1.contains(-1L)) throw AssertionError()
    // no local optimizations
    if (element0 in 3L downTo 1L != range1.contains(element0)) throw AssertionError()
    if (element0 !in 3L downTo 1L != !range1.contains(element0)) throw AssertionError()
    if (!(element0 in 3L downTo 1L) != !range1.contains(element0)) throw AssertionError()
    if (!(element0 !in 3L downTo 1L) != range1.contains(element0)) throw AssertionError()
}",,c70f
fun testR1xE1(),"{
    // with possible local optimizations
    if (0L in 3L downTo 1L != range1.contains(0L)) throw AssertionError()
    if (0L !in 3L downTo 1L != !range1.contains(0L)) throw AssertionError()
    if (!(0L in 3L downTo 1L) != !range1.contains(0L)) throw AssertionError()
    if (!(0L !in 3L downTo 1L) != range1.contains(0L)) throw AssertionError()
    // no local optimizations
    if (element1 in 3L downTo 1L != range1.contains(element1)) throw AssertionError()
    if (element1 !in 3L downTo 1L != !range1.contains(element1)) throw AssertionError()
    if (!(element1 in 3L downTo 1L) != !range1.contains(element1)) throw AssertionError()
    if (!(element1 !in 3L downTo 1L) != range1.contains(element1)) throw AssertionError()
}",,e0d4
fun testR1xE2(),"{
    // with possible local optimizations
    if (1L in 3L downTo 1L != range1.contains(1L)) throw AssertionError()
    if (1L !in 3L downTo 1L != !range1.contains(1L)) throw AssertionError()
    if (!(1L in 3L downTo 1L) != !range1.contains(1L)) throw AssertionError()
    if (!(1L !in 3L downTo 1L) != range1.contains(1L)) throw AssertionError()
    // no local optimizations
    if (element2 in 3L downTo 1L != range1.contains(element2)) throw AssertionError()
    if (element2 !in 3L downTo 1L != !range1.contains(element2)) throw AssertionError()
    if (!(element2 in 3L downTo 1L) != !range1.contains(element2)) throw AssertionError()
    if (!(element2 !in 3L downTo 1L) != range1.contains(element2)) throw AssertionError()
}",,1838
fun testR1xE3(),"{
    // with possible local optimizations
    if (2L in 3L downTo 1L != range1.contains(2L)) throw AssertionError()
    if (2L !in 3L downTo 1L != !range1.contains(2L)) throw AssertionError()
    if (!(2L in 3L downTo 1L) != !range1.contains(2L)) throw AssertionError()
    if (!(2L !in 3L downTo 1L) != range1.contains(2L)) throw AssertionError()
    // no local optimizations
    if (element3 in 3L downTo 1L != range1.contains(element3)) throw AssertionError()
    if (element3 !in 3L downTo 1L != !range1.contains(element3)) throw AssertionError()
    if (!(element3 in 3L downTo 1L) != !range1.contains(element3)) throw AssertionError()
    if (!(element3 !in 3L downTo 1L) != range1.contains(element3)) throw AssertionError()
}",,15e0
fun testR1xE4(),"{
    // with possible local optimizations
    if (3L in 3L downTo 1L != range1.contains(3L)) throw AssertionError()
    if (3L !in 3L downTo 1L != !range1.contains(3L)) throw AssertionError()
    if (!(3L in 3L downTo 1L) != !range1.contains(3L)) throw AssertionError()
    if (!(3L !in 3L downTo 1L) != range1.contains(3L)) throw AssertionError()
    // no local optimizations
    if (element4 in 3L downTo 1L != range1.contains(element4)) throw AssertionError()
    if (element4 !in 3L downTo 1L != !range1.contains(element4)) throw AssertionError()
    if (!(element4 in 3L downTo 1L) != !range1.contains(element4)) throw AssertionError()
    if (!(element4 !in 3L downTo 1L) != range1.contains(element4)) throw AssertionError()
}",,3062
fun testR1xE5(),"{
    // with possible local optimizations
    if (4L in 3L downTo 1L != range1.contains(4L)) throw AssertionError()
    if (4L !in 3L downTo 1L != !range1.contains(4L)) throw AssertionError()
    if (!(4L in 3L downTo 1L) != !range1.contains(4L)) throw AssertionError()
    if (!(4L !in 3L downTo 1L) != range1.contains(4L)) throw AssertionError()
    // no local optimizations
    if (element5 in 3L downTo 1L != range1.contains(element5)) throw AssertionError()
    if (element5 !in 3L downTo 1L != !range1.contains(element5)) throw AssertionError()
    if (!(element5 in 3L downTo 1L) != !range1.contains(element5)) throw AssertionError()
    if (!(element5 !in 3L downTo 1L) != range1.contains(element5)) throw AssertionError()
}",,cda6
"fun takeJ(map: Map<Any, Any>)",{},"// FIR_IDENTICAL
// !DIAGNOSTICS: -UNUSED_PARAMETER",15b0
fun test(),"{
    takeJ(HashMap())
}",,fe98
fun foo(),{},// FIR_IDENTICAL,519f
fun getResolveExtensionScopeWithTopLevelDeclarations(),": KtScope {
        val tools = analysisSession.extensionTools
        if (tools.isEmpty()) return KtEmptyScope(token)
        return KtFirResolveExtensionScope(analysisSession, tools)
    }",,0783
fun isResolveExtensionFile(file: VirtualFile),": Boolean =
        f",,cea5
fun getResolveExtensionNavigationElements(originalPsi: KtElement),": Collection<PsiElement> {
        val targetsProvider = originalPsi.containingFile?.virtualFile?.navigationTargetsProvider ?: return emptyList()
        return with(targetsProvider) { analysisSession.getNavigationTargets(originalPsi) }",,4e91
fun getCallableSymbols(nameFilter: KtScopeNameFilter),: Sequence<KtCallableSymbol> = w,,6a11
fun getCallableSymbols(names: Collection<Name>),: Sequence<KtCallableSymbol> = w,,c072
fun getClassifierSymbols(nameFilter: KtScopeNameFilter),: Sequence<KtClassifierSymbol> = w,,c604
fun getClassifierSymbols(names: Collection<Name>),: Sequence<KtClassifierSymbol> = w,,56b4
No signature found,"fun <D : KtNamedDeclaration, reified S : KtDeclaration> getTopLevelDeclarations(
        crossinline nameFilter: KtScopeNameFilter,
        crossinline getDeclarationsByProvider: (LLFirResolveExtensionToolDeclarationProvider) -> Sequence<D>,
    ): Sequence<S> = s",,6e1f
fun getConstructors(),: Sequence<KtConstructorSymbol> = w,,c7d7
fun getPackageSymbols(nameFilter: KtScopeNameFilter),: Sequence<KtPackageSymbol> = w,,f846
fun getPossibleCallableNames(),: Set<Name> = w,,11b6
fun getPossibleClassifierNames(),: Set<Name> = w,,e472
fun test1(),"{
    var c = C()
    val x = c.x
    if (x == null) return
    x.length // smartcast
    c.x<!UNSAFE_CALL!>.<!>length // no smartcast
    c = C()
    x.length // smartcast
    c.x<!UNSAFE_CALL!>.<!>length // no smartcast
}",// SKIP_TXT,fa3b
fun test2(),"{
    var c = C()
    val x = c.x
    if (x == null) return
    while (true) {
        x.length // smartcast
        c.x<!UNSAFE_CALL!>.<!>length // no smartcast
        c = C()
        x.length // smartcast
        c.x<!UNSAFE_CALL!>.<!>length // no smartcast
    }",,30bb
fun test3(p: Boolean),"{
    var c = C()
    val x = c.x
    if (x == null) return
    x.length // smartcast
    c.x<!UNSAFE_CALL!>.<!>length // no smartcast
    if (p) {
        c = C()
    }",,dcd4
"fun test4(p: Boolean, q: Boolean)","{
    var c = C()
    val x = c.x
    if (x == null) return
    x.length // smartcast
    c.x<!UNSAFE_CALL!>.<!>length // no smartcast
    if (p) {
        if (q) {
            c = C()
        }",,2323
fun test5(),"{
    var c = C()
    val d = c
    val x = d.x
    if (x == null) return
    x.length // smartcast
    c.x<!UNSAFE_CALL!>.<!>length // no smartcast
    d.x<!UNSAFE_CALL!>.<!>length // no smartcast
    c = C()
    x.length // smartcast
    c.x<!UNSAFE_CALL!>.<!>length // no smartcast
    d.x<!UNSAFE_CALL!>.<!>length // no smartcast
}",,aa19
No signature found,"fun getValue(thisRef: Any?, property: KProperty<*>): T {
            return materialize()
        }","// !DIAGNOSTICS: -UNCHECKED_CAST
// WITH_STDLIB
// WITH_REFLECT
// SKIP_TXT",6e1f
fun <T> materialize(),: T = A,,6522
fun test(i: Inv<out Number>),"{
        val p: Int by Scope.Delegate(i)
    }",,69cc
fun box(),": String {
    val impl = ListImpl()
    if (impl.size != 56) return ""fail 1""
    if (!impl.contains(""abc"")) return ""fail 2""

    val l: List<String> = impl

    if (l.size != 56) return ""fail 3""
    if (!l.contains(""abc"")) return ""fail 4""

    val anyList: List<Any?> = impl as List<Any?>

    if (anyList.size != 56) return ""fail 5""
    if (!anyList.contains(""abc"")) return ""fail 6""

    if (anyList.contains(1)) return ""fail 7""
    if (anyList.contains(null)) return ""fail 8""

    return ""OK""
}","// TARGET_BACKEND: JVM

// FILE: J.java",4f27
fun mainIos(),"{
}",,b2e0
"fun processOption(
        option: AbstractCliOption,
        value: String, configuration: CompilerConfiguration
    )","{
        when (option) {
            EXAMPLE_OPTION -> configuration.put(ExampleConfigurationKeys.EXAMPLE_KEY, value)
            else -> throw CliOptionProcessingException(""Unknown option: ${option.optionName}",,9ab8
"fun registerProjectComponents(project: MockProject, configuration: CompilerConfiguration)","{
        val exampleValue = configuration.get(ExampleConfigurationKeys.EXAMPLE_KEY)
        val messageCollector = configuration.get(CLIConfigurationKeys.MESSAGE_COLLECTOR_KEY, MessageCollector.NONE)
        messageCollector.report(CompilerMessageSeverity.INFO, ""Project component registration: $exampleValue"")
    }",,d481
fun foo(x: String),: I = o,"// EXPECTED_REACHABLE_NODES: 1290
// FILE: a.kt",f5be
fun get(),": String = """,,7383
fun foo(x: Int),: I = o,,0028
fun get(),": String = """,,7383
fun get(),": String
}

fun box(): String {
    val a = foo(""1"").get()
    if (a != ""foo_String(1)"") return ""fail1: $a""

    val b = foo(2).get()
    if (b != ""foo_Int(2)"") return ""fail2: $b""

    return ""OK""
}",,7383
fun foo(),{},// FIR_IDENTICAL,519f
fun bar(),= <,,66c3
fun foo(),{},"// ISSUE: KT-65105

// FILE: kotlin.kt",519f
fun throwsEmptyParens(),{},,fae1
fun throwsUnresolved(),{},,fed9
fun throwsClassWithUnresolvedParent(),{},,ff3b
fun throwsNamedUnresolved(),{},,69ae
fun throwsNamedEmptyLiteral(),{},,0167
fun throwsNamedEmptyArrayOf(),{},,b222
fun throwsSpreadEmptyLiteral(),{},,c5db
fun throwsSpreadEmptyArrayOf(),{},,77c5
fun throwsNamedLiteralWithUnresolved(),{},,b232
fun throwsNamedArrayOfUnresolved(),{},,86b2
fun throwsSpreadLiteralWithUnresolved(),{},,5875
fun throwsSpreadArrayOfUnresolved(),{},,d7c7
fun throwsTypealiasToUnresolved(),{},,71f9
fun foo(),"}

class ThrowsOnOverride : Base0 {
    <!INCOMPATIBLE_THROWS_OVERRIDE!>@Throws(Exception1::class)<!> override  {}",,519f
fun foo(),"}

class InheritsThrowsAndNoThrows : Base0, Base1 {
    <!INCOMPATIBLE_THROWS_INHERITED!>override  {}",,519f
fun foo(),{},,519f
fun foo(),{},,519f
fun foo(),{},,519f
fun foo(),{},,519f
fun foo(),"}

open class InheritsDifferentThrows1 : Base1, Base2 {
    <!INCOMPATIBLE_THROWS_INHERITED!>override  {}",,519f
fun foo(),{},,519f
fun foo(),{},,519f
fun foo(),{},,519f
fun foo(),{},,519f
fun foo(),{},,519f
fun foo(),{},,519f
fun foo(),"}

class InheritsDifferentThrows2 : InheritsDifferentThrows1(), Base3 {
    <!INCOMPATIBLE_THROWS_INHERITED!>override  {}",,519f
fun foo(),{},,519f
fun foo(),{},,519f
fun foo(),{},,519f
fun foo(),{},,519f
fun foo(),{},,519f
fun foo(),{},,519f
fun foo(),"}

class InheritsSameThrows : Base1, Base4 {
    override  {}",,519f
fun foo(),{},,519f
fun foo(),{},,519f
fun foo(),{},,519f
fun foo(),"}

interface Base6 {
    @Throws(Exception2::class, Exception1::class) 
}",,519f
fun foo(),{},,519f
fun foo(),{},,519f
fun foo(),{},,519f
fun foo(),{},,519f
fun withLocalClass(),"{
    class LocalException : Throwable()

    abstract class Base7 {
        @Throws(Exception1::class, LocalException::class) abstract fun foo()
    }",,10f2
fun foo(),{},,519f
fun foo(),{},,519f
fun foo(),{},,519f
fun foo(),{},,519f
fun foo(),{},,519f
fun foo(),{},,519f
fun foo(),{},,519f
fun suspendThrowsNothing(),{},,d335
fun foo(),"}

class OverrideImplicitThrowsOnSuspendWithExplicit : SuspendFun {
    // Although `SuspendFun.foo` effectively has `@Throws(CancellationException::class)`,
    // overriding it with equal explicit `@Throws` is forbidden:
    <!INCOMPATIBLE_THROWS_OVERRIDE!>@Throws(CancellationException::class)<!> override suspend  {}",,519f
fun foo(),{},,519f
fun foo(),{},,519f
fun suspendDoesNotThrowCancellationException1(),{},,9f21
fun suspendDoesNotThrowCancellationException2(),{},,6823
fun suspendThrowsUnresolved(),{},,99ef
fun suspendThrowsNamedUnresolved(),{},,d78f
fun suspendThrowsNamedEmptyLiteral(),{},,fb8d
fun suspendThrowsNamedEmptyArrayOf(),{},,d035
fun suspendThrowsSpreadEmptyLiteral(),{},,4ef9
fun suspendThrowsSpreadEmptyArrayOf(),{},,65e1
fun suspendThrowsNamedLiteralWithUnresolved(),{},,b567
fun suspendThrowsNamedArrayOfUnresolved(),{},,69ba
fun suspendThrowsSpreadLiteralWithUnresolved(),{},,a09c
fun suspendThrowsSpreadArrayOfUnresolved(),{},,1a6c
fun suspendThrowsTypealiasToUnresolved(),{},,c640
fun suspendThrowsClassWithUnresolvedParent(),{},,4dab
fun suspendThrowsCancellationException1(),{},,bcd5
fun suspendThrowsCancellationException2(),{},,0884
fun suspendThrowsCancellationExceptionTypealias(),{},,d8e3
fun suspendThrowsIllegalStateException1(),{},,3788
fun suspendThrowsIllegalStateException2(),{},,3f46
fun suspendThrowsIllegalStateExceptionTypealias(),{},,bc18
fun suspendThrowsRuntimeException1(),{},,64ab
fun suspendThrowsRuntimeException2(),{},,ab12
fun suspendThrowsRuntimeExceptionTypealias(),{},,4362
fun suspendThrowsException1(),{},,29d9
fun suspendThrowsException2(),{},,8e4c
fun suspendThrowsExceptionTypealias(),{},,2a3a
fun suspendThrowsThrowable1(),{},,4da7
fun suspendThrowsThrowable2(),{},,890a
fun suspendThrowsThrowable3(),{},,1faa
fun suspendThrowsThrowableTypealias(),{},,5763
fun f(data: T),{},,e20e
fun f(data: K),{},,fa16
fun getAllPossibleNames(),: Set<Name> = w,,3061
fun getPossibleCallableNames(),": Set<Name>

    /**
     * Returns a **superset** of classifier names which current scope may contain.
     * In other words `ALL_CLASSIFIER_NAMES(scope)` is a subset of `scope.getClassifierNames()`
     */
    public fun getPossibleClassifierNames(): Set<Name>

    /**
     * return true if the scope may contain name, false otherwise.
     *
     * In other words `(mayContainName(name) ==",,11b6
fun mayContainName(name: Name),: Boolean = w,,5a1b
fun resolveToSymbols(reference: KtReference),": Collection<KtSymbol> {
        require(reference is KtFe10Reference)
        val bindingContext = analysisContext.analyze(reference.element, Fe10AnalysisFacade.AnalysisMode.PARTIAL)
        return reference.getTargetDescriptors(bindingContext).mapNotNull { descriptor ->
            descriptor.toKtSymbol(analysisContext)
        }",,b2f4
fun isImplicitReferenceToCompanion(reference: KtReference),": Boolean {
        if (reference !is KtSimpleNameReference) {
            return false
        }",,9d24
No signature found,fun A.Companion.foo() {},,6e1f
fun test(),"{
    <caret>A.foo()
}",,fe98
fun _assert(condition: Boolean),"{
    if (!condition) throw AssertionError(""Fail"")
}","// TARGET_BACKEND: JVM

// This test checks that our bytecode is consistent with javac bytecode",6a4a
fun _assertFalse(condition: Boolean),= _,,cee0
fun box(),": String {
    var dnan = java.lang.Double.NaN
    if (System.nanoTime() < 0) dnan = 3.14 // To avoid possible compile-time const propagation

    _assertFalse(0.0 < dnan)
    _assertFalse(0.0 > dnan)
    _assertFalse(0.0 <= dnan)
    _assertFalse(0.0 >= dnan)
    _assertFalse(0.0 == dnan)
    _assertFalse(dnan < 0.0)
    _assertFalse(dnan > 0.0)
    _assertFalse(dnan <= 0.0)
    _assertFalse(dnan >= 0.0)
    _assertFalse(dnan == 0.0)
    _assertFalse(dnan < dnan)
    _assertFalse(dnan > dnan)
    _assertFalse(dnan <= dnan)
    _assertFalse(dnan >= dnan)
    _assertFalse(dnan == dnan)
    
    // Double.compareTo: ""NaN is considered by this method to be equal to itself and greater than all other values""
    _assert(0.0.compareTo(dnan) == -1)
    _assert(dnan.compareTo(0.0) == 1)
    _assert(dnan.compareTo(dnan) == 0)

    var fnan = java.lang.Float.NaN
    if (System.nanoTime() < 0) fnan = 3.14f

    _assertFalse(0.0f < fnan)
    _assertFalse(0.0f > fnan)
    _assertFalse(0.0f <= fnan)
    _assertFalse(0.0f >= fnan)
    _assertFalse(0.0f == fnan)
    _assertFalse(fnan < 0.0f)
    _assertFalse(fnan > 0.0f)
    _assertFalse(fnan <= 0.0f)
    _assertFalse(fnan >= 0.0f)
    _assertFalse(fnan == 0.0f)
    _assertFalse(fnan < fnan)
    _assertFalse(fnan > fnan)
    _assertFalse(fnan <= fnan)
    _assertFalse(fnan >= fnan)
    _assertFalse(fnan == fnan)

    _assert(0.0.compareTo(fnan) == -1)
    _assert(fnan.compareTo(0.0) == 1)
    _assert(fnan.compareTo(fnan) == 0)
    
    return ""OK""
}",,4f27
fun foo(n: Number),"{
    if (n.toInt() > 1 && when (n) {
            is Float -> true
            else -> false
        }",// FILE: test.kt,2265
fun box(),"{
    foo(2.0f)
}",,4f27
fun foo(),"= """,// FILE: 1.kt,519f
No signature found,"fun inlineFn(crossinline fn: () -> String, x: Int? = 1",,6e1f
fun box(),": String {
    return inlineFn(foo::foo)
}",,4f27
"fun <R, D> accept(visitor: IrElementVisitor<R, D>, data: D)",": R =
        v",,af8a
"fun <D> acceptChildren(visitor: IrElementVisitor<Unit, D>, data: D)","{
        backingField?.accept(visitor, data)
        getter?.accept(visitor, data)
        setter?.accept(visitor, data)
    }",,a229
"fun <D> transformChildren(transformer: IrElementTransformer<D>, data: D)","{
        backingField = backingField?.transform(transformer, data) as IrField?
        getter = getter?.transform(transformer, data) as IrSimpleFunction?
        setter = setter?.transform(transformer, data) as IrSimpleFunction?
    }",,e8d0
fun dad(),"{

                val a = <expr>foo.www.ddd.Check.BBD.Bwd::class.java.annotatedInterfaces.size</expr>
            }",// FILE: main.kt,ca2d
fun getMain(className: String),": java.lang.reflect.Method {
    val classLoader = A().javaClass.classLoader
    return classLoader.loadClass(className).getDeclaredMethod(""main"", Array<String>::class.java)
}","// TARGET_BACKEND: JVM

// WITH_STDLIB
// FILE: 1.kt",2b0b
fun box(),": String {
    val bMain = getMain(""pkg.AKt"")
    val cMain = getMain(""pkg.BKt"")

    val args = Array(1, { """" }",,4f27
fun main(args: Array<String>),"{
    args[0] += ""O""
}",,5b61
fun main(args: Array<String>),"{
    args[0] += ""K""
}",// FILE: b.kt,5b61
fun box(),": String {
    assertEquals(""foo"", FOO_STRING)
    assertEquals(0, ZERO)
    assertEquals(1, ONE)
    assertEquals(Long.MAX_VALUE, MAX_LONG)
    assertEquals(42, FOURTY_TWO)

    val seventeen: Long = SEVENTEEN
    assertEquals(17L, seventeen)

    val onePointFive: Float = ONE_POINT_FIVE
    val onePointZero: Double = ONE_POINT_ZERO

    assertEquals(1.5f, onePointFive)
    assertEquals(1.0, onePointZero)

    val nullPtr: COpaquePointer? = NULL_PTR
    val voidPtr: COpaquePointer? = VOID_PTR
    val intPtr: CPointer<IntVar>? = INT_PTR
    val ptrSum: CPointer<IntVar>?  = PTR_SUM
    val ptrCall: CPointer<IntVar>? = PTR_CALL

    assertEquals(null, nullPtr)
    assertEquals(1L, voidPtr.rawValue.toLong())
    assertEquals(1L, intPtr.rawValue.toLong())
    assertEquals(PTR_SUM_EXPECTED.toLong(), ptrSum.rawValue.toLong())
    assertEquals(1L, ptrCall.rawValue.toLong())

    assertEquals(42, INT_CALL)
    assertEquals(84, CALL_SUM)
    assertEquals(5, GLOBAL_VAR)

    memScoped {
        val counter = alloc<IntVar>()
        counter.value = 42
        increment(counter.ptr)
        assertEquals(43, counter.value)
    }",,4f27
fun bar(),= v,,66c3
fun foo(),": B<String> {
        val p  = S(""OK"");
        return object : B<String> {
            //we shouldn't capture this@S in such case
            override val bar: String = p.bar()
        }",,519f
fun box(),": String {
    return S(""fail"").foo().bar
}",,4f27
No signature found,fun <K> invOut(y: K?): Inv<Out<K>> = T,"// !CHECK_TYPE
// !DIAGNOSTICS: -UNUSED_PARAMETER -UNREACHABLE_CODE",6e1f
fun <R> test(x: Inv<Out<R>>),: R = T,,6dbe
fun testNothing(),"{
    <!IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION!>test<!>(invOut(null)) checkType { _<Nothing>() }",,fcab
fun box(),": String {
    val outer = Outer.Inner
    val other = Outer.Other
    val another = Outer.Another
    return ""OK""
}",// See also KT-6299,4f27
fun log(message: String),"{
    global += message
}","// KJS_WITH_FULL_RUNTIME
// EXPECTED_REACHABLE_NODES: 1525",fafb
fun test1(),": String {
    val list = mutableListOf<(Int) -> Unit>()

    var result = """"
    list += { log(""<$it>"") }",,fa3b
fun box(),": String {
    assertEquals(""(1)[1]{1}",,4f27
fun needTransformStatus(declaration: FirDeclaration),": Boolean {
        return when (declaration) {
            is FirRegularClass -> declaration.classKind == ClassKind.CLASS && session.allOpenPredicateMatcher.isAnnotated(declaration.symbol)
            is FirCallableDeclaration -> {
                val parentClassId = declaration.symbol.callableId.classId ?: return false
                if (parentClassId.isLocal) return false
                val parentClassSymbol = session.symbolProvider.getClassLikeSymbolByClassId(parentClassId) as? FirRegularClassSymbol
                    ?: return false
                session.allOpenPredicateMatcher.isAnnotated(parentClassSymbol)
            }",,6bd6
"fun transformStatus(status: FirDeclarationStatus, declaration: FirDeclaration)",": FirDeclarationStatus {
        return if (status.modality == null) {
            status.copy(modality = Modality.OPEN)
        }",,bca4
fun testBasic(),"{
        val q = LockFreeQueue()
        assertEquals(-1, q.dequeue())
        q.enqueue(42)
        assertEquals(42, q.dequeue())
        assertEquals(-1, q.dequeue())
        q.enqueue(1)
        q.enqueue(2)
        assertEquals(1, q.dequeue())
        assertEquals(2, q.dequeue())
        assertEquals(-1, q.dequeue())
    }",,60c9
fun enqueue(value: Int),"{
        val node = Node(value)
        tail.loop { curTail ->
            val curNext = curTail.next.value
            if (curNext != null) {
                tail.compareAndSet(curTail, curNext)
                return@loop
            }",,238f
fun dequeue(),": Int {
        head.loop { curHead ->
            val next = curHead.next.value ?: return -1
            if (head.compareAndSet(curHead, next)) return next.value
        }",,1344
fun box(),": String {
    val testClass = LockFreeQueueTest()
    testClass.testBasic()
    return ""OK""
}",,4f27
No signature found,fun foo(a: Int = 1,,6e1f
No signature found,fun bar(a: Int = 1,,6e1f
No signature found,fun baz(a: Int = 1,,6e1f
fun box(),": String {
    val test1 = foo(4, e = 8, f = 15, w = 16, aa = 23, ff = 42)
    val test2 = foo()
    val test3 = foo(32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, q = 16, r = 15, s = 14, t = 13,
                    u = 12, v = 11, w = 10, x = 9, y = 8, z = 7, aa = 6, bb = 5, cc = 4, dd = 3, ee = 2, ff = 1)
    if (test1 != ""4 2 3 4 8 15 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 16 24 25 26 23 28 29 30 31 42"") {
        return ""test1 = $test1""
    }",,4f27
No signature found,"fun check(resolvedCall: ResolvedCall<*>, reportOn: PsiElement, context: CallCheckerContext) {
        val resultingDescriptor = resolvedCall.resultingDescriptor as? CallableMemberDescriptor ?: return
        // TODO (KT-60971): distinguish the case when one property accessor is inline and the other isn't.
        if (!InlineUtil.isInline(resultingDescriptor) &&
            (resultingDescriptor !is PropertyDescriptor || !InlineUtil.isInline(resultingDescriptor.getter))
        ) {
            return
        }",,6e1f
fun getBytecodeVersionIfDeserializedDescriptor(funOrProperty: DeclarationDescriptor),": Int? {
            if (funOrProperty !is DeserializedCallableMemberDescriptor) return null

            val containingDeclaration =
                funOrProperty.getConcreteDeclarationForInline().containingDeclaration as ClassOrPackageFragmentDescriptor

            val source = containingDeclaration.source
            val binaryClass =
                when (source) {
                    is KotlinJvmBinarySourceElement -> source.binaryClass
                    is KotlinJvmBinaryPackageSourceElement -> source.getContainingBinaryClass(funOrProperty)
                    else -> null
                }",,ab72
No signature found,"fun CallableMemberDescriptor.getConcreteDeclarationForInline(): CallableMemberDescriptor {
            if (!this.kind.isReal) {
                val superImplementation = overriddenDescriptors.firstOrNull {
                    val containingDeclaration = it.containingDeclaration
                    !DescriptorUtils.isInterface(containingDeclaration) && !DescriptorUtils.isAnnotationClass(containingDeclaration)
                }",,6e1f
fun invoke(),: Any? = c,,0a26
No signature found,"fun call(vararg args: Any?): Any? {
                checkArguments(0, args.size)
                val actualPropertySymbol = state.property.resolveFakeOverride()?.symbol ?: state.property.symbol
                val receiver = state.receiver // null receiver <=> property is on top level
                    ?: return callInterceptor.interceptProxy(getter, emptyList())

                val value = receiver.getField(actualPropertySymbol)
                return when {
                    // null value <=> property is extension or Primitive; receiver.isNull() <=> nullable extension
                    value == null || receiver.isNull() -> callInterceptor.interceptProxy(getter, listOf(receiver))
                    else -> value
                }",,6e1f
No signature found,"fun callBy(args: Map<KParameter, Any?>): Any? {
                TODO(""Not yet implemented"")
            }",,6e1f
fun get(),: Any? = g,,7383
fun getDelegate(),": Any? {
        TODO(""Not yet implemented"")
    }",,140a
fun invoke(),: Any? = g,,0a26
No signature found,fun invoke(p1: Any?) = c,,6e1f
No signature found,"fun call(vararg args: Any?) {
                checkArguments(1, args.size)
                // null receiver <=> property is on top level
                verify(state.receiver != null) { ""Cannot interpret set method on top level properties"" }",,6e1f
No signature found,"fun callBy(args: Map<KParameter, Any?>) {
                TODO(""Not yet implemented"")
            }",,6e1f
No signature found,fun set(value: Any?) = s,,6e1f
No signature found,"fun <T> KtObjCExportSession(
    configuration: KtObjCExportConfiguration,
    moduleNaming: KtObjCExportModuleNaming = K",,6e1f
No signature found,"fun <reified T> cached(key: Any, noinline computation: () -> T): T {
    return cached(T::class.java, key, computation)
}",,6e1f
No signature found,"fun <T> cached(typeOfT: Class<T>, key: Any, computation: () -> T): T {
    val value = private.cache.getOrPutNullable(key) {
        computation()
    }","/**
 * @see cached
 */",6e1f
No signature found,fun Boolean.toInt() = i,// IS_APPLICABLE: false,6e1f
"fun test(x: Int, y: Int)",": Int {
    return (x > y).toInt()
}",,f974
No signature found,"fun case_1(x: Comparable<*>?) {
    if (x is Byte?) {
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Byte? & kotlin.Comparable<*>?"")!>x<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Byte? & kotlin.Comparable<*>?"")!>x<!>?.equals(10)
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Byte"")!><!DEBUG_INFO_SMARTCAST!>x<!>!!<!>.dec()
    }","// !DIAGNOSTICS: -UNUSED_EXPRESSION
// SKIP_TXT",6e1f
No signature found,"fun case_2(x: ClassWithThreeTypeParameters<*, *, *>?) {
    if (x is InterfaceWithTwoTypeParameters<*, *>?) {
        <!DEBUG_INFO_EXPRESSION_TYPE(""ClassWithThreeTypeParameters<*, *, *>? & InterfaceWithTwoTypeParameters<*, *>?"")!>x<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Any?"")!><!DEBUG_INFO_EXPRESSION_TYPE(""ClassWithThreeTypeParameters<*, *, *>? & InterfaceWithTwoTypeParameters<*, *>?"")!>x<!>?.x<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Any?"")!>x?.y<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Any?"")!>x?.z<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""{ClassWithThreeTypeParameters<*, *, *> & InterfaceWithTwoTypeParameters<*, *>}",,6e1f
No signature found,"fun case_3(x: ClassWithThreeTypeParameters<*, *, *>) {
    if (x is InterfaceWithTwoTypeParameters<*, *><!USELESS_NULLABLE_CHECK!>?<!>) {
        <!DEBUG_INFO_EXPRESSION_TYPE(""ClassWithThreeTypeParameters<*, *, *> & InterfaceWithTwoTypeParameters<*, *>"")!>x<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Any?"")!><!DEBUG_INFO_EXPRESSION_TYPE(""ClassWithThreeTypeParameters<*, *, *> & InterfaceWithTwoTypeParameters<*, *>"")!>x<!>.x<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Any?"")!>x.y<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Any?"")!>x.z<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""{ClassWithThreeTypeParameters<*, *, *> & InterfaceWithTwoTypeParameters<*, *>}",,6e1f
No signature found,"fun case_4(x: ClassWithSixTypeParameters<*, *, *, *, *, *>?) {
    if (x is InterfaceWithTwoTypeParameters<*, *>) {
        <!DEBUG_INFO_EXPRESSION_TYPE(""ClassWithSixTypeParameters<*, *, *, *, *, *> & ClassWithSixTypeParameters<*, *, *, *, *, *>? & InterfaceWithTwoTypeParameters<*, *>"")!>x<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Any?"")!><!DEBUG_INFO_EXPRESSION_TYPE(""ClassWithSixTypeParameters<*, *, *, *, *, *> & ClassWithSixTypeParameters<*, *, *, *, *, *>? & InterfaceWithTwoTypeParameters<*, *>"")!>x<!>.x<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Any?"")!>x.y<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Any?"")!>x.z<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Any?"")!>x.u<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""{ClassWithSixTypeParameters<*, Nothing, *, *, Nothing, *> & InterfaceWithTwoTypeParameters<*, *>}",,6e1f
No signature found,"fun case_5(x: ClassWithThreeTypeParameters<*, *, *>?) {
    if (x is InterfaceWithTwoTypeParameters<*, *>?) {
        if (x === null) return
        <!DEBUG_INFO_EXPRESSION_TYPE(""ClassWithThreeTypeParameters<*, *, *> & ClassWithThreeTypeParameters<*, *, *>? & InterfaceWithTwoTypeParameters<*, *>"")!>x<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Any?"")!><!DEBUG_INFO_EXPRESSION_TYPE(""ClassWithThreeTypeParameters<*, *, *> & ClassWithThreeTypeParameters<*, *, *>? & InterfaceWithTwoTypeParameters<*, *>"")!>x<!>.x<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Any?"")!>x.y<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Any?"")!>x.z<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""ClassWithThreeTypeParameters<*, *, *> & ClassWithThreeTypeParameters<*, *, *>? & InterfaceWithTwoTypeParameters<*, *>"")!>x<!>.ip2test()
        <!DEBUG_INFO_EXPRESSION_TYPE(""ClassWithThreeTypeParameters<*, *, *> & ClassWithThreeTypeParameters<*, *, *>? & InterfaceWithTwoTypeParameters<*, *>"")!>x<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Any?"")!><!DEBUG_INFO_EXPRESSION_TYPE(""ClassWithThreeTypeParameters<*, *, *> & ClassWithThreeTypeParameters<*, *, *>? & InterfaceWithTwoTypeParameters<*, *>"")!>x<!>.x<!>
    }",,6e1f
No signature found,"fun case_5(x: Any?) {
    if (x is ClassWithThreeTypeParameters<*, *, *>?) {
        if (x is InterfaceWithTwoTypeParameters<*, *>?) {
            if (x === null) return
            <!DEBUG_INFO_EXPRESSION_TYPE(""ClassWithThreeTypeParameters<*, *, *> & InterfaceWithTwoTypeParameters<*, *> & kotlin.Any & kotlin.Any?"")!>x<!>
            <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Any?"")!><!DEBUG_INFO_EXPRESSION_TYPE(""ClassWithThreeTypeParameters<*, *, *> & kotlin.Any?""), DEBUG_INFO_SMARTCAST!>x<!>.x<!>
            <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Any?"")!><!DEBUG_INFO_SMARTCAST!>x<!>.y<!>
            <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Any?"")!><!DEBUG_INFO_SMARTCAST!>x<!>.z<!>
            <!DEBUG_INFO_EXPRESSION_TYPE(""InterfaceWithTwoTypeParameters<*, *> & kotlin.Any?""), DEBUG_INFO_SMARTCAST!>x<!>.ip2test()
            <!DEBUG_INFO_EXPRESSION_TYPE(""ClassWithThreeTypeParameters<*, *, *> & InterfaceWithTwoTypeParameters<*, *> & kotlin.Any & kotlin.Any?"")!>x<!>
            <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Any?"")!><!DEBUG_INFO_EXPRESSION_TYPE(""ClassWithThreeTypeParameters<*, *, *> & kotlin.Any?""), DEBUG_INFO_SMARTCAST!>x<!>.x<!>
        }",,6e1f
fun foo(),= h,"// TARGET_BACKEND: JVM
// MODULE: lib
// WITH_STDLIB
// FILE: A.kt",519f
fun hasAnnotation(name: FqName),: Boolean = t,,1e58
fun box(),= i,,4f27
fun test(),= x,"// FIR_IDENTICAL
// FILE: a/x.java",fe98
fun test2(),= x,,30bb
fun box(),": String {
    val l = ArrayList<Int>()
    l.add(1)
    var x = l[0]
    x = 2
    if (x != 2) return ""Fail: $x}",// KJS_WITH_FULL_RUNTIME,4f27
No signature found,fun <reified T : Cls> materialize(): T? = T,"// FIR_IDENTICAL
// !DIAGNOSTICS: -UNUSED_PARAMETER",6e1f
"fun <D> transform(transformer: In<D>, data: D)",: Unit = T,,29a1
fun test(subIn: SubIn),"{
    transform(subIn, materialize()) // D should be inferred to Cls?, not Nothing?
}",,615c
No signature found,fun <reified T: Any> klassLib() = T,"// EXPECTED_REACHABLE_NODES: 1321

// MODULE: lib
// FILE: lib.kt",6e1f
No signature found,fun <reified T: Any> klass() = T,,6e1f
fun box(),": String {
    check(js(""Object""), ""Any"", klass<Any>())
    check(js(""String""), ""String"", klass<String>())
    check(js(""Boolean""), ""Boolean"", klass<Boolean>())
    check(js(""Error""), ""Throwable"", klass<Throwable>())
    check(js(""Array""), ""Array"", klass<Array<Any>>())
    check(js(""Function""), ""Function0"", klass<Function0<*>>())
    check(js(""Function""), ""Function1"", klass<Function1<*, *>>())

    check(js(""Number""), ""Byte"", klass<Byte>())
    check(js(""Number""), ""Short"", klass<Short>())
    check(js(""Number""), ""Int"", klass<Int>())
    check(js(""Number""), ""Float"", klass<Float>())
    check(js(""Number""), ""Double"", klass<Double>())
    check(js(""Number""), ""Number"", klass<Number>())

    check(js(""Array""), ""BooleanArray"", klass<BooleanArray>())
    check(js(""Uint16Array""), ""CharArray"", klass<CharArray>())
    check(js(""Int8Array""), ""ByteArray"", klass<ByteArray>())
    check(js(""Int16Array""), ""ShortArray"", klass<ShortArray>())
    check(js(""Int32Array""), ""IntArray"", klass<IntArray>())
    check(js(""Array""), ""LongArray"", klass<LongArray>())
    check(js(""Float32Array""), ""FloatArray"", klass<FloatArray>())
    check(js(""Float64Array""), ""DoubleArray"", klass<DoubleArray>())

    // Check same instance
    if (Int::class !== klass<Int>()) return ""Same instance check failed""

    // Check inlining from other module works
    check(js(""Int8Array""), ""ByteArray"", klassLib<ByteArray>())

    return ""OK""
}",,4f27
No signature found,"fun check(nativeClass: dynamic, simpleName: String, c: KClass<*>) {
    assertEquals(simpleName, c.simpleName, ""Simple name of class has unexpected value"")
    assertEquals(nativeClass, c.js, ""Kotlin class does not correspond native class ${nativeClass.name}",,6e1f
fun getContentElement(),= f,,6f8c
No signature found,fun <T> foo(f: () -> T) {},"// FIR_IDENTICAL
// !DIAGNOSTICS: -UNUSED_PARAMETER",6e1f
No signature found,fun bar(g: () -> Unit) {},,6e1f
fun <K> baz(),: () -> K = T,,ecba
fun test(),"{
    foo { bar(baz()) }",,fe98
No signature found,"fun `test - sources - shared native compile - KT-54995`() {
        val project = buildProjectWithMPP()
        val kotlin = project.multiplatformExtension
        kotlin.applyDefaultHierarchyTemplate()

        kotlin.linuxX64()
        kotlin.linuxArm64()
        kotlin.jvm()

        val commonMainSourceFile = project.file(""src/commonMain/kotlin/CommonMain.kt"")
        val linuxMainSourceFile = project.file(""src/linuxMain/kotlin/LinuxMain.kt"")

        commonMainSourceFile.parentFile.mkdirs()
        linuxMainSourceFile.parentFile.mkdirs()

        commonMainSourceFile.writeText(""object CommonMain"")
        linuxMainSourceFile.writeText(""object LinuxMain"")

        project.evaluate()

        /* Check sources of linuxMain compilation */
        val linuxMainCompilation = kotlin.metadata().compilations.getByName(""linuxMain"") as KotlinSharedNativeCompilation
        val linuxMainCompileTask = linuxMainCompilation.compileTaskProvider.get()

        assertEquals(
            setOf(linuxMainSourceFile).relativeTo(project),
            linuxMainCompileTask.sources.files.relativeTo(project)
        )

        /* Check sources of commonMain compilation */
        val commonMainCompilation = kotlin.metadata().compilations.getByName(""commonMain"") as KotlinCommonCompilation
        val commonMainCompileTask = commonMainCompilation.compileTaskProvider.get() as KotlinCompileCommon

        assertEquals(
            setOf(commonMainSourceFile).relativeTo(project),
            commonMainCompileTask.sources.files.relativeTo(project)
        )
    }",,6e1f
No signature found,"fun `test - sources - linux and jvm`() {
        val project = buildProjectWithMPP()
        val kotlin = project.multiplatformExtension
        kotlin.applyHierarchyTemplate(KotlinHierarchyTemplate.default) {
            common {
                group(""jvmAndLinux"") {
                    withLinux()
                    withJvm()
                }",,6e1f
fun foo(),= z,"// WITH_STDLIB
// MODULE: lib
// FILE: lib.kt",519f
fun box(),": String {
    val o = Bar().BarInner(117)
    assertEquals(117, o.x)
    assertEquals(42, o.foo())

    return ""OK""
}",,4f27
fun use1(),"{
    C.D.E.F()
}","// !OPT_IN: kotlin.RequiresOptIn
// FILE: api.kt",b28d
No signature found,fun use2(f: C.D.E.F) = f,,6e1f
fun use1(),"{
    C.D.E.F()
}",,b28d
No signature found,fun use2(f: C.D.E.F) = f,,6e1f
fun use1(),"{
    C.D.<!OPT_IN_USAGE!>E<!>.<!OPT_IN_USAGE!>F<!>()
}",,b28d
No signature found,fun use2(f: <!OPT_IN_USAGE!>C.D.E.F<!>) = <,,6e1f
fun foo(x: Any),"{
    sb.append(if (x === x) ""OK"" else ""FAIL"")
}",,d233
fun box(),": String {
    foo { 42 }",,4f27
"fun lower(irBody: IrBody, container: IrDeclaration)","{
        irBody.transformChildren(object : IrElementTransformer<IrDeclaration> {
            override fun visitFunction(declaration: IrFunction, data: IrDeclaration): IrStatement {
                return super.visitFunction(declaration, declaration)
            }",,c7d0
"fun visitFunctionAccess(expression: IrFunctionAccessExpression, data: IrDeclaration)",": IrElement {
                val call = super.visitFunctionAccess(expression, data)
                val doNotIntrinsify = data.hasAnnotation(context.intrinsics.doNotIntrinsifyAnnotationSymbol)
                if (call is IrFunctionAccessExpression) {
                    for (transformer in transformers) {
                        val newCall = transformer.transformFunctionAccess(call, doNotIntrinsify)
                        if (newCall !== call) {
                            return newCall
                        }",,1613
No signature found,"fun foo(unitParam: Unit, nullableUnitParam: Unit?): Unit {}","// TARGET_BACKEND: JVM

// WITH_REFLECT",6e1f
fun box(),": String {
    assert(Unit::class.java != java.lang.Void.TYPE)

    assertEquals(Unit::class.java, ::foo.parameters[0].type.javaType)
    assertEquals(Unit::class.java, ::foo.parameters[1].type.javaType)
    assertEquals(java.lang.Void.TYPE, ::foo.returnType.javaType)

    assertEquals(Unit::class.java, ::bar.returnType.javaType)
    assertEquals(Unit::class.java, ::bar.getter.returnType.javaType)
    assertEquals(Unit::class.java, ::bar.setter.parameters.single().type.javaType)
    assertEquals(java.lang.Void.TYPE, ::bar.setter.returnType.javaType)

    return ""OK""
}",,4f27
No signature found,"fun check(name: String, c: Class<*>) {
    assertEquals(name, c.simpleName)
}","// TARGET_BACKEND: JVM

// WITH_STDLIB",6e1f
fun box(),": String {
    check(""boolean"", Boolean::class.java)
    check(""byte"", Byte::class.java)
    check(""char"", Char::class.java)
    check(""short"", Short::class.java)
    check(""int"", Int::class.java)
    check(""float"", Float::class.java)
    check(""long"", Long::class.java)
    check(""double"", Double::class.java)

    return ""OK""
}",,4f27
fun start(),"{
        check(!isStartedImpl.getAndSet(true)) {
            ""${KotlinPluginLifecycle::class.java.name}",,116d
fun executeCurrentStageAndScheduleNext(),"{
        stage.previousOrNull?.let { previousStage ->
            assert(enqueuedActions.getValue(previousStage).isEmpty()) {
                ""Actions from previous stage '$previousStage' have not been executed (stage: '$stage')""
            }",,076d
fun loopIfNecessary(),"{
        if (loopRunning.getAndSet(true)) return
        try {
            val queue = enqueuedActions.getValue(stage)
            do {
                project.state.rethrowFailure()
                val action = queue.removeFirstOrNull()
                action?.invoke(this)
            }",,ebd6
fun finishWithFailures(failures: List<Throwable>),"{
        assert(failures.isNotEmpty())
        assert(isStartedImpl.get())
        assert(!isFinishedWithFailures.getAndSet(true))
        configurationResult.complete(ProjectConfigurationResult.Failure(failures))
    }",,b417
fun finishSuccessfully(),"{
        assert(isStartedImpl.get())
        assert(!isFinishedSuccessfully.getAndSet(true))
        configurationResult.complete(ProjectConfigurationResult.Success)
    }",,41d8
No signature found,"fun enqueue(stage: KotlinPluginLifecycle.Stage, action: KotlinPluginLifecycle.() -> Unit) {
        if (stage < this.stage) {
            throw KotlinPluginLifecycle.IllegalLifecycleException(""Cannot enqueue Action for stage '$stage' in current stage '${this.stage}",,6e1f
fun resumeWith(result: Result<Unit>),"fun launch(
        start: KotlinPluginLifecycle.CoroutineStart,
        block: suspend KotlinPluginLifecycle.() -> Unit,
    ) {
        val lifecycle = this

        val coroutine = block.createCoroutine(this, object : Continuation<Unit> {
            override val context: CoroutineContext = EmptyCoroutineContext +
                    KotlinPluginLifecycleCoroutineContextElement(lifecycle)

            override  = result.getOrThrow()
        }",,8801
No signature found,"fun await(stage: KotlinPluginLifecycle.Stage) {
        if (this.stage > stage) return
        suspendCoroutine<Unit> { continuation ->
            enqueue(stage) {
                continuation.resume(Unit)
            }",,6e1f
fun toString(),: String = b,,a535
fun foo(),"{
        <caret>this@A.foo()
    }",,519f
fun getInstance(project: Project),= C,,f92b
No signature found,fun foo(f: () -> Any): Any = f,"// TARGET_BACKEND: JVM
// LAMBDAS: CLASS
// WITH_STDLIB",6e1f
No signature found,"fun Any.getValue(thiz: Any?, metadata: Any?): Any = t",,6e1f
fun box(),": String {
    // This is the class for lambda inside the `foo` call (`{}",,4f27
fun suspendThere(v: String),: String = s,"// WITH_STDLIB
// WITH_COROUTINES",4d2d
fun suspendHere(),": String {
    val k = ""K""
    val x = suspendThere(""O"")
    val y = x + suspendThere(k)

    return y
}",,3da9
No signature found,"fun builder(c: suspend () -> Unit) {
    c.startCoroutine(EmptyContinuation)
}",,6e1f
fun box(),": String {
    var result = """"

    builder {
        result = suspendHere()
    }",,4f27
fun resolveMode(key: String),": PartialLinkageMode? =
            e",,ee4f
fun resolveLogLevel(key: String),": PartialLinkageLogLevel? =
            e",,5143
No signature found,"fun CompilerConfiguration.setupPartialLinkageConfig(
    mode: String?,
    logLevel: String?,
    compilerModeAllowsUsingPartialLinkage: Boolean,
    onWarning: (String) -> Unit,
    onError: (String) -> Unit
) {
    val resolvedMode = when {
        mode != null -> {
            val resolvedMode = PartialLinkageMode.resolveMode(mode) ?: return onError(""Unknown partial linkage mode '$mode'"")
            if (!compilerModeAllowsUsingPartialLinkage && resolvedMode.isEnabled) {
                onWarning(""Current compiler configuration does not allow using partial linkage mode '$mode'. The partial linkage will be disabled."")
                PartialLinkageMode.DISABLE
            }",,6e1f
No signature found,"fun CompilerConfiguration.setupPartialLinkageConfig(config: PartialLinkageConfig) {
    this.put(PartialLinkageConfig.KEY, config)
}",,6e1f
fun test(),"{
    throw <!NO_COMPANION_OBJECT, TYPE_MISMATCH!>Exn<!>
}",// +JDK,fe98
"fun <R, D> accept(visitor: PredicateVisitor<P, R, D>, data: D)",": R

    /**
     * Boolean combinator OR for two predicates, matches declaration if
     *   [a] matches declaration or [b] matches declaration
     */
    sealed interface Or<P : AbstractPredicate<P>> : AbstractPredicate<P> {
        val a: P
        val b: P

        override : R {
            return visitor.visitOr(this, data)
        }",,a422
"fun <R, D> accept(visitor: PredicateVisitor<P, R, D>, data: D)",": R {
            return visitor.visitAnd(this, data)
        }",,a422
"fun <R, D> accept(visitor: PredicateVisitor<P, R, D>, data: D)",": R {
            return visitor.visitAnnotated(this, data)
        }",,a422
fun foo(),{},,519f
No signature found,fun bar(@Ann param: Int) {},,6e1f
fun baz(),{},,b22f
fun foobar(),{},,06fd
"fun <R, D> accept(visitor: PredicateVisitor<P, R, D>, data: D)","fun foo, parameter `param` from fun bar, class A]
     */
    sealed interface AnnotatedWith<P : AbstractPredicate<P>> : Annotated<P> {
        override : R {
            return visitor.visitAnnotatedWith(this, data)
        }",,a422
fun foo(),{},,519f
No signature found,fun bar(@Ann param: Int) {},,6e1f
fun baz(),{},,b22f
fun foobar(),{},,06fd
"fun <R, D> accept(visitor: PredicateVisitor<P, R, D>, data: D)","fun A.baz, class Nested, fun Nested.foobar]
     */
    sealed interface AncestorAnnotatedWith<P : AbstractPredicate<P>> : Annotated<P> {
        override : R {
            return visitor.visitAncestorAnnotatedWith(this, data)
        }",,a422
fun foo(),{},,519f
No signature found,fun bar(@Ann param: Int) {},,6e1f
fun baz(),{},,b22f
fun foobar(),{},,06fd
"fun <R, D> accept(visitor: PredicateVisitor<P, R, D>, data: D)","fun A.baz, class Nested]
     */
    sealed interface ParentAnnotatedWith<P : AbstractPredicate<P>> : Annotated<P> {
        override : R {
            return visitor.visitParentAnnotatedWith(this, data)
        }",,a422
fun foo(),{},,519f
No signature found,fun bar(@Ann param: Int) {},,6e1f
fun baz(),{},,b22f
fun foobar(),{},,06fd
"fun <R, D> accept(visitor: PredicateVisitor<P, R, D>, data: D)","fun bar, class A]
     */
    sealed interface HasAnnotatedWith<P : AbstractPredicate<P>> : Annotated<P> {
        override : R {
            return visitor.visitHasAnnotatedWith(this, data)
        }",,a422
fun foo(),{},,519f
No signature found,fun bar(@Ann param: Int) {},,6e1f
fun baz(),{},,b22f
fun foobar(),{},,06fd
"fun <R, D> accept(visitor: PredicateVisitor<P, R, D>, data: D)","fun foo, class A, fun A.Nested.foobar]
     *
     * Note that [MetaAnnotatedWith] predicate has no implementation in [LookupPredicate] hierarchy
     *   and can not be used for global lookup
     */
    sealed interface MetaAnnotatedWith<P : AbstractPredicate<P>> : AbstractPredicate<P> {
        val includeItself: Boolean

        override : R {
            return visitor.visitMetaAnnotatedWith(this, data)
        }",,a422
"fun <T, V> bar()",= B,"// WITH_STDLIB

// FILE: test.kt",b0fa
No signature found,"fun getValue(thisRef: T, property: KProperty<*>): V {
        TODO(""Not yet implemented"")
    }",,6e1f
fun usageAsCall(),": /*p:one*/Int /*p:kotlin(Nothing)*/{
    val f = /*p:java.lang p:kotlin p:kotlin.annotation p:kotlin.collections p:kotlin.comparisons p:kotlin.io p:kotlin.jvm p:kotlin.ranges p:kotlin.sequences p:kotlin.text p:one p:one.MainClass.NestedClass.A.B(F)*/MainClass./*p:one.MainClass*/NestedClass./*p:one.MainClass.NestedClass*/A./*p:one.MainClass.NestedClass.A*/B./*p:one.MainClass.NestedClass.A.B*/F
    /*p:kotlin(Nothing)*/return /*p:java.lang p:kotlin p:kotlin.annotation p:kotlin.collections p:kotlin.comparisons p:kotlin.io p:kotlin.jvm p:kotlin.ranges p:kotlin.sequences p:kotlin.text p:one*/MainClass./*p:one.MainClass*/NestedClass./*p:one.MainClass.NestedClass*/A./*p:one.MainClass.NestedClass.A*/B./*p:one.MainClass.NestedClass.A.B*/F./*p:one.MainClass.NestedClass.A.B.F*/x
}",,db89
No signature found,fun usageAsType(f: /*p:one*/MainClass./*p:one.MainClass*/NestedClass./*p:one.MainClass.NestedClass*/A./*p:one.MainClass.NestedClass.A*/B./*p:one.MainClass.NestedClass.A.B*/F) {},,6e1f
fun test(p: T),": Int
}

inline fun <T> Array<T>.copyOfRange1(crossinline toIndex: () -> Int) =
        o","// WITH_REFLECT
// NO_CHECK_LAMBDA_INLINING
// TARGET_BACKEND: JVM
// IGNORE_INLINER: IR

// FILE: 1.kt",bfc4
fun test(p: T),": Int {
                return toIndex()
            }",,bfc4
No signature found,fun Array<out CharSequence>.slice1() = c,,6e1f
fun box(),": String {
    val comparable = arrayOf(""123"").slice1()
    val method = comparable.javaClass.getMethod(""test"", Any::class.java)
    val genericParameterTypes = method.genericParameterTypes
    if (genericParameterTypes.size != 1) return ""fail 1: ${genericParameterTypes.size}",,4f27
fun createConfigurator(data: AnalysisApiTestConfiguratorFactoryData),": AnalysisApiTestConfigurator

    abstract fun supportMode(data: AnalysisApiTestConfiguratorFactoryData): Boolean

    protected fun requireSupported(data: AnalysisApiTestConfiguratorFactoryData) {
        if (!supportMode(data)) {
            unsupportedModeError(data)
        }",,ec2f
fun unsupportedModeError(data: AnalysisApiTestConfiguratorFactoryData),": Nothing {
        error(""${this::class}",,7037
No signature found,fun AnalysisApiTestConfiguratorFactoryData.defaultExtension(): String = w,,6e1f
No signature found,fun <!ACTUAL_WITHOUT_EXPECT!>foo<!>() { },"// MODULE: m1-jvm
// FILE: jvm.kt",6e1f
fun test(a: My),": String {
    val q: String?

    <!DEBUG_INFO_IMPLICIT_EXHAUSTIVE!>when (a) {
        My.A -> q = ""1""
        My.B -> q = ""2""
    }",,df88
fun f(),"{
            // val prop9: null
            val prop9 = a

            // val prop10: null
            val prop10 = a + 1
        }",,f6fb
fun foo(),"{
    // val prop5: null
    val prop5 = a

    // val prop6: null
    val prop6 = a + 1
}",,519f
No signature found,"fun <E : FirElement> transformElement(element: E, data: D): E {
        @Suppress(""UNCHECKED_CAST"")
        return (element.transformChildren(this, data) as E)
    }",,6e1f
fun foo(),= j,,519f
fun foo(),"{
        @ class LocalClass

        print(1)

        @

        @[inline2] private
        fun inlineLocal() {}",,519f
fun box(),": String {
    val b = B()
    if (b.size != 56) return ""fail 1""

    b.size = 55
    if (b.size != 55) return ""fail 2""

    val c: C<Int> = b
    if (c.size != 55) return ""fail 3""

    c.size = 57
    if (c.size != 57) return ""fail 4""

    return ""OK""
}",,4f27
fun b(),"<!> {
    }",,4df1
fun b(),"<!> {
    }",,4df1
fun b(),"<!> {
    }",,4df1
fun b(),"<!> {
    }",,4df1
fun b(),"<!> {
    }",,4df1
fun b(),"<!> {
    }",,4df1
fun test(),": Unit {
        System.out?.println(hello)
    }","// TARGET_BACKEND: JVM
// TARGET_BACKEND: JVM_IR",fe98
fun box(),": String {
    Test().test()
    return ""OK""
}",,4f27
fun test(),"{
                val x = bar
                val o = object : Wrapper(z) {
                    fun local() {
                        val y = foo()
                    }",// FILE: Base.java,fe98
fun test(),"{
            val x = bar
            val o = object {
                fun local() {
                    val y = foo()
                }",,fe98
fun gen(),": Any =
        o",,8bad
fun invokeFunction(),"{
                val c = codegen
                val cc = codegen.hashCode()
            }",,46cb
No signature found,fun <U : Unit> fork(task: () -> U) {},"// FIR_IDENTICAL
// DIAGNOSTICS: -FINAL_UPPER_BOUND",6e1f
fun test(),"{
    fork {}",,fe98
No signature found,"fun Interface.invoke(): String = """,// IGNORE_BACKEND: JVM,6e1f
fun box(),": String =
    H",,4f27
fun foo(vararg t : String),"= ""","// FIR_IDENTICAL
// RENDER_DIAGNOSTICS_FULL_TEXT",39b1
fun foo(vararg t : Int),"= """,,4eb0
fun test(),"{
    <!OVERLOAD_RESOLUTION_AMBIGUITY!>foo<!>()
}",,fe98
"fun f1(value: Pair<String, String>)",": Boolean {
    val (`false`, `true`) = value

    if (`false` != ""1"") return false
    if (`true` != ""2"") return false

    return true
}",// WITH_STDLIB,eaa4
fun box(),": String? {
    var i = 0
    for (`false`: Int in 0..10) {
        i++
    }",,4f27
fun getAnalysisScope(),": GlobalSearchScope

    public abstract fun canBeAnalysed(psi: PsiElement): Boolean
}

public interface KtAnalysisScopeProviderMixIn : KtAnalysisSessionMixIn {
    /**
     * Return [GlobalSearchScope] represent a scope code in which can be analysed by current [KtAnalysisSession].
     * That means [org.jetbrains.kotlin.analysis.api.symbols.KtSymbol] can be built for the declarations from this scope.
     */
    public val analysisScope: GlobalSearchScope
        get() = withValidityAssertion { analysisSession.analysisScopeProvider.getAnalysisScope() }",,8345
No signature found,"fun PsiElement.canBeAnalysed(): Boolean =
        w","/**
     * Checks if [PsiElement] is inside analysis scope.
     * That means [org.jetbrains.kotlin.analysis.api.symbols.KtSymbol] can be built by this [PsiElement]
     *
     * @see analysisScope
     */",6e1f
No signature found,"fun myEq(other: Any?): Boolean {
        return other is AsAny<*> && other.a == a
    }","// WITH_STDLIB
// WORKS_WHEN_VALUE_CLASS
// LANGUAGE: +ValueClasses, +GenericInlineClassParameter",6e1f
No signature found,"fun myEq(other: Any?): Boolean {
        return other is AsAny2<*> && other.a == a
    }",,6e1f
No signature found,"fun myEq(other: Any?): Boolean {
        return other is AsInt<*> && other.a == a
    }",,6e1f
No signature found,fun <reified T> Any?.isCheck() = t,,6e1f
fun <T> isNullable(a: AsAny<T>),= a,,9348
fun <T> isNotNullable(a: AsAny<T>),= a,,3a22
No signature found,fun <T> isNullableNullable(a: AsAny<T>?) = a,,6e1f
No signature found,fun <T> isNullableNotNullable(a: AsAny<T>?) = a,,6e1f
No signature found,fun <T: Any> isNullable(a: AsAny2<T>) = a,,6e1f
No signature found,fun <T: Any> isNotNullable(a: AsAny2<T>) = a,,6e1f
No signature found,fun <T: Any> isNullableNullable(a: AsAny2<T>?) = a,,6e1f
No signature found,fun <T: Any> isNullableNotNullable(a: AsAny2<T>?) = a,,6e1f
No signature found,fun <T: Int> isNullable(a: AsInt<T>) = a,,6e1f
No signature found,fun <T: Int> isNotNullable(a: AsInt<T>) = a,,6e1f
No signature found,fun <T: Int> isNullableNullable(a: AsInt<T>?) = a,,6e1f
No signature found,fun <T: Int> isNullableNotNullable(a: AsInt<T>?) = a,,6e1f
fun box(),": String {
    val a = AsAny(42)
    val b = AsAny(40 + 2)
    val a2 = AsAny2(42)
    val b2 = AsAny2(40 + 2)

    if (!a.myEq(b)) return ""Fail 1""
    if (a.myEq(42)) return ""Fail 2""
    if (a.myEq(""other"")) return ""Fail 3""

    if (!Reference.isNullable(a)) return ""Fail 4""
    if (!Reference.isNotNullable(a)) return ""Fail 5""
    if (!Reference.isNullableNullable(a)) return ""Fail 6""
    if (!Reference.isNullableNullable<Int>(null)) return ""Fail 7""
    if (!Reference.isNullableNotNullable(a)) return ""Fail 8""
    if (Reference.isNullableNotNullable<Int>(null)) return ""Fail 9""

    if (!Reference2.isNullable(a2)) return ""Fail 42""
    if (!Reference2.isNotNullable(a2)) return ""Fail 52""
    if (!Reference2.isNullableNullable(a2)) return ""Fail 62""
    if (!Reference2.isNullableNullable<Int>(null)) return ""Fail 72""
    if (!Reference2.isNullableNotNullable(a2)) return ""Fail 82""
    if (Reference2.isNullableNotNullable<Int>(null)) return ""Fail 92""

    val c = AsInt(42)
    val d = AsInt(40 + 2)
    if (!c.myEq(d)) return ""Fail 10""
    if (c.myEq(42)) return ""Fail 11""
    if (c.myEq(""other"")) return ""Fail 12""

    if (!Primitive.isNullable(c)) return ""Fail 13""
    if (!Primitive.isNotNullable(c)) return ""Fail 14""
    if (!Primitive.isNullableNullable(c)) return ""Fail 15""
    if (!Primitive.isNullableNullable<Int>(null)) return ""Fail 16""
    if (!Primitive.isNullableNotNullable(c)) return ""Fail 17""
    if (Primitive.isNullableNotNullable<Int>(null)) return ""Fail 18""

    if (!a.isCheck<AsAny<Int>>()) return ""Fail 19""
    if (!a.isCheck<AsAny<Int>?>()) return ""Fail 20""
    if (a.isCheck<AsInt<Int>>()) return ""Fail 21""

    if (!c.isCheck<AsInt<Int>>()) return ""Fail 22""
    if (!c.isCheck<AsInt<Int>?>()) return ""Fail 23""
    if (c.isCheck<AsAny<Int>>()) return ""Fail 24""

    if (!a2.isCheck<AsAny2<Int>>()) return ""Fail 192""
    if (!a2.isCheck<AsAny2<Int>?>()) return ""Fail 202""
    if (a2.isCheck<AsInt<Int>>()) return ""Fail 212""

    return ""OK""
}",,4f27
No signature found,fun foo(x: Int?): Int = x,// !CHECK_TYPE,6e1f
No signature found,"fun elvis(x: Number?): Int {
    val result = (x as Int?) ?: foo(x)
    checkSubtype<Int?>(x)
    return result
}",,6e1f
No signature found,"fun elvisWithRHSTypeInfo(x: Number?): Any? {
    val result = x ?: x!!
    checkSubtype<Int?>(<!ARGUMENT_TYPE_MISMATCH!>x<!>)
    return result
}",,6e1f
fun foo(),"val bar: Int
}

object Impl : IBase {
    override  {}",// !DIAGNOSTICS: -UNUSED_PARAMETER,519f
No signature found,fun Test.<!EXTENSION_SHADOWED_BY_MEMBER!>foo<!>() {},,6e1f
fun isEmpty(),: Boolean = t,,464e
fun containsKey(key: String),: Boolean = f,,8e9f
fun containsValue(value: Nothing),: Boolean = f,,c565
fun get(key: String),: Nothing? = n,,c233
fun box(),": String {
    val n = EmptyStringMap as Map<Any?, Any?>

    if (n.get(null) != null) return ""fail 1""
    if (n.containsKey(null)) return ""fail 2""
    if (n.containsValue(null)) return ""fail 3""

    return ""OK""
}",,4f27
fun ok(),": String = ""","// !JVM_DEFAULT_MODE: all
// TARGET_BACKEND: JVM
// WITH_STDLIB
// JVM_TARGET: 1.8
// WORKS_WHEN_VALUE_CLASS
// LANGUAGE: +ValueClasses",23f4
fun returnsUnboxed(),= I,,4d02
fun test(),: String = r,,fe98
No signature found,"fun builder(c: suspend () -> Unit) {
    c.startCoroutine(Continuation(EmptyCoroutineContext) {
        it.getOrThrow()
    }",,6e1f
fun box(),": String {
    var res = ""FAIL""
    builder {
        res = test()
    }",,4f27
No signature found,"fun checkMissingDependencySuperTypes(
    classifierType: ConeKotlinType?,
    source: KtSourceElement?,
    reporter: DiagnosticReporter,
    context: CheckerContext,
): Boolean = c",,6e1f
No signature found,"fun checkMissingDependencySuperTypes(
    declaration: FirBasedSymbol<*>?,
    source: KtSourceElement?,
    reporter: DiagnosticReporter,
    context: CheckerContext,
): Boolean {
    if (declaration !is FirClassSymbol<*>) return false

    val missingSuperTypes = context.session.missingDependencyStorage.getMissingSuperTypes(declaration)
    for (superType in missingSuperTypes) {
        reporter.reportOn(
            source,
            FirErrors.MISSING_DEPENDENCY_SUPERCLASS,
            superType.withArguments(emptyArray()).withNullability(ConeNullability.NOT_NULL, context.session.typeContext),
            declaration.constructType(emptyArray(), false),
            context
        )
    }",,6e1f
No signature found,"fun withSystemProperty(property: String, newValue: String?, fn: ()->Unit) {
    val backup = System.getProperty(property)
    setOrClearSysProperty(property, newValue)

    try {
        fn()
    }",,6e1f
No signature found,"fun setOrClearSysProperty(property: String, newValue: String?) {
    if (newValue != null) {
        System.setProperty(property, newValue)
    }",,6e1f
No signature found,"fun withDaemon(fn: () -> Unit) {
    val daemonHome = FileUtil.createTempDirectory(""daemon-home"", ""testJpsDaemonIC"")

    withSystemProperty(CompilerSystemProperties.COMPILE_DAEMON_CUSTOM_RUN_FILES_PATH_FOR_TESTS.property, daemonHome.absolutePath) {
        withSystemProperty(CompilerSystemProperties.COMPILE_DAEMON_ENABLED_PROPERTY.property, ""true"") {
            try {
                fn()
            }",,6e1f
fun <T> id(t: T),: T = t,"// FIR_IDENTICAL
// !CHECK_TYPE",3662
fun <T> id1(t: T),= t,,585e
fun <R> elem(t: List<R>),: R = t,,622d
"fun <R> elemAndList(r: R, t: List<R>)",: R = t,,16d6
"fun <T> both(t1: T, t2: T)",: T = t,,66e9
fun test1(),"{
    val a = elem(list(2))
    val b = id(elem(list(2)))
    val c = id(id1(id(id1(list(33)))))
    checkSubtype<Int>(a)
    checkSubtype<Int>(b)
    checkSubtype<List<Int>>(c)

    val d : ArrayList<Int> = newList()
    val e : ArrayList<Int> = id(newList())
    val f : ArrayList<Int> = id(id1(id(id1(newList()))))

    checkSubtype<List<Int>>(d)
    checkSubtype<List<Int>>(e)
    checkSubtype<List<Int>>(f)

    val g = elemAndList("""", newList())
    val h = elemAndList<Long>(1, newList<Long>())

    checkSubtype<String>(g)
    checkSubtype<Long>(h)

    val i = both(1, """")
    val j = both(id(1), id(""""))
    checkSubtype<Any>(i)
    checkSubtype<Any>(j)
}",,fa3b
fun <T> list(value: T),": ArrayList<T> {
    val list = ArrayList<T>()
    list.add(value)
    return list
}",,bdb2
fun <S> newList(),": ArrayList<S> {
    return ArrayList<S>()
}",,3cb3
No signature found,"fun serializeSingleTarget(
        node: CirRootNode,
        targetIndex: Int,
        statsCollector: StatsCollector?,
        moduleConsumer: (KlibModuleMetadata) -> Unit
    ) {
        node.accept(
            CirTreeSerializationVisitor(statsCollector, moduleConsumer),
            CirTreeSerializationContext.rootContext(node, targetIndex)
        )
    }",,6e1f
"fun visitRootNode(
        node: CirRootNode,
        rootContext: CirTreeSerializationContext
    )","{
        node.modules.forEach { (moduleName, moduleNode) ->
            val moduleContext = rootContext.moduleContext(moduleName)
            val module: KlibModuleMetadata = moduleNode.accept(this, moduleContext)?.cast() ?: return@forEach
            statsCollector?.logModule(moduleContext)
            moduleConsumer(module)
        }",,eb0a
"fun visitModuleNode(
        node: CirModuleNode,
        moduleContext: CirTreeSerializationContext
    )",": KlibModuleMetadata? {
        val cirModule = moduleContext.get<CirModule>(node) ?: return null

        val fragments: MutableCollection<KmModuleFragment> = mutableListOf()
        node.packages.mapNotNullTo(fragments) { (packageName, packageNode) ->
            val packageContext = moduleContext.packageContext(packageName)
            packageNode.accept(this, packageContext)?.cast()
        }",,9ec0
"fun visitPackageNode(
        node: CirPackageNode,
        packageContext: CirTreeSerializationContext
    )",": KmModuleFragment? {
        val cirPackage = packageContext.get<CirPackage>(node) ?: return null

        try {
            node.classes.forEach { (className, classNode) ->
                val classContext = packageContext.classifierContext(className)
                val clazz: KmClass = classNode.accept(this, classContext)?.cast() ?: return@forEach
                classConsumer.consume(clazz)
                statsCollector?.logClass(clazz, classContext)
            }",,21a9
"fun visitPropertyNode(
        node: CirPropertyNode,
        propertyContext: CirTreeSerializationContext
    )",": KmProperty? {
        return propertyContext.get<CirProperty>(node)?.serializeProperty(propertyContext)
    }",,ec43
"fun visitFunctionNode(
        node: CirFunctionNode,
        functionContext: CirTreeSerializationContext
    )",": KmFunction? {
        return functionContext.get<CirFunction>(node)?.serializeFunction(functionContext)
    }",,c2b8
"fun visitClassNode(
        node: CirClassNode,
        classContext: CirTreeSerializationContext
    )",": KmClass? {
        val cirClass = classContext.get<CirClass>(node) ?: return null

        val classTypeParametersCount = cirClass.typeParameters.size
        val fullClassName = classContext.currentPath.toString()

        val directNestedClasses: Collection<KmClass> = node.classes.mapNotNull { (nestedClassName, nestedClassNode) ->
            val nestedClassContext = classContext.classifierContext(nestedClassName, classTypeParametersCount)
            val nestedClass: KmClass = nestedClassNode.accept(this, nestedClassContext)?.cast() ?: return@mapNotNull null
            classConsumer.consume(nestedClass)
            statsCollector?.logClass(nestedClass, nestedClassContext)
            nestedClass
        }",,efb6
"fun visitClassConstructorNode(
        node: CirClassConstructorNode,
        constructorContext: CirTreeSerializationContext
    )",": KmConstructor? {
        return constructorContext.get<CirClassConstructor>(node)?.serializeConstructor(constructorContext)
    }",,17c4
"fun visitTypeAliasNode(
        node: CirTypeAliasNode,
        typeAliasContext: CirTreeSerializationContext
    )",": Any? {
        val cirClassifier = typeAliasContext.get<CirClassifier>(node) ?: return null

        return when (cirClassifier) {
            is CirTypeAlias -> cirClassifier.serializeTypeAlias(typeAliasContext)
            is CirClass -> {
                val fullClassName = typeAliasContext.currentPath.toString()
                cirClassifier.serializeClass(typeAliasContext, fullClassName, emptyList(), emptyList(), emptyList(), emptyList())
            }",,c496
No signature found,"fun StatsCollector.logModule(
            moduleContext: CirTreeSerializationContext
        ) = l",,6e1f
No signature found,"fun StatsCollector.logClass(
            clazz: KmClass,
            classContext: CirTreeSerializationContext
        ) = l",,6e1f
No signature found,"fun StatsCollector.logTypeAlias(
            typeAliasContext: CirTreeSerializationContext
        ) = l",,6e1f
No signature found,"fun StatsCollector.logProperty(
            propertyContext: CirTreeSerializationContext,
            propertyKey: PropertyApproximationKey,
            propertyNode: CirPropertyNode
        ) = l",,6e1f
No signature found,"fun StatsCollector.logFunction(
            function: KmFunction,
            functionContext: CirTreeSerializationContext,
            functionKey: FunctionApproximationKey
        ) = l",,6e1f
No signature found,"fun StatsCollector.logClassConstructor(
            constructor: KmConstructor,
            constructorContext: CirTreeSerializationContext,
            constructorKey: ConstructorApproximationKey
        ) = l",,6e1f
fun toString(),"= """,,a535
fun toString(),= m,,a535
fun nestedClassifier(classifierName: CirName),= C,,3aed
fun nestedCallableMember(memberName: CirName),= C,,a094
fun toString(),= p,,a535
fun nestedClassifier(classifierName: CirName),= C,,3aed
fun nestedCallableMember(memberName: CirName),= C,,a094
fun toString(),= c,,a535
fun toString(),= m,,a535
fun moduleContext(moduleName: CirName),": CirTreeSerializationContext {
        check(currentPath is Path.Empty)

        return CirTreeSerializationContext(
            targetIndex = targetIndex,
            isCommon = isCommon,
            typeParameterIndexOffset = 0,
            currentPath = Path.Module(moduleName)
        )
    }",,8dcc
fun packageContext(packageName: CirPackageName),": CirTreeSerializationContext {
        check(currentPath is Path.Module)

        return CirTreeSerializationContext(
            targetIndex = targetIndex,
            isCommon = isCommon,
            typeParameterIndexOffset = 0,
            currentPath = Path.Package(packageName)
        )
    }",,d744
No signature found,"fun classifierContext(
        classifierName: CirName,
        outerClassTypeParametersCount: Int = 0",,6e1f
No signature found,"fun callableMemberContext(
        memberName: CirName,
        ownerClassTypeParametersCount: Int = 0",,6e1f
No signature found,"fun <reified T : CirDeclaration> get(node: CirNode<*, *>): T? {
        return (if (isCommon) node.commonDeclaration() else node.targetDeclarations[targetIndex]) as T?
    }",,6e1f
No signature found,"fun <reified T : CirDeclaration> get(node: CirNodeWithLiftingUp<*, *>): T? {
        return when {
            isCommon -> node.commonDeclaration() as T?
            node.isLiftedUp -> null
            else -> node.targetDeclarations[targetIndex] as T?
        }",,6e1f
"fun rootContext(rootNode: CirRootNode, targetIndex: Int)",": CirTreeSerializationContext =
            C",,8c51
fun consume(clazz: KmClass),"{
        _allClasses += clazz
        if (clazz.modality == Modality.SEALED) _sealedClasses += clazz
    }",,2805
fun reset(),"{
        _allClasses.clear()
        _sealedClasses.clear()
    }",,64bc
fun use(token: String),"{
    result = token
}","// WITH_COROUTINES
// WITH_STDLIB

// FILE: test.kt",538e
No signature found,"fun f(crossinline body: suspend () -> Unit) =
    g",,6e1f
No signature found,"fun <
    reified U01, reified U02, reified U03, reified U04, reified U05, reified U06, reified U07, reified U08, reified U09, reified U10,
    reified U11, reified U12, reified U13, reified U14, reified U15, reified U16, reified U17, reified U18, reified U19, reified U20,
> g(crossinline body: suspend () -> Unit): suspend () -> Unit {
    return run {
        run {
            run {
                run {
                    run {
                        run {
                            run {
                                run {
                                    suspend {
                                        body()
                                    }",,6e1f
fun box(),": String {
    var token = ""OK""
    f {
        use(token)
    }",,4f27
fun declareSharedVariable(originalDeclaration: IrVariable),": IrVariable {
        val initializer = originalDeclaration.initializer ?: IrConstImpl.defaultValueForType(
            originalDeclaration.startOffset,
            originalDeclaration.endOffset,
            originalDeclaration.type
        )

        val boxClass = context.wasmSymbols.findClosureBoxClass(originalDeclaration.type)
        val constructorSymbol = boxClass.constructors.first()

        val irCall =
            IrConstructorCallImpl(
                startOffset = initializer.startOffset,
                endOffset = initializer.endOffset,
                type = boxClass.defaultType,
                symbol = constructorSymbol,
                typeArgumentsCount = boxClass.owner.typeParameters.size,
                constructorTypeArgumentsCount = constructorSymbol.owner.typeParameters.size,
                valueArgumentsCount = constructorSymbol.owner.valueParameters.size
            ).apply {
                putValueArgument(0, initializer)
            }",,4b42
"fun defineSharedValue(originalDeclaration: IrVariable, sharedVariableDeclaration: IrVariable)",= s,,cbb0
"fun getSharedValue(sharedVariableSymbol: IrValueSymbol, originalGet: IrGetValue)",": IrExpression {
        val boxClass = sharedVariableSymbol.owner.type.classOrFail.owner
        val valueProperty = boxClass.declarations.firstIsInstance<IrProperty>()

        check(valueProperty.name.asString() == ""value"")
        val propertyGetter = valueProperty.getter!!

        val propertyGet = IrCallImpl(
            startOffset = originalGet.startOffset,
            endOffset = originalGet.endOffset,
            type = propertyGetter.returnType,
            symbol = propertyGetter.symbol,
            typeArgumentsCount = 0,
            valueArgumentsCount = 0,
            origin = originalGet.origin
        ).also {
            it.dispatchReceiver = IrGetValueImpl(
                startOffset = originalGet.startOffset,
                endOffset = originalGet.endOffset,
                type = boxClass.defaultType,
                symbol = sharedVariableSymbol,
                origin = originalGet.origin
            )
        }",,cb76
"fun setSharedValue(sharedVariableSymbol: IrValueSymbol, originalSet: IrSetValue)",": IrExpression {
        val boxClass = sharedVariableSymbol.owner.type.classOrFail.owner
        val valueProperty = boxClass.declarations.firstIsInstance<IrProperty>()

        check(valueProperty.name.asString() == ""value"")
        val propertySetter = valueProperty.setter!!

        val propertySet = IrCallImpl(
            startOffset = originalSet.startOffset,
            endOffset = originalSet.endOffset,
            type = propertySetter.returnType,
            symbol = propertySetter.symbol,
            typeArgumentsCount = 0,
            valueArgumentsCount = 1,
            origin = originalSet.origin
        ).also {
            it.dispatchReceiver = IrGetValueImpl(
                startOffset = originalSet.startOffset,
                endOffset = originalSet.endOffset,
                type = boxClass.defaultType,
                symbol = sharedVariableSymbol,
                origin = originalSet.origin
            )
            it.putValueArgument(0, originalSet.value)
        }",,ba97
No signature found,"fun writeKotlinMetadata(
    cb: ClassBuilder,
    config: JvmBackendConfig,
    kind: KotlinClassHeader.Kind,
    publicAbi: Boolean,
    extraFlags: Int,
    action: (AnnotationVisitor) -> Unit
) {
    val av = cb.newAnnotation(JvmAnnotationNames.METADATA_DESC, true)
    av.visit(JvmAnnotationNames.METADATA_VERSION_FIELD_NAME, config.metadataVersion.toArray())
    if (!config.metadataVersion.isAtLeast(1, 5, 0)) {
        av.visit(""bv"", JvmBytecodeBinaryVersion.INSTANCE.toArray())
    }",,6e1f
"fun writeSyntheticClassMetadata(cb: ClassBuilder, config: JvmBackendConfig, publicAbi: Boolean)","{
    writeKotlinMetadata(cb, config, KotlinClassHeader.Kind.SYNTHETIC_CLASS, publicAbi, 0) { _ ->
        // Do nothing
    }",,d089
fun generateLanguageVersionSettingsBasedMetadataFlags(languageVersionSettings: LanguageVersionSettings),": Int {
    var flags = 0
    if (languageVersionSettings.isPreRelease()) {
        flags = flags or JvmAnnotationNames.METADATA_PRE_RELEASE_FLAG
    }",,9662
"fun check(declaration: KtDeclaration, descriptor: DeclarationDescriptor, context: DeclarationCheckerContext)","{
        val trace = context.trace
        val bindingContext = trace.bindingContext

        fun checkTypeParameter(descriptor: TypeParameterDescriptor) {
            for (upperBound in descriptor.upperBounds) {
                if (!upperBound.isExportable(bindingContext)) {
                    val typeParameterDeclaration = DescriptorToSourceUtils.descriptorToDeclaration(descriptor)!!
                    trace.report(ErrorsJs.NON_EXPORTABLE_TYPE.on(typeParameterDeclaration, ""upper bound"", upperBound))
                }",,5073
fun checkValueParameter(descriptor: ValueParameterDescriptor),"{
            if (!descriptor.type.isExportable(bindingContext)) {
                val valueParameterDeclaration = DescriptorToSourceUtils.descriptorToDeclaration(descriptor)!!
                trace.report(ErrorsJs.NON_EXPORTABLE_TYPE.on(valueParameterDeclaration, ""parameter"", descriptor.type))
            }",,4465
fun reportWrongExportedDeclaration(kind: String),"{
            trace.report(ErrorsJs.WRONG_EXPORTED_DECLARATION.on(declaration, kind))
        }",,9e3d
No signature found,"fun KotlinType.isExportableReturn(bindingContext: BindingContext, currentlyProcessed: MutableSet<KotlinType> = m",,6e1f
No signature found,"fun KotlinType.isExportable(
        bindingContext: BindingContext,
        currentlyProcessed: MutableSet<KotlinType> = m",,6e1f
"fun validateDeclarationOnConsumableName(
        declaration: KtDeclaration,
        declarationDescriptor: DeclarationDescriptor,
        trace: BindingTrace
    )","{
        if (!declarationDescriptor.isTopLevelInPackage() || declarationDescriptor.name.isSpecial) return

        val name = declarationDescriptor.getKotlinOrJsName()

        if (name in SPECIAL_KEYWORDS || (name !in RESERVED_KEYWORDS && NameSuggestion.sanitizeName(name) == name)) return

        val reportTarget = declarationDescriptor.getJsNameArgument() ?: declaration.getIdentifier()

        trace.report(ErrorsJs.NON_CONSUMABLE_EXPORTED_IDENTIFIER.on(reportTarget, name))
    }",,dd91
No signature found,"fun DeclarationDescriptor.getKotlinOrJsName(): String {
        return AnnotationsUtils.getJsName(this) ?: name.identifier
    }",,6e1f
No signature found,"fun KtDeclaration.getIdentifier(): PsiElement {
        return (this as KtNamedDeclaration).nameIdentifier!!
    }",,6e1f
No signature found,"fun DeclarationDescriptor.getJsNameArgument(): PsiElement? {
        val jsNameAnnotation = AnnotationsUtils.getJsNameAnnotation(this) ?: return null
        return (jsNameAnnotation.source.getPsi() as KtAnnotationEntry).valueArgumentList?.arguments?.first()
    }",,6e1f
No signature found,"fun foo(future: Future<String?>) {
    future.get().length
}","// FULL_JDK
// LANGUAGE: +JavaTypeParameterDefaultRepresentationWithDNN
// JVM_TARGET: 1.8",6e1f
No signature found,"fun bar(threadLocal: ThreadLocal<String?>) {
    threadLocal.get().length
}",,6e1f
No signature found,"fun baz(ref: AtomicReference<String?>) {
    ref.get().length
}",,6e1f
No signature found,fun <T> mrun(block: () -> T) = b,"// NO_CHECK_LAMBDA_INLINING
// FILE: 1.kt",6e1f
fun bar(o: String),": String {
    val callable = mrun {
        fun localAnonymousFun(k: String): String {
            val obj = object {
                fun foo() = o + k
            }",,1b39
fun box(),= b,,4f27
No signature found,fun foo(x: Int = 2,"// DONT_TARGET_EXACT_BACKEND: WASM
// WASM_MUTE_REASON: CLASS_EXPORT
// EXPECTED_REACHABLE_NODES: 1294",6e1f
fun foo(x: Int),"{
        global += ""B.foo($x);""
    }",,0028
fun bar(a: A),"fun box(): String {
    bar(A())
    bar(B())

    if (global != ""A.foo(23);A.foo(99);B.foo(23);B.foo(99);"") return ""fail: $global""

    return ""OK""
}",,02ec
No signature found,"fun test(s: () -> String): String {
    return s()
}",// FILE: 1.kt,6e1f
fun box(),": String {
    return test(Foo(""OK"")::a)
}",// FILE: 2.kt,4f27
No signature found,"fun A.i(): Int {
    c = c + 1
    return c
}",// EXPECTED_REACHABLE_NODES: 1283,6e1f
fun box(),": String {
    var a1: A? = A()
    var a2: A? = null
    if (a1?.i() != 4) {
        return ""1"";
    }",,4f27
fun run(),"{
        for (checker in configuration.enabledClassMetadataCheckers) {
            checker.check(metadata1, metadata2, report)
        }",,354f
No signature found,"fun add(obj: Any?) {
        assertNotNull(obj)
        weakRefs += WeakReference(obj)
        assertFalse(objectsAreDead())
    }",,6e1f
fun isEmpty(),= w,,464e
fun objectsAreDead(),= w,,7704
fun gc(),= k,,3d38
fun sendKotlinObject(kotlinObject: KotlinObject),"fun blockReceivingKotlinObject(): (KotlinObject) -> Unit
    fun sendSwiftObject(swiftObject: Any)
    fun sendList(list: List<*>)
    fun sendString(string: String)
    fun sendNumber(number: Any)
    fun sendBlock(block: () -> KotlinObject)
    suspend fun sendCompletion(): Any?
}

interface NoAutoreleaseReceiveHelper {
    fun receiveKotlinObject(): KotlinObject
    fun receiveSwiftObject(): Any
    fun receiveList(): List<*>
    fun receiveString(): String
    fun receiveNumber(): Any
    fun receiveBlock(): () -> KotlinObject
}",,38dc
fun sendKotlinObject(kotlinObject: KotlinObject),= k,,38dc
fun blockReceivingKotlinObject(),: (KotlinObject) -> Unit = {,,6833
fun sendSwiftObject(swiftObject: Any),= k,,bbf7
No signature found,fun sendList(list: List<*>) = k,,6e1f
fun sendString(string: String),= k,,92f7
fun sendNumber(number: Any),= k,,85f8
No signature found,fun sendBlock(block: () -> KotlinObject) = k,,6e1f
fun sendCompletion(),= s,,32dc
fun receiveKotlinObject(),: KotlinObject = k,,97a3
fun receiveSwiftObject(),: Any = s,,9335
fun receiveList(),: List<*> = l,,6552
fun receiveString(),: String = s,,c725
fun receiveNumber(),: Any = n,,4ac9
fun receiveBlock(),: () -> KotlinObject = b,,7e09
"fun callSendKotlinObject(helper: NoAutoreleaseSendHelper, tracker: KotlinLivenessTracker)","{
    val kotlinObject = KotlinObject()

    // Repeating twice to cover possible fast paths after caching something for an object.
    helper.sendKotlinObject(kotlinObject)
    helper.sendKotlinObject(kotlinObject)
    tracker.add(kotlinObject)
}",,5c5e
"fun sendKotlinObjectToBlock(helper: NoAutoreleaseSendHelper, tracker: KotlinLivenessTracker)","{
    val kotlinObject = KotlinObject()

    helper.blockReceivingKotlinObject()(kotlinObject)
    helper.blockReceivingKotlinObject()(kotlinObject)
    tracker.add(kotlinObject)
}",,f1c1
"fun callSendSwiftObject(helper: NoAutoreleaseSendHelper, tracker: KotlinLivenessTracker, swiftObject: Any)","{
    helper.sendSwiftObject(swiftObject)
    helper.sendSwiftObject(swiftObject)
    tracker.add(swiftObject)
}",,c25b
"fun callSendList(helper: NoAutoreleaseSendHelper, tracker: KotlinLivenessTracker)","{
    val list = listOf(Any())

    helper.sendList(list)
    helper.sendList(list)
    tracker.add(list)
}",,0728
"fun callSendString(helper: NoAutoreleaseSendHelper, tracker: KotlinLivenessTracker)","{
    val string = Any().toString()

    helper.sendString(string)
    helper.sendString(string)
    tracker.add(string)
}",,0c4c
"fun callSendNumber(helper: NoAutoreleaseSendHelper, tracker: KotlinLivenessTracker)","{
    val number = createKotlinNumber()

    helper.sendNumber(number)
    helper.sendNumber(number)
    tracker.add(number)
}",,c8e6
"fun callSendBlock(helper: NoAutoreleaseSendHelper, tracker: KotlinLivenessTracker)","{
    val block = createLambda()

    helper.sendBlock(block)
    helper.sendBlock(block)
    tracker.add(block)
}",,5763
No signature found,fun resumeWith(result: Result<Any?>) { result.getOrThrow() },,6e1f
"fun callSendCompletion(helper: NoAutoreleaseSendHelper, tracker: KotlinLivenessTracker)","{
    val completion = EmptyContinuation()

    suspend {
        helper.sendCompletion()
        helper.sendCompletion()
    }",,9b15
"fun callReceiveKotlinObject(helper: NoAutoreleaseReceiveHelper, tracker: KotlinLivenessTracker)",= r,,84a0
"fun callReceiveSwiftObject(helper: NoAutoreleaseReceiveHelper, tracker: KotlinLivenessTracker)",= r,,b1fb
"fun callReceiveList(helper: NoAutoreleaseReceiveHelper, tracker: KotlinLivenessTracker)",= r,,58f2
"fun callReceiveString(helper: NoAutoreleaseReceiveHelper, tracker: KotlinLivenessTracker)",= r,,37c4
"fun callReceiveNumber(helper: NoAutoreleaseReceiveHelper, tracker: KotlinLivenessTracker)",= r,,5097
"fun callReceiveBlock(helper: NoAutoreleaseReceiveHelper, tracker: KotlinLivenessTracker)",= r,,4d1f
"fun callReceiveBlockAndCall(helper: NoAutoreleaseReceiveHelper, tracker: KotlinLivenessTracker)",= r,,0e07
fun objc_autoreleasePoolPush(),= k,,9af5
fun objc_autoreleasePoolPop(handle: NativePtr),= k,,3dfe
fun useIntArray(array: IntArray),{},,90dd
fun createLambda(),": () -> KotlinObject {
    val lambdaResult = KotlinObject()
    return { lambdaResult }",// Just to make IntArray available from Swift.,a59d
fun createLambda(kotlinLivenessTracker: KotlinLivenessTracker),": () -> KotlinObject {
    val lambdaResult = KotlinObject()
    return {
        val result = lambdaResult // make it capturing thus dynamic.
        kotlinLivenessTracker.add(result)
        result
    }",// make it capturing thus dynamic.,6a8e
fun createKotlinNumber(),: Any = (,,f7ed
fun test(),{},"// !LANGUAGE: -ProhibitProtectedCallFromInline
// !DIAGNOSTICS: -EXPOSED_PARAMETER_TYPE -NOTHING_TO_INLINE

// FILE: JavaClass.java",fe98
fun call(),"{
        <!PROTECTED_CALL_FROM_PUBLIC_INLINE_WARNING!>test<!>()
        <!PROTECTED_CALL_FROM_PUBLIC_INLINE_WARNING!>z<!>
        zVar
        <!PROTECTED_CALL_FROM_PUBLIC_INLINE_WARNING!>zVar<!> = ""123""
    }",,f930
fun callFromInternal(),"{
        test()
        zVar
        zVar = ""123""
    }",,109f
fun callFromPublished(),"{
        <!PROTECTED_CALL_FROM_PUBLIC_INLINE_WARNING!>test<!>()
        <!PROTECTED_CALL_FROM_PUBLIC_INLINE_WARNING!>z<!>
        zVar
        <!PROTECTED_CALL_FROM_PUBLIC_INLINE_WARNING!>zVar<!> = ""123""
    }",,d984
fun callFromProtected(),"{
        test()
        zVar
        zVar = ""123""
    }",,26e3
fun testB(),"{
        <!PROTECTED_CALL_FROM_PUBLIC_INLINE_WARNING!>test<!>()
    }",,ae58
fun call(),"{
        <!PROTECTED_CALL_FROM_PUBLIC_INLINE_WARNING!>bind<!>()
    }",,f930
fun callFromInternal(),"{
        bind()
    }",,109f
fun callFromProtected(),"{
        bind()
    }",,26e3
fun callFromPublished(),"{
        <!PROTECTED_CALL_FROM_PUBLIC_INLINE_WARNING!>bind<!>()
    }",,d984
fun test(),{},,fe98
fun call(),"{
        test()
    }",,f930
fun call2(),"{
        test()
    }",,8d12
fun effictivelyNonPublic(),"{
            test()
        }",,d990
fun <T> suspendAndLog(value: T),: T = s,"// WITH_STDLIB
// WITH_COROUTINES",7a66
No signature found,"fun builder(c: suspend Controller.() -> String): String {
    val controller = Controller()
    c.startCoroutine(controller, handleResultContinuation {
        controller.log += ""return($it);""
    }",,6e1f
fun box(),": String {
    val result = builder { suspendAndLog(""OK"") }",,4f27
fun beforeLoop(),"{
        super.beforeLoop()

        indexVar = createLoopTempVariable(Type.INT_TYPE)

        val loopRange = forExpression.loopRange
        val value = codegen.gen(loopRange)
        val loopRangeType: KotlinType = bindingContext.getType(forExpression.loopRange!!)!!
        val asmLoopRangeType = codegen.asmType(loopRangeType)

        // NB even if we already have a loop range stored in local variable, that variable might be modified in the loop body
        // (see controlStructures/forInCharSequenceMut.kt).
        // We should always store the corresponding CharSequence to a local variable to preserve the Iterator-based behavior.
        charSequenceVar = createLoopTempVariable(charSequenceType)
        value.put(asmLoopRangeType, loopRangeType, v)
        v.store(charSequenceVar, charSequenceType)

        if (canCacheLength) {
            charSequenceLengthVar = createLoopTempVariable(Type.INT_TYPE)
            v.load(charSequenceVar, charSequenceType)
            v.invokeCharSequenceMethod(""length"", ""()I"")
            v.store(charSequenceLengthVar, Type.INT_TYPE)
        }",,df42
fun checkEmptyLoop(loopExit: Label),{},,34ed
fun checkPreCondition(loopExit: Label),"{
        v.load(indexVar, Type.INT_TYPE)
        if (canCacheLength) {
            v.load(charSequenceLengthVar, Type.INT_TYPE)
        }",,9287
fun assignToLoopParameter(),"{
        v.load(charSequenceVar, charSequenceType)
        v.load(indexVar, Type.INT_TYPE)
        v.invokeCharSequenceMethod(""charAt"", ""(I)C"")
        StackValue.onStack(Type.CHAR_TYPE).put(loopParameterType, loopParameterKotlinType, codegen.v)
        v.store(loopParameterVar, loopParameterType)
    }",,f6cc
fun checkPostConditionAndIncrement(loopExit: Label),"{
        v.iinc(indexVar, 1)
    }",,ebe1
No signature found,"fun InstructionAdapter.invokeCharSequenceMethod(name: String, desc: String) {
        val charSequenceClassType = charSequenceClassType
        if (charSequenceClassType != null) {
            invokevirtual(charSequenceClassType.internalName, name, desc, false)
        }",,6e1f
fun resolveClass(javaClass: JavaClass),": ClassDescriptor? {
        val fqName = javaClass.fqName
        if (fqName != null && javaClass.lightClassOriginKind == LightClassOriginKind.SOURCE) {
            return javaResolverCache.getClassResolvedFromSource(fqName)
        }",,caaf
fun invoke(myParamName: String),{},,0c80
fun test1(f: Function1Impl),"{
    f("""")
    f(<!NO_VALUE_FOR_PARAMETER!><!NAMED_PARAMETER_NOT_FOUND!>p0<!> = """")<!>
    f(myParamName = """")
    f.invoke("""")
    f.invoke(<!NO_VALUE_FOR_PARAMETER!><!NAMED_PARAMETER_NOT_FOUND!>p0<!> = """")<!>
    f.invoke(myParamName = """")
}",,6372
No signature found,"fun test2(f: (String) -> Unit) {
    f("""")
    f(<!NO_VALUE_FOR_PARAMETER!><!NAMED_ARGUMENTS_NOT_ALLOWED, NAMED_PARAMETER_NOT_FOUND!>p0<!> = """")<!>
    f(<!NO_VALUE_FOR_PARAMETER!><!NAMED_ARGUMENTS_NOT_ALLOWED, NAMED_PARAMETER_NOT_FOUND!>myParamName<!> = """")<!>
    f.invoke("""")
    f.invoke(<!NO_VALUE_FOR_PARAMETER!><!NAMED_ARGUMENTS_NOT_ALLOWED, NAMED_PARAMETER_NOT_FOUND!>p0<!> = """")<!>
    f.invoke(<!NO_VALUE_FOR_PARAMETER!><!NAMED_ARGUMENTS_NOT_ALLOWED, NAMED_PARAMETER_NOT_FOUND!>myParamName<!> = """")<!>
}",,6e1f
No signature found,"fun test3(f: String.(String) -> Unit) {
    """".f("""")
    """".f(<!NO_VALUE_FOR_PARAMETER!><!NAMED_ARGUMENTS_NOT_ALLOWED, NAMED_PARAMETER_NOT_FOUND!>p0<!> = """")<!>
    """".f(<!NO_VALUE_FOR_PARAMETER!><!NAMED_ARGUMENTS_NOT_ALLOWED, NAMED_PARAMETER_NOT_FOUND!>zzz<!> = """")<!>
}",,6e1f
No signature found,"fun test4(f: (myParamName: String) -> Unit) {
    f("""")
    f(<!NO_VALUE_FOR_PARAMETER!><!NAMED_ARGUMENTS_NOT_ALLOWED, NAMED_PARAMETER_NOT_FOUND!>p0<!> = """")<!>
    f(<!NAMED_ARGUMENTS_NOT_ALLOWED!>myParamName<!> = """")
    f.invoke("""")
    f.invoke(<!NO_VALUE_FOR_PARAMETER!><!NAMED_ARGUMENTS_NOT_ALLOWED, NAMED_PARAMETER_NOT_FOUND!>p0<!> = """")<!>
    f.invoke(<!NAMED_ARGUMENTS_NOT_ALLOWED!>myParamName<!> = """")
}",,6e1f
fun doJob(),": Result
}

class Inheritor(context: Context) : BaseClass(context, 5, true) {
    override  = Result.SUCCESS
}","// STRIP_METADATA
// TODO: Re-enable metadata generation",2c35
fun ok(),"= ""","// NO_COMMON_FILES
// MODULE: lib
// FILE: lib.kt",23f4
fun testLib(),= o,,4e71
fun ok(),"= """,,23f4
fun testAux(),= o,,eab8
fun ok(),"= """,,23f4
fun box(),": String {
    if (testLib() != ""Lib"") return ""fail1""
    if (testAux() != ""Aux"") return ""fail2""
    return ok()
}",,4f27
fun bar1(x : BigEnum),": String {
    when (x) {
        BigEnum.ITEM1, BigEnum.ITEM2, BigEnum.ITEM3 -> return ""123""
        BigEnum.ITEM4, BigEnum.ITEM5, BigEnum.ITEM6 -> return ""456""
        else -> return ""-1""
    }",,27a7
fun bar2(x : BigEnum),": String {
    when (x) {
        BigEnum.ITEM7, BigEnum.ITEM8, BigEnum.ITEM9 -> return ""789""
        BigEnum.ITEM10 -> return ""10""
        BigEnum.ITEM11, BigEnum.ITEM12 -> return ""1112""
        else -> return ""-1""
    }",,8004
fun main(),"{
    """".run {
        """"
    }",,d987
No signature found,fun <T> T.run(f: (T) -> Unit): Unit = f,,6e1f
fun patchTypeParametersForDefaultImplMethod(function: CallableMemberDescriptor),": ReceiverTypeAndTypeParameters {
    val classDescriptor = function.containingDeclaration as ClassDescriptor
    val functionTypeParameterNames = function.typeParameters.map { it.name.asString() }",,c060
No signature found,"fun CallableMemberDescriptor.createTypeParameterWithNewName(
    descriptor: TypeParameterDescriptor,
    newName: String
): TypeParameterDescriptorImpl {
    val newDescriptor = TypeParameterDescriptorImpl.createForFurtherModification(
        this,
        descriptor.annotations,
        descriptor.isReified,
        descriptor.variance,
        Name.identifier(newName),
        descriptor.index,
        descriptor.source,
        descriptor.storageManager
    )
    descriptor.upperBounds.forEach {
        newDescriptor.addUpperBound(it)
    }",,6e1f
fun isInlineClassConstructorAccessor(descriptor: FunctionDescriptor),": Boolean =
    d",,6277
fun testAllConstructors(),"{
        // Mostly test NO_ACTUAL_WITHOUT_EXPECT though
        val cause = ArithmeticException()
        val message = ""message""
        checkException(CancellationException(message, cause), cause, message)
        checkException(CancellationException(message, null), null, message)
        checkException(CancellationException(cause), cause, cause.defaultMessage())
        checkException(CancellationException(message), null, message)
        checkException(CancellationException(null, cause), cause, null)
        checkException(CancellationException(cause = cause), cause, cause.defaultMessage())
        // does not work on JVM because of typealias
//      checkException(CancellationException(message = message), null, message)
        checkException(CancellationException(), null, null)
    }",,a876
No signature found,fun Throwable?.defaultMessage() = t,,6e1f
No signature found,"fun checkException(e: CancellationException, expectedCause: Throwable?, expectedMessage: String?) {
        assertEquals(expectedCause, e.cause)
        assertEquals(expectedMessage, e.message)
    }",,6e1f
fun method(a: A),"fun interface B {
    : String
}","// KT-44622
// MODULE: lib
// FILE: A.kt",e17a
fun box(),: String = b,"// MODULE: main(lib)
// FILE: B.kt",4f27
fun resolve(target: LLFirResolveTarget),"{
        val resolver = createTargetResolver(target)
        requireWithAttachment(
            resolverPhase == resolver.resolverPhase,
            {
                """"""
                Phase mismatch between ${this::class.simpleName}",,e83a
fun createTargetResolver(target: LLFirResolveTarget),": LLFirTargetResolver

    fun checkIsResolved(target: FirElementWithResolveState) {
        target.checkPhase(resolverPhase)
        phaseSpecificCheckIsResolved(target)
        checkNestedDeclarationsAreResolved(target)
    }",,546c
fun phaseSpecificCheckIsResolved(target: FirElementWithResolveState),"private fun checkNestedDeclarationsAreResolved(target: FirElementWithResolveState) {
        if (target !is FirDeclaration) return

        checkFunctionParametersAreResolved(target)
        checkVariableSubDeclarationsAreResolved(target)
        checkTypeParametersAreResolved(target)
    }","/**
     * Check that phase-specific conditions are met
     * Will be performed to resolved declaration and its nested declarations
     * @see checkNestedDeclarationsAreResolved
     */",4394
fun checkVariableSubDeclarationsAreResolved(declaration: FirDeclaration),"{
        if (declaration !is FirVariable) return

        declaration.getter?.let(::checkIsResolved)
        declaration.setter?.let(::checkIsResolved)
        declaration.backingField?.let(::checkIsResolved)
    }",,0e4d
fun checkFunctionParametersAreResolved(declaration: FirDeclaration),"{
        if (declaration !is FirFunction) return

        for (parameter in declaration.valueParameters) {
            checkIsResolved(parameter)
        }",,0c5f
fun checkTypeParametersAreResolved(declaration: FirDeclaration),"{
        if (declaration !is FirTypeParameterRefsOwner) return

        for (parameter in declaration.typeParameters) {
            if (parameter !is FirTypeParameter) continue
            checkIsResolved(parameter)
        }",,72d1
fun foo(),": Int
}

class A {
    val String.x: Int get() {
        return field.foo()
    }",,519f
No signature found,"fun FirSimpleFunction.hasValidJsCodeBody(): Boolean =
    b",,6e1f
No signature found,"fun FirProperty.hasValidJsCodeBody(): Boolean =
    t",,6e1f
No signature found,"fun FirBlock.isValidJsCodeBody(): Boolean {
    val singleStatement = statements.singleOrNull()
        ?: return false

    return when {
        singleStatement is FirFunctionCall ->
            singleStatement.isJsCodeCall()

        singleStatement is FirReturnExpression && this is FirSingleExpressionBlock ->
            singleStatement.result.isJsCodeCall()

        else ->
            false
    }",,6e1f
No signature found,"fun FirExpression.isJsCodeCall(): Boolean {
    if (this !is FirFunctionCall)
        return false

    val symbol = calleeReference.toResolvedCallableSymbol()
        ?: return false

    return symbol.callableId == WebCommonStandardClassIds.Callables.Js
}",,6e1f
fun box(),"{
    foo(""abc"")
}","// FIR_IDENTICAL
// !DIAGNOSTICS: -UNUSED_PARAMETER",4f27
No signature found,fun Array<Int>.push(element: Int): Unit = a,"// KJS_WITH_FULL_RUNTIME
// EXPECTED_REACHABLE_NODES: 1534",6e1f
No signature found,"fun Array<Int>.splice(index: Int, howMany: Int): Unit = a",,6e1f
"fun moveTo(source: Array<Int>, sink: Array<Int>)",": PairArray<Int, Int> {
    val size = source.size
    for (i in 1..size) {
        val element = source[0]
        source.splice(0, 1)
        sink.push(element)
    }",,9e03
fun box(),": String {
    val expected = PairArray<Int, Int>(arrayOf(), arrayOf(1,2,3,4))
    assertTrue(expected.deepEquals(moveTo(arrayOf(3, 4),  arrayOf(1, 2))))

    return ""OK""
}",,4f27
No signature found,"fun <T, R> PairArray<T, R>.deepEquals(other: PairArray<T, R>): Boolean {
    return fst.asList() == other.fst.asList() && snd.asList() == other.snd.asList()
}",,6e1f
fun execute(),": T
}

class SomeImplementation : SomeClass<String>() {
    override : String = ""Test""
}","// !LANGUAGE: +PartiallySpecifiedTypeArguments
// WITH_STDLIB
// TARGET_BACKEND: JVM",1f3c
No signature found,"fun <reified S: SomeClass<T>, T> run() : T {
        return S::class.java.newInstance().execute()
    }",,6e1f
fun box(),": String {
    val s = Runner.run<SomeImplementation, _>() // T is inferred to String
    return ""OK""
}",,4f27
No signature found,"fun PackageFragmentReadingContext(library: KotlinLibrary, packageFragmentProto: ProtoBuf.PackageFragment): PackageFragmentReadingContext? {
    val nameResolver = NameResolverImpl(packageFragmentProto.strings, packageFragmentProto.qualifiedNames)
    val packageFqName = packageFragmentProto.`package`.getExtensionOrNull(KlibMetadataProtoBuf.packageFqName)
        ?.let { packageFqNameStringIndex -> nameResolver.getPackageFqName(packageFqNameStringIndex) }",,6e1f
"fun <T, R> foo(x: T)",: R = T,"// DONT_TARGET_EXACT_BACKEND: JVM
// DONT_TARGET_EXACT_BACKEND: JVM_IR

// WITH_STDLIB
// WITH_REFLECT",ecdc
fun <T> fooReturnInt(x: T),: Int = 1,,4414
No signature found,"fun <reified T, reified R> check(x: T, y: R, f: (T) -> R, tType: String, rType: String) {
    assertEquals(tType, T::class.simpleName)
    assertEquals(rType, R::class.simpleName)
}",,6e1f
No signature found,"fun <reified T, reified R> check(f: (T) -> R, g: (T) -> R, tType: String, rType: String) {
    assertEquals(tType, T::class.simpleName)
    assertEquals(rType, R::class.simpleName)
}",,6e1f
fun box(),": String {
    check("""", 1, ::foo, ""String"", ""Int"")
    check("""", 1, ::fooReturnInt, ""String"", ""Int"")
    check("""", """", ::fooReturnInt, ""String"", ""Comparable"")  // KT-59348 JVM backends have not ""Comparable"", but ""Any"" as common parent for Int and String

    check(Int::toString, ::foo, ""Int"", ""String"")

    return ""OK""
}",,4f27
fun newAssignmentIndex(),": Int {
        return assignmentCounter++
    }",,585e
fun reset(),"{
        graphBuilder.reset()
        preliminaryLoopVisitor.resetState()
        variablesClearedBeforeLoop.reset()
        variableAssignmentAnalyzer.reset()
        variableStorage = variableStorage.clear()
    }",,64bc
No signature found,"fun createFirDataFlowAnalyzer(
            components: FirAbstractBodyResolveTransformer.BodyResolveTransformerComponents,
            dataFlowAnalyzerContext: DataFlowAnalyzerContext,
        ): FirDataFlowAnalyzer =
            o",,6e1f
No signature found,"fun receiverUpdated(symbol: FirBasedSymbol<*>, info: TypeStatement?) {
                    val index = receiverStack.getReceiverIndex(symbol) ?: return
                    val originalType = receiverStack.getOriginalType(index)
                    receiverStack.replaceReceiverType(index, info.smartCastedType(typeContext, originalType))
                }",,6e1f
No signature found,"fun ConeKotlinType.isAcceptableForSmartcast(): Boolean {
                            if (this.isNullableNothing) return false
                            return when (this) {
                                is ConeClassLikeType -> {
                                    val symbol =
                                        fullyExpandedType(components.session).lookupTag.toSymbol(components.session) ?: return false
                                    val declaration = symbol.fir as? FirRegularClass ?: return true
                                    visibilityChecker.isClassLikeVisible(
                                        declaration,
                                        components.session,
                                        components.context.file,
                                        components.context.containers,
                                    )
                                }",,6e1f
No signature found,"fun receiverUpdated(symbol: FirBasedSymbol<*>, info: TypeStatement?)

    private val graphBuilder get() = c",,6e1f
No signature found,"fun isAccessToUnstableLocalVariable(expression: FirElement, targetType: ConeKotlinType?): Boolean =
        c",,6e1f
fun getTypeUsingSmartcastInfo(expression: FirExpression),": Pair<PropertyStability, MutableList<ConeKotlinType>>? {
        val flow = currentSmartCastPosition ?: return null
        val variable = variableStorage.getRealVariableWithoutUnwrappingAlias(flow, expression) ?: return null
        val types = flow.getTypeStatement(variable)?.exactType?.ifEmpty { null }",,2fe7
fun returnExpressionsOfAnonymousFunctionOrNull(function: FirAnonymousFunction),": Collection<FirAnonymousFunctionReturnExpressionInfo>? =
        g",,879d
fun returnExpressionsOfAnonymousFunction(function: FirAnonymousFunction),": Collection<FirAnonymousFunctionReturnExpressionInfo> =
        r",,ebb5
fun enterFunction(function: FirFunction),"{
        if (function is FirDefaultPropertyAccessor) return

        val (localFunctionNode, functionEnterNode) = if (function is FirAnonymousFunction) {
            null to graphBuilder.enterAnonymousFunction(function)
        }",,90e9
fun exitFunction(function: FirFunction),": FirControlFlowGraphReference? {
        if (function is FirDefaultPropertyAccessor) return null

        context.variableAssignmentAnalyzer.exitFunction()
        if (function is FirAnonymousFunction && function.invocationKind?.canBeRevisited() != false) {
            exitRepeatableStatement(function)
        }",,4ab4
fun enterAnonymousFunctionExpression(anonymousFunctionExpression: FirAnonymousFunctionExpression),"{
        graphBuilder.enterAnonymousFunctionExpression(anonymousFunctionExpression)?.mergeIncomingFlow()
    }",,fb06
"fun enterFile(file: FirFile, buildGraph: Boolean)","{
        graphBuilder.enterFile(file, buildGraph)?.mergeIncomingFlow()
    }",// ----------------------------------- Files ------------------------------------------,0ea5
fun exitFile(),": ControlFlowGraph? {
        val (node, graph) = graphBuilder.exitFile()
        if (node != null) {
            node.mergeIncomingFlow()
        }",,b1c2
"fun enterClass(klass: FirClass, buildGraph: Boolean)","{
        val (outerNode, enterNode) = graphBuilder.enterClass(klass, buildGraph)
        outerNode?.mergeIncomingFlow()
        enterNode?.mergeIncomingFlow()
        context.variableAssignmentAnalyzer.enterClass(klass)
    }",,5d25
fun exitClass(),": ControlFlowGraph? {
        context.variableAssignmentAnalyzer.exitClass()
        val (node, graph) = graphBuilder.exitClass()
        if (node != null) {
            node.mergeIncomingFlow()
        }",,f35a
fun exitAnonymousObjectExpression(anonymousObjectExpression: FirAnonymousObjectExpression),"{
        graphBuilder.exitAnonymousObjectExpression(anonymousObjectExpression)?.mergeIncomingFlow()
    }",,655c
"fun enterScript(script: FirScript, buildGraph: Boolean)","{
        graphBuilder.enterScript(script, buildGraph)?.mergeIncomingFlow()
    }",// ----------------------------------- Scripts ------------------------------------------,34f8
fun exitScript(),": ControlFlowGraph? {
        val (node, graph) = graphBuilder.exitScript()
        node?.mergeIncomingFlow()
        graph?.completePostponedNodes()
        return graph
    }",,5384
fun enterCodeFragment(codeFragment: FirCodeFragment),"{
        graphBuilder.enterCodeFragment(codeFragment).mergeIncomingFlow { _, flow ->
            val smartCasts = codeFragment.codeFragmentContext?.smartCasts.orEmpty()
            for ((originalRealVariable, exactTypes) in smartCasts) {
                val realVariable = variableStorage.getOrPut(originalRealVariable.identifier) { originalRealVariable }",// ----------------------------------- Code Fragment ------------------------------------------,e5bb
fun exitCodeFragment(),": ControlFlowGraph {
        val (node, graph) = graphBuilder.exitCodeFragment()
        node.mergeIncomingFlow()
        graph.completePostponedNodes()
        return graph
    }",,3d8f
fun enterValueParameter(valueParameter: FirValueParameter),"{
        val (outerNode, innerNode) = graphBuilder.enterValueParameter(valueParameter) ?: return
        outerNode.mergeIncomingFlow()
        innerNode.mergeIncomingFlow()
    }",// ----------------------------------- Value parameters (and it's defaults) -----------------------------------,f4b8
fun exitValueParameter(valueParameter: FirValueParameter),": ControlFlowGraph? {
        val (innerNode, outerNode, graph) = graphBuilder.exitValueParameter(valueParameter) ?: return null
        innerNode.mergeIncomingFlow()
        outerNode.mergeIncomingFlow()
        graph.completePostponedNodes()
        return graph
    }",,49a0
fun enterProperty(property: FirProperty),"{
        graphBuilder.enterProperty(property)?.mergeIncomingFlow()
    }",// ----------------------------------- Property -----------------------------------,40dd
fun exitProperty(property: FirProperty),": ControlFlowGraph? {
        val (node, graph) = graphBuilder.exitProperty(property) ?: return null
        node.mergeIncomingFlow()
        graph.completePostponedNodes()
        return graph
    }",,1f47
fun enterField(field: FirField),"{
        graphBuilder.enterField(field)?.mergeIncomingFlow()
    }",// ----------------------------------- Field -----------------------------------,7434
fun exitField(field: FirField),": ControlFlowGraph? {
        val (node, graph) = graphBuilder.exitField(field) ?: return null
        node.mergeIncomingFlow()
        graph.completePostponedNodes()
        return graph
    }",,f3c8
fun enterDelegateExpression(),"{
        graphBuilder.enterDelegateExpression()
    }",// ----------------------------------- Delegate -----------------------------------,e4a4
fun exitDelegateExpression(fir: FirExpression),"{
        graphBuilder.exitDelegateExpression(fir).mergeIncomingFlow()
    }",,9c4e
fun enterBlock(block: FirBlock),"{
        graphBuilder.enterBlock(block).mergeIncomingFlow()
    }",// ----------------------------------- Block -----------------------------------,e126
fun exitBlock(block: FirBlock),"{
        graphBuilder.exitBlock(block).mergeIncomingFlow()
    }",,b3a5
fun exitTypeOperatorCall(typeOperatorCall: FirTypeOperatorCall),"{
        graphBuilder.exitTypeOperatorCall(typeOperatorCall).mergeIncomingFlow { _, flow ->
            if (typeOperatorCall.operation !in FirOperation.TYPES) return@mergeIncomingFlow
            addTypeOperatorStatements(flow, typeOperatorCall)
        }",// ----------------------------------- Operator call -----------------------------------,6558
"fun addTypeOperatorStatements(flow: MutableFlow, typeOperatorCall: FirTypeOperatorCall)","{
        val type = typeOperatorCall.conversionTypeRef.coneType
        val operandVariable = getOrCreateVariableIfRealAndStable(flow, typeOperatorCall.argument) ?: return
        when (val operation = typeOperatorCall.operation) {
            FirOperation.IS, FirOperation.NOT_IS -> {
                val isType = operation == FirOperation.IS
                when (type) {
                    // x is Nothing? <=> x == null
                    nullableNothing -> processEqNull(flow, typeOperatorCall, typeOperatorCall.argument, isType)
                    // x is Any <=> x != null
                    any -> processEqNull(flow, typeOperatorCall, typeOperatorCall.argument, !isType)
                    else -> {
                        val expressionVariable = variableStorage.createSynthetic(typeOperatorCall)
                        if (operandVariable.isReal()) {
                            flow.addImplication((expressionVariable eq isType) implies (operandVariable typeEq type))
                        }",,3529
fun exitComparisonExpressionCall(comparisonExpression: FirComparisonExpression),"{
        graphBuilder.exitComparisonExpression(comparisonExpression).mergeIncomingFlow()
    }",,8e98
fun exitEqualityOperatorLhs(),"{
        graphBuilder.exitEqualityOperatorLhs()
    }",,19d0
fun exitEqualityOperatorCall(equalityOperatorCall: FirEqualityOperatorCall),"{
        val (lhsExitNode, node) = graphBuilder.exitEqualityOperatorCall(equalityOperatorCall)
        val operation = equalityOperatorCall.operation
        val leftOperand = equalityOperatorCall.arguments[0]
        val rightOperand = equalityOperatorCall.arguments[1]

        /*
         * This unwrapping is needed for cases like
         * when (true) {
         *     s != null -> s.length
         * }",,0f6b
No signature found,"fun processEqConst(
        flow: MutableFlow,
        expression: FirEqualityOperatorCall,
        operand: FirExpression,
        const: FirLiteralExpression<*>,
        isEq: Boolean,
    ) {
        if (const.kind == ConstantValueKind.Null) {
            return processEqNull(flow, expression, operand, isEq)
        }",,6e1f
"fun processEqNull(flow: MutableFlow, expression: FirExpression, operand: FirExpression, isEq: Boolean)","{
        val operandVariable = getOrCreateVariableIfRealAndStable(flow, operand) ?: return
        val expressionVariable = variableStorage.createSynthetic(expression)
        flow.addImplication((expressionVariable eq isEq) implies (operandVariable eq null))
        flow.addImplication((expressionVariable eq !isEq) implies (operandVariable notEq null))
    }",,124a
"fun processEq(
        flow: MutableFlow,
        lhsExitFlow: PersistentFlow,
        expression: FirExpression,
        leftOperand: FirExpression,
        rightOperand: FirExpression,
        operation: FirOperation,
    )","{
        val isEq = operation.isEq()
        val leftOperandType = leftOperand.resolvedType
        val rightOperandType = rightOperand.resolvedType
        val leftIsNullable = leftOperandType.isMarkedNullable
        val rightIsNullable = rightOperandType.isMarkedNullable

        if (leftIsNullable && rightIsNullable) {
            // The logic system is not complex enough to express a second level of implications this creates:
            // if either `== null` then this creates the same implications as a constant null comparison,
            // otherwise the same as if the corresponding `...IsNullable` is false.
            return
        }",,c7c1
fun hasOverriddenEquals(type: ConeKotlinType),": Boolean {
        val session = components.session
        val symbolsForType = collectSymbolsForType(type, session)
        if (symbolsForType.any { it.hasEqualsOverride(session, checkModality = true) }",// Only consider the LHS variable if it has not been reassigned in the RHS.,9680
No signature found,"fun FirClassSymbol<*>.hasEqualsOverride(session: FirSession, checkModality: Boolean): Boolean {
        val status = resolvedStatus
        if (checkModality && status.modality != Modality.FINAL) return true
        if (status.isExpect) return true
        if (isSmartcastPrimitive(classId)) return false
        when (classId) {
            StandardClassIds.Any -> return false
            // Float and Double effectively had non-trivial `equals` semantics while they don't have explicit overrides (see KT-50535)
            StandardClassIds.Float, StandardClassIds.Double -> return true
        }",,6e1f
No signature found,"fun isSmartcastPrimitive(classId: ClassId?): Boolean {
        return when (classId) {
            // Support other primitives as well: KT-62246.
            StandardClassIds.String,
            -> true

            else -> false
        }","// When the class belongs to a different module, ""equals"" contract might be changed without re-compilation
        // But since we had such behavior in FE1.0, it might be too strict to prohibit it now, especially once there's a lot of cases
        // when different modules belong to a single project, so they're totally safe (see KT-50534)
        // if (moduleData != session.moduleData) {
        //     return true
        // }",6e1f
No signature found,"fun enterJump(jump: FirJump<*>) {
        graphBuilder.enterJump(jump)
    }",,6e1f
No signature found,"fun exitJump(jump: FirJump<*>) {
        graphBuilder.exitJump(jump).mergeIncomingFlow()
    }",,6e1f
fun enterCheckNotNullCall(),"{
        graphBuilder.enterCall()
    }",// ----------------------------------- Check not null call -----------------------------------,b3c2
"fun exitCheckNotNullCall(checkNotNullCall: FirCheckNotNullCall, callCompleted: Boolean)","{
        graphBuilder.exitCheckNotNullCall(checkNotNullCall, callCompleted).mergeIncomingFlow { _, flow ->
            val argumentVariable = getOrCreateVariableIfRealAndStable(flow, checkNotNullCall.argument) ?: return@mergeIncomingFlow
            flow.commitOperationStatement(argumentVariable notEq null)
        }",,089b
fun enterWhenExpression(whenExpression: FirWhenExpression),"{
        graphBuilder.enterWhenExpression(whenExpression).mergeIncomingFlow()
    }",,3e26
fun enterWhenBranchCondition(whenBranch: FirWhenBranch),"{
        graphBuilder.enterWhenBranchCondition(whenBranch).mergeWhenBranchEntryFlow()
    }",,b7ea
No signature found,fun CFGNode<*>.mergeWhenBranchEntryFlow() = m,,6e1f
fun exitWhenBranchCondition(whenBranch: FirWhenBranch),"{
        val (conditionExitNode, resultEnterNode) = graphBuilder.exitWhenBranchCondition(whenBranch)
        conditionExitNode.mergeIncomingFlow()
        resultEnterNode.mergeIncomingFlow { _, flow ->
            // If the condition is invalid, don't generate smart casts to Any or Boolean.
            if (whenBranch.condition.resolvedType.isBoolean) {
                val conditionVariable = getVariableIfStable(flow, whenBranch.condition) ?: return@mergeIncomingFlow
                flow.commitOperationStatement(conditionVariable eq true)
            }",,08d2
fun exitWhenBranchResult(whenBranch: FirWhenBranch),"{
        graphBuilder.exitWhenBranchResult(whenBranch).mergeIncomingFlow()
    }",,fd62
"fun exitWhenExpression(whenExpression: FirWhenExpression, callCompleted: Boolean)","{
        val (whenExitNode, syntheticElseNode) = graphBuilder.exitWhenExpression(whenExpression, callCompleted)
        syntheticElseNode?.mergeWhenBranchEntryFlow()
        whenExitNode.mergeIncomingFlow()
    }",,f80b
fun exitWhenSubjectExpression(expression: FirWhenSubjectExpression),"{
        graphBuilder.exitWhenSubjectExpression(expression).mergeIncomingFlow()
    }",,867a
fun enterWhileLoop(loop: FirLoop),"{
        val (loopEnterNode, loopConditionEnterNode) = graphBuilder.enterWhileLoop(loop)
        loopEnterNode.mergeIncomingFlow()
        loopConditionEnterNode.mergeIncomingFlow { _, flow -> enterRepeatableStatement(flow, loop) }",// ----------------------------------- While Loop -----------------------------------,8bc4
fun exitWhileLoopCondition(loop: FirLoop),"{
        val (loopConditionExitNode, loopBlockEnterNode) = graphBuilder.exitWhileLoopCondition(loop)
        loopConditionExitNode.mergeIncomingFlow()
        loopBlockEnterNode.mergeIncomingFlow { _, flow ->
            if (loop.condition.resolvedType.isBoolean) {
                val conditionVariable = getVariableIfStable(flow, loop.condition) ?: return@mergeIncomingFlow
                flow.commitOperationStatement(conditionVariable eq true)
            }",,d701
fun exitWhileLoop(loop: FirLoop),"{
        val (conditionEnterNode, blockExitNode, exitNode) = graphBuilder.exitWhileLoop(loop)
        blockExitNode.mergeIncomingFlow()
        exitNode.mergeIncomingFlow { path, flow ->
            processWhileLoopExit(path, flow, exitNode, conditionEnterNode)
            processLoopExit(flow, exitNode, exitNode.firstPreviousNode as LoopConditionExitNode)
        }",,bb66
"fun processWhileLoopExit(path: FlowPath, flow: MutableFlow, node: LoopExitNode, conditionEnterNode: LoopConditionEnterNode)","{
        val possiblyChangedVariables = exitRepeatableStatement(node.fir)
        if (possiblyChangedVariables.isNullOrEmpty()) return
        // While analyzing the loop we might have added some backwards jumps to `conditionEnterNode` which weren't
        // there at the time its flow was computed - which is why we erased all information about `possiblyChangedVariables`
        // from it. Now that we have those edges, we can restore type information for the code after the loop.
        val conditionEnterFlow = conditionEnterNode.getFlow(path)
        val loopEnterAndContinueFlows = conditionEnterNode.previousLiveNodes.map { it.getFlow(path) }",,0ed8
"fun processLoopExit(flow: MutableFlow, node: LoopExitNode, conditionExitNode: LoopConditionExitNode)","{
        if (conditionExitNode.isDead || node.previousNodes.count { !it.isDead }",,1743
"fun enterRepeatableStatement(flow: MutableFlow, statement: FirStatement)","{
        val reassignedNames = context.preliminaryLoopVisitor.enterCapturingStatement(statement)
        if (reassignedNames.isEmpty()) return
        // TODO: only choose the innermost variable for each name, KT-59688
        val possiblyChangedVariables = variableStorage.realVariables.values.filter {
            val identifier = it.identifier
            val symbol = identifier.symbol
            // Non-local vars can never produce stable smart casts anyway.
            identifier.dispatchReceiver == null && identifier.extensionReceiver == null &&
                    symbol is FirPropertySymbol && symbol.isVar && symbol.name in reassignedNames
        }",,1945
fun exitRepeatableStatement(statement: FirStatement),": List<RealVariable>? {
        if (context.preliminaryLoopVisitor.exitCapturingStatement(statement).isEmpty()) return null
        return context.variablesClearedBeforeLoop.pop()
    }",,4494
fun enterDoWhileLoop(loop: FirLoop),"{
        val (loopEnterNode, loopBlockEnterNode) = graphBuilder.enterDoWhileLoop(loop)
        loopEnterNode.mergeIncomingFlow { _, flow -> enterRepeatableStatement(flow, loop) }",// ----------------------------------- Do while Loop -----------------------------------,a712
fun enterDoWhileLoopCondition(loop: FirLoop),"{
        val (loopBlockExitNode, loopConditionEnterNode) = graphBuilder.enterDoWhileLoopCondition(loop)
        loopBlockExitNode.mergeIncomingFlow()
        loopConditionEnterNode.mergeIncomingFlow()
    }",,efef
fun exitDoWhileLoop(loop: FirLoop),"{
        val (loopConditionExitNode, loopExitNode) = graphBuilder.exitDoWhileLoop(loop)
        loopConditionExitNode.mergeIncomingFlow()
        loopExitNode.mergeIncomingFlow { _, flow ->
            processLoopExit(flow, loopExitNode, loopConditionExitNode)
        }",,2f6a
fun enterTryExpression(tryExpression: FirTryExpression),"{
        val (tryExpressionEnterNode, tryMainBlockEnterNode) = graphBuilder.enterTryExpression(tryExpression)
        tryExpressionEnterNode.mergeIncomingFlow()
        tryMainBlockEnterNode.mergeIncomingFlow()
    }",,b9f3
fun exitTryMainBlock(),"{
        graphBuilder.exitTryMainBlock().mergeIncomingFlow()
    }",,df6b
fun enterCatchClause(catch: FirCatch),"{
        graphBuilder.enterCatchClause(catch).mergeIncomingFlow()
    }",,6e7a
fun exitCatchClause(catch: FirCatch),"{
        graphBuilder.exitCatchClause(catch).mergeIncomingFlow()
    }",,1115
fun enterFinallyBlock(),"{
        val node = graphBuilder.enterFinallyBlock()
        node.mergeIncomingFlow()
        node.createAlternateFlows()
    }",,90cf
fun exitFinallyBlock(),"{
        graphBuilder.exitFinallyBlock().mergeIncomingFlow()
    }",,da8e
fun exitTryExpression(callCompleted: Boolean),"{
        graphBuilder.exitTryExpression(callCompleted).mergeIncomingFlow()
    }",,6386
fun exitQualifiedAccessExpression(qualifiedAccessExpression: FirQualifiedAccessExpression),"{
        graphBuilder.exitQualifiedAccessExpression(qualifiedAccessExpression).mergeIncomingFlow { _, flow ->
            processConditionalContract(flow, qualifiedAccessExpression, callArgsExit = null)
        }",// ----------------------------------- Resolvable call -----------------------------------,52ff
fun exitSmartCastExpression(smartCastExpression: FirSmartCastExpression),"{
        graphBuilder.exitSmartCastExpression(smartCastExpression).mergeIncomingFlow()
    }",,b6ac
fun enterSafeCallAfterNullCheck(safeCall: FirSafeCallExpression),"{
        graphBuilder.enterSafeCall(safeCall).mergeIncomingFlow { _, flow ->
            val receiverVariable = getOrCreateVariableIfRealAndStable(flow, safeCall.receiver) ?: return@mergeIncomingFlow
            flow.commitOperationStatement(receiverVariable notEq null)
        }",,9277
fun exitSafeCall(safeCall: FirSafeCallExpression),"{
        val node = graphBuilder.exitSafeCall()
        node.mergeIncomingFlow { path, flow ->
            // If there is only 1 previous node, then this is LHS of `a?.b ?: c`; then the null-case
            // edge from `a` goes directly to `c` and this node's flow already assumes `b` executed.
            if (node.previousNodes.size < 2) return@mergeIncomingFlow
            // Otherwise if the result is non-null, then `b` executed, which implies `a` is not null
            // and every statement from `b` holds.
            val expressionVariable = getOrCreateVariableIfStable(flow, safeCall) ?: return@mergeIncomingFlow
            val previousFlow = node.lastPreviousNode.getFlow(path)

            flow.addAllConditionally(expressionVariable notEq null, previousFlow)

            /*
             * If we have some implication about rhs of safe call in the previous flow, then we can expand them to the whole
             *   safe call variable
             *
             * a?.foo() // original call
             * subj.foo() // rhs of safe call
             *
             * previousFlow:
             *  - subj.foo() == True -> X_1
             *  - subj.foo() == False -> X_2
             *  - subj.foo() != Null -> X_3
             *  - subj.foo() == Null -> X_4
             *
             * flow:
             *  - a?.foo() == True -> X_1
             *  - a?.foo() == False -> X_2
             *  - a?.foo() != Null -> X_3
             *
             * Note that we don't pass implication with 'subj.foo() == Null' in the condition because there are two different ways
             *   why `a?.foo()` may be `null` -- it's either `a` is `null` or `subj.foo()` is `null`, and we can't differentiate between
             *   them
             *
             * Also, an implementation note: in the following lines we use `expressionVariable` made on safe call expression when looking
             *   for implications from previous flow in the subject, because VariableStorage doesn't differ between the whole safe call
             *   and synthetically generated selector, see [variableStorage.getOrCreate] implementation
             */
            previousFlow.implications[expressionVariable]?.forEach {
                if (it.condition.operation != Operation.EqNull) {
                    flow.addImplication(it)
                }",,185a
fun exitResolvedQualifierNode(resolvedQualifier: FirResolvedQualifier),"{
        graphBuilder.exitResolvedQualifierNode(resolvedQualifier).mergeIncomingFlow()
    }",,1f6d
"fun enterCallArguments(call: FirStatement, arguments: List<FirExpression>)","{
        val lambdas = arguments.mapNotNull { it.unwrapAnonymousFunctionExpression() }",,73b3
fun exitCallArguments(),"{
        val (splitNode, exitNode) = graphBuilder.exitCallArguments()
        splitNode?.mergeIncomingFlow()

        if (exitNode != null) {
            exitNode.mergeIncomingFlow()

            // Reset implicit receivers back to their state *before* call arguments but after explicit receiver
            // as tower resolve will use receiver types to lookup functions after call arguments have been processed.
            // TODO(KT-64094): Consider moving logic to tower resolution instead.
            resetSmartCastPositionTo(exitNode.explicitReceiverExitNode.flow)
        }",,0de8
fun exitCallExplicitReceiver(),"{
        graphBuilder.exitCallExplicitReceiver()
    }",,0e92
"fun exitFunctionCall(functionCall: FirFunctionCall, callCompleted: Boolean)","{
        context.variableAssignmentAnalyzer.exitFunctionCall(callCompleted)
        val node = graphBuilder.exitFunctionCall(functionCall, callCompleted)
        node.mergeIncomingFlow { _, flow ->
            val callArgsExit = node.previousNodes.singleOrNull { it is FunctionCallArgumentsExitNode }",,97ce
"fun exitDelegatedConstructorCall(call: FirDelegatedConstructorCall, callCompleted: Boolean)","{
        context.variableAssignmentAnalyzer.exitFunctionCall(callCompleted)
        graphBuilder.exitDelegatedConstructorCall(call, callCompleted).mergeIncomingFlow()
    }",,6463
fun enterStringConcatenationCall(),"{
        graphBuilder.enterCall()
    }",,a379
fun exitStringConcatenationCall(call: FirStringConcatenationCall),"{
        graphBuilder.exitStringConcatenationCall(call).mergeIncomingFlow()
    }",,9d9d
No signature found,"fun FirStatement.orderedArguments(callee: FirFunction): Array<out FirExpression?>? {
        fun FirQualifiedAccessExpression.firstReceiver(): FirExpression? {
            val candidate = candidate()
            // Processing case with a candidate might be necessary for PCLA, because even top-level calls might be not fully completed
            if (candidate != null) {
                return candidate.chosenExtensionReceiverExpression() ?: candidate.dispatchReceiverExpression()
            }",,6e1f
No signature found,"fun processConditionalContract(
        flow: MutableFlow,
        qualifiedAccess: FirStatement,
        callArgsExit: PersistentFlow?,
    ) {
        // contracts has no effect on non-body resolve stages
        if (!components.transformer.baseTransformerPhase.isBodyResolve) return

        val callee = when (qualifiedAccess) {
            is FirFunctionCall -> qualifiedAccess.calleeReference.symbol?.fir as? FirSimpleFunction
            is FirQualifiedAccessExpression -> qualifiedAccess.calleeReference.symbol?.let { it.fir as? FirProperty }",,6e1f
No signature found,"fun exitLiteralExpression(literalExpression: FirLiteralExpression<*>) {
        if (literalExpression.isResolved) return
        graphBuilder.exitLiteralExpression(literalExpression).mergeIncomingFlow()
    }",,6e1f
"fun exitLocalVariableDeclaration(variable: FirProperty, hadExplicitType: Boolean)","{
        graphBuilder.exitVariableDeclaration(variable).mergeIncomingFlow { _, flow ->
            val initializer = variable.initializer ?: return@mergeIncomingFlow
            exitVariableInitialization(flow, initializer, variable, assignmentLhs = null, hadExplicitType)
        }",,42b6
fun exitVariableAssignment(assignment: FirVariableAssignment),"{
        val property = assignment.calleeReference?.toResolvedPropertySymbol()?.fir
        if (property != null && property.isLocal) {
            context.variableAssignmentAnalyzer.visitAssignment(property, assignment.rValue.resolvedType)
        }",,869c
No signature found,"fun exitVariableInitialization(
        flow: MutableFlow,
        initializer: FirExpression,
        property: FirProperty,
        assignmentLhs: FirExpression?,
        hasExplicitType: Boolean,
    ) {
        val propertyVariable = variableStorage.getOrCreateRealVariableWithoutUnwrappingAliasForPropertyInitialization(
            flow, property.symbol, assignmentLhs ?: property
        )
        val isAssignment = assignmentLhs != null
        if (isAssignment) {
            logicSystem.recordNewAssignment(flow, propertyVariable, context.newAssignmentIndex())
        }",,6e1f
No signature found,"fun RealVariable.isStableOrLocalStableAccess(fir: FirElement): Boolean {
        return isStable || (hasLocalStability && !isAccessToUnstableLocalVariable(fir, targetType = null))
    }",,6e1f
fun exitThrowExceptionNode(throwExpression: FirThrowExpression),"{
        graphBuilder.exitThrowExceptionNode(throwExpression).mergeIncomingFlow()
    }",,42ec
fun enterBinaryLogicExpression(binaryLogicExpression: FirBinaryLogicExpression),"{
        graphBuilder.enterBinaryLogicExpression(binaryLogicExpression).mergeIncomingFlow()
    }",// ----------------------------------- Boolean operators -----------------------------------,bee0
fun exitLeftBinaryLogicExpressionArgument(binaryLogicExpression: FirBinaryLogicExpression),"{
        val (leftExitNode, rightEnterNode) = graphBuilder.exitLeftBinaryLogicExpressionArgument(binaryLogicExpression)
        leftExitNode.mergeIncomingFlow()
        rightEnterNode.mergeIncomingFlow { _, flow ->
            val leftOperandVariable = getVariableIfStable(flow, binaryLogicExpression.leftOperand) ?: return@mergeIncomingFlow
            val isAnd = binaryLogicExpression.kind == LogicOperationKind.AND
            flow.commitOperationStatement(leftOperandVariable eq isAnd)
        }",,cf33
fun exitBinaryLogicExpression(binaryLogicExpression: FirBinaryLogicExpression),"{
        graphBuilder.exitBinaryLogicExpression(binaryLogicExpression).mergeBinaryLogicOperatorFlow()
    }",,6372
No signature found,fun AbstractBinaryExitNode<FirBinaryLogicExpression>.mergeBinaryLogicOperatorFlow() = m,,6e1f
"fun exitBooleanNot(flow: MutableFlow, expression: FirFunctionCall)","{
        val argumentVariable = getVariableIfStable(
            flow,
            // Processing case with a candidate might be necessary for PCLA, because even top-level calls might be not fully completed
            expression.candidate()?.dispatchReceiverExpression() ?: expression.dispatchReceiver!!
        ) ?: return
        val expressionVariable = variableStorage.createSynthetic(expression)
        // Alternatively: (expression == true => argument == false) && (expression == false => argument == true)
        // Which implementation is faster and/or consumes less memory is an open question.
        logicSystem.translateVariableFromConditionInStatements(flow, argumentVariable, expressionVariable) {
            when (it.condition.operation) {
                Operation.EqTrue -> expressionVariable eq false implies it.effect
                Operation.EqFalse -> expressionVariable eq true implies it.effect
                // `argumentVariable eq/notEq null` shouldn't exist since `argumentVariable` is presumably `Boolean`
                else -> null
            }",,09bc
fun enterAnnotation(),"{
        graphBuilder.enterFakeExpression().mergeIncomingFlow()
    }",,efe5
fun exitAnnotation(),"{
        graphBuilder.exitFakeExpression()
    }",,cc52
fun enterInitBlock(initBlock: FirAnonymousInitializer),"{
        graphBuilder.enterInitBlock(initBlock).mergeIncomingFlow()
    }",// ----------------------------------- Init block -----------------------------------,8f55
fun exitInitBlock(),": ControlFlowGraph {
        val (node, controlFlowGraph) = graphBuilder.exitInitBlock()
        node.mergeIncomingFlow()
        controlFlowGraph.completePostponedNodes()
        return controlFlowGraph
    }",,f3f5
fun enterContractDescription(),"{
        graphBuilder.enterFakeExpression().mergeIncomingFlow()
    }",// ----------------------------------- Contract description -----------------------------------,9629
fun exitContractDescription(),"{
        graphBuilder.exitFakeExpression()
    }",,09f4
fun enterElvis(elvisExpression: FirElvisExpression),"{
        graphBuilder.enterElvis(elvisExpression)
    }",// ----------------------------------- Elvis -----------------------------------,5263
fun exitElvisLhs(elvisExpression: FirElvisExpression),"{
        val (lhsExitNode, lhsIsNotNullNode, rhsEnterNode) = graphBuilder.exitElvisLhs(elvisExpression)
        lhsExitNode.mergeIncomingFlow()

        fun getLhsVariable(path: FlowPath): DataFlowVariable? =
            getOrCreateVariableIfRealAndStable(lhsExitNode.getFlow(path), elvisExpression.lhs)

        lhsIsNotNullNode.mergeIncomingFlow { path, flow ->
            getLhsVariable(path)?.let { flow.commitOperationStatement(it notEq null) }",,a7a3
"fun exitElvis(elvisExpression: FirElvisExpression, isLhsNotNull: Boolean, callCompleted: Boolean)","{
        val node = graphBuilder.exitElvis(isLhsNotNull, callCompleted)
        node.mergeIncomingFlow { path, flow ->
            // If LHS is never null, then the edge from RHS is dead and this node's flow already contains
            // all statements from LHS unconditionally.
            if (isLhsNotNull) return@mergeIncomingFlow

            val elvisVariable by lazy { variableStorage.createSynthetic(elvisExpression) }",,db4b
fun exitCallableReference(callableReferenceAccess: FirCallableReferenceAccess),"{
        graphBuilder.exitCallableReference(callableReferenceAccess).mergeIncomingFlow()
    }",// If (x ?: null) != null then x != null,d0e3
fun exitGetClassCall(getClassCall: FirGetClassCall),"{
        graphBuilder.exitGetClassCall(getClassCall).mergeIncomingFlow()
    }",,ebce
No signature found,"fun CFGNode<*>.buildDefaultFlow(
        builder: (FlowPath, MutableFlow) -> Unit,
    ): MutableFlow {
        val previousFlows = mutableListOf<PersistentFlow>()
        val statementFlows = mutableListOf<PersistentFlow>()

        for (node in previousNodes) {
            val edge = edgeFrom(node)
            if (!usedInDfa(edge)) continue

            // `MergePostponedLambdaExitsNode` nodes form a parallel data flow graph. We never compute
            // data flow for any of them until reaching a completed call.
            if (node is MergePostponedLambdaExitsNode && !node.flowInitialized) node.mergeIncomingFlow()

            // For CFGNodes that are the end of alternate flows, use the alternate flow associated with the edge label.
            val flow = if (node is FinallyBlockExitNode) {
                val alternatePath = FlowPath.CfgEdge(edge.label, node.fir)
                node.getAlternateFlow(alternatePath) ?: node.flow
            }","// ------------------------------------------------------ Utils ------------------------------------------------------

    // The data flow state from which type statements are taken during expression resolution.
    // Should normally be equal to `graphBuilder.lastNode`, but one exception is between exiting call
    // arguments and exiting the call itself, where smart casting does not use information from the arguments.",6e1f
No signature found,"fun CFGNode<*>.buildAlternateFlow(
        path: FlowPath.CfgEdge,
        builder: (FlowPath, MutableFlow) -> Unit,
    ): MutableFlow {
        val alternateFlowStart = this is FinallyBlockEnterNode
        val previousFlows = mutableListOf<PersistentFlow>()
        val statementFlows = mutableListOf<PersistentFlow>()

        for (node in previousNodes) {
            val edge = edgeFrom(node)
            if (!usedInDfa(edge)) continue

            // For CFGNodes that cause alternate flow paths to be created, only edges with matching labels should be merged. However, when
            // an alternate flow is being propagated through one of these CFGNodes - i.e., when the FirElements do not match - only
            // NormalPath edges should be merged.
            if (alternateFlowStart) {
                if (path.fir == this.fir && edge.label != path.label) {
                    continue
                }",,6e1f
No signature found,"fun CFGNode<*>.mergeIncomingFlow(
        builder: (FlowPath, MutableFlow) -> Unit = {",,6e1f
No signature found,"fun CFGNode<*>.propagateAlternateFlows(
        builder: (FlowPath, MutableFlow) -> Unit,
    ) {
        val propagatedPaths = mutableSetOf<FlowPath>()
        for (node in previousNodes) {
            if (node.alternateFlowPaths.isEmpty()) continue

            val edge = edgeFrom(node)
            // Only propagate alternate flows which originate along a normal path edge and are used in DFA.
            if (edge.label != NormalPath || !usedInDfa(edge)) continue

            for (path in node.alternateFlowPaths) {
                // If the source node is the end of alternate flows, do not propagate the alternate flows which have ended.
                if (path !is FlowPath.CfgEdge || !graphBuilder.withinFinallyBlock(path.fir)) continue

                if (propagatedPaths.add(path)) {
                    addAlternateFlow(path, buildAlternateFlow(path, builder).freeze())
                }",,6e1f
No signature found,"fun CFGNode<*>.createAlternateFlows(
        builder: (FlowPath, MutableFlow) -> Unit = {",,6e1f
No signature found,"fun CFGNode<*>.getFlow(path: FlowPath): PersistentFlow {
        return when (path) {
            FlowPath.Default -> flow
            else -> getAlternateFlow(path) ?: error(""no alternate flow for $path"")
        }",,6e1f
No signature found,"fun ControlFlowGraph.completePostponedNodes() {
        for (subGraph in subGraphs) {
            subGraph.completePostponedNodes()
        }",,6e1f
fun resetSmartCastPosition(),"{
        resetSmartCastPositionTo(graphBuilder.lastNodeOrNull?.flow)
    }",,1e04
No signature found,"fun resetSmartCastPositionTo(flow: Flow?) {
        val previous = currentSmartCastPosition
        if (previous == flow) return
        receiverStack.forEach {
            variableStorage.getLocalVariable(it.boundSymbol)?.let { variable ->
                val newStatement = flow?.getTypeStatement(variable)
                if (newStatement != previous?.getTypeStatement(variable)) {
                    receiverUpdated(it.boundSymbol, newStatement)
                }","// This method can be used to change the smart cast state to some node that is not the one at which the graph
    // builder is currently stopped. This is temporary: adding any more nodes to the graph will restart tracking
    // of the current position in the graph.",6e1f
"fun isSameValueIn(other: PersistentFlow, fir: FirElement, original: MutableFlow)",": Boolean {
        val variable = variableStorage.getRealVariableWithoutUnwrappingAlias(other, fir)
        return variable == null || logicSystem.isSameValueIn(other, original, variable)
    }",,23d8
No signature found,"fun MutableFlow.addImplication(statement: Implication) {
        logicSystem.addImplication(this, statement)
    }",,6e1f
No signature found,"fun MutableFlow.addTypeStatement(info: TypeStatement) {
        val newStatement = logicSystem.addTypeStatement(this, info) ?: return
        if (newStatement.variable.isThisReference && this === currentSmartCastPosition) {
            receiverUpdated(newStatement.variable.identifier.symbol, newStatement)
        }",,6e1f
No signature found,"fun MutableFlow.addAllStatements(statements: TypeStatements) {
        statements.values.forEach { addTypeStatement(it) }",,6e1f
No signature found,"fun MutableFlow.addAllConditionally(condition: OperationStatement, statements: TypeStatements) {
        statements.values.forEach { addImplication(condition implies it) }",,6e1f
No signature found,"fun MutableFlow.addAllConditionally(condition: OperationStatement, from: Flow) {
        from.knownVariables.forEach {
            // Only add the statement if this variable is not aliasing another in `this` (but it could be aliasing in `from`).
            if (unwrapVariable(it) == it) addImplication(condition implies (from.getTypeStatement(it) ?: return@forEach))
        }",,6e1f
No signature found,"fun MutableFlow.commitOperationStatement(statement: OperationStatement) {
        addAllStatements(logicSystem.approveOperationStatement(this, statement, removeApprovedOrImpossible = true))
    }",,6e1f
"fun getVariableIfStable(flow: Flow, fir: FirElement)",": DataFlowVariable? {
        val variable = variableStorage.get(flow, fir, unwrapAlias = false)
        return variable?.unwrapIfStable(flow, fir)
    }",,b236
"fun getOrCreateVariableIfRealAndStable(flow: Flow, fir: FirElement)",": DataFlowVariable? {
        val variable = variableStorage.getOrCreateIfReal(flow, fir, unwrapAlias = false)
        return variable?.unwrapIfStable(flow, fir)
    }",,d3ec
"fun getOrCreateVariableIfStable(flow: Flow, fir: FirElement)",": DataFlowVariable? {
        val variable = variableStorage.getOrCreate(flow, fir, unwrapAlias = false)
        return variable.unwrapIfStable(flow, fir)
    }",,e54c
No signature found,"fun DataFlowVariable.unwrapIfStable(flow: Flow, fir: FirElement): DataFlowVariable? {
        if (this !is RealVariable) return this

        val unwrapped = flow.unwrapVariable(this)
        if (unwrapped != this && !isStableOrLocalStableAccess(fir)) return null

        return unwrapped
    }",,6e1f
fun foo(),{},// IGNORE_BACKEND: JS,519f
fun box(),": String =
        i",,4f27
No signature found,"fun arrayAccessRHS(a: Int?, b: Array<Int>) {
    b[0] = a!!
    checkSubtype<Int>(<!DEBUG_INFO_SMARTCAST!>a<!>)
}",// !CHECK_TYPE,6e1f
No signature found,"fun arrayAccessLHS(a: Int?, b: Array<Int>) {
    b[a!!] = <!DEBUG_INFO_SMARTCAST!>a<!>
    checkSubtype<Int>(<!DEBUG_INFO_SMARTCAST!>a<!>)
}",,6e1f
No signature found,"fun `test - fake throwable`() {
        val file = inlineSourceCodeAnalysis.createKtFile(
            """"""
            class Throwable
        """""".trimIndent()
        )

        analyze(file) {
            assertFalse(file.getClassOrFail(""Throwable"").isThrowable)
        }",,6e1f
No signature found,"fun `test - true throwable`() {
        val file = inlineSourceCodeAnalysis.createKtFile(
            """"""
            var foo: Throwable? = null
        """""".trimIndent()
        )

        analyze(file) {
            val isThrowable = file.getPropertyOrFail(""foo"").returnType.expandedClassSymbol?.isThrowable ?: false
            assertTrue(isThrowable)
        }",,6e1f
No signature found,fun <T> eval(f: () -> T) = f,,6e1f
No signature found,fun `access$getFoo$p`(a: A): Int = 1,,6e1f
No signature found,"fun `access$setFoo$p`(a: A, d: Int) {}",,6e1f
No signature found,fun `access$getFoo$cp`(): Int = 1,//companion backing field accessors,6e1f
No signature found,fun `access$setFoo$cp`(d: Int) {},,6e1f
No signature found,fun `access$getBar$lp`(a: A): Int = 7,,6e1f
fun test(),"{
            eval {
                foo = 2
                foo
            }",,fe98
No signature found,fun `access$getFoo$p`(p: A.Companion): Int = 1,,6e1f
No signature found,"fun `access$setFoo$p`(p: A.Companion, d: Int) {}",,6e1f
fun test(),"{
        eval {
            foo = 2;
            foo + bar
        }",,fe98
fun useAInLibTest(a: A),"{
    println(a.x)
}",,30a5
fun test(a: Int),"{
    var <!ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE!>aa<!> = a
    <!UNUSED_VALUE!>aa =<!> 324 //should be an 'unused value' warning here
}","//KT-609 Analyze not only local variables, but function parameters as well in 'unused values' analysis",688e
No signature found,fun foo(<!UNUSED_PARAMETER!>s<!>: String) {},,6e1f
fun foo(s : String),{},//should be an 'unused variable' warning,8285
fun foo(s : String),{},//should not be a warning,8285
No signature found,fun equals(other: Any?) = o,,6e1f
fun foo(),{},,519f
"fun check(x1: Derived1, x: Base)","{
    if (x1 == x) {
        // Smart cast here will provoke CCA
        x.<!UNRESOLVED_REFERENCE!>foo<!>()
    }",,7bec
fun use(),{},,26f7
fun equals(x: Int),: Boolean = x,,b310
No signature found,"fun foo(x: FinalClass?, y: Any) {
    if (x == y) {
        // OK
        x.hashCode()
        // OK
        y.use()
    }",,6e1f
No signature found,fun equals(other: Any?) = o,,6e1f
fun use(),{},,26f7
No signature found,"fun bar(x: FinalClass2?, y: Any) {
    if (x == y) {
        // OK
        x.hashCode()
        // ERROR
        y.<!UNRESOLVED_REFERENCE!>use<!>()
    }",,6e1f
No signature found,"fun bar(x: OpenClass2?, y: Any) {
    if (x == y) {
        // OK
        x.hashCode()
        // ERROR
        y.<!UNRESOLVED_REFERENCE!>use<!>()
    }",,6e1f
No signature found,fun equals(other: Any?) = o,,6e1f
fun gav(),{},,c38b
fun check(arg: Sealed1),"{
        if (arg == this) {
            // Smart cast here will provoke CCA
            this.<!UNRESOLVED_REFERENCE!>gav<!>()
            <!UNRESOLVED_REFERENCE!>gav<!>()
        }",,29fd
fun test(tr: Tr<String>),"{
    val v = tr as G?
    // If v is not nullable, there will be a warning on this line:
    checkSubtype<G<String>>(v!!)
}","// FIR_IDENTICAL
// !CHECK_TYPE",5d4d
fun foo(),= B,// LOOK_UP_FOR_ELEMENT_OF_TYPE: org.jetbrains.kotlin.psi.KtSimpleNameExpression,519f
fun foo(),= C,,519f
fun execute(),"{
        println(version)
    }",,1f3c
No signature found,fun build(action: Builder.() -> Unit) = <,,6e1f
fun doo(),"{

        }",,5012
fun test(),"{
    val f = fun(): Int = <expr>54</expr>

}",,fe98
No signature found,fun foo(f: () -> Unit) = o,// !DIAGNOSTICS: -UNUSED_PARAMETER,6e1f
No signature found,fun foo(f: () -> Unit) = <,,6e1f
fun overriddenFunction(),= U,// FIR_IDENTICAL,6d2c
fun nonOverriddenFunction(),= U,,985b
fun overriddenProperty(),: Int = 4,,5a59
fun nonOverriddenProperty(),: Int = 4,,6e3e
fun setOverriddenProperty(overriddenProperty: Int),= U,,a382
fun setNonOverriddenProperty(nonOverriddenProperty: Int),= U,,d2bb
No signature found,"fun KtFunctionLikeSymbol.translateToObjCMethod(): ObjCMethod? {
    if (!isVisibleInObjC()) return null
    if (isFakeOverride) return null
    if (this is KtFunctionSymbol && isClone) return null
    return buildObjCMethod()
}",,6e1f
No signature found,"fun KtFunctionLikeSymbol.buildObjCMethod(
    unavailable: Boolean = f","/**
 * [org.jetbrains.kotlin.backend.konan.objcexport.ObjCExportTranslatorImpl.buildMethod]
 */",6e1f
No signature found,"fun String.toValidObjCSwiftIdentifier(): String {
    if (this.isEmpty()) return ""__""

    return this.replace('$', '_') // TODO: handle more special characters.
        .let { if (it.first().isDigit()) ""_$it"" else it }",,6e1f
No signature found,"fun KtCallableSymbol.getSwiftPrivateAttribute(): String? =
    i",,6e1f
No signature found,fun KtCallableSymbol.isRefinedInSwift(): Boolean = w,,6e1f
No signature found,"fun KtFunctionLikeSymbol.getSwiftName(methodBridge: MethodBridge): String {
    //assert(mapper.isBaseMethod(method)) //TODO: implement isBaseMethod
    if (this is KtNamedSymbol) {
        anyMethodSwiftNames[name]?.let { return it }",,6e1f
fun splitSelector(selector: String),": List<String> {
    return if (!selector.endsWith("":"")) {
        listOf(selector)
    }",,f9f9
No signature found,"fun KtFunctionLikeSymbol.getSelector(methodBridge: MethodBridge): String {

    if (this is KtNamedSymbol) {
        anyMethodSelectors[this.name]?.let { return it }",,6e1f
No signature found,"fun KtFunctionLikeSymbol.getMangledName(forSwift: Boolean): String {
    return if (this.isConstructor) {
        if (isArrayConstructor && !forSwift) ""array"" else ""init""
    }",,6e1f
No signature found,"fun String.handleSpecialNames(prefix: String): String {
    val trimmed = this.dropWhile { it == '_' }",,6e1f
No signature found,fun String.startsWithWords(words: String) = t,,6e1f
No signature found,"fun KtFunctionLikeSymbol.mapReturnType(returnBridge: MethodBridge.ReturnValue): ObjCType {
    return when (returnBridge) {
        MethodBridge.ReturnValue.Suspend,
        MethodBridge.ReturnValue.Void,
        -> ObjCVoidType
        MethodBridge.ReturnValue.HashCode -> ObjCPrimitiveType.NSUInteger
        is MethodBridge.ReturnValue.Mapped -> returnType.translateToObjCType(returnBridge.bridge)
        MethodBridge.ReturnValue.WithError.Success -> ObjCPrimitiveType.BOOL
        is MethodBridge.ReturnValue.WithError.ZeroForError -> {
            val successReturnType = mapReturnType(returnBridge.successBridge)

            if (!returnBridge.successMayBeZero) {
                check(
                    successReturnType is ObjCNonNullReferenceType
                            || (successReturnType is ObjCPointerType && !successReturnType.nullable)
                ) {
                    ""Unexpected return type: $successReturnType in $this""
                }",,6e1f
fun plus(other: ImplicitSmartCasts),= I,,9839
fun <T> id(t: T),= t,"// FIR_IDENTICAL
// !CHECK_TYPE",3662
fun foo(),"{
    val i = id { 22 }",,519f
"fun check(declaration: FirClass, context: CheckerContext, reporter: DiagnosticReporter)","{
            if (declaration.isExpect) return
            super.check(declaration, context, reporter)
        }",,718b
"fun check(declaration: FirClass, context: CheckerContext, reporter: DiagnosticReporter)","{
            if (!declaration.isExpect) return
            super.check(declaration, context, reporter)
        }",,718b
"fun check(declaration: FirClass, context: CheckerContext, reporter: DiagnosticReporter)","{
        if (!declaration.isEnumClass) return

        // Enum entries with an initializer are handled by FirNotImplementedOverrideChecker since they contain an AnonymousObject.
        val enumEntries = declaration.declarations.filterIsInstance<FirEnumEntry>().filter { it.initializer == null && it.source != null }",,718b
No signature found,fun withContext(f: context(String) () -> String) = f,"// !LANGUAGE: +ContextReceivers
// TARGET_BACKEND: JVM_IR",6e1f
No signature found,fun callWithContext(f: (String) -> String) = w,,6e1f
fun box(),": String {
    return callWithContext { s -> s }",,4f27
No signature found,"fun apply(receiver: JsExpression?, arguments: List<JsExpression>, context: TranslationContext): JsExpression {
        val packageName = (rangeTypeDescriptor.containingDeclaration as PackageFragmentDescriptor).fqName
        val packageDescriptor = context.currentModule.getPackage(packageName)
        val existingClasses = packageDescriptor.memberScope.getContributedDescriptors(DescriptorKindFilter.CLASSIFIERS) {
            it == rangeTypeDescriptor.name
        }",,6e1f
fun toCallable(method: CallableMethod),": Callable =
            c",,6018
fun <T> suspendAndLog(value: T),: T = s,"// WITH_STDLIB
// WITH_COROUTINES",7a66
fun suspendLogAndThrow(exception: Throwable),: Any? = s,,c59a
fun resumeWith(data: Result<Unit>),"fun builder(c: suspend Controller.() -> Unit): String {
    val controller = Controller()
    c.startCoroutine(controller, object : Continuation<Unit> {
        override val context = EmptyCoroutineContext

        override  {
            val exception = data.exceptionOrNull() ?: return
            controller.result += ""caught(${exception.message}",,1cd6
fun box(),": String {
    val value = builder {
        try {
            try {
                suspendAndLog(""1"")
                suspendLogAndThrow(RuntimeException(""exception""))
            }",,4f27
fun addPluginArgument(options: CompilerPluginOptions),"{
        copyOptionsFrom(options)
    }",,21f0
No signature found,"fun plus(options: CompilerPluginConfig?): CompilerPluginOptions {
        if (options == null) return this
        val newOptions = CompilerPluginOptions()
        newOptions.optionsByPluginId += subpluginOptionsByPluginId
        newOptions.copyOptionsFrom(options)

        return newOptions
    }",,6e1f
fun copyOptionsFrom(options: CompilerPluginConfig),"{
        options.allOptions().forEach { (pluginId, pluginOptions) ->
            val existingValue = optionsByPluginId[pluginId]
            optionsByPluginId[pluginId] = if (existingValue != null) {
                (existingValue + pluginOptions).toMutableList()
            }",,0a78
No signature found,"fun ListProperty<out CompilerPluginConfig>.toSingleCompilerPluginOptions(): CompilerPluginOptions {
    var res = CompilerPluginOptions()
    this.get().forEach { res += it }",,6e1f
No signature found,"fun Provider<List<SubpluginOption>>.toCompilerPluginOptions(): Provider<CompilerPluginOptions> {
    return map {
        val res = CompilerPluginOptions()
        it.forEach { res.addPluginArgument(Kapt3GradleSubplugin.KAPT_SUBPLUGIN_ID, it) }",,6e1f
fun box(),": String {
    // Before changes in raw types computation: (OCNewFileActionBase<OCNewFileActionBase<*>.CreateFileDialogBase!>..OCNewFileActionBase<out OCNewFileActionBase<*>.CreateFileDialogBase!>?)
    // After that: raw (OCNewFileActionBase<*>..OCNewFileActionBase<*>?)
    val x = OCNewFileActionBase.get()
    return ""OK""
}","// TARGET_BACKEND: JVM

// FILE: OCNewFileActionBase.java",4f27
fun test(),= c,,fe98
fun box(),= T,,4f27
fun fooB(x: Int),": String
}

class Foo

fun test(ab: A) {
    if (ab is B) {
        var z = id(ab) // materialize smartcast
        z = <!ASSIGNMENT_TYPE_MISMATCH!>Foo()<!> // unsafe assignment
        z.fooB(1)
    }","// ISSUE: KT-53752
// INFERENCE_HELPERS",673b
fun isKotlinJavascriptLibrary(library: File),": Boolean =
        K",,a95c
fun isKotlinJavascriptIrLibrary(candidate: File),": Boolean {
        return when {
            isZippedKlib(candidate) -> true
            FileUtil.isJarOrZip(candidate) -> isZippedKlibInZip(candidate)
            !candidate.resolve(""default"").isDirectory -> false
            !candidate.resolve(""default"").resolve(""manifest"").isFile -> false
            !candidate.resolve(""default"").resolve(""ir"").isDirectory -> false
            else -> true
        }",,4745
No signature found,"fun copyJsFilesFromLibraries(libraries: List<String>, outputLibraryJsPath: String, copySourceMap: Boolean = f",,6e1f
No signature found,"fun traverseJsLibraries(libs: List<File>, action: (JsLibrary) -> Unit) {
        libs.forEach { traverseJsLibrary(it, action) }",,6e1f
No signature found,"fun traverseJsLibrary(lib: File, action: (JsLibrary) -> Unit) {
        when {
            lib.isDirectory -> traverseDirectory(lib, action)
            FileUtil.isJarOrZip(lib) -> traverseArchive(lib, action)
            lib.name.endsWith(KotlinJavascriptMetadataUtils.JS_EXT) -> {
                lib.runIfFileExists(lib.path, action)
                val jsFile = lib.withReplacedExtensionOrNull(
                        KotlinJavascriptMetadataUtils.META_JS_SUFFIX, KotlinJavascriptMetadataUtils.JS_EXT
                )
                jsFile?.runIfFileExists(jsFile.path, action)
            }",,6e1f
fun isZippedKlibInZip(candidate: File),": Boolean {
        var manifestFound = false
        var irFound = false
        ZipFile(candidate).use {
            for (entry in it.entries()) {
                if (entry.name == ""default/manifest"") manifestFound = true
                if (entry.name == ""default/ir/"") irFound = true
            }",,bc79
fun isZippedKlib(candidate: File),": Boolean =
        c",,8af0
No signature found,"fun File.runIfFileExists(relativePath: String, action: (JsLibrary) -> Unit) {
        if (isFile) {
            action(JsLibrary(readText(), relativePath, correspondingSourceMapFile().contentIfExists(), this))
        }",,6e1f
"fun copyJsFilesFromDirectory(dir: File, outputLibraryJsPath: String, copySourceMap: Boolean)","{
        traverseDirectory(dir) { copyLibrary(outputLibraryJsPath, it, copySourceMap) }",,3086
No signature found,fun File.contentIfExists(): String? = i,,6e1f
No signature found,fun File.correspondingSourceMapFile(): File = F,,6e1f
No signature found,"fun processDirectory(dir: File, action: (JsLibrary) -> Unit) {
        FileUtil.processFilesRecursively(dir, Processor<File> { file ->
            val relativePath = FileUtil.getRelativePath(dir, file)
                               ?: throw IllegalArgumentException(""relativePath should not be null $dir $file"")
            if (relativePath.endsWith(KotlinJavascriptMetadataUtils.JS_EXT)) {
                val suggestedRelativePath = getSuggestedPath(relativePath) ?: return@Processor true
                file.runIfFileExists(suggestedRelativePath, action)
            }",,6e1f
No signature found,"fun traverseDirectory(dir: File, action: (JsLibrary) -> Unit) {
        try {
            processDirectory(dir, action)
        }",,6e1f
"fun copyJsFilesFromZip(file: File, outputLibraryJsPath: String, copySourceMap: Boolean)","{
        traverseArchive(file) { copyLibrary(outputLibraryJsPath, it, copySourceMap) }",,4433
"fun copyLibrary(outputPath: String, library: JsLibrary, copySourceMap: Boolean)","{
        val targetFile = File(outputPath, library.path)
        targetFile.parentFile.mkdirs()
        targetFile.writeText(library.content)
        if (copySourceMap) {
            library.sourceMapContent?.let { File(targetFile.parent, targetFile.name + "".map"").writeText(it) }",,f7f7
No signature found,"fun traverseArchive(file: File, action: (JsLibrary) -> Unit) {
        val zipFile = try {
            ZipFile(file.path)
        }",,6e1f
fun getSuggestedPath(path: String),": String? {
        val systemIndependentPath = FileUtil.toSystemIndependentName(path)
        if (systemIndependentPath.startsWith(LibraryUtils.META_INF)) {
            if (systemIndependentPath.startsWith(META_INF_RESOURCES)) {
                return path.substring(META_INF_RESOURCES.length)
            }",,8cf6
fun usage(),"{

}",// FILE: main.kt,455a
fun test(),"= """,,fe98
fun test(),"= """,,fe98
fun test(),"= """,,fe98
fun box(),": String {
    <!DELEGATED_MEMBER_HIDES_SUPERTYPE_OVERRIDE!>object<!> : MyClass(), Derived by Delegate() {
    }",,4f27
No signature found,"fun check(resolvedCall: ResolvedCall<*>, reportOn: PsiElement, context: CallCheckerContext) {
        if (resolvedCall is VariableAsFunctionResolvedCall) return
        val descriptor = resolvedCall.resultingDescriptor
        val namedDescriptor: DeclarationDescriptor = (descriptor as? ConstructorDescriptor)?.containingDeclaration ?: descriptor
        if (!namedDescriptor.name.asString().isUnderscoreOnlyName()) return
        checkCallElement(resolvedCall.call.callElement, context)
    }",,6e1f
"fun checkCallElement(ktElement: KtElement, context: CallCheckerContext)","{
        when (ktElement) {
            is KtSimpleNameExpression ->
                checkSimpleNameUsage(ktElement, context.trace)
            is KtCallExpression ->
                ktElement.calleeExpression?.let { checkCallElement(it, context) }",,f668
"fun checkSimpleNameUsage(ktName: KtSimpleNameExpression, trace: BindingTrace)","{
        if (ktName.text.isUnderscoreOnlyName()) {
            trace.report(Errors.UNDERSCORE_USAGE_WITHOUT_BACKTICKS.on(ktName))
        }",,0a9d
"fun checkSimpleNameUsage(descriptor: DeclarationDescriptor, ktName: KtSimpleNameExpression, trace: BindingTrace)","{
        if (descriptor.name.asString().isUnderscoreOnlyName()) {
            checkSimpleNameUsage(ktName, trace)
        }",,3f44
No signature found,"fun String.isUnderscoreOnlyName() =
        i",,6e1f
fun bar(),": Foo<String>? {
    return null
}",,66c3
fun resolve<caret>Me(),"{
    val x = bar()
}",,00e4
No signature found,"fun resol<caret>veMe(val param: @TypeAnnWithArg(""parameter: $constant"") List<@TypeAnnWithArg(""nested parameter: $constant"") List<@TypeAnnWithArg(""nested nested parameter: $constant"") MyTypeAlias>) {}",,6e1f
fun invoke(i: Int),= i,,bd49
fun box(),= i,,4f27
No signature found,"fun <T : Result<*>> isSuccess(a: A<T>): String =
    a","// WITH_STDLIB
// KJS_FULL_RUNTIME",6e1f
No signature found,"fun go(f: (T) -> Boolean): String =
        i",,6e1f
fun box(),: String = i,,4f27
No signature found,fun foo(param: Int = 1,"// FIR_IDENTICAL
// ISSUE: KT-60269
// WITH_STDLIB",6e1f
No signature found,fun foo(param: Int = 2,,6e1f
No signature found,"fun foo(<!MULTIPLE_DEFAULTS_INHERITED_FROM_SUPERTYPES!>param: Int<!>) {
        println(param)
    }",,6e1f
fun main(),"{
    Baz().foo()
    (Baz() as Foo).foo()
}",,d987
fun testLazyNullString(),"{
    try {
        val s: String = lazyNullString
        throw Exception(""'val s: String = lazyNullString' should throw NullPointerException"")
    }","// TARGET_BACKEND: JVM
// IGNORE_BACKEND: JVM
// WITH_STDLIB
// FILE: kt24258.kt",6698
fun box(),": String {
    testLazyNullString()

    return ""OK""
}",,4f27
fun defaultFun(),"{
        println(""default"")
    }",// COMPILER_ARGUMENTS: -Xjvm-default=all-compatibility,031b
"fun produceCAdapterBitcode(clang: ClangArgs, cppFile: File, bitcodeFile: File)","{
    val clangCommand = clang.clangCXX(
            ""-std=c++17"",
            cppFile.absoluteFile.normalize().path,
            ""-emit-llvm"", ""-c"",
            ""-o"", bitcodeFile.absoluteFile.normalize().path
    )
    Command(clangCommand).execute()
}",,5949
fun foo(t: T),": T
}

class C : Base<Unit> {
    override fun foo(t: Unit) {}",// C,6c6b
No signature found,"fun foo(maybe: Int?) {
    val i : Int = maybe ?: throw RuntimeException(""No value"")
    System.out.println(i)
}","// FIR_IDENTICAL
//KT-1156 Throwing exception on the right side of elvis operator marks code unreachable",6e1f
fun testEmulatedScalaStdlibSyntheticMethodLoading(),"{
        // #KT-38325 and #KT-39799
        val classFqn = ""org/jetbrains/kotlin/compiler/test/GeneratedScalalikeTraversableOncePart""

        val classNode = ClassNode(Opcodes.API_VERSION).apply {
            version = Opcodes.V1_6
            access = Opcodes.ACC_PUBLIC
            name = classFqn
            signature = ""L$classFqn;""
            superName = ""java/lang/Object""
            methods.add(
                // The root of the problem described in the #KT-38325 and #KT-39799 is the presence of a method with signature and descriptor
                // disagreeing on the number of parameters. Here the method with the similar structure is created
                MethodNode(
                    Opcodes.API_VERSION,
                    Opcodes.ACC_PRIVATE,
                    ""reverser\$2"",
                    ""(Ljava/lang/Object;)L$classFqn\$reverser\$1\$;"",
                    ""()L$classFqn\$reverser\$1\$;"",
                    null
                ).apply {
                    visitParameter(""a"", 0)
                }",,0544
fun box(),= e,// FUNCTION: kotlin.require,4f27
fun someFun(),"{
    when {
        is SomeClass
    }",,b5a1
fun testElvis(),"{
        for (obj in array) {
            Blackhole.consume(obj?.value ?: 0)
        }",,b945
No signature found,"fun check(a : Composite?) : Int {
        return a?.y?.x ?: (a?.x ?: 3)
    }",,6e1f
fun testCompositeElvis(),": Int {
        var result = 0
        for (i in 0..BENCHMARK_SIZE)
            result += check(Composite(Random.nextInt(), Composite(Random.nextInt(), null)))
        return result
    }",,4559
No signature found,"fun CompilerConfiguration.updateConfiguration() {
        put(ComposeConfiguration.SOURCE_INFORMATION_ENABLED_KEY, true)
        put(ComposeConfiguration.STRONG_SKIPPING_ENABLED_KEY, true)
        put(ComposeConfiguration.NON_SKIPPING_GROUP_OPTIMIZATION_ENABLED_KEY, true)
    }",,6e1f
No signature found,"fun verifyCrossModuleComposeIrTransform(
        @Language(""kotlin"")
        dependencySource: String,
        @Language(""kotlin"")
        source: String,
        expectedTransformed: String,
        dumpTree: Boolean = f",,6e1f
No signature found,"fun verifyGoldenCrossModuleComposeIrTransform(
        @Language(""kotlin"")
        dependencySource: String,
        @Language(""kotlin"")
        source: String,
        dumpTree: Boolean = f",,6e1f
No signature found,"fun transform(
        @Language(""kotlin"")
        source: String,
        @Language(""kotlin"")
        extra: String = """,,6e1f
No signature found,fun IrElement.validate(): IrElement = t,,6e1f
No signature found,"fun verifyComposeIrTransform(
        @Language(""kotlin"")
        source: String,
        expectedTransformed: String,
        @Language(""kotlin"")
        extra: String = """,,6e1f
No signature found,"fun verifyGoldenComposeIrTransform(
        @Language(""kotlin"")
        source: String,
        @Language(""kotlin"")
        extra: String = """,,6e1f
No signature found,fun MatchResult.isNumber() = g,,6e1f
No signature found,fun MatchResult.number() = g,,6e1f
No signature found,fun MatchResult.isChar(c: String) = t,,6e1f
No signature found,fun MatchResult.isFileName() = g,,6e1f
"fun generateSourceInfo(sourceInfo: String, source: String)",": String {
        val r = Regex(""(\\d+)|([,])|([*])|([:])|C(\\(.*\\))?|L|(P\\(*\\))|@"")
        var current = 0
        var currentResult = r.find(sourceInfo, current)
        var result = """"

        fun next(): MatchResult? {
            currentResult?.let {
                current = it.range.last + 1
                currentResult = it.next()
            }",,93c5
fun parseLocation(),": String? {
            var mr = currentResult
            if (mr != null && mr.isNumber()) {
                // line number, we ignore the value in during testing.
                mr = next()
            }",,5222
fun transformFlat(declaration: IrDeclaration),": List<IrDeclaration>? {
        if (declaration.parentClassOrNull?.isCompanion != true || !declaration.isJsStaticDeclaration()) return null
        val containingClass = declaration.parentAsClass.parentAsClass

        val proxyDeclaration = when (declaration) {
            is IrSimpleFunction -> declaration.takeIf { it.correspondingPropertySymbol == null }",,ad1d
No signature found,"fun IrProperty.generateStaticPropertyProxy(proxyParent: IrClass): IrProperty {
        val originalProperty = this
        return context.irFactory.buildProperty {
            updateFrom(originalProperty)
            name = originalProperty.name
        }",,6e1f
No signature found,"fun IrSimpleFunction.generateStaticMethodProxy(proxyParent: IrClass): IrSimpleFunction {
        val originalFun = this
        return context.irFactory.buildFun {
            updateFrom(originalFun)
            name = originalFun.name
            returnType = originalFun.returnType
        }",,6e1f
No signature found,"fun IrDeclaration.isJsStaticDeclaration(): Boolean =
        h",,6e1f
No signature found,"fun IrDeclaration.excludeFromJsExport() {
        annotations += generateJsExportIgnoreCall()
    }",,6e1f
fun generateJsExportIgnoreCall(),": IrConstructorCall {
        return JsIrBuilder.buildConstructorCall(context.intrinsics.jsExportIgnoreAnnotationSymbol.owner.primaryConstructor!!.symbol)
    }",,bd64
No signature found,"fun IrElement.toSourceElement(containingIrFile: IrFile) =
        (",,6e1f
"fun at(irElement: IrElement, containingIrDeclaration: IrDeclaration)",": DiagnosticContextImpl =
        a",,65f0
fun at(irDeclaration: IrDeclaration),": DiagnosticContextImpl =
        a",,6cd8
"fun at(irElement: IrElement, containingIrFile: IrFile)",": DiagnosticContextImpl =
        a",,b457
No signature found,"fun at(
        sourceElement: AbstractKtSourceElement?,
        irElement: IrElement,
        containingFile: IrFile
    ): DiagnosticContextImpl =
        D",,6e1f
No signature found,"fun at(sourceElement: AbstractKtSourceElement?, containingFilePath: String): DiagnosticContextImpl {
        error(""Should not be called directly"")
    }",,6e1f
fun isDiagnosticSuppressed(diagnostic: KtDiagnostic),": Boolean =
            s",,87fd
fun ensureRootProcessed(rootElement: IrElement),"=
        a",,6626
"fun visitElement(element: IrElement, data: Stack<IrElement>)","{
            if (data.isNotEmpty()) {
                annotatedAncestors[element] = data.peek()
            }",,9e0a
fun collectSuppressAnnotationKeys(element: IrElement),": Boolean =
            (",,ea9d
No signature found,"fun addIfStringConst(irConst: IrConst<*>) {
                        if (irConst.kind == IrConstKind.String) {
                            add((irConst.value as String).lowercase())
                        }",,6e1f
"fun getClosestAnnotatedAncestorElement(element: IrElement, rootElement: IrElement, excludeSelf: Boolean)",": IrElement? {
        val annotatedAncestors = ensureRootProcessed(rootElement)
        return if (!excludeSelf && annotationKeys.containsKey(element)) element else annotatedAncestors[element]
    }",,097a
fun getSuppressingStrings(annotated: IrElement),: Set<String> = a,,a559
No signature found,fun FirProvider.getContainingFile(symbol: FirBasedSymbol<*>): FirFile? = w,,6e1f
fun test(x: Any),": String {
    return when (x) {
        is A -> x.toString()
        is B -> x.toString()
        else -> ""fail""
    }","// TARGET_BACKEND: JVM_IR
// FILE: A.java",44e2
fun box(),": String {
    return test(A()) + test(B())
}",,4f27
"fun <R, D> acceptChildren(visitor: FirVisitor<R, D>, data: D)",{},,b2f8
"fun <D> transformChildren(transformer: FirTransformer<D>, data: D)",": FirOuterClassTypeParameterRefImpl {
        return this
    }",,963c
No signature found,"fun inlineFunctionsAndAccessors(header: KotlinClassHeader, excludePrivateMembers: Boolean = f",,6e1f
No signature found,"fun inlineFunctions(
    functions: List<ProtoBuf.Function>,
    nameResolver: NameResolver,
    protoTypeTable: ProtoBuf.TypeTable,
    excludePrivateFunctions: Boolean = f",,6e1f
No signature found,"fun inlinePropertyAccessors(
    properties: List<ProtoBuf.Property>,
    nameResolver: NameResolver,
    excludePrivateAccessors: Boolean = f",,6e1f
fun isPrivate(flags: Int),= D,,7531
fun test(),"{
    val sample1: List<List<Int?>> = arrayList(arrayList<Int?>(1, 7, null, 8))

    //breaks compiler
    val sample2 = sample1.map({it.map({it}","// !CHECK_TYPE

//KT-2179 Nested function literal breaks compiler",fe98
fun <T> arrayList(vararg values: T),: ArrayList<T> = v,,6892
No signature found,"fun <T, R> Collection<T>.map(transform : (T) -> R) : List<R> {
    return mapTo(java.util.ArrayList<R>(this.size), transform)
}",,6e1f
No signature found,"fun <T, R, C: MutableCollection<in R>> Collection<T>.mapTo(result: C, transform : (T) -> R) : C {
  for (item in this)
    result.add(transform(item))
  return result
}",,6e1f
No signature found,"fun <T, C: MutableCollection<in T>> Array<T>.toCollection(result: C) : C {
    for (element in this) result.add(element)
    return result
}",,6e1f
No signature found,"fun test(f: <!DEPRECATION_ERROR!>Foo<!>) {
    f.toString()
    val g: <!DEPRECATION_ERROR!>Foo<!>? = <!DEPRECATION_ERROR!>Foo<!>()
}","// FIR_IDENTICAL
// !DIAGNOSTICS: -UNUSED_VARIABLE",6e1f
fun box(),": String {
    return Foo(""OK"").value
}","// LANGUAGE: +MultiPlatformProjects
// TARGET_BACKEND: JVM
// WITH_STDLIB

// MODULE: common
// FILE: common.kt",4f27
"fun put(key: K, value: V)",: V? = n,"// WITH_STDLIB
// FULL_JDK
// JVM_TARGET: 1.8
// TARGET_BACKEND: JVM_IR

// SEPARATE_SIGNATURE_DUMP_FOR_K2
// ^ Value parameters in fake overrides generated by K1 and K2 are different",6012
fun foo(p: List<String>),"public fun dummy() // to avoid loading as SAM interface
    }

    public interface Sub: Super {
        override 
    }",,b5b0
fun some(),{},"// FIR_IDENTICAL
// ISSUE: KT-57100
// WITH_STDLIB",6092
fun some(),{},,6092
fun some(),<!> {},,6092
No signature found,fun <T: CharSequence> materializeDelegate(): Box<T> = T,// ISSUE: KT-61077,6e1f
No signature found,"fun <K: Comparable<K>> Box<K>.provideDelegate(receiver: Any?, property: kotlin.reflect.KProperty<*>): K = T",,6e1f
No signature found,"fun <Q: Comparable<Q>> Q.getValue(thisRef: Any?, property: kotlin.reflect.KProperty<*>): Q = T",,6e1f
No signature found,"fun <T> Any?.myRun(block: () -> T): T {
    contract {
        callsInPlace(block, InvocationKind.EXACTLY_ONCE)
    }","// !OPT_IN: kotlin.contracts.ExperimentalContracts
// !DIAGNOSTICS: -INVISIBLE_REFERENCE -INVISIBLE_MEMBER",6e1f
No signature found,"fun <T> directRun(block: () -> T): T {
    contract {
        callsInPlace(block, InvocationKind.EXACTLY_ONCE)
    }",,6e1f
fun bad(),": String {
    val x: String? = null

    x?.myRun { return """" }",,8958
fun ok(),": String {
    val x: String? = null

    x?.run { return ""non-null"" }",,23f4
fun ok2(),": String {
    directRun {
        return ""nonNull""
    }",,3d82
No signature found,"fun ok3(arg: Any?): String {
    arg?.myRun {
        return ""nonNull""
    }",,6e1f
fun foo(p: MutableList<String>),"public fun dummy() // to avoid loading as SAM interface
    }

    public interface Sub: Super {
        override 
    }",,0692
fun runRichards(),"{
        val scheduler = Scheduler()
        scheduler.addIdleTask(ID_IDLE, 0, null, COUNT)

        var queue = Packet(null, ID_WORKER, KIND_WORK)
        queue = Packet(queue,  ID_WORKER, KIND_WORK)
        scheduler.addWorkerTask(ID_WORKER, 1000, queue)

        queue = Packet(null, ID_DEVICE_A, KIND_DEVICE)
        queue = Packet(queue,  ID_DEVICE_A, KIND_DEVICE)
        queue = Packet(queue,  ID_DEVICE_A, KIND_DEVICE)
        scheduler.addHandlerTask(ID_HANDLER_A, 2000, queue)

        queue = Packet(null, ID_DEVICE_B, KIND_DEVICE)
        queue = Packet(queue,  ID_DEVICE_B, KIND_DEVICE)
        queue = Packet(queue,  ID_DEVICE_B, KIND_DEVICE)
        scheduler.addHandlerTask(ID_HANDLER_B, 3000, queue)

        scheduler.addDeviceTask(ID_DEVICE_A, 4000, null)

        scheduler.addDeviceTask(ID_DEVICE_B, 5000, null)

        scheduler.schedule()

        if (scheduler.queueCount != EXPECTED_QUEUE_COUNT ||
            scheduler.holdCount != EXPECTED_HOLD_COUNT) {
            val msg =
                ""Error during execution: queueCount = "" + scheduler.queueCount +
                "", holdCount = "" + scheduler.holdCount + "".""
            throw Error(msg)
        }",,ba3b
No signature found,"fun addIdleTask(id: Int, priority: Int, queue: Packet?, count: Int) {
        this.addRunningTask(id, priority, queue, IdleTask(this, 1, count))
    }",,6e1f
No signature found,"fun addWorkerTask(id: Int, priority: Int, queue: Packet?) {
        this.addTask(id, priority, queue, WorkerTask(this, ID_HANDLER_A, 0))
    }","/**
     * Add a work task to this scheduler.
     * @param {int} id the identity of the task
     * @param {int} priority the task's priority
     * @param {Packet} queue the queue of work to be processed by the task
     */",6e1f
No signature found,"fun addHandlerTask(id: Int, priority: Int, queue: Packet?) {
        this.addTask(id, priority, queue, HandlerTask(this))
    }","/**
     * Add a handler task to this scheduler.
     * @param {int} id the identity of the task
     * @param {int} priority the task's priority
     * @param {Packet} queue the queue of work to be processed by the task
     */",6e1f
No signature found,"fun addDeviceTask(id: Int, priority: Int, queue: Packet?) {
        this.addTask(id, priority, queue, DeviceTask(this))
    }","/**
     * Add a handler task to this scheduler.
     * @param {int} id the identity of the task
     * @param {int} priority the task's priority
     * @param {Packet} queue the queue of work to be processed by the task
     */",6e1f
No signature found,"fun addRunningTask(id: Int, priority: Int, queue: Packet?, task: Task) {
        this.addTask(id, priority, queue, task)
        this.currentTcb!!.setRunning()
    }","/**
     * Add the specified task and mark it as running.
     * @param {int} id the identity of the task
     * @param {int} priority the task's priority
     * @param {Packet} queue the queue of work to be processed by the task
     * @param {Task} task the task to add
     */",6e1f
No signature found,"fun addTask(id: Int, priority: Int, queue: Packet?, task: Task) {
        this.currentTcb = TaskControlBlock(this.list, id, priority, queue, task)
        this.list = this.currentTcb
        this.blocks[id] = this.currentTcb
    }","/**
     * Add the specified task to this scheduler.
     * @param {int} id the identity of the task
     * @param {int} priority the task's priority
     * @param {Packet} queue the queue of work to be processed by the task
     * @param {Task} task the task to add
     */",6e1f
fun schedule(),"{
        this.currentTcb = this.list
        while (this.currentTcb != null) {
            if (this.currentTcb!!.isHeldOrSuspended()) {
                this.currentTcb = this.currentTcb!!.link
            }","/**
     * Execute the tasks managed by this scheduler.
     */",e9c2
fun release(id: Int),": TaskControlBlock? {
        val tcb = this.blocks[id]
        if (tcb == null) return tcb
        tcb.markAsNotHeld()
        if (tcb.priority > this.currentTcb!!.priority) {
            return tcb
        }",,8b36
fun holdCurrent(),": TaskControlBlock? {
        this.holdCount++
        this.currentTcb!!.markAsHeld()
        return this.currentTcb!!.link
    }",,a42f
fun suspendCurrent(),": TaskControlBlock? {
        this.currentTcb!!.markAsSuspended()
        return this.currentTcb
    }","/**
     * Suspend the currently executing task and return the next task control block
     * to run.  If new work is added to the suspended task it will be made runnable.
     */",3167
fun queue(packet: Packet),": TaskControlBlock? {
        val t = this.blocks[packet.id]
        if (t == null) return t
        this.queueCount++
        packet.link = null
        packet.id = this.currentId
        return t.checkPriorityAdd(this.currentTcb!!, packet)
    }","/**
     * Add the specified packet to the end of the work list used by the task
     * associated with the packet and make the task runnable if it is currently
     * suspended.
     * @param {Packet} packet the packet to add
     */",01af
fun setRunning(),"{
        this.state = STATE_RUNNING
    }",,08f4
fun markAsNotHeld(),"{
        this.state = this.state and STATE_NOT_HELD
    }",,ba47
fun markAsHeld(),"{
        this.state = this.state or STATE_HELD
    }",,6ab8
fun isHeldOrSuspended(),": Boolean {
        return (this.state and STATE_HELD) != 0 || (this.state == STATE_SUSPENDED)
    }",,84fe
fun markAsSuspended(),"{
        this.state = this.state or STATE_SUSPENDED
    }",,442a
fun markAsRunnable(),"{
        this.state = this.state or STATE_RUNNABLE
    }",,4bf6
fun run(),": TaskControlBlock? {
        val packet: Packet?
        if (this.state == STATE_SUSPENDED_RUNNABLE) {
            packet = this.queue
            this.queue = packet?.link
            if (this.queue == null) {
                this.state = STATE_RUNNING
            }","/**
     * Runs this task, if it is ready to be run, and returns the next task to run.
     */",354f
"fun checkPriorityAdd(task: TaskControlBlock, packet: Packet)",": TaskControlBlock {
        if (this.queue == null) {
            this.queue = packet
            this.markAsRunnable()
            if (this.priority > task.priority) return this
        }",,97de
fun toString(),": String {
        return ""tcb { "" + this.task + ""@"" + this.state + "" }",,a535
No signature found,"fun run(packet: Packet?): TaskControlBlock?
}

/**
 * An idle task doesn't do any work itself but cycles control between the two
 * device tasks.
 * @param {Scheduler}",,6e1f
No signature found,"fun run(packet: Packet?): TaskControlBlock? {
        this.count--
        if (this.count == 0) return this.scheduler.holdCurrent()
        if ((this.v1 and 1) == 0) {
            this.v1 = this.v1 shr 1
            return this.scheduler.release(ID_DEVICE_A)
        }",,6e1f
fun toString(),": String {
        return ""IdleTask""
    }",,a535
No signature found,"fun run(packet: Packet?): TaskControlBlock? {
        if (packet == null) {
            if (this.v1 == null) return this.scheduler.suspendCurrent()
            val v = this.v1
            this.v1 = null
            return this.scheduler.queue(v!!)
        }",,6e1f
fun toString(),": String {
        return ""DeviceTask""
    }",,a535
No signature found,"fun run(packet: Packet?): TaskControlBlock? {
        if (packet == null) {
            return this.scheduler.suspendCurrent()
        }",,6e1f
fun toString(),": String {
        return ""WorkerTask""
    }",,a535
No signature found,"fun run(packet: Packet?): TaskControlBlock? {
        if (packet != null) {
            if (packet.kind == KIND_WORK) {
                this.v1 = packet.addTo(this.v1)
            }",,6e1f
fun toString(),": String {
        return ""HandlerTask""
    }",,a535
No signature found,"fun addTo(queue: Packet?): Packet {
        this.link = null
        if (queue == null) return this
        var next: Packet = queue
        var peek = next.link
        while (peek != null) {
            next = peek
            peek = next.link
        }",,6e1f
fun toString(),": String { 
        return ""Packet""
    }",,a535
fun test(p: T),": T {
        return p
    }","// !JVM_DEFAULT_MODE: all-compatibility
// TARGET_BACKEND: JVM
// JVM_TARGET: 1.8
// WITH_STDLIB",bfc4
fun test(p: String),": String {
        return p + ""K""
    }",,f71a
"fun <T> execute(t: Test<T>, p: T)",": T {
    return t.test(p)
}",,1e82
fun box(),": String {
    return execute(TestClass(), ""O"")
}",,4f27
fun test(),"{
    fun bar() {
        val bas = fun() {
            <!RETURN_NOT_ALLOWED!>return@bar<!>
        }","// FIR_IDENTICAL
// !DIAGNOSTICS: -UNUSED_VARIABLE",fe98
fun foo(),"{
    val bal = bag@ fun () {
        val bar = fun() {
            <!RETURN_NOT_ALLOWED!>return@bag<!>
        }",,519f
fun cloneable(c: Cloneable),= J,// FILE: J.java,4682
fun serializable(s: Serializable),= J,,301a
fun <T> both(t: T),"where T : Cloneable, T : Serializable = J",,dc94
No signature found,fun <T: String> isNullVacuousLeft(s: A<T>) = s,"// WITH_STDLIB
// WORKS_WHEN_VALUE_CLASS
// LANGUAGE: +ValueClasses, +GenericInlineClassParameter",6e1f
No signature found,fun <T: String> isNullVacuousRight(s: A<T>) = n,,6e1f
No signature found,fun <T: String> isNullLeft(s: A<T>?) = s,,6e1f
No signature found,fun <T: String> isNullRight(s: A<T>?) = n,,6e1f
No signature found,"fun <T: String> isEqualSame(s: A<T>, t: A<T>) = s",,6e1f
No signature found,"fun <T: String> isEqualAnyLeft(s: A<T>, t: Any?) = s",,6e1f
No signature found,"fun <T: String> isEqualAnyRight(s: Any?, t: A<T>) = s",,6e1f
No signature found,"fun <T: String> isEqualSameNullable(s: A<T>?, t: A<T>?) = s",,6e1f
No signature found,"fun <T: String> isEqualAnyNullableLeft(s: A<T>?, t: Any?) = s",,6e1f
No signature found,"fun <T: String> isEqualAnyNullableRight(s: Any?, t: A<T>?) = s",,6e1f
No signature found,"fun <T: String> isEqualNullableUnboxedLeft(s: A<T>, t: A<T>?) = s",,6e1f
No signature found,"fun <T: String> isEqualNullableUnboxedRight(s: A<T>?, t: A<T>) = s",,6e1f
fun box(),": String {
    if (isNullVacuousLeft(A(""""))) return ""Fail 1""
    if (isNullVacuousRight(A(""""))) return ""Fail 2""
    if (isNullLeft(A(""""))) return ""Fail 3""
    if (isNullRight(A(""""))) return ""Fail 4""
    if (!isNullLeft<String>(null)) return ""Fail 5""
    if (!isNullRight<String>(null)) return ""Fail 6""
    if (!isEqualSame(A(""""), A(""""))) return ""Fail 7""
    if (isEqualSame(A(""a""), A(""b""))) return ""Fail 8""
    if (isEqualAnyLeft(A(""""), """")) return ""Fail 9""
    if (isEqualAnyLeft(A(""""), null)) return ""Fail 10""
    if (!isEqualAnyLeft(A(""""), A(""""))) return ""Fail 11""
    if (isEqualAnyRight("""", A(""""))) return ""Fail 12""
    if (isEqualAnyRight(null, A(""""))) return ""Fail 13""
    if (!isEqualAnyRight(A(""""), A(""""))) return ""Fail 14""
    if (!isEqualSameNullable<String>(null, null)) return ""Fail 15""
    if (!isEqualSameNullable(A(""""), A(""""))) return ""Fail 16""
    if (isEqualSameNullable(null, A(""""))) return ""Fail 17""
    if (isEqualSameNullable(A(""""), null)) return ""Fail 18""
    if (isEqualSameNullable(A(""""), A(""a""))) return ""Fail 19""
    if (!isEqualAnyNullableLeft<String>(null, null)) return ""Fail 20""
    if (!isEqualAnyNullableLeft(A(""""), A(""""))) return ""Fail 21""
    if (isEqualAnyNullableLeft(A(""""), """")) return ""Fail 22""
    if (isEqualAnyNullableLeft<String>(null, """")) return ""Fail 23""
    if (isEqualAnyNullableLeft(A(""""), null)) return ""Fail 24""
    if (isEqualAnyNullableLeft(A(""""), A(""a""))) return ""Fail 25""
    if (!isEqualAnyNullableRight<String>(null, null)) return ""Fail 26""
    if (!isEqualAnyNullableRight(A(""""), A(""""))) return ""Fail 27""
    if (isEqualAnyNullableRight("""", A(""""))) return ""Fail 28""
    if (isEqualAnyNullableRight<String>("""", null)) return ""Fail 29""
    if (isEqualAnyNullableRight(null, A(""""))) return ""Fail 30""
    if (isEqualAnyNullableRight(A(""""), A(""a""))) return ""Fail 31""
    if (isEqualNullableUnboxedLeft(A(""""), A(""a""))) return ""Fail 32""
    if (!isEqualNullableUnboxedLeft(A(""""), A(""""))) return ""Fail 33""
    if (isEqualNullableUnboxedRight(A(""""), A(""a""))) return ""Fail 34""
    if (!isEqualNullableUnboxedRight(A(""a""), A(""a""))) return ""Fail 35""
    if (isEqualNullableUnboxedLeft(A(""""), null)) return ""Fail 36""
    if (isEqualNullableUnboxedRight(null, A(""""))) return ""Fail 37""
    return ""OK""
}",,4f27
"fun write(mappings: Map<Int, List<String>>, writer: FileWriter)","{
        check(mappings.size == 1) { ""Number of multi-char lowercase mappings has changed."" }",,47f2
"fun lowercaseImpl(char: String, oneToManyResult: String)",": String = """,,c3fd
No signature found,"fun Char.lowercaseImpl(): String {
            if (this == $char) {
                return $oneToManyResult
            }",,6e1f
fun foo1(),{},"// FIR_IDENTICAL
// ISSUE: KT-48870",d289
fun foo1(),{},,d289
No signature found,"fun Vase.test1() {
    class B : Base {
        // FIR: OK, it's this@foo.foo1()
        // FE 1.0: INSTANCE_ACCESS_BEFORE_SUPER_CALL
        constructor() : super(<!INSTANCE_ACCESS_BEFORE_SUPER_CALL!>foo1<!>())
    }",,6e1f
No signature found,"fun Base.test2() {
    class B : Base(foo1()) {}",,6e1f
fun foo1(),{},,d289
No signature found,"fun Base.test3() {
    class B : Base {
        constructor() : super({ <!INSTANCE_ACCESS_BEFORE_SUPER_CALL!>foo1<!>() }",,6e1f
No signature found,"fun Base.test4() {
    class B : Base({ foo1() }",,6e1f
fun build(),: FirSyntheticProperty = F,,5bf9
No signature found,"fun buildSyntheticProperty(f: FirSyntheticPropertyBuilder.() -> Unit): FirSyntheticProperty =
    F",,6e1f
fun box(),": String {
    val min = 0U.toString()
    if (""0"" != min) throw AssertionError(min)

    val middle = 2_147_483_647U.toString()
    if (""2147483647"" != middle) throw AssertionError(middle)

    val max = 4_294_967_295U.toString()
    if (""4294967295"" != max) throw AssertionError(max)

    return ""OK""
}","// TARGET_BACKEND: JVM
// WITH_STDLIB
// JVM_TARGET: 1.8",4f27
fun ok(),"= ""","// TARGET_BACKEND: JVM

// FILE: unresolvedJavaClassInDifferentFile.kt",23f4
fun box(),"=
    D",,4f27
fun addAll(other: BuildTimes<T>),"{
        for ((buildTime, timeNs) in other.buildTimesNs) {
            addTimeNs(buildTime, timeNs)
        }",,5606
"fun addTimeNs(buildTime: T, timeNs: Long)","{
        buildTimesNs[buildTime] = buildTimesNs.getOrDefault(buildTime, 0) + timeNs
    }",,4ea4
"fun addTimeMs(buildTime: T, timeMs: Long)",= a,,d145
fun asMapMs(),": Map<T, Long> = b",,3ffb
fun test_1(cond: Boolean),"{
    val x = <!NO_ELSE_IN_WHEN!>when<!> (cond) {
        true -> 1
    }",,f0a5
No signature found,"fun test_2(cond: Boolean?) {
    val x = <!NO_ELSE_IN_WHEN!>when<!> (cond) {
        true -> 1
        false -> 2
    }",,6e1f
fun test_3(cond: Boolean),"{
    <!NO_ELSE_IN_WHEN!>when<!> (cond) {
        true -> 1
    }",,5fec
"fun add(index: Int, element: E)","{
        TODO()
    }","// WITH_STDLIB
// JVM_ABI_K1_K2_DIFF: KT-63984",cdbf
fun removeAt(index: Int),": E {
        TODO()
    }",,b29a
"fun set(index: Int, element: E)",": E {
        TODO()
    }",,65db
fun get(index: Int),": E {
        return internalGet(internalIndex(index))
    }",,60cf
fun internalGet(internalIndex: Int),": E {
        @Suppress(""UNCHECKED_CAST"")
        return elementData[internalIndex] as E
    }",,1b86
fun positiveMod(index: Int),: Int = i,,8355
fun negativeMod(index: Int),: Int = i,,09b5
fun internalIndex(index: Int),: Int = p,,8654
fun incremented(index: Int),: Int = i,,be87
fun removeAll(elements: Collection<E>),: Boolean = f,,b951
No signature found,"fun filterInPlace(predicate: (E) -> Boolean): Boolean {
        if (this.isEmpty() || elementData.isEmpty())
            return false

        val tail = internalIndex(size)
        var newTail = head
        var modified = false

        if (head < tail) {
            for (index in head until tail) {
                val element = elementData[index]

                if (predicate(element as E))
                    elementData[newTail++] = element
                else
                    modified = true
            }",,6e1f
fun box(),": String {
    val ad = ArrayDeque(listOf(""X"", ""Z"", ""O"", ""K""))
    ad.removeAll(listOf(""X"", ""Z""))
    return ad[0] + ad[1]
}",,4f27
fun configure(builder: TestConfigurationBuilder),"{
        super.configure(builder)
        with(builder) {
            configureWithCustomScriptDef()
        }",,f283
fun configure(builder: TestConfigurationBuilder),"{
        super.configure(builder)
        with(builder) {
            configureWithCustomScriptDef()
            useCustomRuntimeClasspathProviders(::ScriptWithCustomDefRuntimeClassPathProvider)
        }",,f283
No signature found,"fun TestConfigurationBuilder.configureWithCustomScriptDef() {
    useConfigurators(
        ::ScriptWithCustomDefEnvironmentConfigurator
    )
    defaultDirectives {
        +WITH_STDLIB
    }",,6e1f
fun nullableF(),: (() -> Unit)?= n,"// FIR_IDENTICAL
// SKIP_TXT",6ecc
No signature found,fun String.unit() {},,6e1f
No signature found,fun foo(x: String?): () -> Unit = n,,6e1f
fun box(),": String {
    val baos = ByteArrayOutputStream()
    val oos = ObjectOutputStream(baos)
    oos.writeObject(Foo(""abacaba"")::value)
    oos.close()

    val bais = ByteArrayInputStream(baos.toByteArray())
    val ois = ObjectInputStream(bais)
    assertEquals(Foo(""abacaba"")::value, ois.readObject())
    ois.close()

    return ""OK""
}","// TARGET_BACKEND: JVM
// WITH_REFLECT",4f27
No signature found,"fun foo(func: () -> T?)
}

class Impl<T : Any> : I<T> {
    override fun foo(func: () -> T?) {
        func()
    }","// ISSUE: KT-64261
// DUMP_IR
// JVM_ABI_K1_K2_DIFF: KT-62855, KT-66280",6e1f
No signature found,"fun I<*>.foo() {
    foo { null }",,6e1f
fun box(),": String {
    val foo = Impl<String>()
    foo.foo()
    return ""OK""
}",,4f27
No signature found,"fun getCoordinatesFromPublicationDelegateAndProject(
    publication: MavenPublication?,
    project: Project,
    target: KotlinTarget?
): ModuleVersionIdentifier {
    val moduleNameProvider = project.provider { publication?.artifactId ?: dashSeparatedName(project.name, target?.name?.toLowerCase()) }",,6e1f
fun getGroup(),= m,,a219
fun getName(),= m,,4692
fun getVersion(),= m,,49b7
fun getModule(),: ModuleIdentifier = o,,701a
fun getGroup(),: String = m,,a219
fun getName(),: String = m,,4692
fun getCoordinates(),= g,,82e7
fun getUsages(),: Set<KotlinUsageContext> = u,,dca2
fun getName(),: String = c,,4692
fun getVariants(),= m,,fb21
fun getUsages(),: Set<KotlinUsageContext> = n,,dca2
fun getName(),: String = l,,4692
fun box(),": String {
    return TestClass().prop
}","// !JVM_DEFAULT_MODE: all-compatibility
// JVM_TARGET: 1.8
// WITH_STDLIB
// MODULE: lib
// FILE: 1.kt",4f27
fun toFirWhenCondition(),": FirExpression {
        require(conditions.isNotEmpty())
        return buildBalancedOrExpressionTree(conditions)
    }",,3a54
fun toFirWhenConditionWithoutSubject(),": FirExpression {
        return when (conditions.size) {
            0 -> buildErrorExpression(null, ConeSyntaxDiagnostic(""No expression in condition with expression""))
            else -> buildBalancedOrExpressionTree(conditions)
        }",,2a0f
fun appendLine(line: PropertyLine),"{
        // In Native the Other_Lowercase code points are also used to perform String.lowercase()
        if (target != KotlinTarget.Native && line.rangeStart.hexToInt() > 0xFFFF) return

        if (line.property == ""Other_Lowercase"") {
            otherLowerRanges.add(line.intRange())
        }",,c5d0
fun generate(),"{
        val strategy = RangesWritingStrategy.of(target, ""OtherLowercase"")

        FileWriter(outputFile).use { writer ->
            writer.writeHeader(outputFile, ""kotlin.text"")
            writer.appendLine()
            strategy.beforeWritingRanges(writer)
            writer.writeIntArray(""otherLowerStart"", otherLowerRanges.map { it.first }",,3be5
fun isOtherLowercaseImpl(strategy: RangesWritingStrategy),"= """,,656b
No signature found,"fun Int.isOtherLowercase(): Boolean {
            val index = binarySearchRange(${strategy.rangeRef(""otherLowerStart"")}",,6e1f
fun box(),": String {
    if (null !== null) return ""null !== null""
    if (!(""ab"" === ""ab"")) return ""ab !== ab""
    if (""ab"" === ""a"") return ""ab === a""

    if (""0"" as Any === 0) return ""'0' === 0""
    if (!(0 === 0)) return ""0 !== 0""
    if (0 === 1) return ""0 === 1""


    return ""OK"";
}",// EXPECTED_REACHABLE_NODES: 1280,4f27
fun foo1(x: Int),"{
    val x = if (true) { // OI: Map<String, () → Int>?, NI: Nothing?, error
        """" to { x }",// !DIAGNOSTICS: -NAME_SHADOWING -UNUSED_VARIABLE -UNUSED_EXPRESSION,f1b3
fun foo2(x: Int),"{
    val x = if (true) {
        mapOf("""" to { x }",,987a
fun test(),"{
    f()
}",// FIR_IDENTICAL,fe98
"fun analyze(graph: ControlFlowGraph, reporter: DiagnosticReporter, context: CheckerContext)","{
        val nodes = graph.allNodes()
        val (unreachableNodes, reachableNodes) = nodes.filterNot { it.skipNode() }",,ab71
No signature found,fun ControlFlowGraph.allNodes(acc: MutableList<CFGNode<*>> = m,,6e1f
No signature found,"fun CFGNode<*>.skipNode(): Boolean {
        val skipType = this is ExitNodeMarker ||
                this is EnterNodeMarker ||
                this is StubNode ||
                this is SplitPostponedLambdasNode ||
                this is BinaryOrExitLeftOperandNode ||
                this is BinaryOrEnterRightOperandNode ||
                this is BinaryAndExitLeftOperandNode ||
                this is BinaryAndEnterRightOperandNode ||
                this is WhenSyntheticElseBranchNode ||
                this is WhenBranchResultEnterNode ||
                this is WhenBranchResultExitNode
        val allowType = this is LoopEnterNode ||
                this is LoopBlockEnterNode ||
                this is TryExpressionEnterNode
        return !allowType && (skipType || sourceKindsToSkip.contains(this.fir.source?.kind))
    }",,6e1f
No signature found,"fun FirElement.collectInnerNodes(nodes: MutableSet<FirElement>) {
        acceptChildren(CollectNodesVisitor(nodes))
    }",,6e1f
fun visitElement(element: FirElement),"{
            nodes.add(element)
            element.acceptChildren(this)
        }",,8ec4
fun fromString(string: String),": FrontendKind<*>? {
        return when (string) {
            ""ClassicFrontend"" -> ClassicFrontend
            ""FIR"" -> FIR
            ""ClassicAndFIR"" -> ClassicAndFIR
            else -> null
        }",,e863
fun fromString(string: String),": BackendKind<*>? {
        return when (string) {
            ""ClassicBackend"" -> ClassicBackend
            ""IrBackend"" -> IrBackend
            ""DeserializedIrBackend"" -> DeserializedIrBackend
            else -> null
        }",,e863
No signature found,"fun fromTargetBackend(targetBackend: TargetBackend?): BackendKind<*> {
        if (targetBackend == null) return BackendKind.NoBackend
        return if (targetBackend.isIR) IrBackend
        else ClassicBackend
    }",,6e1f
fun fromString(string: String),": BinaryKind<*>? {
        return when (string) {
            ""Jvm"" -> Jvm
            ""Js"" -> Js
            ""Native"" -> Native
            ""Wasm"" -> Wasm
            ""KLib"" -> KLib
            ""JvmFromK1AndK2"" -> JvmFromK1AndK2
            else -> null
        }",,e863
No signature found,fun clear(byteByffer: java.nio.ByteBuffer) = b,"// JDK_RELEASE: 8
// CHECK_BYTECODE_TEXT
// 1 public final static clear\(Ljava/nio/ByteBuffer;\)Ljava/nio/Buffer;
// 1 INVOKEVIRTUAL java/nio/ByteBuffer.clear \(\)Ljava/nio/Buffer;",6e1f
fun box(),": String {
    if (clear(java.nio.ByteBuffer.allocateDirect(10)).capacity() != 10) return ""fail""
    return ""OK""
}",,4f27
fun box(),": String {
    assertNull(Bar::class.findAnnotation<Yes>())
    assertNull(Bar::class.findAnnotation<No>())

    assertEquals(""OK"", Foo::class.findAnnotations<Yes>().single().value)

    return Foo::class.findAnnotation<Yes>()?.value ?: ""Fail: no annotation""
}","// TARGET_BACKEND: JVM
// WITH_REFLECT",4f27
No signature found,"fun String.inc() : String {
    if (this == """") {
        return ""done""
    }",,6e1f
fun box(),": String {
    var s = ""11test""
    return if (++s == ""done"") ""OK"" else ""FAIL""
}",,4f27
fun f(),": String = ""","// MODULE: lib
// FILE: Class.kt",f6fb
fun box(),= f,,4f27
"fun check(declaration: FirCallableDeclaration, context: CheckerContext, reporter: DiagnosticReporter)","{
        if (
            declaration.receiverParameter?.typeRef?.coneType is ConeDynamicType &&
            !declaration.hasAnnotation(DynamicExtension, context.session) &&
            declaration !is FirAnonymousFunction
        ) {
            reporter.reportOn(declaration.receiverParameter?.source, FirErrors.DYNAMIC_RECEIVER_NOT_ALLOWED, context)
        }",,e08d
fun box(),": String {
    if (12.toString().equals(""13"")) {
        return ""Fail""
    }",,4f27
No signature found,"fun take(s: String?) {
    s?.<expr>foo</expr>
}",,6e1f
fun doSmth(i: String),= 4,,0e53
No signature found,fun fn(value : String = x,"// TARGET_BACKEND: JVM

// WITH_STDLIB",6e1f
fun box(),": String {
    return X.fn()
}",,4f27
fun getOrThrow(),: T? = a,"// WITH_STDLIB
// WORKS_WHEN_VALUE_CLASS
// LANGUAGE: +ValueClasses, +GenericInlineClassParameter",791b
fun receive(result: Result<T>),"}

inline fun <T: Any> ResultReceiver(crossinline f: (Result<T>) -> Unit): ResultReceiver<T> =
    o",,67ab
fun receive(result: Result<T>),"{
            f(result)
        }",,67ab
fun test(),"{
    var invoked = false
    val receiver = ResultReceiver<String> { result ->
        val intResult = result.getOrThrow()
        invoked = true
    }",,fe98
fun box(),": String {
    test()
    return ""OK""
}",,4f27
fun plus_eq(a: Int),": Int {
  var b = 11
  b += a
  return b
}",,1832
fun box(),": String {
  assertEquals(14, plus_eq(3))
  return ""OK""
}",,4f27
No signature found,"fun `@`() = """,// EXPECTED_REACHABLE_NODES: 1286,6e1f
No signature found,"fun `#`() = """,,6e1f
fun foo(),= `,,519f
fun box(),": String {
    val x = A().foo()
    if (x != ""ABCD"") return ""fail: $x""

    return ""OK""
}",,4f27
fun run(),"{
        val syntheticObjectFilesDirectory = buildSyntheticProject()
        packObjectFilesIntoLibrary(syntheticObjectFilesDirectory)
    }",,354f
fun buildSyntheticProject(),": File {
        val syntheticObjectFilesDirectory = this.syntheticObjectFilesDirectory.get().asFile
        val intermediatesDestination = mapOf(
            // Thin/universal object files
            ""TARGET_BUILD_DIR"" to syntheticObjectFilesDirectory.canonicalPath,
            // .swiftmodule interface
            ""BUILT_PRODUCTS_DIR"" to syntheticInterfacesPath.get().asFile.canonicalPath,
        )
        val inheritedBuildSettings = inheritedBuildSettingsFromEnvironment.mapValues {
            it.value.get()
        }",,12ec
fun packObjectFilesIntoLibrary(syntheticObjectFilesDirectory: File),"{
        val objectFilePaths = syntheticObjectFilesDirectory.listFilesOrEmpty().filter {
            it.extension == ""o""
        }",,3217
fun destination(),": String {
        val deviceId: String? = targetDeviceIdentifier.orNull
        if (deviceId != null) return ""id=$deviceId""

        val platformName = platformName.orNull ?: error(""Missing a target device identifier and a platform name"")
        val platform = mapOf(
            ""iphonesimulator"" to ""iOS Simulator"",
            ""iphoneos"" to ""iOS"",
            ""watchsimulator"" to ""watchOS Simulator"",
            ""watchos"" to ""watchOS"",
            ""appletvos"" to ""tvOS"",
            ""appletvsimulator"" to ""tvOS Simulator"",
            ""macosx"" to ""macOS"",
        )[platformName] ?: error(""Unknown PLATFORM_NAME $platformName"")

        return ""generic/platform=$platform""
    }",,39b0
No signature found,"fun getValue(t: Any?, p: KProperty<*>): Int = 1",// CORRECT_ERROR_TYPES,6e1f
No signature found,"fun getValue(obj: Test, property: KProperty<*>) = A",,6e1f
No signature found,"fun setValue(obj: Test, property: KProperty<*>, any: Any) {

        }",,6e1f
No signature found,"fun getValue(obj: Test, property: KProperty<*>) = A",,6e1f
No signature found,"fun setValue(obj: Test, property: KProperty<*>, any: Any) {

        }",,6e1f
fun run(),{},,354f
No signature found,"fun getValue(nothing: Nothing?, property: KProperty<*>) = A",,6e1f
No signature found,"fun setValue(nothing: Nothing?, property: KProperty<*>, any: Any) {
        //empty
    }",,6e1f
No signature found,"fun Int.digitsUpto(end: Int): Int {
    var sum = 0
    for (i in rangeTo(end)) {
        sum = sum*10 + i
    }","// IMPORTANT!
// Please, when your changes cause failures in bytecodeText tests for 'for' loops,
// examine the resulting bytecode shape carefully.
// Range and progression-based loops generated with Kotlin compiler should be
// as close as possible to Java counter loops ('for (int i = a; i < b; ++i) { ... }').
// Otherwise it may result in performance regression due to missing HotSpot optimizations.
// Run Kotlin compiler benchmarks (https://github.com/Kotlin/kotlin-benchmarks)
// with compiler built from your changes if you are not sure.",6e1f
fun getO(),"= ""","// TARGET_BACKEND: JVM
// JVM_TARGET: 1.8
// WITH_STDLIB

// FILE: javaDefaultMethod.kt",273a
fun getK(),"= """,,28fa
fun box(),"=
    T",,4f27
fun ok(),"= ""","// SKIP_INLINE_CHECK_IN: inlineFun$default
// FILE: 1.kt",23f4
fun ok(),"= """,,23f4
No signature found,fun inlineFun(lambda: () -> String = A,,6e1f
fun box(),": String {
    return inlineFun()
}",,4f27
"fun <R, D> acceptChildren(visitor: FirVisitor<R, D>, data: D)","{
        annotations.forEach { it.accept(visitor, data) }",,b2f8
"fun <D> transformChildren(transformer: FirTransformer<D>, data: D)",": FirBlockImpl {
        transformStatements(transformer, data)
        transformOtherChildren(transformer, data)
        return this
    }",,963c
"fun <D> transformAnnotations(transformer: FirTransformer<D>, data: D)",": FirBlockImpl {
        annotations.transformInplace(transformer, data)
        return this
    }",,31d1
"fun <D> transformStatements(transformer: FirTransformer<D>, data: D)",": FirBlockImpl {
        statements.transformInplace(transformer, data)
        return this
    }",,f5e4
"fun <D> transformOtherChildren(transformer: FirTransformer<D>, data: D)",": FirBlockImpl {
        transformAnnotations(transformer, data)
        return this
    }",,19b0
No signature found,"fun replaceConeTypeOrNull(newConeTypeOrNull: ConeKotlinType?) {
        coneTypeOrNull = newConeTypeOrNull
    }",,6e1f
fun replaceAnnotations(newAnnotations: List<FirAnnotation>),"{
        annotations = newAnnotations.toMutableOrEmpty()
    }",,8a3d
No signature found,fun equals(other: Any?) = t,"// FIR_IDENTICAL
// WITH_STDLIB
// !DIAGNOSTICS: -DEBUG_INFO_SMARTCAST
// LANGUAGE: +CustomEqualsInValueClasses, +ValueClasses",6e1f
fun equals(other: MFVC1),= t,,a6f7
fun hashCode(),= 0,,6874
fun equals(other: MFVC1),= t,,a6f7
fun equals(other: MFVC2),"{
    }",,b02f
No signature found,"fun <T> run2(x: () -> T, y: () -> T) {
    contract {
        callsInPlace(x, InvocationKind.EXACTLY_ONCE)
        callsInPlace(y, InvocationKind.EXACTLY_ONCE)
    }","// WITH_STDLIB
// ISSUE: KT-59669",6e1f
fun test1(),"{
    val x: Int
    run2({ <!CAPTURED_VAL_INITIALIZATION!>x<!> = 1 }",,fa3b
fun test2(),"{
    val x: Int
    run2({ x = 1 }",,30bb
fun test3(p: Boolean),"{
    val x: Int
    run2(
        {
            if (p) {
                <!CAPTURED_VAL_INITIALIZATION!>x<!> = 1
            }",,dcd4
No signature found,"fun getValue(x: Any?, y: Any?): String = """,// !DIAGNOSTICS: -UNUSED_PARAMETER,6e1f
fun <T> delegateFactory(p: Any),= D,,f972
fun getR(),": String = ""","// TARGET_BACKEND: JVM
// WITH_STDLIB",8ade
fun box(),= A,,4f27
fun lower(irModule: IrModuleFragment),"{
        FunctionInlining(
            context = context,
            inlineFunctionResolver = WasmInlineFunctionResolver(context),
            innerClassesSupport = context.innerClassesSupport,
            insertAdditionalImplicitCasts = true,
        ).inline(irModule)

        irModule.patchDeclarationParents()
    }",,7d84
fun test(),"{
    var i = 0
    var j = 0

    loop@ for (k in 1..10) {
        loop@ for (m in 1..10) {
            if (m == 4) break@loop
            j = m
        }",// EXPECTED_REACHABLE_NODES: 1283,fe98
fun box(),": String {
    test()

    return ""OK""
}",,4f27
fun f0(),{},"// WITH_REFLECT
// TARGET_BACKEND: JVM",72ae
fun f1(),{},,ed85
fun f2(),{},,e1c0
fun f3(),{},,ac04
No signature found,"fun <T> check(ann: Annotation, f: T.() -> Boolean) {
    val result = (ann as T).f()
    if (!result) throw RuntimeException(""fail for $ann"")
}",,6e1f
fun box(),": String {
    if (ub0.toByte() != 1.toByte()) return ""fail""
    if (us0.toShort() != 2.toShort()) return ""fail""
    if (ul0.toLong() != 3L) return ""fail""
    if ((ui0 + ui1 + ui2).toInt() != 41) return ""fail""

    check<AnnoUB>(Foo::f0.annotations.first()) {
        this.ub[0] == UByte(1) && this.ub[1] == UByte(1)
    }",,4f27
fun test(),{},,fe98
fun foo(),{},,519f
No signature found,fun A.foobar() = 3,// !DIAGNOSTICS: -UNUSED_PARAMETER,6e1f
fun foo(),= 1,,519f
fun bar(),= <,,66c3
fun getAnnotation(classDescriptor: ClassDescriptor),": RequiredArgsConstructor? =
        R",,9ade
fun getPropertiesForParameters(classDescriptor: ClassDescriptor),": List<PropertyDescriptor> =
        c",,176c
fun isFieldRequired(field: PropertyDescriptor),": Boolean {
        val psi = field.source.getPsi() as? PsiField ?: return false

        val final = psi.modifierList?.hasModifierProperty(PsiModifier.FINAL) ?: false ||
                field.annotations.any { annotation -> LombokNames.NON_NULL_ANNOTATIONS.contains(annotation.fqName) }",,9b4b
"fun valuesNotNull(map: MutableMap<Int, String>)","{
    map.<caret>replace(1, ""x"")
    map.<caret>replace(1, ""x"", ""y"")

    map.<caret>replaceAll { k, v -> ""$k to ${v.length}",,f36b
No signature found,"fun valuesNullable(map: MutableMap<Int, String?>) {
    map.<caret>replace(1, null)
    map.<caret>replace(1, null, ""x"")

    map.<caret>replaceAll { k, v -> ""$k to $v"" }",,6e1f
fun box(),": String {
    A.B1()
    val b2 = A.B2(A.B3(42, 42).y)
    return A.B4(""OK"").str
}",,4f27
fun test(),"{
    var sum = 0
    for (i in arrayOf("""", """", """", """").indices) {
        sum += i
    }","// IMPORTANT!
// Please, when your changes cause failures in bytecodeText tests for 'for' loops,
// examine the resulting bytecode shape carefully.
// Range and progression-based loops generated with Kotlin compiler should be
// as close as possible to Java counter loops ('for (int i = a; i < b; ++i) { ... }').
// Otherwise it may result in performance regression due to missing HotSpot optimizations.
// Run Kotlin compiler benchmarks (https://github.com/Kotlin/kotlin-benchmarks)
// with compiler built from your changes if you are not sure.",fe98
fun foo(),{},,519f
fun resumeWith(result: Result<Unit>),"fun evaluate(c: suspend () -> Unit) {
            c.startCoroutine(object : Continuation<Unit> {
                override val context = EmptyCoroutineContext
                override  {
                    result.getOrThrow()
                }",,8801
No signature found,"fun testLabmdaParam(x: () -> Unit) {
    assertEquals(x::class.simpleName, ""Function0"")
}",,6e1f
No signature found,"fun testSuspendLambaParam(x: suspend () -> Unit) {
    assertEquals(x::class.simpleName, ""Function1"")
}",,6e1f
fun <reified T> testLabmdaParamGeneric(x: T),"{
    assertEquals(T::class.simpleName, ""Function0"")
}",,5e3b
fun <reified T> testSuspendLambaParamGeneric(x: T),"{
    assertEquals(T::class.simpleName, ""SuspendFunction0"")
}",,b527
fun box(),": String {
    testLabmdaParam({}",,4f27
fun get(name: Name),"fun makeFlattenedGetterExpressions(
        scope: IrBlockBuilder, currentClass: IrClass, registerPossibleExtraBoxCreation: () -> Unit
    ): List<IrExpression>

    /**
     * Make expression that corresponds to read access of the instance
     */
    fun makeGetterExpression(scope: IrBuilderWithScope, currentClass: IrClass, registerPossibleExtraBoxCreation: () -> Unit): IrExpression

    /**
     * Get child [MfvcNodeInstance] by [name]
     */
    operator : MfvcNodeInstance?

    /**
     * Make setter statements corresponding assignments to the [values] of the given flattened representation.
     */
    fun makeSetterStatements(scope: IrBuilderWithScope, values: List<IrExpression>): List<IrStatement>
}

private fun makeTypeFromMfvcNodeAndTypeArguments(node: MfvcNode, typeArguments: TypeArguments) =
    n",,9c1d
No signature found,"fun MfvcNodeInstance.addSetterStatements(scope: IrBlockBuilder, values: List<IrExpression>) = w",,6e1f
No signature found,"fun MfvcNodeInstance.makeSetterExpressions(scope: IrBuilderWithScope, values: List<IrExpression>): IrExpression = s",,6e1f
No signature found,"fun MfvcNodeInstance.checkValuesCount(values: List<IrExpression>) {
    require(values.size == node.leavesCount) { ""Node $node requires ${node.leavesCount}",,6e1f
No signature found,"fun makeFlattenedGetterExpressions(scope: IrBlockBuilder, currentClass: IrClass, registerPossibleExtraBoxCreation: () -> Unit): List<IrExpression> =
        m",,6e1f
fun makeFlattenedGetterExpressions(scope: IrBuilderWithScope),: List<IrExpression> = v,,cf87
No signature found,"fun makeGetterExpression(scope: IrBuilderWithScope, currentClass: IrClass, registerPossibleExtraBoxCreation: () -> Unit): IrExpression = w",,6e1f
fun get(name: Name),": ValueDeclarationMfvcNodeInstance? {
        val (newNode, indices) = node.getSubnodeAndIndices(name) ?: return null
        return ValueDeclarationMfvcNodeInstance(newNode, typeArguments, valueDeclarations.slice(indices))
    }",,9c1d
"fun makeSetterStatements(scope: IrBuilderWithScope, values: List<IrExpression>)",": List<IrStatement> {
        checkValuesCount(values)
        return valueDeclarations.zip(values) { declaration, value -> scope.irSet(declaration, value) }",,2a05
fun makeExpression(scope: IrBuilderWithScope),": IrExpression
    }

    private class SavedToVariable(val variable: IrVariable) : CopyableExpression {
        override : IrExpression = scope.irGet(variable)
    }",,5078
fun makeExpression(scope: IrBuilderWithScope),: IrExpression = e,,5078
No signature found,"fun IrExpression.orSavedToVariable(): CopyableExpression =
        i",,6e1f
fun makeCopy(),= c,,bea3
No signature found,fun IrExpression?.isRepeatableGetter(): Boolean = w,,6e1f
No signature found,fun IrExpression?.isRepeatableSetter(): Boolean = w,,6e1f
No signature found,fun IrExpression?.isRepeatableAccessor(): Boolean = i,,6e1f
fun makeReceiverCopy(),= r,,d827
No signature found,"fun makeFlattenedGetterExpressions(
        scope: IrBlockBuilder, currentClass: IrClass, registerPossibleExtraBoxCreation: () -> Unit
    ): List<IrExpression> = m",,6e1f
fun makeRecursiveResult(node: MfvcNodeWithSubnodes),"fun makeFlattenedGetterExpressions(
        scope: IrBlockBuilder, currentClass: IrClass, isInsideRecursion: Boolean, registerPossibleExtraBoxCreation: () -> Unit
    ): List<IrExpression> {
         = node.subnodes.flatMap {
            get(it.name)!!.makeFlattenedGetterExpressions(scope, currentClass, true, registerPossibleExtraBoxCreation)
        }",,e83e
No signature found,"fun makeGetterExpression(scope: IrBuilderWithScope, currentClass: IrClass, registerPossibleExtraBoxCreation: () -> Unit): IrExpression = w",,6e1f
fun makeFieldRead(field: IrField),= i,,6cbf
"fun canUsePrivateAccess(node: NameableMfvcNode, currentClass: IrClass)",": Boolean {
        val sourceClass = node.unboxMethod.parentAsClass.let { if (it.isCompanion) it.parentAsClass else it }",,a63c
fun get(name: Name),": ReceiverBasedMfvcNodeInstance? {
        val (newNode, _) = node.getSubnodeAndIndices(name) ?: return null
        return newNode.createInstanceFromBox(scope, typeArguments, makeReceiverCopy(), accessType, saveVariable)
    }",,9c1d
"fun makeSetterStatements(scope: IrBuilderWithScope, values: List<IrExpression>)",": List<IrStatement> {
        checkValuesCount(values)
        require(fields != null) { ""$node is immutable as it has custom getter and so no backing fields"" }",,2a05
No signature found,"fun IrBuilderWithScope.savableStandaloneVariable(
    type: IrType,
    name: String? = n",,6e1f
No signature found,"fun <T : IrElement> IrStatementsBuilder<T>.savableStandaloneVariableWithSetter(
    expression: IrExpression,
    name: String? = n",,6e1f
"fun check(expression: FirVariableAssignment, context: CheckerContext, reporter: DiagnosticReporter)","{
        checkValReassignmentViaBackingField(expression, context, reporter)
        checkValReassignmentOnValueParameter(expression, context, reporter)
        checkVariableExpected(expression, context, reporter)
        checkValReassignment(expression, context, reporter)
    }",,43e4
"fun checkValReassignmentViaBackingField(
        expression: FirVariableAssignment,
        context: CheckerContext,
        reporter: DiagnosticReporter
    )","{
        val backingFieldReference = expression.calleeReference as? FirBackingFieldReference ?: return
        val propertySymbol = backingFieldReference.resolvedSymbol
        if (propertySymbol.isVar) return
        val closestGetter = context.findClosest<FirPropertyAccessor> { it.isGetter }",,5444
"fun checkValReassignmentOnValueParameter(
        expression: FirVariableAssignment,
        context: CheckerContext,
        reporter: DiagnosticReporter
    )","{
        val valueParameter = expression.calleeReference?.toResolvedValueParameterSymbol() ?: return
        reporter.reportOn(expression.lValue.source, FirErrors.VAL_REASSIGNMENT, valueParameter, context)
    }",,b3d2
"fun checkVariableExpected(
        expression: FirVariableAssignment,
        context: CheckerContext,
        reporter: DiagnosticReporter
    )","{
        val calleeReference = expression.calleeReference

        if (expression.unwrapLValue() !is FirPropertyAccessExpression ||
            (calleeReference?.isConflictingError() != true && calleeReference?.toResolvedVariableSymbol() == null)
        ) {
            reporter.reportOn(expression.lValue.source, FirErrors.VARIABLE_EXPECTED, context)
        }",,e0d1
No signature found,"fun FirReference.isConflictingError(): Boolean {
        if (!isError()) return false

        return when (val it = diagnostic) {
            is ConeSimpleDiagnostic -> it.kind == DiagnosticKind.VariableExpected
            is ConeUnresolvedNameError -> true
            is ConeDiagnosticWithCandidates -> it.candidates.any { it.symbol is FirPropertySymbol }",,6e1f
"fun checkValReassignment(expression: FirVariableAssignment, context: CheckerContext, reporter: DiagnosticReporter)","{
        val property = expression.calleeReference?.toResolvedPropertySymbol() ?: return
        if (property.isVar) return
        // Assignments of uninitialized `val`s must be checked via CFG, since the first one is OK.
        // See `FirPropertyInitializationAnalyzer` for locals, `FirMemberPropertiesChecker` for backing fields in initializers,
        // and `FirTopLevelPropertiesChecker` for top-level properties.
        if (
            (property.isLocal || isInFileGraph(property, context))
            && property.requiresInitialization(isForInitialization = false)
        ) return
        if (
            isInOwnersInitializer(expression.dispatchReceiver?.unwrapSmartcastExpression(), context)
            && property.requiresInitialization(isForInitialization = true)
        ) return

        reporter.reportOn(expression.lValue.source, FirErrors.VAL_REASSIGNMENT, property, context)
    }",,eccd
"fun isInFileGraph(property: FirPropertySymbol, context: CheckerContext)",": Boolean {
        val declarations = context.containingDeclarations.dropWhile { it !is FirFile }",,35e9
No signature found,"fun isInOwnersInitializer(receiver: FirExpression?, context: CheckerContext): Boolean {
        val uninitializedThisSymbol = (receiver as? FirThisReceiverExpression)?.calleeReference?.boundSymbol ?: return false
        val containingDeclarations = context.containingDeclarations

        val index = containingDeclarations.indexOfFirst { it is FirClass && it.symbol == uninitializedThisSymbol }",,6e1f
fun test(),"{
    throw J.staticNN
}","// FIR_IDENTICAL
// FILE: J.java",fe98
fun test1(),"{
    throw <!TYPE_MISMATCH!>J.staticN<!>
}",,fa3b
fun test2(),"{
    throw J.staticJ
}",,30bb
fun main(a: A),"{
    a.foo("""", null)<!UNNECESSARY_SAFE_CALL!>?.<!>length
    a.foo("""", null).length
    a.foo(<!NULL_FOR_NONNULL_TYPE!>null<!>, """").length

    a.bar("""", """")?.length
    a.bar("""", """").length
    a.bar(null, <!NULL_FOR_NONNULL_TYPE!>null<!>).length
}","// FIR_IDENTICAL
// !DIAGNOSTICS: -UNUSED_VARIABLE -UNUSED_PARAMETER
// JSR305_GLOBAL_REPORT: strict

// FILE: spr/Nullable.java",c1f5
fun one(),= 1,"// TARGET_BACKEND: JVM_IR

// IMPORTANT!
// Please, when your changes cause failures in bytecodeText tests for 'for' loops,
// examine the resulting bytecode shape carefully.
// Range and progression-based loops generated with Kotlin compiler should be
// as close as possible to Java counter loops ('for (int i = a; i < b; ++i) { ... }').
// Otherwise it may result in performance regression due to missing HotSpot optimizations.
// Run Kotlin compiler benchmarks (https://github.com/Kotlin/kotlin-benchmarks)
// with compiler built from your changes if you are not sure.",f1e7
fun box(),": String {
    for (i in 1..7 step one()) {
    }",,4f27
"fun accepts(startIndex: Int, testString: CharSequence)",": Int {
        if (ignoreCase) {
            return if (this.char == testString[startIndex].lowercaseChar()) 1 else -1
        }",,2338
"fun find(startIndex: Int, testString: CharSequence, matchResult: MatchResultImpl)",": Int {
        var index = startIndex
        while (index < testString.length) {
            index = testString.indexOf(char, index, ignoreCase)
            if (index < 0) {
                return -1
            }",,9aec
"fun findBack(leftLimit: Int, rightLimit: Int, testString: CharSequence, matchResult: MatchResultImpl)",": Int {
        var index = rightLimit
        while (index >= leftLimit) {
            index = testString.lastIndexOf(char, index, ignoreCase)
            if (index < 0) {
                return -1
            }",,0468
fun first(set: AbstractSet),": Boolean {
        if (ignoreCase) {
            return super.first(set)
        }",,62ff
fun foo(),"}

expect enum class ENUM01

expect annotation class ANNO01

// MODULE: m2-jvm()()(m1-common)
// FILE: jvm.kt

object ActualObject {
     {}","// MODULE: m1-common
// FILE: common.kt",519f
fun increment(),": Int {
  return ++x;
}",,75b0
No signature found,"fun String.provideDelegate(thisRef: Any?, prop: Any?) = t","// JVM_ABI_K1_K2_DIFF: KT-62464

// FILE: 1.kt",6e1f
No signature found,"fun String.getValue(thisRef: Any?, prop: Any?) = t",,6e1f
fun foo(),": String {
    val x by ""OK""
    return x
}",,519f
fun box(),: String = f,// FILE: 2.kt,4f27
fun lower(irFile: IrFile),"{
        runOnFilePostfix(irFile)
    }",,a3a5
"fun lower(irBody: IrBody, container: IrDeclaration)","{
        irBody.transformChildren(object : IrElementTransformer<IrDeclarationParent> {
            override fun visitDeclaration(declaration: IrDeclarationBase, data: IrDeclarationParent) =
                super.visitDeclaration(declaration, (declaration as? IrDeclarationParent) ?: data)

            override fun visitCall(expression: IrCall, data: IrDeclarationParent): IrElement {
                val rootCallee = expression.symbol.owner
                if (!rootCallee.isInline)
                    return super.visitCall(expression, data)

                expression.extensionReceiver = expression.extensionReceiver?.transform(this, data)
                expression.dispatchReceiver = expression.dispatchReceiver?.transform(this, data)
                val inlineLambdas = mutableListOf<IrFunction>()
                for (index in 0 until expression.valueArgumentsCount) {
                    val argument = expression.getValueArgument(index)
                    val inlineLambda = (argument as? IrFunctionExpression)?.function
                        ?.takeIf { rootCallee.valueParameters[index].isInlineParameter() }",,c7d0
fun visitElement(element: IrElement),"{
                            element.acceptChildrenVoid(this)
                        }",,d1d3
fun visitClass(declaration: IrClass),"{
                            declaration.transformChildren(transformer, declaration)

                            localClasses.add(declaration)
                        }",,b303
fun visitFunctionExpression(expression: IrFunctionExpression),"{
                            expression.function.acceptChildrenVoid(this)
                        }",,8fcb
fun visitFunction(declaration: IrFunction),"{
                            declaration.transformChildren(transformer, declaration)

                            localFunctions.add(declaration)
                        }",,fcb6
fun visitCall(expression: IrCall),"{
                            val callee = expression.symbol.owner
                            if (!callee.isInline) {
                                expression.acceptChildrenVoid(this)
                                return
                            }",,4974
fun visitClass(declaration: IrClass),": IrStatement {
                            return IrCompositeImpl(
                                declaration.startOffset, declaration.endOffset,
                                context.irBuiltIns.unitType
                            )
                        }",,b303
fun lower(irFile: IrFile),"{
        runOnFilePostfix(irFile)
    }",,a3a5
"fun lower(irBody: IrBody, container: IrDeclaration)","{
        val function = container as? IrFunction ?: return
        if (!function.isInline) return
        // Conservatively assume that functions with reified type parameters must be copied.
        if (function.typeParameters.any { it.isReified }",,c7d0
fun visitElement(element: IrElement),"{
                element.acceptChildrenVoid(this)
            }",,d1d3
fun visitClass(declaration: IrClass),"{
                var canExtract = true
                if (crossinlineParameters.isNotEmpty()) {
                    declaration.acceptVoid(object : IrElementVisitorVoid {
                        override fun visitElement(element: IrElement) {
                            element.acceptChildrenVoid(this)
                        }",,b303
fun visitGetValue(expression: IrGetValue),"{
                            if (expression.symbol.owner in crossinlineParameters)
                                canExtract = false
                        }",,8d48
"fun lower(irBody: IrBody, container: IrDeclaration)","{
        val function = container as? IrFunction ?: return
        if (!function.isInline) return
        // Conservatively assume that functions with reified type parameters must be copied.
        if (function.typeParameters.any { it.isReified }",,c7d0
fun visitElement(element: IrElement),"{
                element.acceptChildrenVoid(this)
            }",,d1d3
fun visitClass(declaration: IrClass),"{
                var canExtract = true
                if (crossinlineParameters.isNotEmpty()) {
                    declaration.acceptVoid(object : IrElementVisitorVoid {
                        override fun visitElement(element: IrElement) {
                            element.acceptChildrenVoid(this)
                        }",,b303
fun visitGetValue(expression: IrGetValue),"{
                            if (expression.symbol.owner in crossinlineParameters)
                                canExtract = false
                        }",,8d48
No signature found,"fun shouldPopUp(klass: IrClass, currentScope: ScopeWithIr?): Boolean {
        return classesToExtract.contains(klass)
    }",,6e1f
fun findPackage(fqName: FqName),": DeserializedPackageFragment? =
        f",,54bb
fun apply(),": Boolean {
        analyze()
        perform()
        return hasChanges
    }",,e86b
fun analyze(),"{
        object : JsVisitorWithContextImpl() {
            override fun endVisit(x: JsBreak, ctx: JsContext<*>) {
                super.endVisit(x, ctx)
                x.label?.let { useLabel(it.name!!) }",,6448
No signature found,"fun endVisit(x: JsContinue, ctx: JsContext<*>) {
                super.endVisit(x, ctx)
                x.label?.let { useLabel(it.name!!) }",,6e1f
fun perform(),"{
        object : JsVisitorWithContextImpl() {
            override fun endVisit(x: JsLabel, ctx: JsContext<JsNode>) {
                if (x.synthetic) {
                    x.statement = perform(x.statement, x.name)
                    if (labelUsages[x.name] ?: 0 == 0) {
                        hasChanges = true
                        ctx.replaceMe(x.statement)
                    }",,3492
No signature found,"fun visit(x: JsFunction, ctx: JsContext<*>) = f",,6e1f
"fun perform(statement: JsStatement, name: JsName)",: JsStatement = w,,5360
"fun perform(statements: MutableList<JsStatement>, name: JsName)","{
        statements.lastOrNull()?.let { statements[statements.lastIndex] = perform(it, name) }",,12d8
fun useLabel(name: JsName),"{
        labelUsages[name] = (labelUsages[name] ?: 0) + 1
    }",,75b7
fun unuseLabel(name: JsName),"{
        labelUsages[name] = labelUsages[name]!! - 1
    }",,ffca
fun test(),"{
    <expr>call()</expr>
}",,fe98
fun call(),": Foo? {
    return null
}",,f930
No signature found,"fun <T, S : T> test(x: T?, y: S, z: T) {
    x is <!CANNOT_CHECK_FOR_ERASED!>T<!>
    <!USELESS_IS_CHECK!>x is T?<!>

    <!USELESS_IS_CHECK!>y is T<!>
    <!USELESS_IS_CHECK!>y is S<!>
    <!USELESS_IS_CHECK!>y is T?<!>
    <!USELESS_IS_CHECK!>y is S?<!>

    <!USELESS_IS_CHECK!>z is T<!>
    <!USELESS_IS_CHECK!>z is T?<!>

    null <!UNCHECKED_CAST!>as T<!>
    null as T?
    null <!UNCHECKED_CAST!>as S<!>
}",,6e1f
No signature found,"fun <reified T> test(x: T?, a: Any) {
    x is T
    null as T
    null as T?

    a is T
    a as T

    a is <!CANNOT_CHECK_FOR_ERASED!>Box<T><!>
    a is <!CANNOT_CHECK_FOR_ERASED!>Array<T><!>
    a <!UNCHECKED_CAST!>as Box<T><!>
    a <!CAST_NEVER_SUCCEEDS!>as<!> Array<T>

    a is <!CANNOT_CHECK_FOR_ERASED!>Box<List<T>><!>
    a is <!CANNOT_CHECK_FOR_ERASED!>Array<List<T>><!>
    a <!UNCHECKED_CAST!>as Box<List<T>><!>
    a <!UNCHECKED_CAST!>as Array<List<T>><!>
}",,6e1f
No signature found,"fun <T> foo(x: List<T>, y: List<T>?) {
    <!USELESS_IS_CHECK!>x is List<T><!>
    y is List<T>
}",,6e1f
No signature found,fun equals(other: Any?) = o,,6e1f
fun box(),": String {
    assertTrue(Z(0) == Z(256))
    return ""OK""
}",,4f27
fun box(),": String {
    return object : Test2 {}","// !JVM_DEFAULT_MODE: all-compatibility
// JVM_TARGET: 1.8
// WITH_STDLIB
// MODULE: lib
// FILE: 1.kt",4f27
fun attributes(),": Map<String, String> = H","// FIR_IDENTICAL
// KT-287 Infer constructor type arguments",bff5
"fun foo(m : Map<String, String>)",{},,4ebb
fun test(),"{
    foo(HashMap())
}",,fe98
"fun getSourceFile(testName: String, relativePath: String)",= T,,ce20
fun testSimpleClass(),"{
        val sourceFile = getSourceFile(""testSimpleClass"", ""com/example/SimpleClass.kt"")
        val actualSnapshot = sourceFile.compileAndSnapshot().toGson()
        val expectedSnapshot = sourceFile.getExpectedSnapshotText()

        assertEquals(expectedSnapshot, actualSnapshot)

        // Check that the snapshot contains ABI info
        actualSnapshot.assertContains(""publicProperty"", ""publicFunction"")

        // Private properties and functions' names/signatures are currently part of the snapshot. We will fix this later.
        actualSnapshot.assertContains(""privateProperty"", ""privateFunction"")

        // Check that the snapshot does not contain non-ABI info
        actualSnapshot.assertDoesNotContain(
            ""publicProperty's value"",
            ""privateProperty's value"",
            ""publicFunction's body"",
            ""privateFunction's body""
        )
    }",,25d0
fun testSimpleClass_ClassLevelSnapshot(),"{
        val sourceFile = getSourceFile(""testSimpleClass"", ""com/example/SimpleClass.kt"")
        val classFile = sourceFile.compileSingle()
        val actualSnapshot = classFile.snapshot(ClassSnapshotGranularity.CLASS_LEVEL).toGson()
        val expectedSnapshot = sourceFile.getExpectedSnapshotText(ClassSnapshotGranularity.CLASS_LEVEL)

        assertEquals(expectedSnapshot, actualSnapshot)

        // Check that the snapshot does not contain class member details
        actualSnapshot.assertDoesNotContain(""publicProperty"", ""privateProperty"", ""publicFunction"", ""privateFunction"")
    }",,ce34
fun testPackageFacadeClasses(),"{
        val classpathSnapshot = snapshotClasspath(File(""$testDataDir/kotlin/testPackageFacadeClasses/src""), tmpDir)
        val classSnapshots = classpathSnapshot.classpathEntrySnapshots.single().classSnapshots
        val fileFacadeSnapshot = classSnapshots[""com/example/FileFacadeKt.class""]!!.toGson()
        val multifileClassSnapshot = classSnapshots[""com/example/MultifileClass.class""]!!.toGson()
        val multifileClassPart1Snapshot = classSnapshots[""com/example/MultifileClass__MultifileClass1Kt.class""]!!.toGson()
        val multifileClassPart2Snapshot = classSnapshots[""com/example/MultifileClass__MultifileClass2Kt.class""]!!.toGson()

        // Check that the snapshots contain ABI info
        fileFacadeSnapshot.assertContains(""propertyInFileFacade"", ""functionInFileFacade"")
        multifileClassPart1Snapshot.assertContains(""propertyInMultifileClass1"", ""functionInMultifileClass1"")
        multifileClassPart2Snapshot.assertContains(""propertyInMultifileClass2"", ""functionInMultifileClass2"")

        // Check that the snapshots do not contain non-ABI info
        fileFacadeSnapshot.assertDoesNotContain(""propertyInFileFacade's value"", ""functionInFileFacade's body"")
        multifileClassPart1Snapshot.assertDoesNotContain(""propertyInMultifileClass1's value"", ""functionInMultifileClass1's body"")
        multifileClassPart2Snapshot.assertDoesNotContain(""propertyInMultifileClass2's value"", ""functionInMultifileClass2's body"")

        // Classes with MULTIFILE_CLASS kind have no proto data
        multifileClassSnapshot.assertDoesNotContain(
            ""propertyInMultifileClass1"",
            ""functionInMultifileClass1"",
            ""propertyInMultifileClass2"",
            ""functionInMultifileClass2""
        )
    }",,f0f9
"fun getSourceFile(testName: String, relativePath: String)",= T,,ce20
fun testSimpleClass(),"{
        val sourceFile = getSourceFile(""testSimpleClass"", ""com/example/SimpleClass.java"")
        val actualSnapshot = sourceFile.compileAndSnapshot().toGson()
        val expectedSnapshot = sourceFile.getExpectedSnapshotText()

        assertEquals(expectedSnapshot, actualSnapshot)

        // Check that the snapshot contains ABI info
        actualSnapshot.assertContains(""publicField"", ""publicMethod"")

        // Check that the snapshot does not contain non-ABI info
        actualSnapshot.assertDoesNotContain(
            ""privateField"",
            ""privateMethod"",
            ""publicField's value"",
            ""privateField's value"",
            ""publicMethod's body"",
            ""privateMethod's body""
        )
    }",,25d0
fun testSimpleClass_ClassLevelSnapshot(),"{
        val sourceFile = getSourceFile(""testSimpleClass"", ""com/example/SimpleClass.java"")
        val classFile = sourceFile.compileSingle()
        val actualSnapshot = classFile.snapshot(ClassSnapshotGranularity.CLASS_LEVEL).toGson()
        val expectedSnapshot = sourceFile.getExpectedSnapshotText(ClassSnapshotGranularity.CLASS_LEVEL)

        assertEquals(expectedSnapshot, actualSnapshot)

        // Check that the snapshot does not contain class member details
        actualSnapshot.assertDoesNotContain(""publicField"", ""privateField"", ""publicMethod"", ""privateMethod"")
    }",,ce34
No signature found,fun TestSourceFile.getExpectedSnapshotText(granularity: ClassSnapshotGranularity? = n,,6e1f
No signature found,"fun String.assertContains(vararg elements: String) {
    elements.forEach {
        assertTrue(contains(it))
    }",,6e1f
No signature found,"fun String.assertDoesNotContain(vararg elements: String) {
    elements.forEach {
        assertFalse(contains(it))
    }",,6e1f
No signature found,"fun generateJsMainFunctionExecutionMode(
    apiDir: File,
    filePrinter: (targetFile: File, Printer.() -> Unit) -> Unit
) {
    val modeFqName = FqName(""org.jetbrains.kotlin.gradle.dsl.JsMainFunctionExecutionMode"")
    filePrinter(fileFromFqName(apiDir, modeFqName)) {
        generateDeclaration(""enum class"", modeFqName, afterType = ""(val mode: String)"") {
            val modes = hashMapOf(
                K2JsArgumentConstants::CALL.name to K2JsArgumentConstants.CALL,
                K2JsArgumentConstants::NO_CALL.name to K2JsArgumentConstants.NO_CALL
            )

            for ((key, value) in modes) {
                println(""$key(\""$value\""),"")
            }",,6e1f
fun fromMode(mode: String),": JsMainFunctionExecutionMode =""",,e42d
No signature found,"fun generateJsModuleKind(
    apiDir: File,
    filePrinter: (targetFile: File, Printer.() -> Unit) -> Unit
) {
    val jsModuleKindFqName = FqName(""org.jetbrains.kotlin.gradle.dsl.JsModuleKind"")
    filePrinter(fileFromFqName(apiDir, jsModuleKindFqName)) {
        generateDeclaration(""enum class"", jsModuleKindFqName, afterType = ""(val kind: String)"") {
            val kinds = hashMapOf(
                K2JsArgumentConstants::MODULE_PLAIN.name to K2JsArgumentConstants.MODULE_PLAIN,
                K2JsArgumentConstants::MODULE_AMD.name to K2JsArgumentConstants.MODULE_AMD,
                K2JsArgumentConstants::MODULE_COMMONJS.name to K2JsArgumentConstants.MODULE_COMMONJS,
                K2JsArgumentConstants::MODULE_UMD.name to K2JsArgumentConstants.MODULE_UMD,
                K2JsArgumentConstants::MODULE_ES.name to K2JsArgumentConstants.MODULE_ES
            )

            for ((key, value) in kinds) {
                println(""$key(\""$value\""),"")
            }",,6e1f
fun fromKind(kind: String),": JsModuleKind =""",,fef1
No signature found,"fun generateJsSourceMapEmbedMode(
    apiDir: File,
    filePrinter: (targetFile: File, Printer.() -> Unit) -> Unit
) {
    val jsSourceMapEmbedKindFqName = FqName(""org.jetbrains.kotlin.gradle.dsl.JsSourceMapEmbedMode"")
    filePrinter(fileFromFqName(apiDir, jsSourceMapEmbedKindFqName)) {
        generateDeclaration(""enum class"", jsSourceMapEmbedKindFqName, afterType = ""(val mode: String)"") {
            val modes = hashMapOf(
                K2JsArgumentConstants::SOURCE_MAP_SOURCE_CONTENT_ALWAYS.name to K2JsArgumentConstants.SOURCE_MAP_SOURCE_CONTENT_ALWAYS,
                K2JsArgumentConstants::SOURCE_MAP_SOURCE_CONTENT_NEVER.name to K2JsArgumentConstants.SOURCE_MAP_SOURCE_CONTENT_NEVER,
                K2JsArgumentConstants::SOURCE_MAP_SOURCE_CONTENT_INLINING.name to K2JsArgumentConstants.SOURCE_MAP_SOURCE_CONTENT_INLINING,
            )

            for ((key, value) in modes) {
                println(""$key(\""$value\""),"")
            }",,6e1f
fun fromMode(mode: String),": JsSourceMapEmbedMode =""",,e42d
No signature found,"fun generateJsSourceMapNamesPolicy(
    apiDir: File,
    filePrinter: (targetFile: File, Printer.() -> Unit) -> Unit
) {
    val jsSourceMapNamesPolicyFqName = FqName(""org.jetbrains.kotlin.gradle.dsl.JsSourceMapNamesPolicy"")
    filePrinter(fileFromFqName(apiDir, jsSourceMapNamesPolicyFqName)) {
        generateDeclaration(""enum class"", jsSourceMapNamesPolicyFqName, afterType = ""(val policy: String)"") {
            val modes = hashMapOf(
                K2JsArgumentConstants::SOURCE_MAP_NAMES_POLICY_NO.name to K2JsArgumentConstants.SOURCE_MAP_NAMES_POLICY_NO,
                K2JsArgumentConstants::SOURCE_MAP_NAMES_POLICY_SIMPLE_NAMES.name to K2JsArgumentConstants.SOURCE_MAP_NAMES_POLICY_SIMPLE_NAMES,
                K2JsArgumentConstants::SOURCE_MAP_NAMES_POLICY_FQ_NAMES.name to K2JsArgumentConstants.SOURCE_MAP_NAMES_POLICY_FQ_NAMES,
            )

            for ((key, value) in modes) {
                println(""$key(\""$value\""),"")
            }",,6e1f
fun fromPolicy(policy: String),": JsSourceMapNamesPolicy =""",,9bff
No signature found,"fun generateJsDiagnosticMode(
    apiDir: File,
    filePrinter: (targetFile: File, Printer.() -> Unit) -> Unit
) {
    val diagnosticModeFqName = FqName(""org.jetbrains.kotlin.gradle.dsl.JsDiagnosticMode"")
    filePrinter(fileFromFqName(apiDir, diagnosticModeFqName)) {
        generateDeclaration(""enum class"", diagnosticModeFqName, afterType = ""(val mode: String)"") {
            val modes = hashMapOf(
                K2JsArgumentConstants::RUNTIME_DIAGNOSTIC_EXCEPTION.name to K2JsArgumentConstants.RUNTIME_DIAGNOSTIC_EXCEPTION,
                K2JsArgumentConstants::RUNTIME_DIAGNOSTIC_LOG.name to K2JsArgumentConstants.RUNTIME_DIAGNOSTIC_LOG,
            )

            for ((key, value) in modes) {
                println(""$key(\""$value\""),"")
            }",,6e1f
fun fromMode(mode: String),": JsDiagnosticMode =""",,e42d
fun canBuild(modelName: String),: Boolean = m,,d5cb
"fun buildAll(modelName: String, project: Project)",": Any {
        require(canBuild(modelName)) { ""buildAll(\""$modelName\"") has been called while canBeBuild is false"" }",,541e
fun accept(visitor: JsVisitor),"{
        visitor.visitMultiLineComment(this)
    }",,a78f
fun acceptChildren(visitor: JsVisitor),"{
    }",,6aaf
No signature found,"fun traverse(visitor: JsVisitorWithContext, ctx: JsContext<*>) {
        visitor.visit(this, ctx)
        visitor.endVisit(this, ctx)
    }",,6e1f
fun deepCopy(),= t,,42f4
fun test(),"{
    val x = ClassWithExternalAnnotatedMembers()
    x.externalNotNullField<!UNNECESSARY_SAFE_CALL!>?.<!>foo()
    x.explicitNotNullField<!UNNECESSARY_SAFE_CALL!>?.<!>foo()

    ClassWithExternalAnnotatedMembers.staticExternalNotNullField<!UNNECESSARY_SAFE_CALL!>?.<!>foo()
    ClassWithExternalAnnotatedMembers.staticExplicitNotNullField<!UNNECESSARY_SAFE_CALL!>?.<!>foo()
}","// FIR_IDENTICAL
// FILE: ClassWithExternalAnnotatedMembers.java",fe98
No signature found,"fun String.foo() {

}",,6e1f
fun box(),": String {
    val a: dynamic = js(""{ \""--invalid--property@\"": 42 }","// IGNORE_BACKEND: JS
// !LANGUAGE: +JsAllowInvalidCharsIdentifiersEscaping",4f27
fun invoke(j: J),": String {
    // Check that there's something sensible in the EnclosingMethod; crashes if it's not the case.
    j.javaClass.enclosingMethod

    return j()
}","// TARGET_BACKEND: JVM
// WITH_STDLIB
// FILE: test.kt",fc4c
fun box(),": String {
    var a = A(""OK"")
    return 42.let {
        invoke(a::result)
    }",,4f27
No signature found,"fun maskForName(name: FqName?): Int? {
        if (name == null) return null
        return matcherTree.findFirstPositiveMatcher(name)?.mask
    }",,6e1f
No signature found,"fun matches(name: FqName?, superTypes: List<IrType>): Boolean {
        if (matchers.isEmpty()) return false
        if (name == null) return false

        externalTypesMatched[name]?.let {
            return it
        }",,6e1f
fun putAll(matchers: Iterable<FqNameMatcher>),"{
        matchers.forEach { put(it) }",,f918
fun put(matcher: FqNameMatcher),"{
        var node: Node = root

        for (c in matcher.key) {
            node = node.children.getOrPut(c) { Node() }",,b149
fun findFirstPositiveMatcher(fqName: FqName),": FqNameMatcher? {
        val segments = fqName.asString()
        var currSegmentIndex = 0
        var currNode: Node? = root

        while (currNode != null) {
            val segment = segments.getOrNull(currSegmentIndex)
            for (i in 0 until currNode.values.size) {
                val matcher = currNode.values[i]
                if (matcher.matches(fqName)) return matcher
            }",,61be
No signature found,"fun matches(name: FqName?): Boolean {
        if (pattern == STABILITY_WILDCARD_MULTI) return true

        val nameStr = name?.asString() ?: return false
        val suffix = nameStr.substring(key.length)
        return when {
            regex != null -> nameStr.startsWith(key) && regex.matches(suffix)
            else -> key == name.asString()
        }",,6e1f
No signature found,"fun equals(other: Any?): Boolean {
        val otherMatcher = other as? FqNameMatcher ?: return false
        return this.pattern == otherMatcher.pattern
    }",,6e1f
fun hashCode(),": Int {
        return pattern.hashCode()
    }",,6874
fun test(condition: Boolean),"{
    val list1 =
        if (condition) mutableListOf<Int>()
        else emptyList()

    list1

    val list2 =
        if (condition) mutableListOf()
        else emptyList<Int>()

    list2
}",// !DIAGNOSTICS: -UNUSED_EXPRESSION,46fc
fun <T> mutableListOf(),: MutableList<T> = T,,1499
fun <T> emptyList(),: List<T> = T,,eb50
fun getColor(),": String? = """,,d954
No signature found,fun setColor(p0: String?): Unit { },,6e1f
fun foo(),= 0,,519f
"fun doTestByMainFile(mainFile: KtFile, mainModule: KtTestModule, testServices: TestServices)","{
        val renderer = KtDeclarationRendererForSource.WITH_SHORT_NAMES.with {
            classifierBodyRenderer = KtClassifierBodyRenderer.BODY_WITH_MEMBERS
            bodyMemberScopeSorter = object : KtRendererBodyMemberScopeSorter {
                context(KtAnalysisSession)
                override fun sortMembers(members: List<KtDeclarationSymbol>, owner: KtSymbolWithMembers): List<KtDeclarationSymbol> {
                    return KtRendererBodyMemberScopeSorter.ENUM_ENTRIES_AT_BEGINING
                        .sortMembers(members, owner)
                        .sortedBy { it.render() }",,5016
fun get(),"fun interface Sam<T> {
    : T
}","// KOTLIN_CONFIGURATION_FLAGS: SAM_CONVERSIONS=CLASS
// WITH_SIGNATURES
// FILE: t.kt",7383
fun <T> expectsSam(sam: Sam<T>),= s,,b78c
No signature found,fun <T> genericSam(f: () -> T): T = e,,6e1f
fun box(),": String {
    for ((i, v) in listOf(4, 5, 6, 7).indices.withIndex()) {
    }","// IMPORTANT!
// Please, when your changes cause failures in bytecodeText tests for 'for' loops,
// examine the resulting bytecode shape carefully.
// Range and progression-based loops generated with Kotlin compiler should be
// as close as possible to Java counter loops ('for (int i = a; i < b; ++i) { ... }').
// Otherwise it may result in performance regression due to missing HotSpot optimizations.
// Run Kotlin compiler benchmarks (https://github.com/Kotlin/kotlin-benchmarks)
// with compiler built from your changes if you are not sure.",4f27
fun main(),"{
    fun foo(m: Map<String, (Array<Int>) -> Unit>) {}","// FIR_IDENTICAL
// !DIAGNOSTICS: -UNUSED_PARAMETER -UNUSED_ANONYMOUS_PARAMETER",d987
fun mySort(a: Array<Int>),{},,3fd2
fun build(),": FirSimpleFunction {
        return FirSimpleFunctionImpl(
            source,
            resolvePhase,
            moduleData,
            origin,
            attributes,
            status,
            returnTypeRef,
            receiverParameter,
            deprecationsProvider,
            containerSource,
            dispatchReceiverType,
            contextReceivers.toMutableOrEmpty(),
            valueParameters,
            body,
            contractDescription,
            name,
            symbol,
            annotations.toMutableOrEmpty(),
            typeParameters,
        )
    }",,5bf9
No signature found,"fun buildSimpleFunction(init: FirSimpleFunctionBuilder.() -> Unit): FirSimpleFunction {
    contract {
        callsInPlace(init, InvocationKind.EXACTLY_ONCE)
    }",,6e1f
No signature found,"fun buildSimpleFunctionCopy(original: FirSimpleFunction, init: FirSimpleFunctionBuilder.() -> Unit): FirSimpleFunction {
    contract {
        callsInPlace(init, InvocationKind.EXACTLY_ONCE)
    }",,6e1f
No signature found,"fun FirCallableSymbol<*>.doesOverrideBuiltinWithDifferentJvmName(containingScope: FirTypeScope, session: FirSession): Boolean {
    return getOverriddenBuiltinWithDifferentJvmName(containingScope, session) != null
}",,6e1f
No signature found,"fun <T : FirCallableSymbol<*>> T.getOverriddenBuiltinWithDifferentJvmName(containingScope: FirTypeScope, session: FirSession): T? {
    if (
        name !in SpecialGenericSignatures.ORIGINAL_SHORT_NAMES && name !in BuiltinSpecialProperties.SPECIAL_SHORT_NAMES
    ) return null

    @Suppress(""UNCHECKED_CAST"")
    return when (this) {
        is FirNamedFunctionSymbol -> firstOverriddenFunction(containingScope) {
            BuiltinMethodsWithDifferentJvmName.isBuiltinFunctionWithDifferentNameInJvm(it, session)
        }",,6e1f
No signature found,"fun FirCallableSymbol<*>.getJvmMethodNameIfSpecial(containingScope: FirTypeScope, session: FirSession): Name? {
    val overriddenBuiltin = getOverriddenBuiltinWithDifferentJvmName(containingScope, session)
        ?: return null
    val name = when (overriddenBuiltin) {
        is FirPropertySymbol -> overriddenBuiltin.getBuiltinSpecialPropertyGetterName(containingScope)
        is FirNamedFunctionSymbol -> BuiltinMethodsWithDifferentJvmName.getJvmName(overriddenBuiltin)?.asString()
        else -> null
    }",,6e1f
"fun getOverriddenBuiltinFunctionWithErasedValueParametersInJava(
        functionSymbol: FirNamedFunctionSymbol,
        containingScope: FirTypeScope
    )",": FirNamedFunctionSymbol? {
        if (!functionSymbol.name.sameAsBuiltinMethodWithErasedValueParameters) return null
        return functionSymbol.firstOverriddenFunction(containingScope) { it.hasErasedValueParametersInJava }",,90cb
fun getJvmName(functionSymbol: FirNamedFunctionSymbol),": Name? {
        return SIGNATURE_TO_JVM_REPRESENTATION_NAME[functionSymbol.fir.computeJvmSignature() ?: return null]
    }",,4521
"fun isBuiltinFunctionWithDifferentNameInJvm(functionSymbol: FirNamedFunctionSymbol, session: FirSession)",": Boolean {
        return functionSymbol.isFromBuiltinClass(session) && SIGNATURE_TO_JVM_REPRESENTATION_NAME.containsKey(functionSymbol.fir.computeJvmSignature())
    }",,b8cd
No signature found,"fun FirCallableSymbol<*>.getBuiltinSpecialPropertyGetterName(containingScope: FirTypeScope): String? {
        val overridden = findBuiltinSpecialPropertyFqName(this, containingScope) ?: return null
        return BuiltinSpecialProperties.PROPERTY_FQ_NAME_TO_JVM_GETTER_NAME_MAP[overridden.callableId.asSingleFqName()]?.asString()
    }",,6e1f
No signature found,"fun findBuiltinSpecialPropertyFqName(symbol: FirCallableSymbol<*>, containingScope: FirTypeScope): FirCallableSymbol<*>? {
        if (symbol.name !in BuiltinSpecialProperties.SPECIAL_SHORT_NAMES) return null

        return symbol.hasBuiltinSpecialPropertyFqNameImpl(containingScope)
    }",,6e1f
No signature found,"fun FirCallableSymbol<*>.hasBuiltinSpecialPropertyFqNameImpl(containingScope: FirTypeScope): FirCallableSymbol<*>? {
        if (callableId.asSingleFqName() in BuiltinSpecialProperties.SPECIAL_FQ_NAMES && valueParametersAreEmpty()) return this
        // if (!KotlinBuiltIns.isBuiltIn(this)) return false
        var result: FirCallableSymbol<*>? = null

        fun process(overridden: FirCallableSymbol<*>, scope: FirTypeScope): ProcessorAction {
            val foundSymbol = findBuiltinSpecialPropertyFqName(overridden, scope)
            return if (foundSymbol != null) {
                result = foundSymbol
                ProcessorAction.STOP
            }",,6e1f
No signature found,"fun FirCallableSymbol<*>.valueParametersAreEmpty(): Boolean {
        return when (this) {
            is FirNamedFunctionSymbol -> fir.valueParameters.isEmpty()
            else -> true
        }",,6e1f
No signature found,"fun FirCallableSymbol<*>.isFromBuiltinClass(session: FirSession): Boolean {
    return dispatchReceiverClassLookupTagOrNull()?.toSymbol(session)?.fir?.origin == FirDeclarationOrigin.BuiltIns
}",,6e1f
No signature found,"fun FirNamedFunctionSymbol.firstOverriddenFunction(
    containingScope: FirTypeScope,
    predicate: (FirNamedFunctionSymbol) -> Boolean
): FirNamedFunctionSymbol? {
    return firstOverriddenCallable(containingScope, FirTypeScope::processOverriddenFunctionsAndSelf, predicate)
}",,6e1f
No signature found,"fun <T : FirCallableSymbol<*>> T.firstOverriddenCallable(
    containingScope: FirTypeScope,
    processFunction: FirTypeScope.(T, (T) -> ProcessorAction) -> ProcessorAction,
    noinline predicate: (T) -> Boolean,
): T? {
    var result: T? = null
    containingScope.processFunction(this) { symbol ->
        if (predicate(symbol)) {
            result = symbol
            ProcessorAction.STOP
        }",,6e1f
No signature found,fun <T : B> test(): T = T,"// !LANGUAGE: +TypeInferenceOnCallsWithSelfTypes

// FILE: JavaBuilder.java",6e1f
fun foo(),{},,519f
No signature found,fun bar(block: () -> Out<B>) {},,6e1f
No signature found,"fun testStar(builder: Builder<*>) {
    <!DEBUG_INFO_EXPRESSION_TYPE(""CapturedType(*)"")!>builder.test()<!>

    builder
        .test()
        .foo()

    builder
        .test()
        .bar { Out() }",,6e1f
No signature found,"fun <K : Builder<K>> testTypeParam(builder: Builder<K>) {
    <!DEBUG_INFO_EXPRESSION_TYPE(""K"")!>builder.test()<!>

    builder
        .test()
        .foo()

    builder
        .test()
        .bar { Out() }",,6e1f
No signature found,"fun testStarJava(builder: JavaBuilder<*>) {
    <!DEBUG_INFO_EXPRESSION_TYPE(""CapturedType(*)..CapturedType(*)?!"")!>builder.test()<!>

    builder
        .test()
        .foo()
}",,6e1f
No signature found,"fun <K : JavaBuilder<K>> testTypeParamJava(builder: JavaBuilder<K>) {
    <!DEBUG_INFO_EXPRESSION_TYPE(""K..K?!"")!>builder.test()<!>

    builder
        .test()
        .foo()
}",,6e1f
No signature found,"fun FqName.sirPackageEnum(module: SirModule): SirEnum {
        require(!this.isRoot)

        val parent: SirMutableDeclarationContainer = if (parent().isRoot) {
            module
        }",,6e1f
"fun createEnum(fqName: FqName, parent: SirMutableDeclarationContainer)",: SirEnum = c,,8368
No signature found,"fun doWork(job: () -> Unit) {
        Runnable(job)
    }","// TARGET_BACKEND: JVM
// WITH_STDLIB
// SAM_CONVERSIONS: CLASS
// FILE: Foo.kt",6e1f
fun box(),": String {
    if (java.lang.Class.forName(""Kt17091_3Kt\$sam\$java_util_concurrent_Callable$0"") == null) return ""fail: can't find sam wrapper""

    if (java.lang.Class.forName(""test.A2\$sam\$java_lang_Runnable$0"") == null) return ""fail 2: can't find sam wrapper""

    return A().foo().call()
}",,4f27
fun foo(),= j,,519f
No signature found,fun <E : Enum<E>> createMap(enumClass: Class<E>) {},"// !LANGUAGE: -ProperTypeInferenceConstraintsProcessing
// WITH_STDLIB
// !DIAGNOSTICS: -UNUSED_PARAMETER -CAST_NEVER_SUCCEEDS",6e1f
fun reproduce(),"{
    val enumClass: Class<Enum<*>> = ""any"" as Class<Enum<*>>
    createMap(enumClass)
}",,3fc1
No signature found,"fun remember` wasn't transformed yet, then we have to transform it now.
                val createDecoysTransformer = C",,6e1f
fun lower(module: IrModuleFragment),"{
        module.transformChildrenVoid(this)
        module.patchDeclarationParents()
    }",,667e
fun visitCall(expression: IrCall),": IrExpression {
        val original = super.visitCall(expression) as IrCall
        return when (expression.symbol.owner.fqNameForIrSerialization) {
            ComposeCallableIds.composableLambda.asSingleFqName() -> {
                transformComposableLambdaCall(original)
            }",,4974
"fun functionReferenceForComposableLambda(
        lambda: IrFunctionExpression,
        dispatchReceiver: IrExpression
    )",": IrFunctionReferenceImpl {
        val argumentsCount = lambda.function.valueParameters.size +
            if (lambda.function.extensionReceiverParameter != null) 1 else 0

        val invokeSymbol = symbolRemapper.getReferencedClass(
            getTopLevelClass(ComposeClassIds.ComposableLambda)
        ).functions.single {
            it.owner.name.asString() == ""invoke"" &&
                argumentsCount == it.owner.valueParameters.size
        }",,c1fc
fun transformComposableLambdaCall(originalCall: IrCall),": IrExpression {
        val currentComposer = originalCall.getValueArgument(0)
        val lambda = originalCall.getValueArgument(originalCall.valueArgumentsCount - 1)
            as IrFunctionExpression

        val composableLambdaVar = irTemporary(originalCall, ""dispatchReceiver"")
        // create dispatchReceiver::invoke function reference
        val funReference = functionReferenceForComposableLambda(
            lambda, irGet(composableLambdaVar)
        )

        val calculationFunSymbol = IrSimpleFunctionSymbolImpl()
        val rememberBlock = createLambda0(
            returnType = lambda.type,
            functionSymbol = calculationFunSymbol,
            statements = listOf(irReturn(calculationFunSymbol, funReference))
        )

        // create remember(dispatchReceiver,...) { dispatchReceiver::invoke }",,246d
fun transformComposableLambdaInstanceCall(originalCall: IrCall),": IrExpression {
        val lambda = originalCall.getValueArgument(originalCall.valueArgumentsCount - 1)
            as IrFunctionExpression

        // create composableLambdaInstance::invoke function reference
        return functionReferenceForComposableLambda(lambda, originalCall)
    }",,4679
"fun callRun(returnType: IrType, runBlock: IrFunctionExpressionImpl)",": IrCall {
        val runSymbol = getTopLevelFunction(
            CallableId(FqName(""kotlin""), Name.identifier(""run""))
        )
        return IrCallImpl(
            startOffset = SYNTHETIC_OFFSET,
            endOffset = SYNTHETIC_OFFSET,
            type = returnType,
            symbol = runSymbol,
            typeArgumentsCount = 1,
            valueArgumentsCount = 1
        ).apply {
            putTypeArgument(0, returnType)
            putValueArgument(0, runBlock)
        }",,d933
No signature found,"fun createLambda0(
        returnType: IrType,
        functionSymbol: IrSimpleFunctionSymbol = I",,6e1f
fun addInfo(info: String),"{
        infoParagraphs.add(info)
    }",,3089
No signature found,"fun info(fm: PrintWriter.() -> Unit) {
        val bytes = ByteArrayOutputStream()
        val ps = PrintWriter(bytes)
        ps.fm()
        ps.close()
        addInfo(String(bytes.toByteArray()))
    }",,6e1f
No signature found,"fun DefectType.report(vararg attributes: Pair<DefectAttribute, String>) {
        defectReport.report(this, location, *attributes)
    }",,6e1f
"fun addPropertyDiff(defectType: DefectType, diff: NamedDiffEntry)","{
        propertyDiffs.add(diff)
        defectType.report(VALUE1_A to diff.value1, VALUE2_A to diff.value2)
    }",,0b9c
"fun addAnnotationDiffs(checker: MethodAnnotationsChecker, diffs: List<ListEntryDiff>)","{
        for (diff in diffs) {
            annotationDiffs.add(diff.toNamedDiffEntry(checker.name))
            when {
                diff.value1 != null && diff.value2 != null ->
                    checker.mismatchDefect.report(VALUE1_A to diff.value1, VALUE2_A to diff.value2)
                diff.value1 == null && diff.value2 != null ->
                    checker.missing1Defect.report(VALUE2_A to diff.value2)
                diff.value1 != null && diff.value2 == null ->
                    checker.missing2Defect.report(VALUE1_A to diff.value1)
            }",,9db6
"fun addValueParameterAnnotationDiffs(checker: MethodParameterAnnotationsChecker, index: Int, diffs: List<ListEntryDiff>)","{
        val diffEntryName = ""${checker.name}",,19bc
fun isEmpty(),: Boolean = p,,464e
fun writeAsHtml(output: PrintWriter),"{
        output.tag(""h2"", ""&gt; METHOD "" + methodId.escapeHtml())

        for (info in infoParagraphs) {
            output.tag(""p"", info)
        }",,f8d9
No signature found,"fun TextTreeBuilderContext.appendMethodReport() {
        node(""METHOD $methodId"") {
            appendNamedDiffEntries(header1, header2, propertyDiffs, ""Property"")
            appendNamedDiffEntries(header1, header2, annotationDiffs, ""Annotation"")
        }",,6e1f
No signature found,"fun getValue(receiver: Any?, p: KProperty<*>): Int {
        sb.appendLine(p.name)
        return f
    }","// JVM_ABI_K1_K2_DIFF: KT-63864
// WITH_STDLIB
// MODULE: lib
// FILE: lib.kt",6e1f
fun bar(),"{
        sb.appendLine(super<A>.x)
    }",,66c3
fun foo(),"{
        sb.appendLine(x)

        sb.appendLine(super<B>.x)
        bar()
    }",,519f
fun box(),": String {
    val c = C()
    c.foo()

    assertEquals(""""""
    156
    x
    117
    42

    """""".trimIndent(), sb.toString())

    return ""OK""
}",,4f27
No signature found,"fun foo(x: String?): Int {
    var y: Any
    while (true) {
        y = if (x == null) break else <!DEBUG_INFO_SMARTCAST!>x<!>
    }",,6e1f
No signature found,"fun asPsiType(
        type: KtType,
        useSitePosition: PsiElement,
        allowErrorTypes: Boolean,
        mode: KtTypeMappingMode,
        isAnnotationMethod: Boolean,
        suppressWildcards: Boolean?,
        preserveAnnotations: Boolean,
    ): PsiType? {
        val kotlinType = (type as KtFe10Type).fe10Type

        with(typeMapper.typeContext) {
            if (kotlinType.contains { it.isError() }",,6e1f
No signature found,"fun KtTypeMappingMode.toTypeMappingMode(
        type: KtType,
        isAnnotationMethod: Boolean,
        suppressWildcards: Boolean?,
    ): TypeMappingMode {
        require(type is KtFe10Type)
        return when (this) {
            KtTypeMappingMode.DEFAULT -> TypeMappingMode.DEFAULT
            KtTypeMappingMode.DEFAULT_UAST -> TypeMappingMode.DEFAULT_UAST
            KtTypeMappingMode.GENERIC_ARGUMENT -> TypeMappingMode.GENERIC_ARGUMENT
            KtTypeMappingMode.SUPER_TYPE -> TypeMappingMode.SUPER_TYPE
            KtTypeMappingMode.SUPER_TYPE_KOTLIN_COLLECTIONS_AS_IS -> TypeMappingMode.SUPER_TYPE_KOTLIN_COLLECTIONS_AS_IS
            KtTypeMappingMode.RETURN_TYPE_BOXED -> TypeMappingMode.RETURN_TYPE_BOXED
            KtTypeMappingMode.RETURN_TYPE ->
                typeMapper.typeContext.getOptimalModeForReturnType(type.fe10Type, isAnnotationMethod)
            KtTypeMappingMode.VALUE_PARAMETER ->
                typeMapper.typeContext.getOptimalModeForValueParameter(type.fe10Type)
        }",,6e1f
fun simplifyType(type: UnwrappedType),": KotlinType {
        var result = type
        do {
            val oldResult = result
            result = when (type) {
                is FlexibleType -> type.upperBound
                is DefinitelyNotNullType -> type.original
                else -> type
            }",,bb95
"fun asPsiTypeElement(type: KotlinType, useSitePosition: PsiElement, mode: TypeMappingMode)",": PsiTypeElement? {
        if (type !is SimpleTypeMarker) return null

        val signatureWriter = BothSignatureWriter(BothSignatureWriter.Mode.SKIP_CHECKS)
        typeMapper.mapType(type, mode, signatureWriter)

        val canonicalSignature = signatureWriter.toString()
        require(!canonicalSignature.contains(SpecialNames.ANONYMOUS_STRING))

        if (canonicalSignature.contains(""L<error>"")) return null
        if (canonicalSignature.contains(SpecialNames.NO_NAME_PROVIDED.asString())) return null

        val signature = StringCharacterIterator(canonicalSignature)
        val javaType = SignatureParsing.parseTypeString(signature, StubBuildingVisitor.GUESSING_MAPPER)
        val typeInfo = TypeInfo.fromString(javaType, false)
        val typeText = TypeInfo.createTypeText(typeInfo) ?: return null

        return SyntheticTypeElement(useSitePosition, typeText)
    }",,df80
"fun asKtType(
        psiType: PsiType,
        useSitePosition: PsiElement,
    )",": KtType? {
        throw UnsupportedOperationException(""Conversion to KtType is not supported in K1 implementation"")
    }",,04d4
"fun getSpecializedEqualsMethod(irClass: IrClass, irBuiltIns: IrBuiltIns)",": IrSimpleFunction {
        require(irClass.isSingleFieldValueClass)
        return specializedEqualsCache.computeIfAbsent(irClass) {
            irFactory.buildFun {
                name = InlineClassDescriptorResolver.SPECIALIZED_EQUALS_NAME
                // TODO: Revisit this once we allow user defined equals methods in inline/multi-field value classes.
                origin = JvmLoweredDeclarationOrigin.INLINE_CLASS_GENERATED_IMPL_METHOD
                returnType = irBuiltIns.booleanType
            }",,e959
fun createMethodReplacement(function: IrFunction),": IrSimpleFunction =
        b",,537e
fun createStaticReplacement(function: IrFunction),": IrSimpleFunction =
        b",,438b
No signature found,"fun buildReplacement(
        function: IrFunction,
        replacementOrigin: IrDeclarationOrigin,
        noFakeOverride: Boolean = f",,6e1f
No signature found,"fun buildReplacementInner(
        function: IrFunction,
        replacementOrigin: IrDeclarationOrigin,
        noFakeOverride: Boolean,
        useOldManglingScheme: Boolean,
        body: IrFunction.() -> Unit,
    ): IrSimpleFunction = c",,6e1f
fun getReplacementForRegularClassConstructor(constructor: IrConstructor),: IrConstructor? = n,,73aa
"fun computeAllMissingCases(session: FirSession, whenExpression: FirWhenExpression)",": List<WhenMissingCase> {
            val subjectType =
                getSubjectType(session, whenExpression) ?: return NotExhaustive.NO_ELSE_BRANCH.reasons
            return buildList {
                for (type in subjectType.unwrapIntersectionType()) {
                    val checkers = getCheckers(type, session)
                    collectMissingCases(checkers, whenExpression, type, session)
                }",,ee48
"fun getSubjectType(session: FirSession, whenExpression: FirWhenExpression)",": ConeKotlinType? {
            val subjectType = whenExpression.subjectVariable?.returnTypeRef?.coneType
                ?: whenExpression.subject?.resolvedType
                ?: return null

            return subjectType.fullyExpandedType(session).lowerBoundIfFlexible()
        }",,08a4
No signature found,"fun ConeKotlinType.unwrapIntersectionType(): Collection<ConeKotlinType> {
            return (this as? ConeIntersectionType)?.intersectedTypes ?: listOf(this)
        }",,6e1f
"fun getCheckers(
            subjectType: ConeKotlinType,
            session: FirSession
        )",": List<WhenExhaustivenessChecker> {
            return buildList {
                exhaustivenessCheckers.filterTo<WhenExhaustivenessChecker, MutableCollection<in WhenExhaustivenessChecker>>(this) {
                    it.isApplicable(subjectType, session)
                }",,2cab
No signature found,"fun MutableList<WhenMissingCase>.collectMissingCases(
            checkers: List<WhenExhaustivenessChecker>,
            whenExpression: FirWhenExpression,
            subjectType: ConeKotlinType,
            session: FirSession
        ) {
            for (checker in checkers) {
                checker.computeMissingCases(whenExpression, subjectType, session, this)
            }",,6e1f
No signature found,"fun <E : FirElement> transformElement(element: E, data: Any?): E {
        throw IllegalArgumentException(""Should not be there"")
    }",,6e1f
No signature found,"fun transformWhenExpression(whenExpression: FirWhenExpression, data: Any?): FirStatement {
        processExhaustivenessCheck(whenExpression)
        bodyResolveComponents.session.enumWhenTracker?.reportEnumUsageInWhen(
            bodyResolveComponents.file.sourceFile?.path,
            getSubjectType(bodyResolveComponents.session, whenExpression)
        )
        return whenExpression
    }","/**
     * The synthetic call for the whole [whenExpression] might be not completed yet
     */",6e1f
fun processExhaustivenessCheck(whenExpression: FirWhenExpression),"{
        if (whenExpression.branches.any { it.condition is FirElseIfTrueCondition }",,d67e
"fun computeStatusForNonIntersectionType(
        unwrappedSubjectType: ConeKotlinType,
        session: FirSession,
        whenExpression: FirWhenExpression,
    )",": ExhaustivenessStatus {
        val checkers = getCheckers(unwrappedSubjectType, session)
        if (checkers.isEmpty()) {
            return ExhaustivenessStatus.NotExhaustive.NO_ELSE_BRANCH
        }",,ff35
"fun isApplicable(subjectType: ConeKotlinType, session: FirSession)",": Boolean
    abstract fun computeMissingCases(
        whenExpression: FirWhenExpression,
        subjectType: ConeKotlinType,
        session: FirSession,
        destination: MutableCollection<WhenMissingCase>
    )

    protected abstract class AbstractConditionChecker<in D : Any> : FirVisitor<Unit, D>() {
        override fun visitElement(element: FirElement, data: D) {}",,3478
"fun visitWhenExpression(whenExpression: FirWhenExpression, data: D)","{
            whenExpression.branches.forEach { it.accept(this, data) }",,5b12
"fun visitWhenBranch(whenBranch: FirWhenBranch, data: D)","{
            whenBranch.condition.accept(this, data)
        }",,db1a
"fun visitBinaryLogicExpression(binaryLogicExpression: FirBinaryLogicExpression, data: D)","{
            if (binaryLogicExpression.kind == LogicOperationKind.OR) {
                binaryLogicExpression.acceptChildren(this, data)
            }",,05e8
"fun isApplicable(subjectType: ConeKotlinType, session: FirSession)",": Boolean {
        return subjectType.isNullable
    }",,3478
"fun computeMissingCases(
        whenExpression: FirWhenExpression,
        subjectType: ConeKotlinType,
        session: FirSession,
        destination: MutableCollection<WhenMissingCase>
    )","{
        val flags = Flags()
        whenExpression.accept(ConditionChecker, flags)
        if (!flags.containsNull) {
            destination.add(WhenMissingCase.NullIsMissing)
        }",,5458
"fun visitEqualityOperatorCall(equalityOperatorCall: FirEqualityOperatorCall, data: Flags)","{
            val argument = equalityOperatorCall.arguments[1]
            if (argument.resolvedType.isNullableNothing) {
                data.containsNull = true
            }",,5f69
"fun visitTypeOperatorCall(typeOperatorCall: FirTypeOperatorCall, data: Flags)","{
            if (typeOperatorCall.conversionTypeRef.coneType.isNullable) {
                data.containsNull = true
            }",,412d
"fun isApplicable(subjectType: ConeKotlinType, session: FirSession)",": Boolean {
        return subjectType.classId == StandardClassIds.Boolean
    }",,3478
"fun computeMissingCases(
        whenExpression: FirWhenExpression,
        subjectType: ConeKotlinType,
        session: FirSession,
        destination: MutableCollection<WhenMissingCase>
    )","{
        val flags = Flags()
        whenExpression.accept(ConditionChecker, flags)
        if (!flags.containsTrue) {
            destination.add(WhenMissingCase.BooleanIsMissing.TrueIsMissing)
        }",,5458
"fun visitEqualityOperatorCall(equalityOperatorCall: FirEqualityOperatorCall, data: Flags)","{
            if (equalityOperatorCall.operation.let { it == FirOperation.EQ || it == FirOperation.IDENTITY }",,5f69
"fun isApplicable(subjectType: ConeKotlinType, session: FirSession)",": Boolean {
        val symbol = subjectType.toSymbol(session) as? FirRegularClassSymbol ?: return false
        return symbol.fir.classKind == ClassKind.ENUM_CLASS
    }",,3478
"fun computeMissingCases(
        whenExpression: FirWhenExpression,
        subjectType: ConeKotlinType,
        session: FirSession,
        destination: MutableCollection<WhenMissingCase>
    )","{
        val enumClass = (subjectType.toSymbol(session) as FirRegularClassSymbol).fir
        val allEntries = enumClass.declarations.mapNotNullTo(mutableSetOf()) { it as? FirEnumEntry }",,5458
"fun visitEqualityOperatorCall(equalityOperatorCall: FirEqualityOperatorCall, data: MutableSet<FirEnumEntry>)","{
            if (!equalityOperatorCall.operation.let { it == FirOperation.EQ || it == FirOperation.IDENTITY }",,b484
"fun isApplicable(subjectType: ConeKotlinType, session: FirSession)",": Boolean {
        return (subjectType.toSymbol(session)?.fir as? FirRegularClass)?.modality == Modality.SEALED
    }",,3478
"fun computeMissingCases(
        whenExpression: FirWhenExpression,
        subjectType: ConeKotlinType,
        session: FirSession,
        destination: MutableCollection<WhenMissingCase>
    )","{
        val allSubclasses = subjectType.toSymbol(session)?.collectAllSubclasses(session) ?: return
        val checkedSubclasses = mutableSetOf<FirBasedSymbol<*>>()
        whenExpression.accept(ConditionChecker, Flags(allSubclasses, checkedSubclasses, session))
        (allSubclasses - checkedSubclasses).mapNotNullTo(destination) {
            when (it) {
                is FirClassSymbol<*> -> WhenMissingCase.IsTypeCheckIsMissing(it.classId, it.fir.classKind.isSingleton)
                is FirVariableSymbol<*> -> WhenMissingCase.EnumCheckIsMissing(it.callableId)
                else -> null
            }",,5458
"fun visitEqualityOperatorCall(equalityOperatorCall: FirEqualityOperatorCall, data: Flags)","{
            val isNegated = when (equalityOperatorCall.operation) {
                FirOperation.EQ, FirOperation.IDENTITY -> false
                FirOperation.NOT_EQ, FirOperation.NOT_IDENTITY -> true
                else -> return
            }",,5f69
"fun visitTypeOperatorCall(typeOperatorCall: FirTypeOperatorCall, data: Flags)","{
            val isNegated = when (typeOperatorCall.operation) {
                FirOperation.IS -> false
                FirOperation.NOT_IS -> true
                else -> return
            }",,412d
No signature found,"fun processBranch(symbolToCheck: FirBasedSymbol<*>, isNegated: Boolean, flags: Flags) {
            val subclassesOfType = symbolToCheck.collectAllSubclasses(flags.session)
            if (subclassesOfType.none { it in flags.allSubclasses }",,6e1f
No signature found,"fun FirBasedSymbol<*>.collectAllSubclasses(session: FirSession): Set<FirBasedSymbol<*>> {
        return mutableSetOf<FirBasedSymbol<*>>().apply { collectAllSubclassesTo(this, session) }",,6e1f
No signature found,"fun FirBasedSymbol<*>.collectAllSubclassesTo(destination: MutableSet<FirBasedSymbol<*>>, session: FirSession) {
        if (this !is FirRegularClassSymbol) {
            destination.add(this)
            return
        }",,6e1f
"fun isApplicable(subjectType: ConeKotlinType, session: FirSession)",": Boolean {
        return subjectType.isNullableNothing || subjectType.isNothing
    }",,3478
"fun computeMissingCases(
        whenExpression: FirWhenExpression,
        subjectType: ConeKotlinType,
        session: FirSession,
        destination: MutableCollection<WhenMissingCase>
    )","{
        // Nothing has no branches. The null case for `Nothing?` is handled by WhenOnNullableExhaustivenessChecker
    }",,5458
"fun isApplicable(subjectType: ConeKotlinType, session: FirSession)",": Boolean {
        return true
    }",,3478
"fun computeMissingCases(
        whenExpression: FirWhenExpression,
        subjectType: ConeKotlinType,
        session: FirSession,
        destination: MutableCollection<WhenMissingCase>,
    )","{
        // This checker should only be used when no other missing cases are being reported.
        if (destination.isNotEmpty()) return

        /**
         * If the subject type is nullable and one of the branches allows for a nullable type, the subject can be converted to a non-null
         * type, so a non-null self-type case is still considered exhaustive.
         *
         * ```
         * // This is exhaustive!
         * when (x as? String) {
         *     is CharSequence -> ...
         *     null -> ...
         * }",,3934
"fun visitTypeOperatorCall(typeOperatorCall: FirTypeOperatorCall, data: MutableSet<ConeKotlinType>)","{
            if (typeOperatorCall.operation != FirOperation.IS) return
            data.add(typeOperatorCall.conversionTypeRef.coneType)
        }",,b754
fun b(),{},"// !DIAGNOSTICS: -INVISIBLE_MEMBER -INVISIBLE_REFERENCE

// FILE: b.kt",4df1
fun c(),{},// FILE: c.kt,baea
fun d(),{},// FILE: d.kt,7213
fun e(),{},// FILE: e.kt,6566
No signature found,"fun `androidTest SourceSet`() {
        diagnosticsForTestProjectRequestingMissingSourceSet(""androidTest"")
            .assertContainsDiagnostic(AndroidSourceSetLayoutV1SourceSetsNotFoundError(""androidTest""))
    }",,6e1f
No signature found,"fun ` androidAndroidTest SourceSet`() {
        diagnosticsForTestProjectRequestingMissingSourceSet(""androidAndroidTest"")
            .assertContainsDiagnostic(AndroidSourceSetLayoutV1SourceSetsNotFoundError(""androidAndroidTest""))
    }",,6e1f
No signature found,"fun ` androidTestDebug SourceSet`() {
        diagnosticsForTestProjectRequestingMissingSourceSet(""androidTestDebug"")
            .assertContainsDiagnostic(AndroidSourceSetLayoutV1SourceSetsNotFoundError(""androidTestDebug""))
    }",,6e1f
No signature found,"fun `androidAndroidTestDebug SourceSet`() {
        diagnosticsForTestProjectRequestingMissingSourceSet(""androidAndroidTestDebug"")
            .assertContainsDiagnostic(AndroidSourceSetLayoutV1SourceSetsNotFoundError(""androidAndroidTestDebug""))
    }",,6e1f
No signature found,"fun `androidDummy SourceSet - is not reported`() {
        diagnosticsForTestProjectRequestingMissingSourceSet(""androidDummy"")
            .assertNoDiagnostics(AndroidSourceSetLayoutV1SourceSetsNotFoundError)
    }",,6e1f
No signature found,"fun `androidUnitTestX SourceSet - is not reported`() {
        diagnosticsForTestProjectRequestingMissingSourceSet(""androidUnitTestX"")
            .assertNoDiagnostics(AndroidSourceSetLayoutV1SourceSetsNotFoundError)
    }",,6e1f
fun diagnosticsForTestProjectRequestingMissingSourceSet(sourceSetName: String),": List<ToolingDiagnostic> {
        val project = buildProjectWithMPP()
        project.androidApplication { compileSdk = 32 }",,1733
fun foo(),"{
    when() {
        a<caret>v -> null
    }",,519f
fun bar(),": B<Int>
}

interface B<T>
fun <E> foo(block: B<E>.() -> Unit): B<E> = T","// FIR_IDENTICAL
// ISSUE: KT-64222",66c3
fun bar(),= f,,66c3
fun test_1(),"{
    while (true) {

    }","// LANGUAGE: +ProhibitSimplificationOfNonTrivialConstBooleanExpressions
// DIAGNOSTICS: -UNUSED_VARIABLE",dda0
fun test_2(),"{
    while (true || false) {

    }",,bb80
fun test_3(),"{
    while (1 == 1) {

    }",,d47d
fun test_4(),"{
    while (false) {
        val x = 1
    }",,1e1a
fun test_5(),"{
    while (false && true) {
        val x = 1
    }",,4df8
fun test_6(),"{
    do {

    }",,ecb5
fun test_7(),"{
    do {

    }",,0dc5
fun test_8(),"{
    do {

    }",,5d0f
fun test_9(),"{
    do {
        val x = 1
    }",,6bfc
fun test_10(),"{
    do {
        val x = 1
    }",,3588
"fun <R, D> accept(visitor: FirVisitor<R, D>, data: D)",": R =
        v",,06e4
No signature found,"fun <E : FirElement, D> transform(transformer: FirTransformer<D>, data: D): E =
        t",,6e1f
fun NestedInA(),<!> {},"// FIR_IDENTICAL
// ISSUE: KT-62005",8be6
fun NestedInA2(),<!> {},,c228
fun test1(),": Any? {
    return 1
    42
}",,fa3b
fun test2(),": Int? {
    return 2
    42
}",,30bb
fun test3(),": Any {
    return 3
    42
}",,a31f
fun test4(),": Int {
    return 4
    42
}",,5b17
fun test5(),": Any? {
    return 5
    42
}",,aa19
fun test6(),": Int? {
    return 6
    42
}",,1831
fun test7(),": Any {
    return 7
    42
}",,0099
fun test8(),": Int {
    return 8
    42
}",,3bf3
No signature found,"fun <T> (suspend () -> T).runCoroutine() : T {
    var result : Any? = null
    startCoroutine(Continuation(EmptyCoroutineContext) { result = it.getOrThrow() }",,6e1f
fun box(),": String {
    assertEquals(1, test1())
    assertEquals(2, test2())
    assertEquals(3, test3())
    assertEquals(4, test4())

    assertEquals(5, ::test5.runCoroutine())
    assertEquals(6, ::test6.runCoroutine())
    assertEquals(7, ::test7.runCoroutine())
    assertEquals(8, ::test8.runCoroutine())

    return ""OK""
}",,4f27
No signature found,"fun getValue(t: Any?, p: KProperty<*>): Int {
    return 1
  }",// !DIAGNOSTICS: -UNUSED_PARAMETER,6e1f
fun foo(),": Any
    val x: Any
}

interface B : A {
    override : Any
    override val x: Any
}","// SCOPE_DUMP: C:foo;x, Explicit:foo;x, Implicit:foo;x",519f
fun foo(),": Int
    val x: Any
}

interface Explicit : C, D {
    override : Int
    override val x: Any
}",,519f
fun foo(function: MySuspendFunction),{},"// ISSUE: KT-50997
// JVM_ABI_K1_K2_DIFF: KT-63877",de3d
fun box(),"= """,,4f27
fun component1(),= 1,//KT-2643 Support multi-declarations in Data-Flow analysis,fd7c
fun component2(),= 2,,e66b
fun test1(c: C),"{
    val (a, b) = c
}",,1e51
fun test2(c: C),"{
    val (a, b) = c
    a + 3
}",,3483
fun test3(c: C),"{
    var (<!ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE!>a<!>, b) = c
    a = 3
}",,19f8
fun test4(c: C),"{
    var (<!VARIABLE_WITH_REDUNDANT_INITIALIZER!>a<!>, b) = c
    a = 3
    a + 1
}",,5364
fun box(),": String {
    if (A.a != 2) return ""FAIL1""
    val instance = A<Int>()
    return if (instance.a != 1) ""FAIL2"" else ""OK""
}","// WITH_STDLIB
// WORKS_WHEN_VALUE_CLASS
// LANGUAGE: +ValueClasses, +GenericInlineClassParameter",4f27
fun explicitType(),: String? = n,// MEMBER_NAME_FILTER: resolveMe,12bc
fun foo(state: Int),"{
    when (state) {
        A -> return
        B -> return
        Constants.C -> return
        else -> return
    }",,2808
fun println(s: String),"{
}",,452f
fun box(),": String {
    val x = println("":Hi!"") as? Any
    if (x != Unit) return ""Fail: $x""
    return ""OK""
}",,4f27
fun f(e: E),= w,"// TARGET_BACKEND: JVM
// FILE: E.java",b992
fun box(),": String {
    return f(E.A)
}",,4f27
fun reversed(),": SortedSet<Int> {
        return null!!
    }","// SKIP_KT_DUMP
// TARGET_BACKEND: JVM
// JDK_KIND: FULL_JDK_21
// WITH_STDLIB

// FILE: 1.kt",a30f
fun first(),": Int {
        return 1
    }",,13a5
fun reversed(),": SortedSet<Int?>? {
        return null!!
    }",,a30f
No signature found,fun addLast(e: Int?) { },,6e1f
"fun test(a: A, b: B, c: C, d: D)","{
    a.size
    a.add(1)
    a.remove(1)
    a.addFirst(1)
    a.addLast(null)
    a.removeFirst()
    a.removeLast()
    a.reversed()
    a.first

    b.reversed()
    b.first

    c.size
    c.add(1)
    c.remove(1)
    c.addFirst(1)
    c.addLast(null)
    c.removeFirst()
    c.removeLast()
    c.reversed()
    c.first

    d.reversed()
    d.addLast(null)
}",,190e
fun assign(v: String),"{
        this.v = v
    }",,87a8
fun assign(v: StringProperty),"{
        this.v = v.get()
    }",,1d03
fun get(),: String = v,,7383
No signature found,fun StringProperty.assign(v: Int) = t,,6e1f
No signature found,"fun `should not work with assignment when there is no annotation on a type`() {
    val task = Task(StringProperty(""Fail""))
    <!VAL_REASSIGNMENT!>task.input<!> = <!TYPE_MISMATCH!>""OK""<!>
    <!VAL_REASSIGNMENT!>task.input<!> = StringProperty(""OK"")
    task.apply {
        <!VAL_REASSIGNMENT!>input<!> = <!TYPE_MISMATCH!>""OK""<!>
    }",,6e1f
fun box(),": String {
    testR0xE0()
    testR0xE1()
    testR0xE2()
    testR0xE3()
    testR0xE4()
    testR1xE0()
    testR1xE1()
    testR1xE2()
    testR1xE3()
    testR1xE4()
    return ""OK""
}","// Auto-generated by GenerateInRangeExpressionTestData. Do not edit!
// WITH_STDLIB",4f27
fun testR0xE0(),"{
    // with possible local optimizations
    if (0u in 1u..3u != range0.contains(0u)) throw AssertionError()
    if (0u !in 1u..3u != !range0.contains(0u)) throw AssertionError()
    if (!(0u in 1u..3u) != !range0.contains(0u)) throw AssertionError()
    if (!(0u !in 1u..3u) != range0.contains(0u)) throw AssertionError()
    // no local optimizations
    if (element0 in 1u..3u != range0.contains(element0)) throw AssertionError()
    if (element0 !in 1u..3u != !range0.contains(element0)) throw AssertionError()
    if (!(element0 in 1u..3u) != !range0.contains(element0)) throw AssertionError()
    if (!(element0 !in 1u..3u) != range0.contains(element0)) throw AssertionError()
}",,41a3
fun testR0xE1(),"{
    // with possible local optimizations
    if (1u in 1u..3u != range0.contains(1u)) throw AssertionError()
    if (1u !in 1u..3u != !range0.contains(1u)) throw AssertionError()
    if (!(1u in 1u..3u) != !range0.contains(1u)) throw AssertionError()
    if (!(1u !in 1u..3u) != range0.contains(1u)) throw AssertionError()
    // no local optimizations
    if (element1 in 1u..3u != range0.contains(element1)) throw AssertionError()
    if (element1 !in 1u..3u != !range0.contains(element1)) throw AssertionError()
    if (!(element1 in 1u..3u) != !range0.contains(element1)) throw AssertionError()
    if (!(element1 !in 1u..3u) != range0.contains(element1)) throw AssertionError()
}",,ea22
fun testR0xE2(),"{
    // with possible local optimizations
    if (2u in 1u..3u != range0.contains(2u)) throw AssertionError()
    if (2u !in 1u..3u != !range0.contains(2u)) throw AssertionError()
    if (!(2u in 1u..3u) != !range0.contains(2u)) throw AssertionError()
    if (!(2u !in 1u..3u) != range0.contains(2u)) throw AssertionError()
    // no local optimizations
    if (element2 in 1u..3u != range0.contains(element2)) throw AssertionError()
    if (element2 !in 1u..3u != !range0.contains(element2)) throw AssertionError()
    if (!(element2 in 1u..3u) != !range0.contains(element2)) throw AssertionError()
    if (!(element2 !in 1u..3u) != range0.contains(element2)) throw AssertionError()
}",,9568
fun testR0xE3(),"{
    // with possible local optimizations
    if (3u in 1u..3u != range0.contains(3u)) throw AssertionError()
    if (3u !in 1u..3u != !range0.contains(3u)) throw AssertionError()
    if (!(3u in 1u..3u) != !range0.contains(3u)) throw AssertionError()
    if (!(3u !in 1u..3u) != range0.contains(3u)) throw AssertionError()
    // no local optimizations
    if (element3 in 1u..3u != range0.contains(element3)) throw AssertionError()
    if (element3 !in 1u..3u != !range0.contains(element3)) throw AssertionError()
    if (!(element3 in 1u..3u) != !range0.contains(element3)) throw AssertionError()
    if (!(element3 !in 1u..3u) != range0.contains(element3)) throw AssertionError()
}",,1206
fun testR0xE4(),"{
    // with possible local optimizations
    if (4u in 1u..3u != range0.contains(4u)) throw AssertionError()
    if (4u !in 1u..3u != !range0.contains(4u)) throw AssertionError()
    if (!(4u in 1u..3u) != !range0.contains(4u)) throw AssertionError()
    if (!(4u !in 1u..3u) != range0.contains(4u)) throw AssertionError()
    // no local optimizations
    if (element4 in 1u..3u != range0.contains(element4)) throw AssertionError()
    if (element4 !in 1u..3u != !range0.contains(element4)) throw AssertionError()
    if (!(element4 in 1u..3u) != !range0.contains(element4)) throw AssertionError()
    if (!(element4 !in 1u..3u) != range0.contains(element4)) throw AssertionError()
}",,798f
fun testR1xE0(),"{
    // with possible local optimizations
    if (0u in 3u..1u != range1.contains(0u)) throw AssertionError()
    if (0u !in 3u..1u != !range1.contains(0u)) throw AssertionError()
    if (!(0u in 3u..1u) != !range1.contains(0u)) throw AssertionError()
    if (!(0u !in 3u..1u) != range1.contains(0u)) throw AssertionError()
    // no local optimizations
    if (element0 in 3u..1u != range1.contains(element0)) throw AssertionError()
    if (element0 !in 3u..1u != !range1.contains(element0)) throw AssertionError()
    if (!(element0 in 3u..1u) != !range1.contains(element0)) throw AssertionError()
    if (!(element0 !in 3u..1u) != range1.contains(element0)) throw AssertionError()
}",,c70f
fun testR1xE1(),"{
    // with possible local optimizations
    if (1u in 3u..1u != range1.contains(1u)) throw AssertionError()
    if (1u !in 3u..1u != !range1.contains(1u)) throw AssertionError()
    if (!(1u in 3u..1u) != !range1.contains(1u)) throw AssertionError()
    if (!(1u !in 3u..1u) != range1.contains(1u)) throw AssertionError()
    // no local optimizations
    if (element1 in 3u..1u != range1.contains(element1)) throw AssertionError()
    if (element1 !in 3u..1u != !range1.contains(element1)) throw AssertionError()
    if (!(element1 in 3u..1u) != !range1.contains(element1)) throw AssertionError()
    if (!(element1 !in 3u..1u) != range1.contains(element1)) throw AssertionError()
}",,e0d4
fun testR1xE2(),"{
    // with possible local optimizations
    if (2u in 3u..1u != range1.contains(2u)) throw AssertionError()
    if (2u !in 3u..1u != !range1.contains(2u)) throw AssertionError()
    if (!(2u in 3u..1u) != !range1.contains(2u)) throw AssertionError()
    if (!(2u !in 3u..1u) != range1.contains(2u)) throw AssertionError()
    // no local optimizations
    if (element2 in 3u..1u != range1.contains(element2)) throw AssertionError()
    if (element2 !in 3u..1u != !range1.contains(element2)) throw AssertionError()
    if (!(element2 in 3u..1u) != !range1.contains(element2)) throw AssertionError()
    if (!(element2 !in 3u..1u) != range1.contains(element2)) throw AssertionError()
}",,1838
fun testR1xE3(),"{
    // with possible local optimizations
    if (3u in 3u..1u != range1.contains(3u)) throw AssertionError()
    if (3u !in 3u..1u != !range1.contains(3u)) throw AssertionError()
    if (!(3u in 3u..1u) != !range1.contains(3u)) throw AssertionError()
    if (!(3u !in 3u..1u) != range1.contains(3u)) throw AssertionError()
    // no local optimizations
    if (element3 in 3u..1u != range1.contains(element3)) throw AssertionError()
    if (element3 !in 3u..1u != !range1.contains(element3)) throw AssertionError()
    if (!(element3 in 3u..1u) != !range1.contains(element3)) throw AssertionError()
    if (!(element3 !in 3u..1u) != range1.contains(element3)) throw AssertionError()
}",,15e0
fun testR1xE4(),"{
    // with possible local optimizations
    if (4u in 3u..1u != range1.contains(4u)) throw AssertionError()
    if (4u !in 3u..1u != !range1.contains(4u)) throw AssertionError()
    if (!(4u in 3u..1u) != !range1.contains(4u)) throw AssertionError()
    if (!(4u !in 3u..1u) != range1.contains(4u)) throw AssertionError()
    // no local optimizations
    if (element4 in 3u..1u != range1.contains(element4)) throw AssertionError()
    if (element4 !in 3u..1u != !range1.contains(element4)) throw AssertionError()
    if (!(element4 in 3u..1u) != !range1.contains(element4)) throw AssertionError()
    if (!(element4 !in 3u..1u) != range1.contains(element4)) throw AssertionError()
}",,3062
fun test(),": Foo<String> {
    return <!DEBUG_INFO_EXPRESSION_TYPE(""Foo<kotlin.String>"")!>Foo.create()<!>
}","// FIR_IDENTICAL
// JSPECIFY_STATE: strict
// !LANGUAGE: +TypeEnhancementImprovementsInStrictMode
// MUTE_FOR_PSI_CLASS_FILES_READING

// FILE: Foo.java",fe98
No signature found,"fun <reified T : Enum<T>> myValueOf(): String {
    return myValueOf2<T>()
}","// WITH_STDLIB
// FILE: 1.kt",6e1f
No signature found,"fun <reified Y : Enum<Y>> myValueOf2(): String {
    return enumValueOf<Y>(""OK"").name
}",,6e1f
fun box(),": String {
    return myValueOf<Z>()
}",,4f27
No signature found,"fun check(trailingComma: PsiElement?, trace: BindingTrace, languageVersionSettings: LanguageVersionSettings) {
        if (!languageVersionSettings.supportsFeature(LanguageFeature.TrailingCommas) && trailingComma != null) {
            trace.report(Errors.UNSUPPORTED_FEATURE.on(trailingComma, LanguageFeature.TrailingCommas to languageVersionSettings))
        }",,6e1f
"fun check(declaration: KtDeclaration, descriptor: DeclarationDescriptor, context: DeclarationCheckerContext)","{
        when (declaration) {
            is KtClass -> {
                TrailingCommaChecker.check(declaration.typeParameterList?.trailingComma, context.trace, context.languageVersionSettings)
            }",,5073
No signature found,"fun check(resolvedCall: ResolvedCall<*>, reportOn: PsiElement, context: CallCheckerContext) {
        when (val callElement = resolvedCall.call.callElement) {
            is KtArrayAccessExpression -> TrailingCommaChecker.check(
                callElement.trailingComma,
                context.trace,
                context.languageVersionSettings
            )
            is KtCollectionLiteralExpression -> TrailingCommaChecker.check(
                callElement.trailingComma,
                context.trace,
                context.languageVersionSettings
            )
            is KtWhenExpression -> {
                if (callElement.subjectExpression != null) {
                    callElement.entries.forEach { whenEntry ->
                        TrailingCommaChecker.check(whenEntry.trailingComma, context.trace, context.languageVersionSettings)
                    }",,6e1f
No signature found,"fun <R> doCall2_2(block: () -> R, res: R, h: Holder): R {
    return doCall2_1(block, {
        h.value += "", OK_EXCEPTION""
        ""OK_EXCEPTION""
    }","// JVM_ABI_K1_K2_DIFF: KT-63861

// FILE: 1.kt",6e1f
No signature found,"fun <R> doCall2_1(block: () -> R, exception: (e: Exception) -> Unit, res: R, h: Holder): R {
    return doCall2<R>(block, exception, {
        h.value += "", OK_FINALLY""
        ""OK_FINALLY""
    }",,6e1f
No signature found,"fun <R> doCall2(block: () -> R, exception: (e: Exception) -> Unit, finallyBlock: () -> Unit, res: R, h: Holder): R {
    try {
        try {
            return block()
        }",,6e1f
"fun test0(h: Holder, throwException: Boolean)",": Int {
    val localResult = doCall2_2 (
            {
                h.value += ""OK_NONLOCAL""
                if (throwException) {
                    throw RuntimeException()
                }",,978c
fun box(),": String {
    var h = Holder()
    val test0 = test0(h, true)
    if (test0 != -1 || h.value != ""OK_NONLOCAL, OK_EXCEPTION, OK_FINALLY, DO_CALL_2_FINALLY"") return ""test0: ${test0}",,4f27
"fun invoke(
        packageName: CirPackageName,
        fragments: Collection<KmModuleFragment>,
        typeResolver: CirTypeResolver
    )",": CirTreePackage {
        val pkg = CirPackage.create(packageName)

        val properties = fragments.mapNotNull { it.pkg }",,e542
fun foo(),= 4,"// FIR_IDENTICAL
// !LANGUAGE: +ProhibitVisibilityOfNestedClassifiersFromSupertypesOfCompanion
// See KT-21515 for a class diagram and details

// class is to prevent accidental short-name import",519f
fun foo(),= 4,,519f
fun foo(),= 4,,519f
fun foo(),= 4,,519f
fun foo(),= 4,,519f
fun foo(),= 4,,519f
fun foo(),= 4,,519f
fun foo(),= 4,,519f
fun foo(),= 4,,519f
fun foo(),= 4,,519f
fun foo(),= 4,,519f
fun foo(),= 4,,519f
fun foo(),= 4,,519f
fun foo(),= 4,,519f
fun foo(),= 4,,519f
fun foo(),= 4,,519f
fun foo(),= 4,,519f
fun foo(),= 4,,519f
fun foo(),= 4,,519f
fun foo(),= 4,,519f
fun foo(),= 4,,519f
fun foo(),= 4,,519f
fun use(bar: Bar),"{
        println(""Used from kotlin Bar.getX() = ${bar.x}",,905e
No signature found,fun TestProject.customizeProject() {},,6e1f
fun checkThatDefaultKonanHasNotBeenCreated(),"{
        if (isTeamCityRun) {
            val userHomeDir = System.getProperty(""user.home"")
            assertDirectoryDoesNotExist(Paths.get(""$userHomeDir/.konan""))
        }",,23a5
fun box(),": String {
    return C().<!INVISIBLE_MEMBER!>a<!>
}",// FILE: B.java,4f27
fun result(),"= ""","// !JVM_DEFAULT_MODE: all-compatibility
// TARGET_BACKEND: JVM
// JVM_TARGET: 1.8
// WITH_STDLIB",5880
fun box(),: String = o,,4f27
fun box(),": String {
    var x = """"

    class CapturesX {
        override fun toString() = x
    }",,4f27
fun foo(),= C,,519f
fun A3(x: Any),"= ""","// !DIAGNOSTICS: -UNUSED_PARAMETER -UNUSED_VARIABLE
// !CHECK_TYPE
// FILE: a.kt",9dd7
fun bar(),"{
    A3("""") checkType { _<B>() }",,66c3
fun baz(),"{
    a.A1("""") // resolved to B constructor, OK
    a.<!INVISIBLE_MEMBER!>A2<!>("""") // resolved to B constructor, INVISIBLE_MEMBER because type alias is private, OK

    a.A3("""") checkType { _<String>() }",,b22f
fun box(),": String {
    foo<String>(""17"")
    bar<String>(""17"")
    foo<String>(42)
    bar<String>(42)

    assertEquals(""17\n17\n42\n42\n"", sb.toString())
    return ""OK""
}",,4f27
No signature found,"fun <T> foo(x: Any?) {
    val y = x as T
    sb.appendLine(y.toString())
}",,6e1f
No signature found,"fun <T> bar(x: Any?) {
    val y = x as? T
    sb.appendLine(y.toString())
}",,6e1f
fun box(),": String {
    fun foo(x: String) = x
    fun foo() = foo(""K"")

    return run {
        foo(""O"") + foo()
    }",,4f27
No signature found,"fun init(elementType: IElementType, contentElementType: IElementType?) {
        super.init(elementType, contentElementType)
    }",,6e1f
fun getContentElement(),": KtElement?

    override fun forceResolveScope(scope: GlobalSearchScope?) {
        resolveScope = scope
    }",,6f8c
fun getForcedResolveScope(),= r,,af7b
fun isPhysical(),= i,,4286
fun isValid(),= t,,a2fc
fun getContext(),": PsiElement? {
        if (fakeContextForJavaFile != null) return fakeContextForJavaFile
        if (context != null && context !is KtElement) {
            val logInfoForContextElement = (context as? PsiFile)?.virtualFile?.path ?: context.getElementTextWithContext()
            LOG.warn(""CodeFragment with non-kotlin context should have fakeContextForJavaFile set: \noriginalContext = $logInfoForContextElement"")
            return null
        }",,409c
fun getResolveScope(),= c,,24a9
fun clone(),": KtCodeFragment {
        val elementClone = calcTreeElement().clone() as FileElement

        return (cloneImpl(elementClone) as KtCodeFragment).apply {
            isPhysical = false
            myOriginalFile = this@KtCodeFragment
            importDirectiveStrings = LinkedHashSet(this@KtCodeFragment.importDirectiveStrings)
            viewProvider = SingleRootFileViewProvider(
                PsiManager.getInstance(myProject),
                LightVirtualFile(name, KotlinFileType.INSTANCE, text),
                false
            )
            viewProvider.forceCachedPsi(this)
        }",,0d77
fun getViewProvider(),= v,,5d9a
fun getThisType(),= t,,ae93
No signature found,"fun setThisType(psiType: PsiType?) {
        thisType = psiType
    }",,6e1f
fun getSuperType(),= s,,fb09
No signature found,"fun setSuperType(superType: PsiType?) {
        this.superType = superType
    }",,6e1f
fun importsToString(),": String {
        return importDirectiveStrings.joinToString(IMPORT_SEPARATOR)
    }",,f0e0
No signature found,"fun addImportsFromString(imports: String?) {
        val notifyChanged = viewProvider.isEventSystemEnabled && project !is MockProject

        if (imports != null && appendImports(imports)) {
            if (notifyChanged) {
                // This forces the code fragment to be re-highlighted
                add(KtPsiFactory(project).createColon()).delete()
            }",,6e1f
fun addImport(import: String),"{
        addImportsFromString(import)
    }",// Increment the modification stamp,c5b8
fun appendImports(rawImports: String),": Boolean {
        if (rawImports.isEmpty()) {
            return false
        }","/**
     * Parses raw [rawImports] and appends them to the list of code fragment imports.
     *
     * Import strings must be separated by the [IMPORT_SEPARATOR].
     * Each import must be either a qualified name to import (e.g., 'foo.bar'), or a complete text representation of an import directive
     * (e.g., 'import foo.bar as baz').
     *
     * Note that already present import directives will be ignored.
     *
     * @return `true` if new import directives were added.
     */",aca9
fun importsAsImportList(),": KtImportList? {
        if (importDirectiveStrings.isNotEmpty() && context != null) {
            val ktPsiFactory = KtPsiFactory.contextual(context)
            val fileText = importDirectiveStrings.joinToString(""\n"")
            return ktPsiFactory.createFile(""imports_for_codeFragment.kt"", fileText).importList
        }",,f788
No signature found,fun setVisibilityChecker(checker: VisibilityChecker?) {},,6e1f
fun getVisibilityChecker(),: VisibilityChecker = V,,3a34
No signature found,"fun setExceptionHandler(checker: JavaCodeFragment.ExceptionHandler?) {
        exceptionHandler = checker
    }",,6e1f
fun getExceptionHandler(),= e,,bc2f
fun getContextContainingFile(),": KtFile? {
        return getOriginalContext()?.takeIf { it.isValid }",,fcf8
fun getOriginalContext(),": KtElement? {
        val contextElement = getContext() as? KtElement
        val contextFile = contextElement?.containingFile as? KtFile
        if (contextFile is KtCodeFragment) {
            return contextFile.getOriginalContext()
        }",,396f
fun onCodeFragmentImportsModification(codeFragment: KtCodeFragment),"fun interface KotlinCodeFragmentImportModificationListener {
    
}",,30c6
No signature found,"fun <K: Any, V: Any> foo(k: K, v: V) {
    val map = HashMap<K, V>()
    val old = map.put(k, v)
}",// KJS_WITH_FULL_RUNTIME,6e1f
fun box(),": String {
    foo("""", """")
    return ""OK""
}",,4f27
No signature found,fun <T> Foo1<T>.invoke(handler: () -> Unit) {},"// !DIAGNOSTICS: -UNUSED_PARAMETER

// Test case 1: additional receiver, generic invoke",6e1f
No signature found,"fun Another1.main(x: Bar1<String>?) {
    x?.value {}",,6e1f
No signature found,fun Foo2<String>.invoke(x: Int) {},,6e1f
No signature found,"fun Another2.main(x: Bar2<String>?) {
    x?.<!UNSAFE_IMPLICIT_INVOKE_CALL!>value<!>(1)
    x?.value<!UNSAFE_CALL!>.<!>invoke(1)
}",,6e1f
No signature found,fun Foo3<T>.invoke(x: Int) {},"// Test case 3: additional generic receiver, generic invoke",6e1f
No signature found,"fun <K> Another3<K>.main(x: Bar3<K>?) {
    x?.<!UNSAFE_IMPLICIT_INVOKE_CALL!>value<!>(1)
    x?.value<!UNSAFE_CALL!>.<!>invoke(1)
}",,6e1f
No signature found,fun Foo4<T>?.invoke(x: Int) {},"// Test case 4: additional receiver, generic invoke with nullable receiver",6e1f
No signature found,"fun <K> Another4<K>.main(x: Bar4<K>?) {
    x?.<!UNSAFE_IMPLICIT_INVOKE_CALL!>value<!>(1)
    x?.value.invoke(1)
}",,6e1f
No signature found,fun <T> Foo5.invoke(handler: T) {},"// Test case 5: additional receiver, generic invoke without using a type parameter inside a recevier",6e1f
No signature found,"fun Another5.main(x: Bar5?) {
    x?.value {}",,6e1f
No signature found,fun <T> Foo6<T>.invoke(x: Int) {},,6e1f
No signature found,"fun main(x: Bar6<String>?) {
    x?.value(1)
    x?.value<!UNSAFE_CALL!>.<!>invoke(1)
}",,6e1f
No signature found,fun <T> Foo7<T>.invoke(x: Int) {},// Test case 7: top-level generic invoke and invoke with compatible additional dispatch recevier,6e1f
No signature found,fun <T> Foo7<T>.invoke(x: Int) {},,6e1f
No signature found,"fun Another7.main(x: Bar7<String>?) {
    x?.value(1)
    x?.value<!UNSAFE_CALL!>.<!>invoke(1)
}",,6e1f
No signature found,fun Foo8<String>.invoke(x: Int) {},// Test case 8: top-level non-generic invoke,6e1f
No signature found,"fun main(x: Bar8<String>?) {
    x?.value(1)
    x?.value<!UNSAFE_CALL!>.<!>invoke(1)
}",,6e1f
No signature found,fun <T> T.invoke(handler: () -> Unit) {},"// Test case 9: additional receiver, generic invoke with pure type perameter receiver",6e1f
No signature found,"fun Another9.main(x: Bar9<String>?) {
    x?.value {}",,6e1f
No signature found,fun <T: Any> Foo10<T>.invoke(handler: () -> Unit) {},,6e1f
No signature found,"fun Another10.main(x: Bar10<String>?) {
    x?.value {}",,6e1f
fun foo(),{},"// FIR_IDENTICAL
// MODULE: m1-common
// FILE: common.kt",519f
fun foo(),"{
    }",,519f
fun top(),": T
    abstract fun pop(): T
    abstract fun push(value: T)
    abstract fun reset()

    /**
     * returns all elements of the stack in order of retrieval
     */
    abstract fun all(): List<T>
}

fun <T> stackOf(vararg values: T): Stack<T> = S",,93d2
No signature found,fun <T> Stack<T>.topOrNull(): T? = i,,6e1f
fun top(),: T = s,,93d2
fun pop(),: T = s,,4144
fun push(value: T),"{
        stack.add(value)
    }",,989a
fun reset(),"{
        stack.clear()
    }",,64bc
fun all(),: List<T> = s,,71f5
fun foo(),"{
        val f = anySymbols
    }",,519f
No signature found,"fun foo(s: @TypeAnn(""1"") String, x: @TypeAnn(""2"") Int) {
    }","// EMIT_JVM_TYPE_ANNOTATIONS
// RENDER_ANNOTATIONS
// TARGET_BACKEND: JVM
// JVM_TARGET: 1.8",6e1f
No signature found,"fun fooArray(s: Array<@TypeAnn(""3"") String>, i: Array<@TypeAnn(""3"") Int>) {
    }",,6e1f
fun ff(l: Any),= l,// FIR_IDENTICAL,cd92
fun testMemoryCache(),"{
        val cache = SimpleMemoryScriptsCache()
        checkWithCache(cache, simpleScript, simpleScriptExpectedOutput)
    }",,0958
fun testSimpleImportWithMemoryCache(),"{
        val cache = SimpleMemoryScriptsCache()
        checkWithCache(
            cache, scriptWithImport, scriptWithImportExpectedOutput,
            compilationConfiguration = { makeSimpleConfigurationWithTestImport() }",,0bda
fun testFileCache(),"{
        withTempDir(""scriptingTestCache"") { cacheDir ->
            val cache = FileBasedScriptCache(cacheDir)
            Assert.assertEquals(true, cache.baseDir.listFiles()?.isEmpty())

            checkWithCache(cache, simpleScript, simpleScriptExpectedOutput)
        }",,549f
fun testSimpleImportWithFileCache(),"{
        withTempDir(""scriptingTestCache"") { cacheDir ->
            val cache = FileBasedScriptCache(cacheDir)
            Assert.assertEquals(true, cache.baseDir.listFiles()?.isEmpty())

            checkWithCache(
                cache, scriptWithImport, scriptWithImportExpectedOutput,
                compilationConfiguration = { makeSimpleConfigurationWithTestImport() }",,ad3b
fun testJarCache(),"{
        withTempDir(""scriptingTestJarCache"") { cacheDir ->
            val cache = TestCompiledScriptJarsCache(cacheDir)
            Assert.assertTrue(cache.baseDir.listFiles()!!.isEmpty())

            checkWithCache(cache, simpleScript, simpleScriptExpectedOutput)

            val scriptOut = runScriptFromJar(cache.baseDir.listFiles()!!.first { it.extension == ""jar"" }",,3f1c
fun testSimpleImportWithJarCache(),"{
        withTempDir(""scriptingTestJarCache"") { cacheDir ->
            val cache = TestCompiledScriptJarsCache(cacheDir)
            Assert.assertTrue(cache.baseDir.listFiles()!!.isEmpty())

            checkWithCache(
                cache, scriptWithImport, scriptWithImportExpectedOutput,
                compilationConfiguration = { makeSimpleConfigurationWithTestImport() }",,9f2f
fun testImplicitReceiversWithJarCache(),"{
        withTempDir(""scriptingTestJarCache"") { cacheDir ->
            val cache = TestCompiledScriptJarsCache(cacheDir)
            Assert.assertTrue(cache.baseDir.listFiles()!!.isEmpty())

            checkWithCache(
                cache, simpleScript, simpleScriptExpectedOutput, checkDirectEval = false,
                compilationConfiguration = {
                    updateClasspath(classpathFromClass<ScriptingHostTest>()) // the class defined here should be in the classpath
                    implicitReceivers(Implicit::class)
                }",,3f17
fun ignoredTestLocalDependencyWithJarCacheInvalidation(),"{
        withTempDir(""scriptingTestDepDir"") { depDir ->
            val standardJars = KotlinJars.kotlinScriptStandardJars
            val outJar = makeDependenciesJar(depDir, standardJars)

            withTempDir(""scriptingTestJarChacheWithDep"") { cacheDir ->
                val cache = TestCompiledScriptJarsCache(cacheDir)
                Assert.assertTrue(cache.baseDir.listFiles()!!.isEmpty())

                val hostConfiguration = defaultJvmScriptingHostConfiguration.with {
                    jvm {
                        baseClassLoader.replaceOnlyDefault(null)
                        compilationCache(cache)
                    }",,d1ba
fun testLocalDependencyWithExternalLoadAndCache(),"{
        withTempDir(""scriptingTestDepDir"") { depDir ->
            val standardJars = KotlinJars.kotlinScriptStandardJars
            val outJar = makeDependenciesJar(depDir, standardJars)

            withTempDir(""scriptingTestJarChacheWithExtLoadedDep"") { cacheDir ->
                val cache = TestCompiledScriptJarsCache(cacheDir)
                Assert.assertTrue(cache.baseDir.listFiles()!!.isEmpty())

                val hostConfiguration = defaultJvmScriptingHostConfiguration.with {
                    jvm {
                        baseClassLoader(URLClassLoader((standardJars + outJar).map { it.toURI().toURL() }",,e2c4
"fun makeDependenciesJar(depDir: File, standardJars: List<File>)",": File {
        val isK2 = System.getProperty(SCRIPT_BASE_COMPILER_ARGUMENTS_PROPERTY)?.contains(""-language-version 1.9"") != true
        val outJar = File(depDir, ""dependency.jar"")
        val inKt = File(depDir, ""Dependency.kt"").apply { writeText(""class Dependency(val v: Int)"") }",,b6fc
No signature found,"fun checkWithCache(
        cache: ScriptingCacheWithCounters, script: SourceCode, expectedOutput: List<String>, checkDirectEval: Boolean = t",,6e1f
"fun get(script: SourceCode, scriptCompilationConfiguration: ScriptCompilationConfiguration)",": CompiledScript? =
        d",,aaff
"fun store(
        compiledScript: CompiledScript,
        script: SourceCode,
        scriptCompilationConfiguration: ScriptCompilationConfiguration
    )","{
        data[script to scriptCompilationConfiguration.notTransientData] = compiledScript
        _storedScripts++
    }",,cf90
"fun get(script: SourceCode, scriptCompilationConfiguration: ScriptCompilationConfiguration)",": CompiledScript? {
        val file = File(baseDir, uniqueScriptHash(script, scriptCompilationConfiguration))
        return if (!file.exists()) null else file.readCompiledScript().also { retrievedScripts++ }",,aaff
"fun store(
        compiledScript: CompiledScript,
        script: SourceCode,
        scriptCompilationConfiguration: ScriptCompilationConfiguration
    )","{
        val file = File(baseDir, uniqueScriptHash(script, scriptCompilationConfiguration))
        file.outputStream().use { fs ->
            ObjectOutputStream(fs).use { os ->
                os.writeObject(compiledScript)
            }",,cf90
"fun get(script: SourceCode, scriptCompilationConfiguration: ScriptCompilationConfiguration)",": CompiledScript? =
        s",,aaff
"fun store(
        compiledScript: CompiledScript,
        script: SourceCode,
        scriptCompilationConfiguration: ScriptCompilationConfiguration
    )","{
        super.store(compiledScript, script, scriptCompilationConfiguration).also { storedScripts++ }",,cf90
"fun uniqueScriptHash(script: SourceCode, scriptCompilationConfiguration: ScriptCompilationConfiguration)",": String {
    val digestWrapper = MessageDigest.getInstance(""MD5"")
    digestWrapper.update(script.text.toByteArray())
    scriptCompilationConfiguration.notTransientData.entries
        .sortedBy { it.key.name }",,f29e
No signature found,"fun File.readCompiledScript(): CompiledScript {
    return inputStream().use { fs ->
        ObjectInputStream(fs).use {
            it.readObject() as KJvmCompiledScript
        }",,6e1f
No signature found,fun ByteArray.toHexString(): String = j,,6e1f
No signature found,fun Class<*>.supertypes(): MutableList<Class<*>> = w,,6e1f
fun test(),"{
    val outerBuildee = <!NEW_INFERENCE_NO_INFORMATION_FOR_PARAMETER!>build<!> outerBuild@ {
        val middleBuildee = <!NEW_INFERENCE_NO_INFORMATION_FOR_PARAMETER!>build<!> middleBuild@ {
            val innerBuildee = build innerBuild@ {
                this@outerBuild.setTypeVariable(TargetType())
                this@middleBuild.setTypeVariable(TargetType())
                this@innerBuild.setTypeVariable(TargetType())
            }","// ISSUE: KT-49160
// CHECK_TYPE_WITH_EXACT",fe98
fun setTypeVariable(value: TV),{ storage = value },"// exact type equality check — turns unexpected compile-time behavior into red code
            // considered to be non-user-reproducible code for the purposes of these tests",7aec
No signature found,"fun <PTV> build(instructions: Buildee<PTV>.() -> Unit): Buildee<PTV> {
    return Buildee<PTV>().apply(instructions)
}",,6e1f
fun foo(),"}
expect open class BaseAImpl() : BaseA

<!ABSTRACT_CLASS_MEMBER_NOT_IMPLEMENTED!>class DerivedA1<!> : BaseAImpl()
class DerivedA2 : BaseAImpl() {
    override  = super.<!ABSTRACT_SUPER_CALL!>foo<!>()
}","// MODULE: m1-common
// FILE: common.kt",519f
fun foo(),"}
expect open class BaseBImpl() : BaseB

<!ABSTRACT_MEMBER_NOT_IMPLEMENTED!>class DerivedB1<!> : BaseBImpl()
class DerivedB2 : BaseBImpl() {
    override  = super.<!ABSTRACT_SUPER_CALL!>foo<!>()
}",,519f
fun foo(),"}
expect abstract class BaseCImpl() : BaseC

<!ABSTRACT_MEMBER_NOT_IMPLEMENTED!>class DerivedC1<!> : BaseCImpl()
class DerivedC2 : BaseCImpl() {
    override  = super.<!ABSTRACT_SUPER_CALL!>foo<!>()
}",,519f
fun foo(),"}
abstract class BaseDImpl() : BaseD {
    fun bar() = super.<!ABSTRACT_SUPER_CALL!>foo<!>()
}",,519f
fun foo(),"}
sealed class BaseEImpl() : BaseE {
    fun bar() = super.<!ABSTRACT_SUPER_CALL!>foo<!>()
}",,519f
fun foo(),"}
expect class BaseFImpl() : BaseF



expect abstract class BaseG() {
    abstract 
}",,519f
No signature found,fun Int.invoke() : Long = 1,,6e1f
No signature found,fun Long.invoke() : Double = 1,,6e1f
No signature found,fun Double.invoke() {},,6e1f
fun test(i: Int),"{
    <expr>i()()()</expr>
}",,ca23
fun box(),": String {
    val vector = java.util.Vector<Int>()
    vector.add(1)
    vector.add(2)
    vector.add(3)

    var sum = 0
    for(e in vector.elements()) {
        sum += e
    }","// TARGET_BACKEND: JVM

// WITH_STDLIB
// FULL_JDK",4f27
No signature found,fun <T> threadSafeSuspendCallback(startAsync: (CompletionLambda<T>) -> CancellationLambda): T = T,"// FIR_IDENTICAL
// !DIAGNOSTICS: -UNUSED_VARIABLE -UNUSED_PARAMETER",6e1f
No signature found,"fun <T> performAndWait(block: suspend CoroutineScope.() -> T): T {
        return CoroutineWorker().run {
            val result = threadSafeSuspendCallback<T> { completion ->
                val workItem = WorkItem {
                    val result = runCatching {
                        block()
                    }",,6e1f
fun foo(x: T),": String
}
interface I2<T> {
    : String
}",,a834
fun foo(x: String),"= """,,f5be
fun foo(x: Int),"= """,,0028
fun box(),": String {
    val c = C()
    val i1: I1<String> = c
    assertEquals(""I1.foo(str)"", i1.foo(""str""))
    val i2: I2<Int> = c
    assertEquals(""I2.foo(42)"", i2.foo(42))

    return ""OK""
}",,4f27
"fun genClearCacheFunction(packageFragmentDescriptor: PackageFragmentDescriptor, receiverType: KotlinType)",": SimpleFunctionDescriptor {
    val function = object : AndroidSyntheticFunction, SimpleFunctionDescriptorImpl(
            packageFragmentDescriptor,
            null,
            Annotations.EMPTY,
            Name.identifier(AndroidConst.CLEAR_FUNCTION_NAME),
            CallableMemberDescriptor.Kind.SYNTHESIZED,
            SourceElement.NO_SOURCE) {}",,e1ca
"fun genPropertyForWidget(
        packageFragmentDescriptor: AndroidSyntheticPackageFragmentDescriptor,
        receiverType: KotlinType,
        resolvedWidget: ResolvedWidget,
        context: SyntheticElementResolveContext
)",": PropertyDescriptor {
    val sourceEl = resolvedWidget.widget.sourceElement?.element?.let(::XmlSourceElement) ?: SourceElement.NO_SOURCE

    val classDescriptor = resolvedWidget.viewClassDescriptor
    val type = classDescriptor?.let {
        val defaultType = classDescriptor.defaultType

        if (defaultType.constructor.parameters.isEmpty()) {
            defaultType
        }",,a898
No signature found,"fun genPropertyForFragment(
        packageFragmentDescriptor: AndroidSyntheticPackageFragmentDescriptor,
        receiverType: KotlinType,
        type: SimpleType,
        fragment: AndroidResource.Fragment
): PropertyDescriptor {
    val sourceElement = fragment.sourceElement?.element?.let(::XmlSourceElement) ?: SourceElement.NO_SOURCE
    return genProperty(fragment, receiverType, type, packageFragmentDescriptor, sourceElement, null)
}",,6e1f
No signature found,"fun genProperty(
        resource: AndroidResource,
        receiverType: KotlinType,
        type: SimpleType,
        containingDeclaration: AndroidSyntheticPackageFragmentDescriptor,
        sourceElement: SourceElement,
        errorType: String?
): PropertyDescriptor {
    val property = object : AndroidSyntheticProperty, PropertyDescriptorImpl(
            containingDeclaration,
            null,
            Annotations.EMPTY,
            Modality.FINAL,
            DescriptorVisibilities.PUBLIC,
            false,
            Name.identifier(resource.id.name),
            CallableMemberDescriptor.Kind.SYNTHESIZED,
            sourceElement,
            /* lateInit = */ false,
            /* isConst = */ false,
            /* isExpect = */ false,
            /* isActual = */ false,
            /* isExternal = */ false,
            /* isDelegated = */ false
    ) {
        override val errorType = errorType
        override val shouldBeCached = type.shouldBeCached
        override val resource = resource
    }",,6e1f
fun build(),": FirConstructor {
        return FirConstructorImpl(
            source,
            resolvePhase,
            moduleData,
            origin,
            attributes,
            typeParameters,
            status,
            returnTypeRef,
            receiverParameter,
            deprecationsProvider,
            containerSource,
            dispatchReceiverType,
            contextReceivers.toMutableOrEmpty(),
            valueParameters,
            contractDescription,
            annotations.toMutableOrEmpty(),
            symbol,
            delegatedConstructor,
            body,
        )
    }",,5bf9
No signature found,"fun buildConstructor(init: FirConstructorBuilder.() -> Unit): FirConstructor {
    contract {
        callsInPlace(init, InvocationKind.EXACTLY_ONCE)
    }",,6e1f
No signature found,"fun buildConstructorCopy(original: FirConstructor, init: FirConstructorBuilder.() -> Unit): FirConstructor {
    contract {
        callsInPlace(init, InvocationKind.EXACTLY_ONCE)
    }",,6e1f
No signature found,"fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> ""winter""
        A.Companion.Season.SPRING -> ""spring""
        A.Companion.Season.SUMMER -> ""summer""
        else -> ""other""
    }","// WITH_STDLIB
// CHECK_CASES_COUNT: function=foo count=3
// CHECK_IF_COUNT: function=foo count=0",6e1f
fun box(),": String {
    assertEquals(""winter"", foo(A.Companion.Season.WINTER))
    assertEquals(""spring"", foo(A.Companion.Season.SPRING))
    assertEquals(""summer"", foo(A.Companion.Season.SUMMER))
    assertEquals(""other"", foo(A.Companion.Season.AUTUMN))
    return ""OK""
}",,4f27
fun x(),"fun interface I {
        
    }","// MODULE: m1
// FILE: J.java",7869
No signature found,"fun J.testJ() {
    <!UNRESOLVED_REFERENCE!>C<!>()
    C2()
    <!UNRESOLVED_REFERENCE!>I<!> {}",,6e1f
fun testJ2(j: J),"{
    j.<!UNRESOLVED_REFERENCE!>C<!>()
    j.C2()
    j.<!UNRESOLVED_REFERENCE!>I<!> {}",,669c
No signature found,"fun K.testK() {
    <!UNRESOLVED_REFERENCE!>C<!>()
    C2()
    <!UNRESOLVED_REFERENCE!>I<!> {}",,6e1f
fun testK2(k: K),"{
    k.<!UNRESOLVED_REFERENCE!>C<!>()
    k.C2()
    k.<!UNRESOLVED_REFERENCE!>I<!> {}",,f0df
No signature found,"fun J.testResolutionContinues() {
    acceptI(I {}",,6e1f
No signature found,"fun K.testResolutionContinues() {
    acceptI(I {}",,6e1f
fun x(),"fun interface I {
    
}",,7869
fun acceptI(i: I),{},,3916
fun foo(s: String),= I,"// TARGET_BACKEND: JVM
// !LANGUAGE: +InlineClasses
// MODULE: lib
// USE_OLD_INLINE_CLASSES_MANGLING_SCHEME
// FILE: 1.kt",b751
fun box(),": String {
    var res = C().foo(""OK"").s
    if (res != ""OK"") return ""FAIL 1 $res""
    res = D().foo(""OK"").s
    return res
}",,4f27
fun useR(r: R),"{
    if (r.x as String != ""OK"") throw AssertionError(""$r"")
}","// WITH_STDLIB
// WORKS_WHEN_VALUE_CLASS
// LANGUAGE: +ValueClasses",064d
No signature found,"fun useR0(fn: () -> R) {
    useR(fn())
}",,6e1f
No signature found,"fun useR1(r: R, fn: (R) -> R) {
    useR(fn(r))
}",,6e1f
No signature found,fun fnWithDefaultR(r: R = R,,6e1f
fun box(),": String {
    useR0(::fnWithDefaultR)
    useR1(R(""OK""), ::fnWithDefaultR)

    return ""OK""
}",,4f27
fun iterator(),: IterIterator = t,,c20a
fun hasNext(),: Boolean = t,,2c39
fun next(),: String = t,,cb14
fun iterator(),: Iter2Iterator = t,,c20a
fun hasNext(),: Boolean = t,,2c39
fun next(),: String = t,,cb14
fun use(),"{
    for (x in <!DEPRECATION!>Iter<!>()) {}",,26f7
fun intfMethod(),{},"// MODULE: lib
// FILE: lib.kt",3ae3
fun baseImplMethod_ShouldBeOpen(),{},,73c5
fun baseImpl2Method_ShouldBeOpen(),{},,bd49
fun intfImplMethod_ShouldBeOpen(),{},,7a34
fun intfImpl2Method_ShouldBeOpen(),{},,e7da
fun box(),"= """,,4f27
No signature found,"fun getDiagnostic(
        conflictingDeclaration: FirBasedSymbol<*>,
        symbols: SmartSet<FirBasedSymbol<*>>,
        context: CheckerContext
    ): KtDiagnosticFactory1<Collection<FirBasedSymbol<*>>>?

    object DEFAULT : PlatformConflictDeclarationsDiagnosticDispatcher {
        override fun getDiagnostic(
            conflictingDeclaration: FirBasedSymbol<*>,
            symbols: SmartSet<FirBasedSymbol<*>>,
            context: CheckerContext
        ): KtDiagnosticFactory1<Collection<FirBasedSymbol<*>>> {
            return when {
                conflictingDeclaration is FirNamedFunctionSymbol || conflictingDeclaration is FirConstructorSymbol -> {
                    FirErrors.CONFLICTING_OVERLOADS
                }",,6e1f
"fun check(declaration: FirDeclaration, context: CheckerContext, reporter: DiagnosticReporter)","{
        when (declaration) {
            is FirFile -> {
                val inspector = FirDeclarationCollector<FirBasedSymbol<*>>(context)
                checkFile(declaration, inspector, context)
                reportConflicts(reporter, context, inspector.declarationConflictingSymbols, declaration)
            }",,ee93
fun getDestructuredParameters(function: FirFunction),": List<FirVariable> {
        if (function.valueParameters.none { it.name == SpecialNames.DESTRUCT }",,af21
No signature found,"fun reportConflicts(
        reporter: DiagnosticReporter,
        context: CheckerContext,
        declarationConflictingSymbols: Map<FirBasedSymbol<*>, SmartSet<FirBasedSymbol<*>>>,
        container: FirDeclaration,
    ) {
        declarationConflictingSymbols.forEach { (conflictingDeclaration, symbols) ->
            val typeAliasForConstructorSource = (conflictingDeclaration as? FirConstructorSymbol)?.typeAliasForConstructor?.source
            val origin = conflictingDeclaration.origin
            val source = when {
                conflictingDeclaration !is FirCallableSymbol<*> -> conflictingDeclaration.source
                origin == FirDeclarationOrigin.Source -> conflictingDeclaration.source
                origin == FirDeclarationOrigin.Library -> return@forEach
                origin == FirDeclarationOrigin.Synthetic.TypeAliasConstructor -> typeAliasForConstructorSource
                else -> container.source
            }",,6e1f
No signature found,"fun checkFile(file: FirFile, inspector: FirDeclarationCollector<FirBasedSymbol<*>>, context: CheckerContext) {
        val packageMemberScope: FirPackageMemberScope = context.sessionHolder.scopeSession.getOrBuild(file.packageFqName, PACKAGE_MEMBER) {
            FirPackageMemberScope(file.packageFqName, context.sessionHolder.session)
        }",,6e1f
No signature found,"fun registerClassifierRedeclaration(
        classId: ClassId,
        newSymbol: FirClassLikeSymbol<*>, newSymbolFile: FirFile,
        prevSymbol: FirClassLikeSymbol<*>, prevSymbolFile: FirFile?,
    ) {
        redeclaredClassifiers.merge(
            classId, linkedSetOf(ClassifierWithFile(newSymbol, newSymbolFile), ClassifierWithFile(prevSymbol, prevSymbolFile))
        ) { a, b -> a + b }",,6e1f
fun fun1(),"= """,,252d
No signature found,fun <T> foo(f: () -> T): Inv<T> = T,// !DIAGNOSTICS: -UNUSED_PARAMETER,6e1f
fun myExit(),: Nothing = T,,0e7a
No signature found,"fun test(x: String?): Inv<String> {
    return foo {
        if (x == null) myExit()
        x
    }",,6e1f
No signature found,fun A.foo() {},"// !CHECK_TYPE
// !DIAGNOSTICS: -UNUSED_PARAMETER",6e1f
No signature found,fun take(f: (A) -> Unit) {},,6e1f
No signature found,fun take(f: () -> Unit) {},,6e1f
fun test(),"{
    B::foo checkType { _<KFunction1<B, Unit>>() }",,fe98
fun foo(),"{
    if (1==1) {
        1.javaClass
    }","// TARGET_BACKEND: JVM

// WITH_STDLIB",519f
fun box(),"= """,,4f27
fun work(),": String
    }
}

class Child : Father() {
    val ChildInClass = object : Father.InClass() {
        override : String {
            return ""OK""
        }",,a159
fun box(),": String {
    return Child().ChildInClass.work()
}",,4f27
fun toScheme(),": Scheme {
        val context: MutableMap<Value, Int> = mutableMapOf()
        var uniqueNumber = 0
        fun mapValues(scheme: LazyScheme) {
            val target = scheme.target
            if (target.token == null) {
                val value = target.value
                val index = context[value]
                if (index == -1) {
                    context[value] = uniqueNumber++
                }",,352e
fun itemOf(binding: Binding),= b,,5124
fun schemeOf(lazyScheme: LazyScheme),: Scheme = S,,e0b2
fun toCallBindings(),: CallBindings = C,,7ee7
No signature found,"fun onChange(callback: () -> Unit): () -> Unit {
        var previousScheme = toScheme()
        return bindings.onChange {
            val newScheme = toScheme()
            if (newScheme != previousScheme) {
                callback()
                previousScheme = newScheme
            }",,6e1f
fun toString(),": String =
        """,,a535
fun open(),= O,,5d87
fun checkTrue(),= S,"// TARGET_BACKEND: JVM
// ASSERTIONS_MODE: jvm
// WITH_STDLIB",6a1b
fun checkFalse(),= S,,f255
fun box(),": String {
    val loader = Dummy::class.java.classLoader
    loader.setClassAssertionStatus(""classAssertions.ShouldBeEnabled"", true)
    loader.setClassAssertionStatus(""classAssertions.ShouldBeDisabled"", false)
    val c1 = loader.loadClass(""classAssertions.ShouldBeEnabled"").newInstance() as ShouldBeEnabled
    val c2 = loader.loadClass(""classAssertions.ShouldBeDisabled"").newInstance() as ShouldBeDisabled
    if (!c1.checkTrue()) return ""FAIL 0""
    if (c2.checkFalse()) return ""FAIL 1""
    return ""OK""
}",,4f27
fun throwable(),= t,,8f4a
fun error(),= t,,19ea
fun exception(),= t,,1ee0
fun runtimeException(),= t,,d848
fun illegalArgumentException(),= t,,50ad
fun illegalStateException(),= t,,c141
fun indexOutOfBoundsException(),= t,,6a19
fun unsupportedOperationException(),= t,,0b18
fun numberFormatException(),= t,,c51d
fun nullPointerException(),= t,,5e3c
fun classCastException(),= t,,dad8
fun noSuchElementException(),= t,,15cb
fun concurrentModificationException(),= t,,068b
fun arithmeticException(),= t,,00cc
fun noWhenBranchMatchedException(),= @,,07e0
fun uninitializedPropertyAccessException(),= @,,02f2
fun assertionError(),= t,,15cb
No signature found,"fun <T : Throwable> testCreateException(
        noarg: () -> T,
        fromMessage: (String?) -> T,
        fromCause: ((Throwable?) -> T)? = n",,6e1f
fun suppressedExceptions(),"{
        val e1 = Throwable()

        val c1 = Exception(""Suppressed 1"")
        val c2 = Exception(""Suppressed 2"")

        assertTrue(e1.suppressedExceptions.isEmpty())

        e1.addSuppressed(c1)
        e1.addSuppressed(c2)

        assertEquals(listOf(c1, c2), e1.suppressedExceptions)
    }",,d71e
fun exceptionDetailedTrace(),"{
        fun root(): Nothing = throw IllegalStateException(""Root cause\nDetails: root"")

        fun suppressedError(id: Int): Throwable = UnsupportedOperationException(""Side error\nId: $id"")

        fun induced(): Nothing {
            try {
                root()
            }",,9d66
fun assertInTrace(value: Any),"{
            if (value.toString() !in topLevelTrace) {
                fail(""Expected top level trace: $topLevelTrace\n\nto contain: $value"")
            }",,4cf7
fun circularSuppressedDetailedTrace(),"{
        // Testing an exception of the following structure
        // e1
        //    -- suppressed: e0 (same stack as e1)
        //    -- suppressed: e3
        //       -- suppressed: e1
        // Caused by: e2
        //    -- suppressed: e1
        // Caused by: e3

        val e3 = Exception(""e3"")
        val e2 = Error(""e2"", e3)
        val (e1, e0) = listOf(""e1"", ""e0"").map { msg -> RuntimeException(msg, e2.takeIf { msg == ""e1"" }",,d359
"fun assertAppearsInTrace(value: Any, count: Int)","{
            if (Regex.fromLiteral(value.toString()).findAll(topLevelTrace).count() != count) {
                fail(""Expected to find $value $count times in $topLevelTrace"")
            }",,5bfe
No signature found,fun <T> T.id() = t,"// DONT_TARGET_EXACT_BACKEND: JVM
// DONT_TARGET_EXACT_BACKEND: JS",6e1f
fun box(),": String {
    if (funCompareTo1.id() != -1)   return ""Fail 1.1""
    if (funCompareTo2.id() != 0)    return ""Fail 1.2""
    if (funCompareTo3.id() != 1)    return ""Fail 1.3""
    if (funCompareTo4.id() != 0)    return ""Fail 1.4""
    if (funCompareTo5.id() != 0)    return ""Fail 1.5""
    if (funCompareTo6.id() != 0)    return ""Fail 1.6""
    if (funCompareTo7.id() != 0)    return ""Fail 1.7""
    if (funCompareTo8.id() != 0)    return ""Fail 1.8""

    if (singCompareTo1.id() != false)    return ""Fail 1.9""
    if (singCompareTo2.id() != false)    return ""Fail 1.10""
    if (singCompareTo3.id() != false)    return ""Fail 1.11""
    if (singCompareTo4.id() != true)    return ""Fail 1.12""

    if (plus1.id() != 3f)     return ""Fail 2.1""
    if (plus2.id() != 4f)     return ""Fail 2.2""
    if (plus3.id() != 5f)     return ""Fail 2.3""
    if (plus4.id() != 4f)     return ""Fail 2.4""
    if (plus5.id() != 4f)     return ""Fail 2.5""
    if (plus6.id() != 4f)     return ""Fail 2.6""
    if (plus7.id() != 4.0f)   return ""Fail 2.7""
    if (plus8.id() != 4.0)    return ""Fail 2.8""

    if (minus1.id() != -1f)     return ""Fail 3.1""
    if (minus2.id() != 0f)      return ""Fail 3.2""
    if (minus3.id() != 1f)      return ""Fail 3.3""
    if (minus4.id() != 0f)      return ""Fail 3.4""
    if (minus5.id() != 0f)      return ""Fail 3.5""
    if (minus6.id() != 0f)      return ""Fail 3.6""
    if (minus7.id() != 0.0f)    return ""Fail 3.7""
    if (minus8.id() != 0.0)     return ""Fail 3.8""

    if (times1.id() != 2f)      return ""Fail 4.1""
    if (times2.id() != 4f)      return ""Fail 4.2""
    if (times3.id() != 6f)      return ""Fail 4.3""
    if (times4.id() != 4f)      return ""Fail 4.4""
    if (times5.id() != 4f)      return ""Fail 4.5""
    if (times6.id() != 4f)      return ""Fail 4.6""
    if (times7.id() != 4.0f)    return ""Fail 4.7""
    if (times8.id() != 4.0)     return ""Fail 4.8""

    if (div1.id() != 0.5f)      return ""Fail 5.1""
    if (div2.id() != 1.0f)      return ""Fail 5.2""
    if (div3.id() != 1.5f)      return ""Fail 5.3""
    if (div4.id() != 1f)        return ""Fail 5.4""
    if (div5.id() != 1f)        return ""Fail 5.5""
    if (div6.id() != 1f)        return ""Fail 5.6""
    if (div7.id() != 1.0f)      return ""Fail 5.7""
    if (div8.id() != 1.0)       return ""Fail 5.8""

    if (rem1.id() != 1f)      return ""Fail 6.1""
    if (rem2.id() != 0f)      return ""Fail 6.2""
    if (rem3.id() != 1f)      return ""Fail 6.3""
    if (rem4.id() != 0f)      return ""Fail 6.4""
    if (rem5.id() != 0f)      return ""Fail 6.5""
    if (rem6.id() != 0f)      return ""Fail 6.6""
    if (rem7.id() != 0.0f)    return ""Fail 6.7""
    if (rem8.id() != 0.0)     return ""Fail 6.8""

    if (unaryPlus1.id() != 1f)    return ""Fail 7.1""
    if (unaryPlus2.id() != -1f)   return ""Fail 7.2""
    if (unaryMinus1.id() != -1f)  return ""Fail 7.3""
    if (unaryMinus2.id() != 1f)   return ""Fail 7.4""

    if (convert1.id() != '')  return ""Fail 8.1""
    if (convert2.id() != 1)      return ""Fail 8.2""
    if (convert3.id() != 1L)     return ""Fail 8.3""
    if (convert4.id() != 1.0f)   return ""Fail 8.4""
    if (convert5.id() != 1.0)    return ""Fail 8.5""

    if (equals1.id() != false)   return ""Fail 9.1""
    if (equals2.id() != true)    return ""Fail 9.2""
    if (equals3.id() != false)   return ""Fail 9.3""
    if (equals4.id() != false)   return ""Fail 9.4""

    return ""OK""
}",,4f27
fun foo(),{},// ISSUE: KT-58754,519f
fun bar(),{},,66c3
fun box(),= e,// FUNCTION: kotlin.test.assertEquals,4f27
fun foo(),": Int {
        return s
    }",,519f
fun foo(),": Int {
            val s = super<A>.foo()
            return s + 3
        }",,519f
fun box(),": String {
    return if (Outer.O.foo() == 5) ""OK"" else ""fail""
}",,4f27
fun targets(vararg targets: KonanTarget),"{
        this.targets = targets.toSet()
    }",,0d5e
fun validate(),"{
        super.validate()
        val kind = NativeOutputKind.FRAMEWORK
        check(targets.isNotEmpty()) {
            ""Native artifact '$artifactName' wasn't configured because it requires at least one target""
        }",,102e
fun createArtifact(extensions: ExtensionAware),": KotlinNativeFatFrameworkImpl {
        validate()
        return KotlinNativeFatFrameworkImpl(
            artifactName = artifactName,
            modules = modules,
            modes = modes,
            isStatic = isStatic,
            linkerOptions = linkerOptions,
            kotlinOptionsFn = kotlinOptionsFn,
            toolOptionsConfigure = toolOptionsConfigure,
            binaryOptions = binaryOptions,
            targets = targets,
            embedBitcode = embedBitcode,
            extensions = extensions
        )
    }",,c0d7
fun getName(),= l,,4692
fun registerAssembleTask(project: Project),"{
        val parentTask = project.registerTask<Task>(taskName) {
            it.group = ""build""
            it.description = ""Assemble all types of registered '$artifactName' FatFramework""
        }",,6c36
fun main(args : Array<String>),"{
    println(""Hello, world!"")
}",,e094
fun test(),"{
    val b: Int
    run { b = 1 }","// ISSUE: KT-41198, KT-59860",fe98
fun box(),": String {
    class MyClass {
        fun ok(): String {
            class InternalClass {
                fun getOk(): String = ""OK""
            }","// CHECK_FUNCTION_EXISTS: box$MyClass TARGET_BACKENDS=JS_IR
// CHECK_FUNCTION_EXISTS: box$MyClass$ok$InternalClass TARGET_BACKENDS=JS_IR",4f27
fun main(args: Array<String>),"{
    GenerateRangesCodegenTestData.main(args)
    GenerateInRangeExpressionTestData.main(args)
    GenerateSteppedRangesCodegenTestData.main(args)
    GeneratePrimitiveVsObjectEqualityTestData.main(args)
}",,5b61
fun checkParameter(index: Int),= i,,cd11
fun checkParameter(index: Int),= t,,cd11
fun getSpecialSignatureInfo(builtinSignature: String),": SpecialSignatureInfo {
            if (builtinSignature in ERASED_COLLECTION_PARAMETER_SIGNATURES) return SpecialSignatureInfo.ONE_COLLECTION_PARAMETER

            val defaultValue = SIGNATURE_TO_DEFAULT_VALUES_MAP.getValue(builtinSignature)

            return if (defaultValue == TypeSafeBarrierDescription.NULL) {
                // return type is some generic type as 'Map.get'
                SpecialSignatureInfo.OBJECT_PARAMETER_GENERIC
            }",,b453
No signature found,"fun String.method(name: String, parameters: String, returnType: String) =
            N",,6e1f
fun getBuiltinFunctionNamesByJvmName(name: Name),": Name? =
            J",,417c
No signature found,"fun checkDouble(a: Double?, b: Double?, c: Double): Boolean = a","// WITH_STDLIB

// Fails on the old JVM backend because of KT-42017.
// IGNORE_BACKEND: JVM",6e1f
No signature found,"fun checkFloat(a: Float?, b: Float?, c: Float): Boolean = a",,6e1f
No signature found,"fun checkLong(a: Long?, b: Long?, c: Long): Boolean = a",,6e1f
No signature found,"fun checkInt(a: Int?, b: Int?, c: Int): Boolean = a",,6e1f
No signature found,"fun checkChar(a: Char?, b: Char?, c: Char): Boolean = a",,6e1f
No signature found,"fun checkByte(a: Byte?, b: Byte?, c: Byte): Boolean = a",,6e1f
No signature found,"fun checkShort(a: Short?, b: Short?, c: Short): Boolean = a",,6e1f
No signature found,"fun checkUInt(a: UInt?, b: UInt?, c: UInt): Boolean = a",,6e1f
No signature found,"fun checkULong(a: ULong?, b: ULong?, c: ULong): Boolean = a",,6e1f
No signature found,"fun checkUByte(a: UByte?, b: UByte?, c: UByte): Boolean = a",,6e1f
No signature found,"fun checkUShort(a: UShort?, b: UShort?, c: UShort): Boolean = a",,6e1f
fun box(),": String {
    if (!checkDouble(1.0, 2.0, 0.0)) return ""Fail Double""
    if (!checkFloat(1.0f, 2.0f, 0.0f)) return ""Fail Float""
    if (!checkLong(1L, 2L, 0L)) return ""Fail Long""
    if (!checkInt(1, 2, 0)) return ""Fail Int""
    if (!checkChar('1', '2', '0')) return ""Fail Char""
    if (!checkByte(1.toByte(), 2.toByte(), 0.toByte())) return ""Fail Byte""
    if (!checkShort(1.toShort(), 2.toShort(), 0.toShort())) return ""Fail Short""
    if (!checkUInt(1u, 2u, 0u)) return ""Fail UInt""
    if (!checkULong(1UL, 2UL, 0UL)) return ""Fail ULong""
    if (!checkUByte(1u, 2u, 0u)) return ""Fail UByte""
    if (!checkUShort(1u, 2u, 0u)) return ""Fail UShort""

    return ""OK""
}",,4f27
"fun lower(irBody: IrBody, container: IrDeclaration)","{
        irBody.transformChildrenVoid(object : IrElementTransformerVoid() {
            override fun visitGetEnumValue(expression: IrGetEnumValue): IrExpression {
                val enumEntry = expression.symbol.owner
                val klass = enumEntry.parent as IrClass
                return if (klass.isExternal) lowerExternalEnumEntry(enumEntry, klass) else expression
            }",,c7d0
"fun lowerExternalEnumEntry(enumEntry: IrEnumEntry, klass: IrClass)","=
        c",,709d
fun classAsReceiver(irClass: IrClass),": IrExpression {
        val intrinsic = context.intrinsics.jsClass
        return JsIrBuilder.buildCall(intrinsic, context.irBuiltIns.anyType, listOf(irClass.defaultType))
    }",,13f5
"fun createFieldForEntry(entry: IrEnumEntry, irClass: IrClass)",": IrField =
        c",,baf5
fun box(),": String {
    val first = Derived().a
    if (first != ""OK"") return first
    val d = Derived()
    if (d::a.get() != ""OK"") return d::a.get()
    d.a = ""12""
    if (d.a != ""12"") return ""Error writing: ${d.a}","// TARGET_BACKEND: JVM_IR
// Field VS property: case 2.1
// See KT-54393 for details

// FILE: BaseJava.java",4f27
No signature found,"fun f(c: <!PLATFORM_CLASS_MAPPED_TO_KOTLIN!>Comparable<*><!>) {
    checkSubtype<kotlin.Comparable<*>>(<!TYPE_MISMATCH!>c<!>)
    checkSubtype<<!PLATFORM_CLASS_MAPPED_TO_KOTLIN!>java.lang.Comparable<*><!>>(c)
}","// !CHECK_TYPE
// WITH_EXTENDED_CHECKERS",6e1f
No signature found,"fun <V> KProperty0<V>.getValue(thisRef: Any?, property: KProperty<*>): V {
    return get()
}",,6e1f
No signature found,"fun <V> KMutableProperty0<V>.setValue(thisRef: Any?, property: KProperty<*>, value: V) {
    set(value)
}","/**
 * An extension operator that allows delegating a mutable property of type [V]
 * to a property reference to a mutable property of the same type [V].
 *
 * @receiver A property reference to a mutable property of type [V].
 * The reference is without a receiver, i.e. it either references a top-level property or
 * has the receiver bound to it.
 *
 * Example:
 *
 * ```
 * class Login(val username: String, var incorrectAttemptCounter: Int = 0)
 * val defaultLogin = Login(""Admin"")
 * var defaultLoginAttempts by defaultLogin::incorrectAttemptCounter
 * // equivalent to
 * var defaultLoginAttempts: Int
 *     get() = defaultLogin.incorrectAttemptCounter
 *     set(value) { defaultLogin.incorrectAttemptCounter = value }
 * ```
 */",6e1f
No signature found,"fun <T, V> KProperty1<T, V>.getValue(thisRef: T, property: KProperty<*>): V {
    return get(thisRef)
}","/**
 * An extension operator that allows delegating a read-only member or extension property of type [V]
 * to a property reference to a member or extension property of type [V] or its subtype.
 *
 * @receiver A property reference to a read-only or mutable property of type [V] or its subtype.
 * The reference has an unbound receiver of type [T].
 *
 * Example:
 *
 * ```
 * class Login(val username: String)
 * val Login.user by Login::username
 * // equivalent to
 * val Login.user get() = this.username
 * ```
 */",6e1f
No signature found,"fun <T, V> KMutableProperty1<T, V>.setValue(thisRef: T, property: KProperty<*>, value: V) {
    set(thisRef, value)
}","/**
 * An extension operator that allows delegating a mutable member or extension property of type [V]
 * to a property reference to a member or extension mutable property of the same type [V].
 *
 * @receiver A property reference to a read-only or mutable property of type [V] or its subtype.
 * The reference has an unbound receiver of type [T].
 *
 * Example:
 *
 * ```
 * class Login(val username: String, var incorrectAttemptCounter: Int)
 * var Login.attempts by Login::incorrectAttemptCounter
 * // equivalent to
 * var Login.attempts: Int
 *     get() = this.incorrectAttemptCounter
 *     set(value) { this.incorrectAttemptCounter = value }
 * ```
 */",6e1f
fun foo(),"}

class OverrideMethod : AbstractClass() {
    override fun f<caret>oo() {
    }","// PSI: org.jetbrains.kotlin.light.classes.symbol.methods.SymbolLightSimpleMethod
// EXPECTED: java.lang.Override",519f
"fun foo(x: T, y: T)",{},// !DIAGNOSTICS: -UNUSED_PARAMETER,8cc7
fun test(a: A<out CharSequence>),"{
    a.foo(<!TYPE_MISMATCH!>""""<!>, <!TYPE_MISMATCH!>""""<!>)
}",,d2e5
fun box(),": String {
    val x = MyValue(""A"", ""B"", ""C"")
    val result = x.defaultValue + x.privateValue + x.publicValue;
    return if (result == ""ABC"") ""OK"" else ""Error: $x""
}","// ISSUE: KT-51092
// FILE: MyValue.java",4f27
fun classFileBytecodeString(classFile: File),": String {
    val out = StringWriter()
    val traceVisitor = TraceClassVisitor(PrintWriter(out))
    ClassReader(classFile.readBytes()).accept(traceVisitor, 0)
    return out.toString()
}",,6f34
"fun checkBytecodeContains(classFile: File, vararg strings: String)","{
    checkBytecodeContains(classFile, strings.toList())
}",,53f6
"fun checkBytecodeContains(classFile: File, strings: Iterable<String>)","{
    val bytecode = classFileBytecodeString(classFile)
    for (string in strings) {
        assert(bytecode.contains(string)) { ""Bytecode should contain '$string':\n$bytecode"" }",,1899
"fun checkBytecodeNotContains(classFile: File, strings: Iterable<String>)","{
    val bytecode = classFileBytecodeString(classFile)
    for (string in strings) {
        assert(!bytecode.contains(string)) { ""Bytecode should NOT contain '$string':\n$bytecode"" }",,ca77
"fun compileSources(sources: Collection<File>, outputDir: File)","{
    val compiler = ToolProvider.getSystemJavaCompiler()
    compiler.getStandardFileManager(null, null, null).use { fileManager ->
        val compilationTask =
            compiler.getTask(
                null, fileManager, null, listOf(""-d"", outputDir.absolutePath), null, fileManager.getJavaFileObjectsFromFiles(sources)
            )

        compilationTask.call()
    }",,6fcc
fun box(),": String {
    assertEquals(""x"", ::x.name)
    assertEquals(""y"", ::y.name)
    assertEquals(""MAGIC_NUMBER"", ::MAGIC_NUMBER.name)

    assertEquals(1, ::x.call())
    assertEquals(1, ::x.getter.call())

    assertEquals(239, ::y.call())
    assertEquals(239, ::y.getter.call())

    assertEquals(42, ::MAGIC_NUMBER.call())
    assertEquals(42, ::MAGIC_NUMBER.getter.call())

    assertEquals(Unit, ::x.setter.call(2))
    assertEquals(2, ::x.call())
    assertEquals(2, ::x.getter.call())

    return ""OK""
}","// TARGET_BACKEND: JVM

// KT-11447 Multifile declaration causes IAE: Method can not access a member of class
// WITH_REFLECT
// FILE: Test1.kt",4f27
fun test(),"{
    A.<!DEBUG_INFO_CALL(""fqName: A.Companion.entries; typeCall: variable""), DEPRECATED_ACCESS_TO_ENUM_ENTRY_COMPANION_PROPERTY!>entries<!>
    A.Companion.<!DEBUG_INFO_CALL(""fqName: A.Companion.entries; typeCall: variable"")!>entries<!>

    with(A) {
        <!DEBUG_INFO_CALL(""fqName: A.Companion.entries; typeCall: variable"")!>entries<!>
        this.entries
        <!UNRESOLVED_REFERENCE!>values<!>() // to be sure that we don't resolve into synthetic 'values'
    }","// !LANGUAGE: +EnumEntries -PrioritizedEnumEntries
// WITH_STDLIB
// FIR_DUMP",fe98
fun initTransformer(transformer: FirExpressionsResolveTransformer),"{
        this.transformer = transformer
    }",,a2e0
"fun resolveCallAndSelectCandidate(functionCall: FirFunctionCall, resolutionMode: ResolutionMode)",": FirFunctionCall {
        val name = functionCall.calleeReference.name
        val result = collectCandidates(functionCall, name, origin = functionCall.origin, resolutionMode = resolutionMode)

        var forceCandidates: Collection<Candidate>? = null
        if (result.candidates.isEmpty()) {
            val newResult = collectCandidates(
                functionCall,
                name,
                CallKind.VariableAccess,
                origin = functionCall.origin,
                resolutionMode = resolutionMode
            )
            if (newResult.candidates.isNotEmpty()) {
                forceCandidates = newResult.candidates
            }",,5dbb
No signature found,"fun collectAllCandidates(
        qualifiedAccess: FirQualifiedAccessExpression,
        name: Name,
        containingDeclarations: List<FirDeclaration> = t",,6e1f
No signature found,"fun collectCandidates(
        qualifiedAccess: FirQualifiedAccessExpression,
        name: Name,
        forceCallKind: CallKind? = n",,6e1f
No signature found,"fun reduceCandidates(
        collector: CandidateCollector,
        explicitReceiver: FirExpression? = n",,6e1f
fun chooseMostSpecific(list: List<Candidate>),": Set<Candidate> {
            val onSuperReference = (explicitReceiver as? FirQualifiedAccessExpression)?.calleeReference is FirSuperReference
            return conflictResolver.chooseMaximallySpecificCandidates(list, discriminateAbstracts = onSuperReference)
        }",,40dd
"fun resolveVariableAccessAndSelectCandidate(
        qualifiedAccess: FirQualifiedAccessExpression,
        isUsedAsReceiver: Boolean,
        isUsedAsGetClassReceiver: Boolean,
        callSite: FirElement,
        resolutionMode: ResolutionMode,
    )",": FirExpression {
        return resolveVariableAccessAndSelectCandidateImpl(
            qualifiedAccess,
            isUsedAsReceiver,
            resolutionMode,
            isUsedAsGetClassReceiver,
            callSite
        ) { true }",,7584
No signature found,"fun resolveVariableAccessAndSelectCandidateImpl(
        qualifiedAccess: FirQualifiedAccessExpression,
        isUsedAsReceiver: Boolean,
        resolutionMode: ResolutionMode,
        isUsedAsGetClassReceiver: Boolean,
        callSite: FirElement = q",,6e1f
fun main(),"{
            //     A // should resolved to D.A
            //     A.B // should be resolved to A.B
            // }",,d987
"fun resolveCallableReference(
        containingCallCandidate: Candidate,
        resolvedCallableReferenceAtom: ResolvedCallableReferenceAtom,
        hasSyntheticOuterCall: Boolean,
    )",": Pair<CandidateApplicability, Boolean> = c",,fb49
No signature found,"fun resolveDelegatingConstructorCall(
        delegatedConstructorCall: FirDelegatedConstructorCall,
        constructedType: ConeClassLikeType?,
        derivedClassLookupTag: ConeClassLikeLookupTag
    ): FirDelegatedConstructorCall {
        val name = SpecialNames.INIT
        val symbol = constructedType?.lookupTag?.toSymbol(components.session)
        val typeArguments = constructedType?.typeArguments
            ?.take((symbol?.fir as? FirRegularClass)?.typeParameters?.count { it is FirTypeParameter }",,6e1f
No signature found,fun ConeTypeProjection.toFirTypeProjection(): FirTypeProjection = w,,6e1f
fun resolveAnnotationCall(annotation: FirAnnotationCall),": FirAnnotationCall? {
        val reference = annotation.calleeReference as? FirSimpleNamedReference ?: return null
        val annotationClassSymbol = annotation.getCorrespondingClassSymbolOrNull(session)
        val resolvedReference = if (annotationClassSymbol != null && annotationClassSymbol.fir.classKind == ClassKind.ANNOTATION_CLASS) {
            val constructorSymbol = getConstructorSymbol(annotationClassSymbol)
            constructorSymbol?.lazyResolveToPhase(FirResolvePhase.TYPES)

            if (constructorSymbol != null && annotation.arguments.isNotEmpty()) {
                // We want to ""desugar"" array literal arguments to arrayOf, intArrayOf, floatArrayOf and other *arrayOf* calls
                // so that we can properly complete them eventually.
                // In order to find out what the expected type is, we need to run argument mapping.
                // Array literals can be nested despite the fact they are not supported in annotation arguments.
                // But we should traverse them all recursively to report type mismatches.
                // For nested array literal, we need a new expected type obtained from the previous expected type (extract type of array element).
                // We don't want to force full completion before the whole call is completed so that type variables are preserved.
                // But we need to pass expectType to figure out the correct *arrayOf* function (because Array<T> and primitive arrays can't be matched).
                val mapping = transformer.resolutionContext.bodyResolveComponents.mapArguments(
                    annotation.arguments, constructorSymbol.fir, originScope = null, callSiteIsOperatorCall = false,
                )
                val argumentsToParameters = mapping.toArgumentToParameterMapping()

                fun FirCall.transformArgumentList(getExpectedType: (FirExpression) -> FirTypeRef?) {
                    replaceArgumentList(
                        buildArgumentList {
                            source = argumentList.source
                            argumentList.arguments.mapTo(arguments) { arg ->
                                val unwrappedArgument = arg.unwrapArgument()
                                val expectedType = getExpectedType(arg)
                                val resolutionMode = if (unwrappedArgument is FirArrayLiteral && expectedType is FirResolvedTypeRef) {
                                    unwrappedArgument.transformArgumentList {
                                        // Trying to extract expected type for the next nested array literal
                                        expectedType.coneType.arrayElementType()?.toFirResolvedTypeRef()
                                    }",,17f1
"fun toCallInfo(annotation: FirAnnotationCall, reference: FirSimpleNamedReference)",: CallInfo = C,"// Enabling expectedTypeMismatchIsReportedInChecker clarifies error messages:
                                    // It will be reported single ARGUMENT_TYPE_MISMATCH on the array literal in checkApplicabilityForArgumentType
                                    // instead of several TYPE_MISMATCH for every mismatched argument.",7199
fun getConstructorSymbol(annotationClassSymbol: FirRegularClassSymbol),": FirConstructorSymbol? {
        var constructorSymbol: FirConstructorSymbol? = null
        annotationClassSymbol.fir.unsubstitutedScope(
            session,
            components.scopeSession,
            withForcedTypeCalculator = false,
            memberRequiredPhase = null,
        ).processDeclaredConstructors {
            if (it.fir.isPrimary && constructorSymbol == null) {
                constructorSymbol = it
            }",,466f
No signature found,"fun runResolutionForGivenSymbol(callInfo: CallInfo, symbol: FirBasedSymbol<*>): ResolutionResult {
        val candidateFactory = CandidateFactory(transformer.resolutionContext, callInfo)
        val candidate = candidateFactory.createCandidate(
            callInfo,
            symbol,
            ExplicitReceiverKind.NO_EXPLICIT_RECEIVER,
            scope = null
        )
        val applicability = components.resolutionStageRunner.processCandidate(candidate, transformer.resolutionContext)
        return ResolutionResult(callInfo, applicability, listOf(candidate))
    }",,6e1f
"fun selectDelegatingConstructorCall(
        call: FirDelegatedConstructorCall, name: Name, result: CandidateCollector, callInfo: CallInfo
    )",": FirDelegatedConstructorCall {
        val (reducedCandidates, newApplicability) = reduceCandidates(result)

        val nameReference = createResolvedNamedReference(
            call.calleeReference,
            name,
            callInfo,
            reducedCandidates,
            newApplicability ?: result.currentApplicability,
        )

        return call.apply {
            call.replaceCalleeReference(nameReference)
            val singleCandidate = reducedCandidates.singleOrNull()
            singleCandidate?.updateSourcesOfReceivers()
            if (singleCandidate != null) {
                val symbol = singleCandidate.symbol
                if (symbol is FirConstructorSymbol && symbol.fir.isInner) {
                    replaceDispatchReceiver(singleCandidate.dispatchReceiverExpression())
                }",,3259
No signature found,"fun createCallableReferencesInfoForLHS(
        callableReferenceAccess: FirCallableReferenceAccess,
        lhs: DoubleColonLHS?,
        expectedType: ConeKotlinType?,
        outerConstraintSystemBuilder: ConstraintSystemBuilder?,
        hasSyntheticOuterCall: Boolean,
    ): CallInfo {
        return CallInfo(
            callableReferenceAccess,
            CallKind.CallableReference,
            callableReferenceAccess.calleeReference.name,
            callableReferenceAccess.explicitReceiver,
            FirEmptyArgumentList,
            isImplicitInvoke = false,
            isUsedAsGetClassReceiver = false,
            emptyList(),
            session,
            components.file,
            transformer.components.containingDeclarations,
            candidateForCommonInvokeReceiver = null,
            resolutionMode = ResolutionMode.ContextIndependent,
            // Additional things for callable reference resolve
            expectedType,
            outerConstraintSystemBuilder,
            lhs,
            hasSyntheticOuterCall,
        )
    }",,6e1f
No signature found,"fun createResolvedNamedReference(
        reference: FirReference,
        name: Name,
        callInfo: CallInfo,
        candidates: Collection<Candidate>,
        applicability: CandidateApplicability,
        explicitReceiver: FirExpression? = n",,6e1f
fun isValueParametersNotEmpty(candidate: Candidate),": Boolean {
                    return (candidate.symbol.fir as? FirFunction)?.valueParameters?.size?.let { it > 0 }",,74b9
fun needTreatErrorCandidateAsResolved(candidate: Candidate),": Boolean {
        return if (candidate.isCodeFragmentVisibilityError) {
            components.resolutionStageRunner.fullyProcessCandidate(candidate, transformer.resolutionContext)
            candidate.diagnostics.all { it.isSuccess || it.applicability == CandidateApplicability.K2_VISIBILITY_ERROR }",,d254
No signature found,"fun createErrorReferenceForSingleCandidate(
        candidate: Candidate?,
        diagnostic: ConeDiagnostic,
        callInfo: CallInfo,
        source: KtSourceElement?
    ): FirNamedReference {
        if (candidate == null) return buildReferenceWithErrorCandidate(callInfo, diagnostic, source)
        return when (diagnostic) {
            is ConeUnresolvedError, is ConeHiddenCandidateError -> buildReferenceWithErrorCandidate(callInfo, diagnostic, source)
            else -> createErrorReferenceWithExistingCandidate(
                candidate,
                diagnostic,
                source,
                transformer.resolutionContext,
                components.resolutionStageRunner
            )
        }",,6e1f
No signature found,"fun buildReferenceWithErrorCandidate(
        callInfo: CallInfo,
        diagnostic: ConeDiagnostic,
        source: KtSourceElement?
    ): FirErrorReferenceWithCandidate {
        return createErrorReferenceWithErrorCandidate(
            callInfo,
            diagnostic,
            source,
            transformer.resolutionContext,
            components.resolutionStageRunner
        )
    }",,6e1f
"fun consumeCandidate(group: TowerGroup, candidate: Candidate, context: ResolutionContext)",": CandidateApplicability {
        // Filter duplicate symbols. In the case of typealias constructor calls, we consider the original constructor for uniqueness.
        val key = (candidate.symbol.fir as? FirConstructor)?.originalConstructorIfTypeAlias?.symbol
            ?: candidate.symbol

        // To preserve the behavior of a HashSet which keeps the first added item, we use getOrPut instead of put.
        // Changing this behavior breaks testData/components/callResolver/resolveCandidates/singleCandidate/functionTypeVariableCall_extensionReceiver.kt
        allCandidatesMap.getOrPut(key) { candidate }",,bfdf
fun shouldStopAtTheGroup(group: TowerGroup),: Boolean = f,,e0bc
fun bar(),= J,// FILE: first/JavaSuperclass.java,66c3
fun <T>id(t: T),: T = t,,a21d
fun doList(l: List<Int>),= l,,5dc9
fun doInt(i: Int),= i,,b7da
No signature found,fun <T> strangeNullableList(f: (T) -> Unit): List<T>? = t,,6e1f
No signature found,fun <T: A> emptyNullableListOfA(): List<T>? = n,,6e1f
fun testExclExcl(),"{
    <!INFERRED_TYPE_VARIABLE_INTO_POSSIBLE_EMPTY_INTERSECTION(""T; A, Int; final class and interface"")!>doList<!>(emptyNullableListOfA()!!) //should be an error here
    val l: List<Int> = <!TYPE_MISMATCH!><!TYPE_MISMATCH!>id<!>(<!TYPE_MISMATCH!>emptyNullableListOfA<!>()<!TYPE_MISMATCH!>!!<!>)<!>

    doList(strangeNullableList { doInt(it) }",,73b0
No signature found,"fun testDataFlowInfoAfterExclExcl(a: Int?) {
    doInt(a!!)
    <!DEBUG_INFO_SMARTCAST!>a<!> + 1
}",,6e1f
fun testUnnecessaryExclExcl(a: Int),"{
    doInt(a<!UNNECESSARY_NOT_NULL_ASSERTION!>!!<!>) //should be warning
}",,b79d
fun foo(),{},// !LANGUAGE: +InlineClasses,519f
fun testZ(z: Z),= z,,e9cf
No signature found,fun testNZ(z: Z?) = z,,6e1f
fun toLong(),: Long? = T,// !DIAGNOSTICS: -USELESS_ELVIS -UNUSED_EXPRESSION,f543
fun getLong(),: Long = T,,0e03
fun test_1(list: List<X>),"{
    val props = list.map { <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Long?"")!>it.toLong()<!> ?: <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Long"")!>0<!> }",,7ecf
fun test_2(cond: Boolean),"{
    val props = if (cond) getLong() else 0
    <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Long"")!>props<!>
}",,3e10
fun test_3(list: List<X>),"{
    val props = list.map { Pair(it.toLong() ?: 0, it.toLong() ?: 0) }",,e039
fun add(element: E),": Boolean {
        val added = super.add(element)
        while (added && size > limit) {
            super.remove()
        }",,ec1d
No signature found,"fun <R> withDefaultZ(fn: (Z<Int>) -> R, x: Z<Int> = Z","// WITH_STDLIB
// WORKS_WHEN_VALUE_CLASS
// LANGUAGE: +ValueClasses, +GenericInlineClassParameter",6e1f
No signature found,"fun <R> withDefaultL(fn: (L<Long>) -> R, x: L<Long> = L",,6e1f
No signature found,fun <R> withDefaultL2(x: L<Long> = L,,6e1f
No signature found,"fun <R> withDefaultStr(fn: (Str<String>) -> R, x: Str<String> = S",,6e1f
No signature found,"fun <R> withDefaultObj(fn: (Obj<Any>) -> R, x: Obj<Any> = O",,6e1f
No signature found,fun <R> withDefaultObj2(x: Obj<Any> = O,,6e1f
fun testWithDefaultZ(),= w,,44a1
fun testWithDefaultL(),= w,,fc63
fun testWithDefaultL2(),= w,,ec5a
fun testWithDefaultStr(),= w,,3ec2
fun testWithDefaultObj(),= w,,cf67
fun testWithDefaultObj2(),= w,,a56d
fun box(),": String {
    val h = Host(42)
    if (h.testWithDefaultZ().int != 43) throw AssertionError()
    if (h.testWithDefaultL().long != 43L) throw AssertionError()
    if (h.testWithDefaultL2().long != 43L) throw AssertionError()
    if (h.testWithDefaultStr().string != ""421"") throw AssertionError()
    if (h.testWithDefaultObj().obj != ""421"") throw AssertionError()
    if (h.testWithDefaultObj2().obj != ""421"") throw AssertionError()

    return ""OK""
}",,4f27
No signature found,"fun Any.foo() : () -> Unit {
  return {}",// !CHECK_TYPE,6e1f
No signature found,"fun Any.foo1() : (i : Int) -> Unit {
  return {}",,6e1f
fun foo2(),": (i : () -> Unit) -> Unit {
  return {}",,7e7a
fun <T> fooT1(t : T),": () -> T {
  return {t}",,fb71
fun <T> fooT2(),": (t : T) -> T {
  return {it}",,d730
fun main(args : Array<String>),"{
    args.foo()()
    args.foo1()<!NO_VALUE_FOR_PARAMETER!>()<!>
    <!UNRESOLVED_REFERENCE!>a<!>.<!DEBUG_INFO_MISSING_UNRESOLVED!>foo1<!>()()
    <!UNRESOLVED_REFERENCE!>a<!>.<!DEBUG_INFO_MISSING_UNRESOLVED!>foo1<!>()(<!UNRESOLVED_REFERENCE!>a<!>)

    args.foo1()(1)
    args.foo1()(<!TYPE_MISMATCH!>""1""<!>)
    <!UNRESOLVED_REFERENCE!>a<!>.<!DEBUG_INFO_MISSING_UNRESOLVED!>foo1<!>()(""1"")
    <!UNRESOLVED_REFERENCE!>a<!>.<!DEBUG_INFO_MISSING_UNRESOLVED!>foo1<!>()(<!UNRESOLVED_REFERENCE!>a<!>)

    foo2()({}",,e094
fun f(),:  Int.() -> Unit = {,,f6fb
fun main1(),"{
    1.(fun Int.() = 1)();
    {1}",,2e38
fun (x : Int),= x,,2a3f
No signature found,fun Int.(x : Int) = x,,6e1f
No signature found,fun Int.() = 1,,6e1f
No signature found,fun Int.() {},,6e1f
fun test(),"{
    {x : Int -> 1}",,fe98
No signature found,fun Int.() = 1,,6e1f
No signature found,fun Int.() = 1,,6e1f
No signature found,fun Int.() = 1,,6e1f
No signature found,fun Int.() = 1,,6e1f
fun configureModuleComponents(container: StorageComponentContainer),"{
        container.useInstance(NativeInliningRule)
        container.useImpl<NativeIdentifierChecker>()
        container.useImpl<NativeForwardDeclarationRttiChecker>()
        container.useInstance(NativeConflictingOverloadsDispatcher)
    }",,694d
fun configureModuleDependentCheckers(container: StorageComponentContainer),"{
        super.configureModuleDependentCheckers(container)
        container.useImpl<ExpectedActualDeclarationChecker>()
    }",,98a5
"fun isInlineReasonable(
        descriptor: CallableMemberDescriptor,
        declaration: KtCallableDeclaration,
        context: BindingContext
    )",: Boolean = t,,0218
fun f(),"{
    <caret>A.Named.i
}",,f6fb
No signature found,"fun foo(str: String?): Int {
    when {
        str == null -> return -1
    }",// ISSUE: KT-24901,6e1f
fun box(),= i,// EXPECTED_REACHABLE_NODES: 1366,4f27
fun foo(),{},// !RENDER_DIAGNOSTICS_MESSAGES,519f
fun test(),": String = """,,fe98
fun test(),: String = s,,fe98
fun box(),": String {
    val z = Z().test()
    if (z != ""A"") return ""fail 1: $z""

    val f = Z().field
    if (f != ""F"") return ""fail 2: $f""

    return ""OK""
}",,4f27
fun getScopeSession(),": ScopeSession {
        return analysisSession.getScopeSessionFor(analysisSession.useSiteSession)
    }",,5fa7
No signature found,fun KtSymbolWithMembers.getFirForScope(): FirClass = w,,6e1f
fun getMemberScope(classSymbol: KtSymbolWithMembers),": KtScope {
        val firScope = classSymbol.getFirForScope().unsubstitutedScope(
            analysisSession.useSiteSession,
            getScopeSession(),
            withForcedTypeCalculator = false,
            memberRequiredPhase = FirResolvePhase.STATUS,
        )
        return KtFirDelegatingNamesAwareScope(firScope, builder)
    }",,59ca
fun getStaticMemberScope(symbol: KtSymbolWithMembers),": KtScope {
        val fir = symbol.getFirForScope()
        val firScope = fir.scopeProvider.getStaticScope(fir, analysisSession.useSiteSession, getScopeSession()) ?: return getEmptyScope()
        return KtFirDelegatingNamesAwareScope(firScope, builder)
    }",,5d56
fun getDeclaredMemberScope(classSymbol: KtSymbolWithMembers),": KtScope =
        g",,0d6b
fun getStaticDeclaredMemberScope(classSymbol: KtSymbolWithMembers),": KtScope =
        g",,c912
fun getCombinedDeclaredMemberScope(classSymbol: KtSymbolWithMembers),": KtScope =
        g",,824d
"fun getDeclaredMemberScope(classSymbol: KtSymbolWithMembers, kind: DeclaredMemberScopeKind)",": KtScope {
        val firDeclaration = classSymbol.firSymbol.fir
        val firScope = when (firDeclaration) {
            is FirJavaClass -> getFirJavaDeclaredMemberScope(firDeclaration, kind) ?: return getEmptyScope()
            else -> getFirKotlinDeclaredMemberScope(classSymbol, kind)
        }",,5f04
"fun getFirKotlinDeclaredMemberScope(
        classSymbol: KtSymbolWithMembers,
        kind: DeclaredMemberScopeKind,
    )",": FirContainingNamesAwareScope {
        val combinedScope = getCombinedFirKotlinDeclaredMemberScope(classSymbol)
        return when (kind) {
            DeclaredMemberScopeKind.NON_STATIC -> FirNonStaticMembersScope(combinedScope)
            DeclaredMemberScopeKind.STATIC -> FirStaticScope(combinedScope)
            DeclaredMemberScopeKind.COMBINED -> combinedScope
        }",,5b3d
fun getCombinedFirKotlinDeclaredMemberScope(symbolWithMembers: KtSymbolWithMembers),": FirContainingNamesAwareScope {
        val useSiteSession = analysisSession.useSiteSession
        return when (symbolWithMembers) {
            is KtFirScriptSymbol -> FirScriptDeclarationsScope(useSiteSession, symbolWithMembers.firSymbol.fir)
            else -> useSiteSession.declaredMemberScope(symbolWithMembers.getFirForScope(), memberRequiredPhase = null)
        }",,f371
"fun getFirJavaDeclaredMemberScope(
        firJavaClass: FirJavaClass,
        kind: DeclaredMemberScopeKind,
    )",": FirContainingNamesAwareScope? {
        val useSiteSession = analysisSession.useSiteSession
        val scopeSession = getScopeSession()

        fun getBaseUseSiteScope() = JavaScopeProvider.getUseSiteMemberScope(
            firJavaClass,
            useSiteSession,
            scopeSession,
            memberRequiredPhase = FirResolvePhase.TYPES,
        )

        fun getStaticScope() = JavaScopeProvider.getStaticScope(firJavaClass, useSiteSession, scopeSession)

        val firScope = when (kind) {
            // `FirExcludingNonInnerClassesScope` is a workaround for non-static member scopes containing static classes (see KT-61900).
            DeclaredMemberScopeKind.NON_STATIC -> FirExcludingNonInnerClassesScope(getBaseUseSiteScope())

            DeclaredMemberScopeKind.STATIC -> getStaticScope() ?: return null

            // Java enhancement scopes as provided by `JavaScopeProvider` are either use-site or static scopes, so we need to compose them
            // to get the combined scope. A base declared member scope with Java enhancement doesn't exist, unfortunately.
            DeclaredMemberScopeKind.COMBINED -> {
                // The static scope contains inner classes, so we need to exclude them from the non-static scope to avoid duplicates.
                val nonStaticScope = FirNoClassifiersScope(getBaseUseSiteScope())
                getStaticScope()
                    ?.let { staticScope -> FirNameAwareCompositeScope(listOf(nonStaticScope, staticScope)) }",,0577
fun getDelegatedMemberScope(classSymbol: KtSymbolWithMembers),": KtScope {
        val declaredScope = (getDeclaredMemberScope(classSymbol) as? KtFirDelegatingNamesAwareScope)?.firScope ?: return getEmptyScope()

        val fir = classSymbol.getFirForScope()
        val delegateFields = fir.delegateFields

        if (delegateFields.isEmpty()) {
            return getEmptyScope()
        }",,509f
fun getFileScope(fileSymbol: KtFileSymbol),": KtScope {
        check(fileSymbol is KtFirFileSymbol) { ""KtFirScopeProvider can only work with KtFirFileSymbol, but ${fileSymbol::class}",,1196
fun getEmptyScope(),": KtScope {
        return KtEmptyScope(token)
    }",,7222
fun getPackageScope(packageSymbol: KtPackageSymbol),": KtScope {
        return createPackageScope(packageSymbol.fqName)
    }",,5752
fun getCompositeScope(subScopes: List<KtScope>),": KtScope {
        return KtCompositeScope.create(subScopes, token)
    }",,2aa3
fun getTypeScope(type: KtType),": KtTypeScope? {
        check(type is KtFirType) { ""KtFirScopeProvider can only work with KtFirType, but ${type::class}",,963d
fun getSyntheticJavaPropertiesScope(type: KtType),": KtTypeScope? {
        check(type is KtFirType) { ""KtFirScopeProvider can only work with KtFirType, but ${type::class}",,989b
fun getImportingScopeContext(file: KtFile),": KtScopeContext {
        val firFile = file.getOrBuildFirFile(firResolveSession)
        val firFileSession = firFile.moduleData.session
        val firImportingScopes = createImportingScopes(
            firFile,
            firFileSession,
            analysisSession.getScopeSessionFor(firFileSession),
            useCaching = true,
        )

        val ktScopesWithKinds = createScopesWithKind(firImportingScopes.withIndex())
        return KtScopeContext(ktScopesWithKinds, _implicitReceivers = emptyList(), token)
    }",,011a
"fun getScopeContextForPosition(
        originalFile: KtFile,
        positionInFakeFile: KtElement
    )",": KtScopeContext {
        val fakeFile = positionInFakeFile.containingKtFile

        // If the position is in KDoc, we want to pass the owning declaration to the ContextCollector.
        // That way, the resulting scope will contain all the nested declarations which can be references by KDoc.
        val parentKDoc = positionInFakeFile.parentOfType<KDoc>()
        val correctedPosition = parentKDoc?.owner ?: positionInFakeFile

        val context = ContextCollector.process(
            fakeFile.getOrBuildFirFile(firResolveSession),
            SessionHolderImpl(analysisSession.useSiteSession, getScopeSession()),
            correctedPosition,
        )

        val towerDataContext =
            context?.towerDataContext
                ?: errorWithAttachment(""Cannot find context for ${positionInFakeFile::class}",,fc09
fun createScopesWithKind(firScopes: Iterable<IndexedValue<FirScope>>),": List<KtScopeWithKind> {
        return firScopes.map { (index, firScope) ->
            KtScopeWithKind(convertToKtScope(firScope), getScopeKind(firScope, index), token)
        }",,9c96
fun flattenFirScope(firScope: FirScope),: List<FirScope> = w,,fb7c
fun convertToKtScope(firScope: FirScope),": KtScope {
        return when (firScope) {
            is FirAbstractSimpleImportingScope -> KtFirNonStarImportingScope(firScope, builder)
            is FirAbstractStarImportingScope -> KtFirStarImportingScope(firScope, analysisSession)
            is FirDefaultStarImportingScope -> KtFirDefaultStarImportingScope(firScope, analysisSession)
            is FirPackageMemberScope -> createPackageScope(firScope.fqName)
            is FirContainingNamesAwareScope -> KtFirDelegatingNamesAwareScope(firScope, builder)
            else -> TODO(firScope::class.toString())
        }",,b6e6
"fun getScopeKind(firScope: FirScope, indexInTower: Int)",: KtScopeKind = w,,f020
fun createPackageScope(fqName: FqName),": KtFirPackageScope {
        return KtFirPackageScope(fqName, analysisSession)
    }",,1cfa
fun convertToKtTypeScope(firScope: FirScope),": KtTypeScope {
        return when (firScope) {
            is FirContainingNamesAwareScope -> KtFirDelegatingTypeScope(firScope, builder)
            else -> TODO(firScope::class.toString())
        }",,8c50
fun getFirTypeScope(type: KtFirType),: FirTypeScope? = t,,ade1
"fun getFirSyntheticPropertiesScope(coneType: ConeKotlinType, typeScope: FirTypeScope)",": FirSyntheticPropertiesScope? =
        F",,31ef
No signature found,"fun FirTypeScope.withSyntheticPropertiesScopeOrSelf(coneType: ConeKotlinType): FirTypeScope {
        val syntheticPropertiesScope = getFirSyntheticPropertiesScope(coneType, this) ?: return this
        return FirTypeScopeWithSyntheticProperties(typeScope = this, syntheticPropertiesScope)
    }",,6e1f
fun getCallableNames(),: Set<Name> = t,,0483
fun mayContainName(name: Name),: Boolean = t,,5a1b
No signature found,"fun processPropertiesByName(name: Name, processor: (FirVariableSymbol<*>) -> Unit) {
        typeScope.processPropertiesByName(name, processor)
        syntheticPropertiesScope.processPropertiesByName(name, processor)
    }",,6e1f
fun create(parcel: Parcel),= -,// WITH_STDLIB,10ab
No signature found,"fun Int.write(parcel: Parcel, flags: Int) {
        parcel.writeInt(this)
    }",,6e1f
fun create(parcel: Parcel),= p,,10ab
No signature found,"fun Int.write(parcel: Parcel, flags: Int) {
        parcel.writeString(""Abc"")
    }",,6e1f
fun box(),= p,,4f27
No signature found,"fun <T: Closeable, R> T.use1(block: (T)-> R) : R {
    return block(this)
}",// FIR_IDENTICAL,6e1f
fun main(),"{
    C().use1 {
        w ->  // ERROR here
        <!UNRESOLVED_REFERENCE!>x<!>
    }",,d987
fun setUp(),"{
        super.setUp()
        tmpdir = KotlinTestUtils.tmpDirForTest(this)

        File(tmpdir, ""library.kt"").writeText(library)

        val configuration = KotlinTestUtils.newConfiguration(ConfigurationKind.ALL, TestJdkKind.FULL_JDK).apply {
            put(CLIConfigurationKeys.MESSAGE_COLLECTOR_KEY, PrintingMessageCollector(System.out, MessageRenderer.WITHOUT_PATHS, false))
            addKotlinSourceRoot(tmpdir.absolutePath)
            put(JVMConfigurationKeys.OUTPUT_DIRECTORY, tmpdir)
            loadScriptingPlugin(this)
        }",,3705
fun testIncompatibleScriptJvmTargetConfig(),"{
        val configuration = makeConfiguration().apply {
            put(JVMConfigurationKeys.JVM_TARGET, JvmTarget.JVM_1_6)
        }","// The following environment can be disposed right away since it's only needed to compile the bytecode. The test will use a separate
        // environment managed by `GenericReplCompiler`.",3a21
fun testIncompatibleScriptJvmTargetProperty(),"{
        val configuration = makeConfiguration()
        System.setProperty(KOTLIN_REPL_JVM_TARGET_PROPERTY, ""1.6"")
        try {
            val result = runTest(configuration)
            Assert.assertTrue(result is ReplCompileResult.Error)
            Assert.assertTrue((result as ReplCompileResult.Error).message.contains(""error: cannot inline bytecode built with JVM target 1.8 into bytecode that is being built with JVM target 1.6""))
        }",,c461
fun testCompatibleScriptJvmTargetJavaVersionDetect(),"{
        val configuration = makeConfiguration()
        val result = runTest(configuration)
        Assert.assertTrue(result is ReplCompileResult.CompiledClasses)
    }",,d9c7
fun testCompatibleScriptJvmTargetProperty(),"{
        val configuration = makeConfiguration()
        System.setProperty(KOTLIN_REPL_JVM_TARGET_PROPERTY, ""1.8"")
        try {
            Assert.assertTrue(runTest(configuration) is ReplCompileResult.CompiledClasses)
        }",,a015
fun makeConfiguration(),= K,,1395
fun runTest(configuration: CompilerConfiguration),": ReplCompileResult {
        val collector = PrintingMessageCollector(System.out, MessageRenderer.WITHOUT_PATHS, false)
        val replCompiler = GenericReplCompiler(testRootDisposable, StandardScriptDefinition, configuration, collector)
        val state = replCompiler.createState()

        return replCompiler.compile(state, ReplCodeLine(0, 0, script))
    }",,5139
No signature found,fun Int.thisRef1() = f,,6e1f
No signature found,fun Int.thisRef2() = f,,6e1f
No signature found,fun <T> T.genericThisRef1() = f,,6e1f
No signature found,fun <T> T.genericThisRef2() = f,,6e1f
fun (),= t,,f1dc
fun (),: Int {return this},,f1dc
fun (),= t,,f1dc
fun (),: T {return this},,f1dc
fun (),= t,,f1dc
fun (),: T {return this@withLabel2},,f1dc
fun box(),": String {
    if (1.thisRef1()() != 1) return ""Test 1 failed""
    if (2.thisRef2()() != 2) return ""Test 2 failed""

    if (3.genericThisRef1()() != 3) return ""Test 3 failed""
    if (4.genericThisRef2()() != 4) return ""Test 4 failed""

    if (5.valThisRef1() != 5) return ""Test 5 failed""
    if (6.valThisRef2() != 6) return ""Test 6 failed""

    if (7.valGenericThisRef1() != 7) return ""Test 7 failed""
    if (8.valGenericThisRef2() != 8) return ""Test 8 failed""

    if (""bar"".withLabel1() != ""bar"") return ""Test 9 failed""
    if (""bar"".withLabel2() != ""bar"") return ""Test 10 failed""

    return ""OK""
}",,4f27
fun box(),= A,// EXPECTED_REACHABLE_NODES: 1285,4f27
fun test(bal: Array<Int>),"{
    var bar = 4

    val a: () -> Unit = { bar += 4 }",,eabb
fun box(),": String {
    val ax: Any? = 0L
    val an: Any? = null
    val bx: Long = 0L
    val by: Long = 1L

    return when {
        0L != nx -> ""Fail 0""
        1L == nx -> ""Fail 1""
        !(0L == nx) -> ""Fail 2""
        !(1L != nx) -> ""Fail 3""
        x != nx -> ""Fail 4""
        y == nx -> ""Fail 5""
        !(x == nx) -> ""Fail 6""
        !(y != nx) -> ""Fail 7""
        0L == nn -> ""Fail 8""
        !(0L != nn) -> ""Fail 9""
        x == nn -> ""Fail 10""
        !(x != nn) -> ""Fail 11""
        0L != ax -> ""Fail 12""
        1L == ax -> ""Fail 13""
        !(0L == ax) -> ""Fail 14""
        !(1L != ax) -> ""Fail 15""
        x != ax -> ""Fail 16""
        y == ax -> ""Fail 17""
        !(x == ax) -> ""Fail 18""
        !(y != ax) -> ""Fail 19""
        bx != ax -> ""Fail 20""
        by == ax -> ""Fail 21""
        !(bx == ax) -> ""Fail 22""
        !(by != ax) -> ""Fail 23""
        0L == an -> ""Fail 24""
        !(0L != an) -> ""Fail 25""
        x == an -> ""Fail 26""
        !(x != an) -> ""Fail 27""
        bx == an -> ""Fail 28""
        !(bx != an) -> ""Fail 29""
        else -> ""OK""
    }",// Auto-generated by GeneratePrimitiveVsObjectEqualityTestData. Do not edit!,4f27
No signature found,"fun <T> exactlyOnce(block: () -> T): T {
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }",// !OPT_IN: kotlin.contracts.ExperimentalContracts,6e1f
No signature found,"fun <T> atLeastOnce(block: () -> T): T {
    contract { callsInPlace(block, InvocationKind.AT_LEAST_ONCE) }",,6e1f
No signature found,"fun <T> atMostOnce(block: () -> T): T {
    contract { callsInPlace(block, InvocationKind.AT_MOST_ONCE) }",,6e1f
fun lower(irClass: IrClass),"{
        val fields = irClass.fields.toMutableList()
        fields.sortBy {
            when {
                // We never rename public ABI fields (public and protected visibility) since they are accessible from Java
                // even in cases when Kotlin code would prefer an accessor. (And in some cases, such as enum entries and const
                // fields, Kotlin references the fields directly too.) Therefore we consider such fields first, in order to make
                // sure it'll claim its original name. There can be multiple such fields, in which case they will cause a platform
                // declaration clash if they map to the same JVM type - nothing we can do about that.
                it.visibility.isPublicAPI -> 0
                // If there are non-public non-static and static (moved from companion) fields with the same name, we try to make
                // static properties retain their original names first, since this is what the old JVM backend did. However this
                // can easily be changed without any major binary compatibility consequences (ignoring Java reflection).
                it.isStatic -> 1
                else -> 2
            }",,38ae
No signature found,"fun <R> doCall(block: ()-> R) : R {
    return block()
}",// FILE: 1.kt,6e1f
"fun test1(local: Int, nonLocal: String, doNonLocal: Boolean)",": String {

    val localResult = doCall(
            fun (): Int {
                if (doNonLocal) {
                    return@test1 nonLocal
                }",// FILE: 2.kt,5e68
"fun test2(local: Int, nonLocal: String, doNonLocal: Boolean)",": String {

    val localResult = doCall(
            xxx@ fun(): Int {
                if (doNonLocal) {
                    return@test2 nonLocal
                }",,0458
"fun test3(local: Int, nonLocal: String, doNonLocal: Boolean)",": String {

    val localResult = doCall(
            yy@ fun(): Int {
                if (doNonLocal) {
                    return@test3 nonLocal
                }",,149b
fun box(),": String {
    var test1 = test1(11, ""fail"", false)
    if (test1 != ""OK_LOCAL"") return ""test1: ${test1}",,4f27
fun main(),"{
    assertFailsWith<AssertionError> {
        @OptIn(kotlin.experimental.ExperimentalNativeApi::class)
        assert(false)
    }","// KIND: STANDALONE_NO_TR
// IGNORE_NATIVE: optimizationMode=OPT",d987
fun testFunction(),": String = """,,3757
fun testFunction(x: String),": String = """,,81d8
fun testFunction(),": String = """,,3757
fun testFunction(x: String),": String = """,,81d8
fun testFunction(),": String = """,,3757
fun testFunction(x: String),": String = """,,81d8
fun testTestOpenClass1(x: TestOpenClass),= x,,fc0a
fun testTestOpenClass2(x: TestOpenClass),= x,,8aa2
fun testTestOpenClassA1(x: TestOpenClassA),= x,,6e21
fun testTestOpenClassA2(x: TestOpenClassA),= x,,d1cb
fun testTestClassA1(x: TestClassA),= x,,04f5
fun testTestClassA2(x: TestClassA),= x,,9e45
fun box(),": String {
    assertEquals(""TestOpenClass"", testTestOpenClass1(TestOpenClass()))
    assertEquals(""TestOpenClass: OK"", testTestOpenClass2(TestOpenClass()))

    assertEquals(""TestOpenClassA"", testTestOpenClass1(TestOpenClassA()))
    assertEquals(""TestOpenClassA: OK"", testTestOpenClass2(TestOpenClassA()))
    assertEquals(""TestOpenClassA"", testTestOpenClassA1(TestOpenClassA()))
    assertEquals(""TestOpenClassA: OK"", testTestOpenClassA2(TestOpenClassA()))

    assertEquals(""TestClassA"", testTestOpenClass1(TestClassA()))
    assertEquals(""TestClassA: OK"", testTestOpenClass2(TestClassA()))
    assertEquals(""TestClassA"", testTestOpenClassA1(TestClassA()))
    assertEquals(""TestClassA: OK"", testTestOpenClassA2(TestClassA()))
    assertEquals(""TestClassA"", testTestClassA1(TestClassA()))
    assertEquals(""TestClassA: OK"", testTestClassA2(TestClassA()))

    return ""OK""
}",,4f27
fun targets(vararg targets: KonanTarget),"{
        this.targets = targets.toSet()
    }",,0d5e
fun validate(),"{
        super.validate()
        val kind = NativeOutputKind.FRAMEWORK
        check(targets.isNotEmpty()) {
            ""Native artifact '$artifactName' wasn't configured because it requires at least one target""
        }",,102e
fun createArtifact(extensions: ExtensionAware),": KotlinNativeXCFrameworkImpl {
        validate()
        return KotlinNativeXCFrameworkImpl(
            artifactName = artifactName,
            modules = modules,
            modes = modes,
            isStatic = isStatic,
            linkerOptions = linkerOptions,
            kotlinOptionsFn = kotlinOptionsFn,
            toolOptionsConfigure = toolOptionsConfigure,
            binaryOptions = binaryOptions,
            targets = targets,
            embedBitcode = embedBitcode,
            extensions = extensions
        )
    }",,c0d7
fun getName(),= l,,4692
fun registerAssembleTask(project: Project),"{
        val parentTask = project.registerTask<Task>(taskName) {
            it.group = ""build""
            it.description = ""Assemble all types of registered '$artifactName' XCFramework""
        }",,6c36
fun foo(),"{
    <expr>doSmth</expr>(""str"")
}",,519f
fun doSmth(i: String),= 4,,0e53
No signature found,"fun baz(s: String?, u: String?): String {
    val t = when(if (u == null) return """" else u) {
        ""abc"" -> u
        """" -> {
            if (s == null) return """"
            s
        }",,6e1f
"fun <T> foo(t1: T, t2: T)",= t,// !DIAGNOSTICS: -NOTHING_TO_INLINE,ede6
No signature found,fun <T> bar(l: (T) -> Unit): T = n,,6e1f
fun use(),"{
    var x: Int?
    x = 5
    // Write is AFTER
    <!DEBUG_INFO_SMARTCAST!>x<!>.hashCode()
    // x is nullable at the second argument
    foo(bar { x = null }",,26f7
"fun evaluate(
        expression: KtExpression,
        mode: KtConstantEvaluationMode,
    )",": KtConstantValue?

    public abstract fun evaluateAsAnnotationValue(expression: KtExpression): KtAnnotationValue?
}

public interface KtCompileTimeConstantProviderMixIn : KtAnalysisSessionMixIn {
    /**
     * Tries to evaluate the provided expression using the specified mode.
     * Returns a [KtConstantValue] if the expression evaluates to a compile-time constant, otherwise returns null..
     */
    public fun KtExpression.evaluate(mode: KtConstantEvaluationMode): KtConstantValue? =
        withValidityAssertion { analysisSession.compileTimeConstantProvider.evaluate(this, mode) }",,359a
No signature found,"fun KtExpression.evaluateAsAnnotationValue(): KtAnnotationValue? =
        w","/**
     * Returns a [KtConstantValue] if the expression evaluates to a value that can be used as an annotation parameter value,
     * e.g. an array of constants, otherwise returns null.
     */",6e1f
fun bar(x: Int),: Int = x,// !DIAGNOSTICS: -DEBUG_INFO_SMARTCAST,948a
fun foo(),"{
    val x: Int? = null

    bar(1 + (if (x == null) 0 else x))
    bar(<!ARGUMENT_TYPE_MISMATCH!>if (x == null) x else x<!>)
    if (x != null) bar(x + x/(x-x*x))
}",,519f
fun getO(),": R

    abstract fun getK() : R

    abstract fun getParam() : R
}

inline fun <R> doWork(crossinline jobO: ()-> R, crossinline jobK: ()-> R, param: R) : A<R> {
    val s = object : A<R>() {

        override : R {
            return jobO()
        }","// NO_CHECK_LAMBDA_INLINING
// FILE: 1.kt",273a
fun getK(),": R {
            return  jobK()
        }",,28fa
fun getParam(),": R {
            return param
        }",,ec71
fun getO(),"fun <R> doWorkInConstructor(crossinline jobO: ()-> R, crossinline jobK: ()-> R, param: R) : A<R> {
    val s = object : A<R>() {

        val p = param;

        val o1 = jobO()

        val k1 = jobK()

        override : R {
            return o1
        }",,273a
fun getK(),": R {
            return k1
        }",,28fa
fun getParam(),": R {
            return p
        }",,ec71
fun test1(),": String {
    val o = ""O""

    val result = doWork ({o}",,fa3b
fun test2(),": String {
    //same names as in object
    val o1 = ""O""
    val k1 = ""K""

    val result = doWorkInConstructor ({o1}",,30bb
fun box(),": String {
    val result1 = test1();
    if (result1 != ""OKGOOD"") return ""fail1 $result1""

    val result2 = test2();
    if (result2 != ""OKGOOD"") return ""fail2 $result2""

    return ""OK""
}",,4f27
No signature found,"fun unexpectedElementError(elementName: String, element: Any?): Nothing {
    errorWithAttachment(""Unexpected $elementName ${element?.let { it::class.simpleName }",,6e1f
No signature found,"fun <reified ELEMENT> unexpectedElementError(element: Any?): Nothing {
    unexpectedElementError(ELEMENT::class.simpleName ?: ELEMENT::class.java.name, element)
}",,6e1f
fun bar(s: Any),": Int {
    return s.hashCode()
}",// FIR_IDENTICAL,1ca8
fun foo(m: MyClass),": Int {
    m.p = ""xyz""
    return bar(m.p)
}",,38de
fun jvmTest(),"= """,,cd41
fun foo(),= 1,"// FIR_IDENTICAL
// Functions can be recursively annotated",519f
"fun buildDynamicCall(name: String, call: IrFunctionAccessExpression)",": IrExpression {
        val reference = IrDynamicMemberExpressionImpl(call.startOffset, call.endOffset, context.dynamicType, name, call.dispatchReceiver!!)

        return IrDynamicOperatorExpressionImpl(call.startOffset, call.endOffset, call.type, IrDynamicOperator.INVOKE).apply {
            receiver = reference
            for (i in 0 until call.valueArgumentsCount) {
                arguments += call.getValueArgument(i)!!
            }",,cf7a
"fun transformFunctionAccess(call: IrFunctionAccessExpression, doNotIntrinsify: Boolean)",": IrExpression {
        val symbol = call.symbol
        nameToTransformer[symbol.owner.name]?.let {
            return it(call)
        }",,fa96
fun topLevel(),"{
    class LocalClass {
        @Anno(<!ANNOTATION_ARGUMENT_MUST_BE_CONST!>prop<!>)
        var prop
            @Anno(<!ANNOTATION_ARGUMENT_MUST_BE_CONST!>prop<!>)
            get() = 22
            @Anno(<!ANNOTATION_ARGUMENT_MUST_BE_CONST!>prop<!>)
            set(@Anno(<!ANNOTATION_ARGUMENT_MUST_BE_CONST!>prop<!>) value) = Unit
    }",,6f7b
fun sayHi(),= p,,3a5e
fun get(file: File),": FileSnapshot
}

class SimpleFileSnapshotProviderImpl : FileSnapshotProvider {
    override : FileSnapshot {
        val length = file.length()
        val hash = file.md5
        return FileSnapshot(file, length, hash)
    }",,a638
fun box(),": String {
    assertNotNull(s.ptr)
    assertNotNull(u.ptr)
    assertNotNull(array)

    assertEquals(""initial"", getContent(s.ptr)?.toKString())
    setContent(s.ptr, ""yo"")
    val ptr = getContent(s.ptr)
    assertEquals(""yo"", ptr?.toKString())

    assertEquals(0.0, getDouble(u.ptr))
    setDouble(u.ptr, Double.MIN_VALUE)
    assertEquals(Double.MIN_VALUE, getDouble(u.ptr))

    for (i in 0 until arrayLength()) {
        assertEquals(0x0, array[i])
    }","// FREE_CINTEROP_ARGS: -header incompleteTypes.h

// TARGET_BACKEND: NATIVE
// MODULE: cinterop
// FILE: incompleteTypes.def",4f27
No signature found,"fun getValue(t: T1, p: KProperty<*>): R1
}

interface IDelegate2<T2, R2> {
    operator fun getValue(t: T2, p: KProperty<*>): R2
}",// !LANGUAGE: -ForbidUsingExtensionPropertyTypeParameterInDelegate,6e1f
fun foo(),": R
}

class CR<R>(val r: R) : IR<R> {
    override : R = r
}",,519f
fun <F11T> qux11(t: F11T),: F11T = t,,2610
No signature found,fun <F12T: IR<T>> qux12(t: F12T): T = t,,6e1f
No signature found,"fun getValue(t: Value<T, CR<T>>, p: KProperty<*>): T {
            return t.value1
        }",,6e1f
fun <F21T> qux21(t: F21T),: F21T = t,,bac6
No signature found,fun <F22T: IR<T>> qux22(t: F22T): T = t,,6e1f
No signature found,"fun getValue(t: Value<T, CR<T>>, p: KProperty<*>): T {
            return t.value2.foo()
        }",,6e1f
No signature found,"fun getValue(t: Value<T, CR<T>>, p: KProperty<*>): P<T, T> {
        return P(t.deepO, t.deepK)
    }",,6e1f
fun check(),"}


 class My {
     lateinit var delegate: Base

      = delegate.check() // Should not resolve
 }",,c89c
fun isCast(),"{
    if (J.staticFinalJava is String) {
        <!SMARTCAST_IMPOSSIBLE!>J.staticFinalJava<!>.length
        (J.staticFinalJava as String).length
    }","// FIR_IDENTICAL
// SKIP_TXT

// MODULE: lib
// FILE: J.java",cc2b
fun asCast(),"{
    J.staticFinalJava as String
    <!SMARTCAST_IMPOSSIBLE!>J.staticFinalJava<!>.length

    J.staticNonFinalJava as String
    <!SMARTCAST_IMPOSSIBLE!>J.staticNonFinalJava<!>.length
}",,629e
"fun <R, D> accept(visitor: IrElementVisitor<R, D>, data: D)",": R =
        v",,af8a
"fun <D> transform(transformer: IrElementTransformer<D>, data: D)",": IrBranch =
        a",,4177
"fun <D> acceptChildren(visitor: IrElementVisitor<Unit, D>, data: D)","{
        condition.accept(visitor, data)
        result.accept(visitor, data)
    }",,a229
"fun <D> transformChildren(transformer: IrElementTransformer<D>, data: D)","{
        condition = condition.transform(transformer, data)
        result = result.transform(transformer, data)
    }",,e8d0
No signature found,fun foo(i: Int = 1,,6e1f
No signature found,fun String.withUnderscores() = r,,6e1f
No signature found,fun String.splitByComma() = s,,6e1f
No signature found,fun String.splitByPathSeparator() = s,,6e1f
No signature found,fun String.withSpaces() = r,,6e1f
"fun isPathMatched(pathPartRegex: String, testFilePath: String)","=
        p",,79e4
"fun parseBasePath(pathPartRegex: String, testFilePath: String)","=
        P",,f426
No signature found,"fun parseSpecTest(testFilePath: String, files: TestFiles, isImplementationTest: Boolean = f",,6e1f
No signature found,"fun createSpecPlace(placeMatcher: Matcher, basePlaceMatcher: Matcher = p",,6e1f
No signature found,"fun parseLinkedSpecTest(testFilePath: String, testFiles: TestFiles, isImplementationTest: Boolean = f",,6e1f
"fun parseNotLinkedSpecTest(testFilePath: String, testFiles: TestFiles)",": NotLinkedSpecTest {
        val parsedTestFile = tryParseTestInfo(testFilePath, testFiles, SpecTestLinkedType.NOT_LINKED)
        val testInfoElements = parsedTestFile.testInfoElements
        val sectionsMatcher = testInfoElements[NotLinkedSpecTestFileInfoElementType.SECTIONS]!!.additionalMatcher!!

        return NotLinkedSpecTest(
            parsedTestFile.testArea,
            parsedTestFile.testType,
            sectionsMatcher.group(""sections"").splitByComma(),
            parsedTestFile.testNumber,
            parsedTestFile.testDescription,
            parsedTestFile.testCasesSet,
            parsedTestFile.unexpectedBehavior,
            parsedTestFile.issues,
            parsedTestFile.helpers,
            parsedTestFile.exception
        )
    }",,110c
No signature found,fun parseIssues(issues: SpecTestInfoElementContent?) = i,,6e1f
"fun parseTestInfoElements(rules: Array<SpecTestInfoElementType>, rawElements: String)",":
            SpecTestInfoElements<SpecTestInfoElementType> {
        val testInfoElementsMap = mutableMapOf<SpecTestInfoElementType, SpecTestInfoElementContent>()
        val testInfoElementMatcher = testInfoElementPattern.matcher(rawElements)

        while (testInfoElementMatcher.find()) {
            val testInfoOriginalElementName = testInfoElementMatcher.group(""name"")
            val testInfoElementValue = parseTestInfoElementValue(testInfoOriginalElementName, testInfoElementMatcher, rawElements)
            val testInfoElementName = parseSpecTestInfoElementType(rules, testInfoOriginalElementName)
            val testInfoElementValueMatcher = testInfoElementName.valuePattern?.matcher(testInfoElementValue)
            checkTestInfoElementIsCorrect(testInfoElementValueMatcher, testInfoElementName, testInfoElementValue)
            testInfoElementsMap[testInfoElementName] =
                SpecTestInfoElementContent(testInfoElementValue ?: """", testInfoElementValueMatcher)
        }",,c58e
No signature found,"fun parseTestInfoElementValue(
        testInfoOriginalElementName: String?,
        testInfoElementMatcher: Matcher,
        rawElements: String,
    ) = w",,6e1f
"fun parseSpecTestInfoElementType(
        rules: Array<SpecTestInfoElementType>,
        testInfoOriginalElementName: String
    )",= r,,80f0
No signature found,"fun checkTestInfoElementIsCorrect(
        testInfoElementValueMatcher: Matcher?,
        testInfoElementName: SpecTestInfoElementType,
        testInfoElementValue: String?
    ) {
        if (testInfoElementValueMatcher != null && !testInfoElementValueMatcher.find())
            throw SpecTestValidationException(
                SpecTestValidationFailedReason.TESTINFO_NOT_VALID,
                ""'$testInfoElementValue' in '$testInfoElementName' is not parsed.""
            )
    }",,6e1f
"fun checkRulesObservance(
        rules: Array<SpecTestInfoElementType>,
        testInfoElementsMap: MutableMap<SpecTestInfoElementType, SpecTestInfoElementContent>
    )","{
        rules.forEach {
            if (it.required && !testInfoElementsMap.contains(it)) {
                throw SpecTestValidationException(
                    SpecTestValidationFailedReason.TESTINFO_NOT_VALID,
                    ""$it in case or test info is required.""
                )
            }",,4364
"fun groupRelevantLinks(linksPattern: Pattern, rawElements: String, linkType: String)",": String {
        val placesMatcher = linksPattern.matcher(rawElements)
        if (placesMatcher.find()) {
            return placesMatcher.group(""places"")
        }",,2d83
fun testInfoFilter(fileContent: String),": String =
        t",,1c7b
fun test(),": Int {
    return (<expr>C</expr>::length).get(C())
}",,fe98
fun transform(outputs: TransformOutputs),"{
        try {
            transform(inputArtifact.get().asFile, outputs)
        }",,84c1
fun transform(outputs: TransformOutputs),"{
        try {
            transform(inputArtifact, outputs)
        }",,84c1
"fun transform(input: File, outputs: TransformOutputs)","{
    val data = if (input.isDirectory) {
        visitDirectory(input)
    }",,847e
fun visitDirectory(directory: File),": ClasspathEntryData {
    val entryData = ClasspathEntryData()

    directory.walk().filter {
        it.extension == ""class""
                && !it.relativeTo(directory).toString().toLowerCaseAsciiOnly().startsWith(""meta-inf"")
                && it.name != MODULE_INFO
    }",,7c18
fun visitJar(jar: File),": ClasspathEntryData {
    val entryData = ClasspathEntryData()

    ZipFile(jar).use { zipFile ->
        val entries = zipFile.entries()
        while (entries.hasMoreElements()) {
            val entry = entries.nextElement()

            if (entry.name.endsWith(""class"")
                && !entry.name.toLowerCaseAsciiOnly().startsWith(""meta-inf"")
                && entry.name != MODULE_INFO
            ) {
                BufferedInputStream(zipFile.getInputStream(entry)).use { inputStream ->
                    analyzeInputStream(inputStream, entry.name.dropLast("".class"".length), entryData)
                }",,ef4f
"fun analyzeInputStream(input: InputStream, internalName: String, entryData: ClasspathEntryData)","{
    val abiExtractor = ClassAbiExtractor(ClassWriter(0))
    val typeDependenciesExtractor = ClassTypeExtractorVisitor(abiExtractor)
    ClassReader(input.readBytes()).accept(
        typeDependenciesExtractor,
        ClassReader.SKIP_CODE or ClassReader.SKIP_DEBUG or ClassReader.SKIP_FRAMES
    )

    val bytes = abiExtractor.getBytes()
    val digest = MessageDigest.getInstance(""MD5"").digest(bytes)

    entryData.classAbiHash[internalName] = digest
    entryData.classDependencies[internalName] =
        ClassDependencies(typeDependenciesExtractor.getAbiTypes(), typeDependenciesExtractor.getPrivateTypes())
}",,7e7c
fun loadFrom(file: File),": ClasspathEntryData {
            ObjectInputStream(BufferedInputStream(file.inputStream())).use {
                return it.readObject() as ClasspathEntryData
            }",,6390
fun writeObject(output: ObjectOutputStream),"{
        // Sort only classDependencies, as all keys in this map are keys of classAbiHash map.
        val sortedClassDependencies =
            classDependencies.toSortedMap().mapValues { ClassDependencies(it.value.abiTypes.sorted(), it.value.privateTypes.sorted()) }",,cc32
fun readObject(input: ObjectInputStream),"{
        val namesSize = input.readInt()
        val names = HashMap<Int, String>(namesSize)
        repeat(namesSize) {
            val classId = input.readInt()
            val classInternalName = input.readUTF()
            names[classId] = classInternalName
        }",,78c0
fun saveTo(file: File),"{
        ObjectOutputStream(BufferedOutputStream(file.outputStream())).use {
            it.writeObject(this)
        }",,54fb
fun readFile(name: String),: String { TODO() },,08f6
fun baz(),{},// Should be mapped to java.lang.Throwable,b22f
No signature found,fun parse(parser: (serializedValue: String) -> KotlinType?): Unit = T,"// FIR_DUMP
// Similar to kt36220.kt, but with receivers instead of it
// ISSUE: KT-64823 (K2/PCLA difference)",6e1f
No signature found,fun serialize(parser: KotlinType.() -> Any?): Unit = T,,6e1f
No signature found,fun <KotlinType : Any> defineType(definition: TypeDefinition<KotlinType>.() -> Unit): Unit = T,,6e1f
fun foo(),"{
    defineType {
        parse { it.toInt() }",,519f
fun bar(),"{
    defineType {
        parse { it.toInt() }",,66c3
No signature found,"fun User.write(parcel: Parcel, flags: Int) {
            parcel.writeString(firstName)
            parcel.writeString(secondName)
        }",// WITH_STDLIB,6e1f
fun create(parcel: Parcel),= U,,10ab
fun newArray(size: Int),= a,,c234
fun box(),= p,,4f27
fun test(),"{
            if (::public.isInitialized) throw AssertionError(""Fail 1"")
            public = ""OK""
            if (public != ""OK"") throw AssertionError(""Fail 2"")

            if (::private.isInitialized) throw AssertionError(""Fail 3"")
            private = ""OK""
            if (private != ""OK"") throw AssertionError(""Fail 4"")
        }","// LANGUAGE: -NativeJsProhibitLateinitIsInitializedIntrinsicWithoutPrivateAccess
// WITH_STDLIB",fe98
fun test(),"{
            if (::public.isInitialized) throw AssertionError(""Fail 5"")
            public = ""OK""
            if (public != ""OK"") throw AssertionError(""Fail 6"")

            if (::private.isInitialized) throw AssertionError(""Fail 7"")
            private = ""OK""
            if (private != ""OK"") throw AssertionError(""Fail 8"")
        }",,fe98
fun box(),": String {
    Class.test()
    Interface.test()
    return ""OK""
}",,4f27
fun box(),": String {
    A.x[0] += 1
    if (A.x[0] != 1) return ""Fail 1: ${A.x[0]}",// WITH_STDLIB,4f27
"fun doTestByMainFile(mainFile: KtFile, mainModule: KtTestModule, testServices: TestServices)","{
        val context = testServices.expressionMarkerProvider.getElementOfTypeAtCaret<KtProperty>(mainFile)

        analyseForTest(context) { declaration ->
            val propertySymbol = (declaration as KtProperty).getVariableSymbol() as KtPropertySymbol
            val setterSymbol = propertySymbol.setter!!
            val setterParameterSymbol = setterSymbol.valueParameters.single()
            testServices.assertions.assertEquals(propertySymbol, setterSymbol.getContainingSymbol())
            testServices.assertions.assertEquals(setterSymbol, setterParameterSymbol.getContainingSymbol())
        }",,5016
No signature found,"fun equals(other: Any?): Boolean {
        if (other !is IC) {
            return false
        }","// WITH_STDLIB
// LANGUAGE: +ValueClasses, +CustomEqualsInValueClasses
// TARGET_BACKEND: JVM_IR
// CHECK_BYTECODE_LISTING",6e1f
fun hashCode(),= 0,,6874
fun box(),": String {
    val set = setOf(IC(1), IC(2), IC(5))
    if (set.size != 2) return ""Fail 1""
    if (IC(1) != IC(1)) return ""Fail 2""
    if (IC(1) != IC(2)) return ""Fail 3""
    if (IC(1) == IC(5)) return ""Fail 4""
    return ""OK""
}",,4f27
No signature found,"fun S.foo(x: Int, s: S): S = t","// TARGET_BACKEND: JVM
// WITH_REFLECT",6e1f
fun bar(u: S),: T = t,,fb47
fun box(),": String {
    assertEquals(listOf(String::class.java, Int::class.java, String::class.java), S::foo.parameters.map { it.type.javaType }",,4f27
fun foo(),": T;
    fun bar(o: T);
}

abstract class B : Java1<Int>   //Kotlin ← Java ← Kotlin

class C(override var a: Int?) : Java1<Int> {    //Kotlin ← Java ← Kotlin with explicit override
    override fun bar(o: Int?) { }","// SKIP_KT_DUMP
// TARGET_BACKEND: JVM
// FULL_JDK

// FILE: Java1.java",519f
fun foo(),": Int {
        return 1
    }",,519f
fun bar(o: Int),{ },,f53f
fun foo(),": Int {
        return 1
    }",,519f
No signature found,fun bar(o: Int?) { },,6e1f
fun foo(),": Int {
        return 1
    }",,519f
No signature found,fun bar(o: Int?) { },,6e1f
"fun test(b: B, c: C, d: D, e: E, f: F, g: G, h: H)","{
    var k: Int = b.a
    var k2: Int = b.foo()
    var k3: Unit = b.bar(1)
    var k4: Unit = b.bar(null)
    var k5: Int? = c.a
    var k6: Int = c.foo()
    var k7: Unit = c.bar(1)
    var k8: Unit = c.bar(null)
    var k9: Int? = d.a
    var k10: Int = d.foo()
    var k11: Unit = d.bar(1)
    var k12: Int = e.foo()
    var k13: Unit = e.bar(1)
    var k14: Unit = e.bar(null)
    var k15: Int = f.foo()
    var k16: Unit = f.bar(1)
    var k17: Unit = f.bar(null)
    var k18: Int = g.foo()
    var k19: Unit = g.bar(1)
    var k20: Unit = g.bar(null)
    var k21: Int = h.foo()
    var k22: Unit = h.bar(1)
    var k23: Unit = h.bar(null)
}",,fc12
No signature found,"fun test1(s1: String?) {
    var s: String? = null
    s = """"
    try {
        s = """"
        requireNotNull(s1)
    }","// !DIAGNOSTICS: -UNUSED_VARIABLE -UNUSED_VALUE -VARIABLE_WITH_REDUNDANT_INITIALIZER
// Related issue: KT-28370",6e1f
fun k(),= B,"// LANGUAGE: +MultiPlatformProjects

// MODULE: common
// TARGET_PLATFORM: Common
// FILE: common.kt",20fe
fun box(),= B,,4f27
No signature found,fun useSuspendFn(sfn: suspend () -> Unit) = s,"// !LANGUAGE: -SuspendConversion
// !DIAGNOSTICS: -UNUSED_PARAMETER",6e1f
No signature found,fun useFn(fn: () -> Unit) = f,,6e1f
No signature found,fun ambiguous(sfn: suspend () -> Unit) = s,,6e1f
No signature found,fun ambiguous(fn: () -> Unit) = f,,6e1f
No signature found,fun test1(sfn: suspend () -> Unit) = u,,6e1f
No signature found,fun test2(fn: () -> Unit) = u,,6e1f
No signature found,fun test3(sfn: suspend () -> Unit) = u,,6e1f
fun test4(),: suspend () -> Unit = u,,5b17
fun test5(),= u,,aa19
No signature found,fun test5(sfn: suspend () -> Unit) = a,,6e1f
No signature found,fun test6(fn: () -> Unit) = a,,6e1f
fun test7(),: () -> Unit = <,,0099
fun foo(),{},"// FIR_IDENTICAL
// !CHECK_TYPE",519f
fun bar(x: Int),{},,948a
fun baz(),"= """,,b22f
fun main(),"{
        val x = ::foo
        val y = ::bar
        val z = ::baz

        checkSubtype<KFunction0<Unit>>(x)
        checkSubtype<KFunction1<Int, Unit>>(y)
        checkSubtype<KFunction0<String>>(z)
    }",,d987
No signature found,"fun StubBasedPsiElement<*>.foo(): String? {
    if ("""".hashCode() == 0) {
        return foo1().bar("""")
    }","// ISSUE: KT-56616

// FILE: StubElement.java",6e1f
fun fromKind(kind: String),": JsModuleKind =
            J","// DO NOT EDIT MANUALLY!
// Generated by org/jetbrains/kotlin/generators/arguments/GenerateGradleOptions.kt
// To regenerate run 'generateGradleOptions' task",fef1
fun box(),": String {
    if ( 0 == 0 ) { // Does not crash if either this...
        if ( 0 == 0 ) { // ...or this is changed to if ( true )
            // Does not crash if the following is uncommented.
            //println(""foo"")
        }",,4f27
fun testScenario1(strategyConfig: CompilerExecutionStrategyConfiguration),"{
        scenario(strategyConfig) {
            val module1 = module(""jvm-module-1"")
            // at this moment, the module is already initially built and ready for further incremental compilations

            val randomString = UUID.randomUUID().toString()
            // Use this overload to create file with some dynamic content
            module1.createFile(
                ""foobar.kt"",
                //language=kt
                """"""
                fun foobar() {
                    println(""$randomString"")
                }",,8282
fun testScenario2(strategyConfig: CompilerExecutionStrategyConfiguration),"{
        scenario(strategyConfig) {
            // compilation options may be modified
            val module1 = module(""jvm-module-1"", incrementalCompilationOptionsModifier = { it.keepIncrementalCompilationCachesInMemory(false) }",,a947
fun foobar(),{},,06fd
fun testScenario3(strategyConfig: CompilerExecutionStrategyConfiguration),"{
        scenario(strategyConfig) {
            val module1 = module(""jvm-module-1"")
            val module2 = module(""jvm-module-2"", listOf(module1))

            val randomInt = Random.nextInt()
            // Use this overload to modify file dynamically
            module1.changeFile(
                ""bar.kt"",
                transform = {
                    //language=kt
                    it.replace(""fun bar()"", ""fun bar(someNumber: Int = $randomInt)"")
                }",,f72a
fun testScenario4(strategyConfig: CompilerExecutionStrategyConfiguration),"{
        scenario(strategyConfig) {
            val module1 = module(""jvm-module-1"")

            // replaces bar.kt with bar.kt.1
            module1.replaceFileWithVersion(""bar.kt"", ""add-default-argument"")

            module1.compile {
                assertCompiledSources(""bar.kt"")
                assertNoOutputSetChanges()
            }",,2016
fun testScenario5(strategyConfig: CompilerExecutionStrategyConfiguration),"{
        scenario(strategyConfig) {
            val module1 = module(""jvm-module-1"")

            // creates secret.kt from secret.kt.1
            module1.createPredefinedFile(""secret.kt"", ""new-file"")

            module1.compile {
                assertCompiledSources(""secret.kt"")
                assertAddedOutputs(""SecretKt.class"")
            }",,767f
fun filterOutOverriddenFunctions(extractedOverridden: Collection<MemberWithBaseScope<FirNamedFunctionSymbol>>),": Collection<MemberWithBaseScope<FirNamedFunctionSymbol>> {
    return filterOutOverridden(extractedOverridden, FirTypeScope::processDirectOverriddenFunctionsWithBaseScope)
}",,0444
fun filterOutOverriddenProperties(extractedOverridden: Collection<MemberWithBaseScope<FirPropertySymbol>>),": Collection<MemberWithBaseScope<FirPropertySymbol>> {
    return filterOutOverridden(extractedOverridden, FirTypeScope::processDirectOverriddenPropertiesWithBaseScope)
}",,18a3
No signature found,"fun <D : FirCallableSymbol<*>> filterOutOverridden(
    extractedOverridden: Collection<MemberWithBaseScope<D>>,
    processAllOverridden: ProcessOverriddenWithBaseScope<D>,
): Collection<MemberWithBaseScope<D>> {
    return extractedOverridden.filter { overridden1 ->
        extractedOverridden.none { overridden2 ->
            overridden1 !== overridden2 && overrides(
                overridden2,
                overridden1.member,
            ) { symbol: D, processor: (D) -> ProcessorAction ->
                processAllOverriddenCallables(symbol, processor, processAllOverridden)
            }",,6e1f
No signature found,"fun <D : FirCallableSymbol<*>> overrides(
    f: MemberWithBaseScope<D>,
    gMember: D,
    processAllOverridden: ProcessAllOverridden<D>,
): Boolean {
    val (fMember, fScope) = f

    var result = false

    fScope.processAllOverridden(fMember) { overridden ->
        if (overridden == gMember) {
            result = true
            ProcessorAction.STOP
        }",,6e1f
No signature found,"fun chooseIntersectionVisibilityOrNull(
    nonSubsumedOverrides: Collection<FirCallableSymbol<*>>,
    isAbstract: (FirCallableSymbol<*>) -> Boolean = F",,6e1f
fun clone(),"fun <D> chooseIntersectionVisibilityOrNull(
    nonSubsumedOverrides: Collection<D>,
    toSymbol: (D) -> FirCallableSymbol<*>,
    isAbstract: (D) -> Boolean,
): Visibility? {
    val nonAbstract = nonSubsumedOverrides.filter {
        // Kotlin's Cloneable interface contains phantom `protected open `.
        !isAbstract(it) && toSymbol(it).callableId != StandardClassIds.Callables.clone
    }",,0d77
No signature found,"fun <D> findMaxVisibilityOrNull(
    extractedOverrides: Collection<D>,
    toSymbol: (D) -> FirCallableSymbol<*>,
): Visibility? {
    var maxVisibility: Visibility = Visibilities.Private

    for (override in extractedOverrides) {
        val visibility = (toSymbol(override).fir as FirMemberDeclaration).visibility
        val compare = Visibilities.compare(visibility, maxVisibility) ?: return null

        if (compare > 0) {
            maxVisibility = visibility
        }",,6e1f
fun box(),": String {
    val property = TestChild::class.memberProperties.first { it.name == ""id"" }","// TARGET_BACKEND: JVM

// WITH_REFLECT
// KT-8131 Cannot find backing field in ancestor class via reflection",4f27
fun ff(a: Any),= a,// FIR_IDENTICAL,e9f0
No signature found,"fun <T> foo(f: () -> Collection<T>, p: (T) -> Boolean): Collection<T> = t","// FIR_IDENTICAL
// !DIAGNOSTICS: -UNUSED_PARAMETER",6e1f
fun <T> emptyList(),: List<T> = t,,eb50
fun test(),: Collection<Int> = f,,fe98
fun testMultiline(),"{
        val source = """"""
            abcdefg
            hij
            klmnopqrst
            covid19
            uv
        """""".trimIndent().toSource()

        val pos = SourceCode.Position(4, 6)

        val absPos = pos.calcAbsolute(source)

        Assert.assertEquals('1', source.text[absPos])
        Assert.assertEquals(17, 17.toSourceCodePosition(source).calcAbsolute(source))
    }",,70c9
No signature found,fun String.toSource() = S,,6e1f
fun getCallableSymbols(nameFilter: KtScopeNameFilter),: Sequence<KtCallableSymbol> = w,,6a11
fun getCallableSymbols(names: Collection<Name>),: Sequence<KtCallableSymbol> = w,,c072
No signature found,"fun test(v: Any?) {
    val x = <expr>(v as String)</expr>.length
}",,6e1f
No signature found,"fun applyProperty(receiver: StackValue, resolvedCall: ResolvedCall<*>, c: Context): StackValue? = n",,6e1f
No signature found,"fun applyFunction(receiver: StackValue, resolvedCall: ResolvedCall<*>, c: Context): StackValue? = n",,6e1f
fun generateClassSyntheticParts(codegen: ImplementationBodyCodegen),{},,883b
fun box(),": String {
    return A<Inner<String>>().inner.result
}","// WITH_STDLIB
// WORKS_WHEN_VALUE_CLASS
// IGNORE_BACKEND: JVM
// LANGUAGE: +ValueClasses, +GenericInlineClassParameter",4f27
fun setupEnvironment(environment: KotlinCoreEnvironment),"{
        AndroidComponentRegistrar.registerParcelExtensions(environment.project)
        addAndroidExtensionsRuntimeLibrary(environment)
        environment.updateClasspath(listOf(JvmClasspathRoot(AbstractParcelBoxTest.layoutlibJar)))
    }",,41f2
fun foo(a: Any),"{
    if (a is A) {
        if (a == (a == 1)) {
            println(1)
        }",// ISSUE: KT-35134,e406
fun box(),": String {
    when(En.A) {
        En.A -> ""s1""
        En.B -> ""s2""
    }",,4f27
No signature found,"fun CombinationContext.enumsTestMatrix() {
    val enums = defineEnums(
        SerializerKind.entries.toSet(),
        setOf(FILE_ROOT, NESTED)
    ) {
        entries(""A"", ""B"")
        descriptorAccessing(*DescriptorAccessing.entries.toTypedArray())
    }",,6e1f
No signature found,fun String.jsId() = C,,6e1f
No signature found,fun String.callableId(packageName: FqName) = C,,6e1f
fun platformTest(),"}

// FILE: main.kt
import common.*
import kotlin.test.Test

actual class PlatformTest {
    @Test actual  {}","// EXPECTED_REACHABLE_NODES: 1697
// !LANGUAGE: +MultiPlatformProjects
// TARGET_FRONTEND: ClassicFrontend
// FIR status: expect/actual in one module
// KJS_WITH_FULL_RUNTIME
// SKIP_DCE_DRIVEN
// RUN_UNIT_TESTS
// ES_MODULES

// FILE: lib.kt",5226
fun someOtherTest(),{},,23d9
fun box(),= c,,4f27
fun invoke(),"fun interface KRunnable {
    
}",,0a26
fun accept(value: T),"fun interface KConsumer<T> {
    
}",,e305
fun foo(f: KRunnable),= f,,a9ca
fun <T> bar(f: KConsumer<T>),= f,,7aa7
fun box(),": String {
    var result = """"
    foo(KRunnable {
        bar(KConsumer<String> {
            result += it
        }",,4f27
No signature found,"fun <T, R> use(x: (T) -> R): (T) -> R = x",,6e1f
fun foo(),= u,,519f
fun bar(x: String),= 1,,4de0
fun loop1(),= u,,da25
fun loop2(),= <,,9cac
No signature found,fun <F> F.<!UNRESOLVED_REFERENCE!>X<!>.f(): Boolean = f,"// FIR_IDENTICAL
// ISSUE: KT-56212",6e1f
fun test(p: T),{},"// FIR_IDENTICAL
// !JVM_TARGET: 1.8",bfc4
fun getX(),": Int
}

abstract class C : T {
    val x: Int
        <!ACCIDENTAL_OVERRIDE!>get() = 1<!>
}",// FIR_IDENTICAL,5bf4
fun setUp(),"{
        super.setUp()

        FileTypeFileViewProviders.INSTANCE.addExplicitExtension(JavaClassFileType.INSTANCE, ClassFileViewProviderFactory())

        ClassFileDecompilers.getInstance().EP_NAME.point.apply {
            registerExtension(KotlinClassFileDecompiler(), LoadingOrder.FIRST, testRootDisposable)
            registerExtension(KotlinBuiltInDecompiler(), LoadingOrder.FIRST, testRootDisposable)
        }",,3705
fun getStubToTest(classFile: VirtualFile),": PsiFileStub<*> {
        val decompiledFile = PsiManager.getInstance(project).findFile(classFile)
            ?: error(""No decompiled file was found for $classFile"")
        return KtFileStubBuilder().buildStubTree(decompiledFile) as PsiFileStub<*>
    }",,4cfa
No signature found,"fun f(b: B<*, Any>) {
    val y = b.t
    if (y is String?) {
        y<!UNSAFE_CALL!>.<!>length
    }",,6e1f
fun main(),"{
    f(C(""hello""))
    f(C(null))
}",,d987
"fun doTestByMainFile(mainFile: KtFile, mainModule: KtTestModule, testServices: TestServices)","{
        val actual = analyseForTest(mainFile.declarations.first()) {
            val type = getType(mainFile, mainModule, testServices)

            buildString {
                appendLine(DebugSymbolRenderer(renderTypeByProperties = true).renderType(type))

                appendLine()
                appendLine(""Rendered type:"")
                appendLine(type.render(position = Variance.INVARIANT))
            }",,5016
fun A_X(),{},// !LANGUAGE: -ProhibitVisibilityOfNestedClassifiersFromSupertypesOfCompanion,0645
fun A_Y(),{},,afbb
fun A_C_X(),{},,1af8
fun A_C_Z(),{},,670f
fun B_Y(),{},,3cb1
fun B_Z(),{},,3f02
fun C_C_Y(),{},,1a63
fun C_C_Z(),{},,6367
fun test(),": Int {
    val d: Any?
    d = true
    return d.compareTo(false)
}",// JVM_TARGET: 1.8,fe98
fun box(),": String =
    i",,4f27
No signature found,"fun foo(p0 : String?, p1 : List<Map.Entry<String, String>>?) : String? = """,,6e1f
fun describeContents(),= 1,"// CURIOUS_ABOUT describeContents
// WITH_STDLIB",5ed2
fun toString(),": String =
            j","// TARGET_BACKEND: JVM
// WITH_STDLIB

// FILE: kt46578_anonObject.kt",a535
fun box(),": String {
    return Derived().anonObject.toString()
}",,4f27
No signature found,"fun <@Anno(""type parameter $prop"") T : @Anno(""bound type $prop"") List<@Anno(""nested bound type $prop"") String>> @receiver:Anno(""receiver $prop"") @Anno(""receiver type $prop"")
List<@Anno(""nested receiver type $prop"") List<@Anno(""nested nested receiver type $prop"") Int>>.func<caret>tion(@Anno(""parameter $prop"") param: @Anno(""parameter type $prop"") Collection<@Anno(""nested parameter type $prop"") List<@Anno(""nested nested parameter type $prop"") String>> = 1",,6e1f
fun foo(),: Any = 0,,519f
No signature found,"fun <T, R> T.mylet(block: (T) -> R): R {
    return block(this)
}","// WITH_STDLIB
// FILE: 1.kt",6e1f
fun foo(root: String),"{
    try {
        root.let { _ ->
            try {
                if (!random()) {
                    message += root
                    return
                }",// FILE: 2.kt,8b32
fun random(),= i,,6a79
fun box(),": String {
    foo(""OK"")
    if (message != ""OK Finally block"") return ""fail 1: $message""

    message = """"
    exception = true
    foo(""OK"")
    if (message != ""Exception Finally block"" ) return ""fail 2: $message""

    return ""OK""
}",,4f27
fun createCompilerArguments(context: CreateCompilerArgumentsContext),= c,,678f
fun keep(vararg fqn: String),"{
        keep += fqn
    }",,4804
fun performDce(inputChanges: InputChanges),"{
        validateCompilerClasspath()
        // in case of explicit `all` strategy do not perform incremental copy
        val shouldPerformIncrementalCopy = isDevMode && !isExplicitDevModeAllStrategy

        val classpathFiles = if (shouldPerformIncrementalCopy) {
            inputChanges.getFileChanges(libraries)
                .filter { it.changeType == ChangeType.MODIFIED || it.changeType == ChangeType.ADDED }",,64f0
fun isDceCandidate(file: File),": Boolean {
        if (file.extension == ""jar"") {
            return true
        }",,f3ef
"fun setupCompilerArgs(args: K2JSDceArguments, defaultsOnly: Boolean, ignoreClasspathResolutionErrors: Boolean)","{
        @Suppress(""DEPRECATION_ERROR"")
        super.setupCompilerArgs(args, defaultsOnly, ignoreClasspathResolutionErrors)
    }",,eedc
No signature found,"fun <E> buildSmartList(build: MutableList<E>.() -> Unit): List<E> =
    S",,6e1f
fun explicitType(),": @Anno(""explicit type $constant"") List<@Anno(""nested explicit type $constant"") List<@Anno(""nested nested explicit type $constant"") T>>? = n",// MEMBER_NAME_FILTER: resolveMe,12bc
No signature found,"fun CirNodeRelationship.plus(other: CirNodeRelationship): Composite {
                if (this is Composite) {
                    return if (other is Composite) {
                        Composite(this.relationships + other.relationships)
                    }",,6e1f
No signature found,"fun ParentNode(node: CirNode<*, *>?): ParentNode? = i",,6e1f
fun run(),"fun test(noinline c: () -> Unit) {
    c()
    val o = object: Runnable {
        override  {
            c()
        }","// !DIAGNOSTICS: -UNUSED_VARIABLE -NOTHING_TO_INLINE
// SKIP_TXT
// WITH_COROUTINES",354f
fun calculate(),"= """,,b1fe
fun box(),"{
    test {
        <!ILLEGAL_SUSPEND_FUNCTION_CALL!>calculate<!>()
    }",,4f27
fun box(),": String {
    val s = StringBuilder()

    val xs = StringBuilder(""abcd"")

    for ((index, x) in xs.withIndex()) {
        s.append(""$index:$x;"")
        xs.setLength(0)
    }",// WITH_STDLIB,4f27
No signature found,"fun interestedIn(key: GeneratedDeclarationKey?): Boolean {
        return key == CompanionGenerator.Key
    }",,6e1f
No signature found,"fun generateBodyForFunction(function: IrSimpleFunction, key: GeneratedDeclarationKey?): IrBody {
        val const = IrConstImpl(-1, -1, irBuiltIns.intType, IrConstKind.Int, value = 10)
        val returnStatement = IrReturnImpl(-1, -1, irBuiltIns.nothingType, function.symbol, const)
        return irFactory.createBlockBody(-1, -1, listOf(returnStatement))
    }",,6e1f
No signature found,"fun generateBodyForConstructor(constructor: IrConstructor, key: GeneratedDeclarationKey?): IrBody? {
        return generateBodyForDefaultConstructor(constructor)
    }",,6e1f
No signature found,"fun output(string: String, indent: Int = 0",,6e1f
"fun makeElementDefinition(element: ExportedElement, kind: DefinitionKind, indent: Int)","{
        when (kind) {
            DefinitionKind.C_HEADER_DECLARATION -> {
                when {
                    element.isTopLevelFunction -> {
                        val (name, declaration) = element.makeTopLevelFunctionString()
                        exportedSymbols += name
                        output(declaration, 0)
                    }",,f211
No signature found,fun ExportedElementScope.hasNonEmptySubScopes(): Boolean = e,,6e1f
"fun makeScopeDefinitions(scope: ExportedElementScope, kind: DefinitionKind, indent: Int)","{
        if (!scope.hasNonEmptySubScopes())
            return
        if (kind == DefinitionKind.C_HEADER_STRUCT) output(""struct {"", indent)
        if (kind == DefinitionKind.C_SOURCE_STRUCT) output("".${scope.name}",,fe90
"fun defineUsedTypesImpl(scope: ExportedElementScope, set: MutableSet<KotlinType>)","{
        scope.elements.forEach {
            it.addUsedTypes(set)
        }",,e678
"fun defineUsedTypes(scope: ExportedElementScope, indent: Int)","{
        val usedTypes = mutableSetOf<KotlinType>()
        defineUsedTypesImpl(scope, usedTypes)
        val usedReferenceTypes = usedTypes.filter { typeTranslator.isMappedToReference(it) }",,c925
fun makeGlobalStruct(),"{
        val top = elements.scopes.first()
        outputStreamWriter = headerFile.printWriter()

        val exportedSymbol = ""${prefix}","// Add nullable primitives, which are used in prototypes of ""(*createNullable<PRIMITIVE_TYPE_NAME>)""",49c2
No signature found,"fun String.times(count: Int): String {
    val builder = StringBuilder()
    repeat(count, { builder.append(this) }",,6e1f
No signature found,"fun foo(s: String = ""","// WITH_STDLIB
// !DIAGNOSTICS: -UNUSED_PARAMETER",6e1f
fun foo(),"{
    }",,519f
No signature found,"fun hasAnnotation(
        classId: ClassId,
        useSiteTargetFilter: AnnotationUseSiteTargetFilter = A",,6e1f
No signature found,"fun annotationsByClassId(
        classId: ClassId,
        useSiteTargetFilter: AnnotationUseSiteTargetFilter = A",,6e1f
No signature found,"fun getClasspathChanges(
    classpath: List<File>,
    changedFiles: ChangedFiles.Known,
    lastBuildInfo: BuildInfo,
    modulesApiHistory: ModulesApiHistory,
    reporter: BuildReporter<GradleBuildTime, GradleBuildPerformanceMetric>,
    abiSnapshots: Map<String, AbiSnapshot>,
    withSnapshot: Boolean,
    caches: IncrementalCacheCommon,
    scopes: Collection<String>
): ChangesEither {
    val classpathSet = HashSet<File>()
    for (file in classpath) {
        when {
            file.isFile -> classpathSet.add(file)
            file.isDirectory -> file.walk().filterTo(classpathSet) { it.isFile }",,6e1f
fun analyzeJarFiles(),": ChangesEither {
            val symbols = HashSet<LookupSymbol>()
            val fqNames = HashSet<FqName>()

            for ((module, abiSnapshot) in abiSnapshots) {
                val actualAbiSnapshot = lastBuildInfo.dependencyToAbiSnapshot[module]
                if (actualAbiSnapshot == null) {

                    reporter.info { ""Some jar are removed from classpath $module"" }",,a8f8
fun analyzeHistoryFiles(),": ChangesEither {
            for (historyFile in historyFiles) {
                val allBuilds = BuildDiffsStorage.readDiffsFromFile(historyFile, reporter = reporter)
                    ?: return run {
                        reporter.info { ""Could not read diffs from $historyFile"" }",,d536
fun get(k: K),": V
    operator fun set(k: K, v: V)
}

fun test(m: MyMap<String, Int>) {
    ++<expr>m[""a""]</expr>
}",,4c56
fun iterator(),: UIntIterator = U,// !LANGUAGE: +InlineClasses,c20a
fun next(),": UInt {
        return UInt(intIterator.next()) // box inside bridge that returns java/lang/Object
    }",,cb14
fun hasNext(),": Boolean {
        return intIterator.hasNext()
    }",,2c39
fun uIntArrayOf(vararg u: Int),: UIntArray = U,,6129
fun test(),"{
    val a = uIntArrayOf(1, 2, 3, 4)
    for (element in a) {
        takeUInt(element)
    }",,fe98
fun takeUInt(u: UInt),{},,4d30
fun test(),"{
    J.c(Comparator { a, b -> b - a }","// FIR_IDENTICAL
// FILE: p/J.java",fe98
fun fo<caret>o(),"{
    class OriginalClass {
        val prop = 0

        @Anno(""function $prop"")
        fun <@Anno(""type param $prop"") F : @Anno(""bound $prop"") List<@Anno(""nested bound $prop"") List<@Anno(""nested nested bound $prop"") String>>> @receiver:Anno(""receiver annotation: $prop"") @Anno(""receiver type $prop"") Collection<@Anno(""nested receiver type $prop"") List<@Anno(""nested nested receiver type $prop"")String>>.explicitType(@Anno(""parameter annotation $prop"") param: @Anno(""parameter type $prop"") ListIterator<@Anno(""nested parameter type $prop"") List<@Anno(""nested nested parameter type $prop"")String>>): @Anno(""explicitType return type $prop"") List<@Anno(""explicitType nested return type $prop"") List<@Anno(""explicitType nested nested return type $prop"") Int>> = 0
    }",// BODY_RESOLVE,92b3
fun foo(),: T = v,,519f
fun test(arg: Generic<String>),"{
    val value = arg.value
    val foo = arg.foo()
    val length = foo.length + value.length
}",,fb32
No signature found,"fun Array<String>.test1(): Array<String> {
    val func = { i:Int  -> this}",,6e1f
No signature found,"fun Array<String>.test1Nested(): Array<String> {
    val func = { i: Int ->
        val lam = { this }",,6e1f
fun run(),"fun Array<String>.test2() : Array<String> {
    class Z2() {
        : Array<String> {
            return this@test2
        }",,354f
fun run(),"fun Array<String>.test2Nested() : Array<String> {
    class Z2() {
        : Array<String> {
            class Z3 {
                : Array<String> {
                   return this@test2Nested;
                }",,354f
fun local(),"fun Array<String>.test3(): Array<String> {
    : Array<String> {
        return this@test3
    }",,cb31
fun local(),"fun Array<String>.test3Nested(): Array<String> {
    : Array<String> {
        fun local2(): Array<String> {
            return this@test3Nested
        }",,cb31
fun run(),"fun Array<String>.test4() : Array<String> {
    return object {
                 : Array<String> {
                    return this@test4
                }",,354f
fun run(),"fun Array<String>.test4Nested() : Array<String> {
    return object {
         : Array<String> {
            return object {
                 : Array<String> {
                    return this@test4Nested
                }",,354f
No signature found,"fun Array<DoubleArray>.test1(): Array<DoubleArray> {
    val func = { i: Int -> this}",,6e1f
fun box(),": String {
    val array = Array<String>(2, { i -> ""${i}",,4f27
fun box(),": String {
    try {
        remove()
    }",// This test checks that bytecode optimizer doesn't crash on unreachable code.,4f27
fun remove(),"{
    throw Exception(""OK"")
    var captured = 0
    debug {
        captured = 1
    }",,6550
No signature found,"fun debug(f: () -> Unit) {
    f()
}",,6e1f
fun b(),: T = T,"// SKIP_TXT
// !DIAGNOSTICS: -UNUSED_PARAMETER",4df1
fun <Y> foo(c: A<Y>),: Y = T,,e25f
fun <E> main(a: A<E>),"{
    a <!UNCHECKED_CAST!>as A<B<*>><!>

    foo(<!DEBUG_INFO_SMARTCAST!>a<!>).b()
}",,5f65
fun <Y> foo(c: AOut<Y>),: Y = T,,851b
fun <E> mainOut(a: AOut<E>),"{
    a <!UNCHECKED_CAST!>as AOut<B<*>><!>

    foo(<!DEBUG_INFO_SMARTCAST!>a<!>).b()
}",,1284
fun doSomething(),: Boolean = t,// FIR_IDENTICAL,877b
fun next(),: SomeObject? = n,,cb14
fun list(start: SomeObject),"{
    var e: SomeObject?
    e = start
    do {
        // In theory smart cast is possible here
        // But in practice we have a loop with changing e
        // ?: should we ""or"" entrance type info with condition type info?
        if (!e<!UNSAFE_CALL!>.<!>doSomething())
            break
        // Smart cast here is still not possible
        e = e<!UNSAFE_CALL!>.<!>next()
    }",,c587
No signature found,"fun <R> doCall(block: ()-> R) : R {
    return block()
}",// FILE: 1.kt,6e1f
fun test1(b: Boolean),": String {
    val localResult = doCall local@ {
        if (b) {
            return@local ""local""
        }",// FILE: 2.kt,c566
fun test2(nonLocal: String),": String {
    val localResult = doCall {
        return nonLocal
    }",,3dc5
fun box(),": String {
    val test1 = test1(true)
    if (test1 != ""localResult=local"") return ""test1: ${test1}",,4f27
fun foo(),": Any?
}
interface Two {
    public : String?
}",// !DIAGNOSTICS: -CONFLICTING_JVM_DECLARATIONS,519f
fun foo(),": String
}

<!MANY_IMPL_MEMBER_NOT_IMPLEMENTED, MANY_IMPL_MEMBER_NOT_IMPLEMENTED, RETURN_TYPE_MISMATCH_ON_INHERITANCE!>class Test123<!>(val v1: One, val v2: Two, val v3: Three) : One by v1, Two by v2, Three by v3 { }",,519f
fun toString(),": String = ""","// FIR_IDENTICAL
// ISSUE: KT-62866
// WITH_STDLIB
// FIR_DUMP",a535
fun <T> take(it: T),: T = i,,877d
fun createEnvironment(),": KotlinCoreEnvironment {
        return createEnvironmentWithJdk(ConfigurationKind.JDK_ONLY, TestJdkKind.MODIFIED_MOCK_JDK)
    }",,4539
fun testLoadBuiltIns(),"{
        doTest(""newMethods"")
    }",,f357
No signature found,fun Short.foo(): Int = 1,,6e1f
No signature found,fun Int.foo(): Int = 2,,6e1f
No signature found,fun testRef(f: () -> Int) {},,6e1f
fun test(),"{
    // should resolve to Int.foo
    testRef(1::foo)
}",,fe98
fun box(),": String {
    val targets = A::class.java.getAnnotation(java.lang.annotation.Target::class.java).value
    if (targets.toList().toString() != ""[TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE, ANNOTATION_TYPE]"")
        return ""Fail: Java annotation target list should not contain TYPE_USE/TYPE_PARAMETER: ${targets.toList()}","// This test checks that we don't generate target TYPE_USE if `-Xno-new-java-annotation-targets` is used.
// It's important that this test depends on _full JDK_, which has ElementType.TYPE_USE, to check that filtering based on
// the compiler argument is taking place.

// TARGET_BACKEND: JVM
// IGNORE_BACKEND: JVM
// NO_NEW_JAVA_ANNOTATION_TARGETS
// FULL_JDK
// WITH_STDLIB",4f27
fun incrementModificationTrackers(includeBinaryTrackers: Boolean),"@TestOnly
    override fun publishGlobalModuleStateModification() {
        ApplicationManager.getApplication().assertWriteAccessAllowed()

        incrementModificationTrackers(includeBinaryTrackers = true)
        project.analysisMessageBus.syncPublisher(KotlinTopics.GLOBAL_MODULE_STATE_MODIFICATION).onModification()
    }",,a875
fun publishGlobalSourceModuleStateModification(),"{
        ApplicationManager.getApplication().assertWriteAccessAllowed()

        incrementModificationTrackers(includeBinaryTrackers = false)
        project.analysisMessageBus.syncPublisher(KotlinTopics.GLOBAL_SOURCE_MODULE_STATE_MODIFICATION).onModification()
    }",,bb98
fun publishGlobalSourceOutOfBlockModification(),"{
        ApplicationManager.getApplication().assertWriteAccessAllowed()

        incrementModificationTrackers(includeBinaryTrackers = false)
        project.analysisMessageBus.syncPublisher(KotlinTopics.GLOBAL_SOURCE_OUT_OF_BLOCK_MODIFICATION).onModification()
    }",,6952
fun foo(),": Int {
    var i: Int? = 42
    i = null
    return <!RETURN_TYPE_MISMATCH!>i + 1<!>
}",,519f
fun test(ls: Out<B>),"{
    ls.reduce(::Or)
}",// !DIAGNOSTICS: -UNUSED_PARAMETER,17d2
No signature found,"fun <S, T : S> Out<T>.reduce(operation: (S, T) -> S): S = T",,6e1f
fun foo(),= <,// StackOverflow,519f
fun beforeLoop(),"{
        super.beforeLoop()

        endVar = createLoopTempVariable(asmElementType)
    }",,df42
fun checkPostCondition(loopExit: Label),"{
        assert(endVar != -1) {
            ""endVar must be allocated, endVar = $endVar""
        }",,3010
fun checkPreCondition(loopExit: Label),{},,9287
fun loopParameter(),": StackValue =
        l",,b465
No signature found,"fun KotlinType.getPropertyGetterName(propertyName: String): String {
        // In case of unsigned ranges, getter methods for corresponding range/progression properties would be mangled.
        val propertyDescriptor = memberScope.getContributedVariables(Name.identifier(propertyName), NoLookupLocation.FROM_BACKEND)
            .singleOrNull()
            ?: throw AssertionError(""No '$propertyName' in member scope of type $this"")
        val getter = propertyDescriptor.getter
            ?: throw AssertionError(""Property has no getter: $propertyDescriptor"")
        return codegen.typeMapper.mapFunctionName(getter, OwnerKind.IMPLEMENTATION)
    }",,6e1f
fun main(),"{
    for (i in 0.. <n) {}",,d987
fun test_0(b: Boolean),: String = w,"// FIR_IDENTICAL
// !LANGUAGE: +ProhibitSimplificationOfNonTrivialConstBooleanExpressions
// ISSUE: KT-39883

// Should always work",17e4
fun test_1(b: Boolean),: String = <,,ff06
fun test_2(b: Boolean),: String = <,,9734
fun test_3(b: Boolean),: String = <,,148d
fun createPointer(),: KtSymbolPointer<KtPropertySetterSymbol> = w,,ffc4
fun createPointer(),: KtSymbolPointer<KtValueParameterSymbol> = w,,ffc4
No signature found,fun equals(other: Any?): Boolean = i,,6e1f
fun hashCode(),: Int = c,,6874
No signature found,"fun <T : Any?> foo(x: T) {
    if (x is String?) {
        x<!UNSAFE_CALL!>.<!>length

        if (x != null) {
            <!DEBUG_INFO_SMARTCAST!>x<!>.length
        }",,6e1f
fun foo(a: A),"{
    a.s4ClassRepresentation.length
}","// FIR_IDENTICAL
// SKIP_TXT
// FILE: A.java",05b4
fun f(),= 3,"// EXPECTED_REACHABLE_NODES: 1288
// FILE: A.kt",f6fb
fun box(),": String {
    return if ((A().f() + bar.A().f()) == 9) ""OK"" else ""fail""
}",,4f27
fun f(),= 6,// FILE: B.kt,f6fb
fun test(),"{
    val processor = AdapterProcessor<PsiMethod, PsiClass>(
        Function { method: PsiMethod? -> method?.containingClass }","// !DIAGNOSTICS: -UNUSED_VARIABLE

// FILE: Function.java",fe98
No signature found,"fun <K> foo0(x: K?, y: Bar<K>) {}",// !DIAGNOSTICS: -UNUSED_PARAMETER -UNUSED_EXPRESSION -UNUSED_VARIABLE,6e1f
No signature found,"fun <K> foo1(x: K?, y: Foo<Bar<K>>) {}",,6e1f
No signature found,"fun <K, T: K> foo2(x: K?, y: Foo<Bar<T>>) {}",,6e1f
No signature found,"fun <T, K: T> foo3(x: K?, y: Foo<Bar<T>>) {}",,6e1f
No signature found,"fun <K> foo4(x: K?, y: Foo<Bar<out K>>) {}",,6e1f
No signature found,"fun <K> foo5(x: K?, y: Bar<in K>) {}",,6e1f
No signature found,"fun <K> foo6(x: K?, y: OutBar<K>) {}",,6e1f
No signature found,"fun <K> foo7(x: K?, y: InBar<K>) {}",,6e1f
No signature found,"fun <T, K: T, S: K, M: S> foo8(x: T?, y: Foo<Bar<M>>) {}",,6e1f
No signature found,"fun <T, K: T, S: K, M: S> foo9(x: M?, y: Foo<Bar<T>>) {}",,6e1f
No signature found,"fun <T: J, K: T, S: K, M: S, J: L, L> foo10(x: L?, y: Foo<Bar<T>>, z: Bar<M>) {}",,6e1f
No signature found,"fun <T: J, K: T, S: K, M: S, J: L, L> foo11(x: M?, y: Foo<Bar<T>>, z: Bar<L>) {}",,6e1f
No signature found,"fun <K: Any> foo12(x: K?, y: Bar<K>) {}",,6e1f
No signature found,"fun <K: T> foo1(x: T?, y: Bar<K>) {}",,6e1f
No signature found,"fun <K: T> foo2(x: K?, y: Bar<T>) {}",,6e1f
No signature found,"fun <K> foo14(x: K?, y: Bar<K>) where K: Comparable<K>, K: CharSequence {}",,6e1f
No signature found,"fun <K: T?, T> foo15(x: T, y: Bar<K>) {}",,6e1f
No signature found,"fun <K: T?, T> foo16(x: K, y: Bar<T>) {}",,6e1f
No signature found,"fun <K: T?, T> Bar<K>.foo18(x: T) {}",,6e1f
No signature found,"fun <K> foo21(x: K?, y: Foo<Foo<OutBar<K>>>) {}",,6e1f
No signature found,"fun <K> foo22(x: K?, y: Foo<Foo<InBar<K>>>) {}",,6e1f
No signature found,"fun <K> foo23(x: K?, y: Foo<Foo<Bar<out K>>>) {}",,6e1f
No signature found,"fun <K> foo24(x: K?, y: Foo<Foo<Bar<in K>>>) {}",,6e1f
No signature found,"fun <L> main(x: L?, y: L) {
    foo0(x, <!DEBUG_INFO_EXPRESSION_TYPE(""Bar<L & Any>"")!>Bar()<!>)
    foo0(y, <!DEBUG_INFO_EXPRESSION_TYPE(""Bar<L & Any>"")!>Bar()<!>)

    foo1(x, <!DEBUG_INFO_EXPRESSION_TYPE(""Foo<Bar<L & Any>>"")!>Foo(Bar())<!>)
    foo1(y, <!DEBUG_INFO_EXPRESSION_TYPE(""Foo<Bar<L & Any>>"")!>Foo(Bar())<!>)

    if (x != null && y != null) {
        foo1(<!DEBUG_INFO_EXPRESSION_TYPE(""L & Any & L?"")!>x<!>, <!DEBUG_INFO_EXPRESSION_TYPE(""Foo<Bar<L & Any>>"")!>Foo(Bar())<!>)
        foo1(<!DEBUG_INFO_EXPRESSION_TYPE(""L & L & Any"")!>y<!>, <!DEBUG_INFO_EXPRESSION_TYPE(""Foo<Bar<L & Any>>"")!>Foo(Bar())<!>)
    }",,6e1f
fun box(),": String {
    val d = Derived()
    return d::a.get()
}","// TARGET_BACKEND: JVM_IR
// IGNORE_BACKEND_K1: JVM_IR
// Field VS property: case ""reference""

// FILE: BaseJava.java",4f27
fun box(),"=
        f",,4f27
fun foo(),"=
        2",,519f
fun bar(),: Array<A> = n,// FIR_IDENTICAL,66c3
fun foo(),"{
    for (@Ann(1) i in 1..100) {}",,519f
No signature found,fun ObjCExportStub.closureSequence(): Sequence<ObjCExportStub> = s,,6e1f
No signature found,fun Iterable<ObjCExportStub>.closureSequence() = s,,6e1f
"fun reportCompileIteration(incremental: Boolean, sourceFiles: Collection<File>, exitCode: ExitCode)","{
        compilationResults.add(
            CompilationResultCategory.IC_COMPILE_ITERATION.code,
            CompileIterationResult(sourceFiles, exitCode.toString())
        )
    }",,779b
No signature found,"fun report(message: () -> String, severity: ReportSeverity) {
    }",,6e1f
fun flush(),"{
    }",,3748
fun generatePseudocode(subroutine: KtElement),": Pseudocode {
        val pseudocode = generate(subroutine, null)
        (pseudocode as PseudocodeImpl).postProcess()
        return pseudocode
    }",,bb32
No signature found,"fun generate(subroutine: KtElement, eventOccurrencesRange: EventOccurrencesRange? = n",,6e1f
"fun generateImplicitReturnValue(bodyExpression: KtExpression, subroutine: KtElement)","{
        val subroutineDescriptor = trace.get(BindingContext.DECLARATION_TO_DESCRIPTOR, subroutine) as CallableDescriptor? ?: return

        val returnType = subroutineDescriptor.returnType
        if (returnType != null && KotlinBuiltIns.isUnit(returnType) && subroutineDescriptor is AnonymousFunctionDescriptor) return

        val returnValue = builder.getBoundValue(bodyExpression) ?: return

        builder.returnValue(bodyExpression, returnValue, subroutine)
    }",,5e93
fun processLocalDeclaration(subroutine: KtDeclaration),"{
        val afterDeclaration = builder.createUnboundLabel(""after local declaration"")

        builder.nondeterministicJump(afterDeclaration, subroutine, null)
        generate(subroutine, null)
        builder.bindLabel(afterDeclaration)
    }",,2500
fun getSubjectExpression(condition: KtWhenCondition),": KtExpression? =
                c",,6c2e
fun visitWhenConditionInRange(condition: KtWhenConditionInRange),"{
                if (!generateCall(condition.operationReference)) {
                    val rangeExpression = condition.rangeExpression
                    generateInstructions(rangeExpression)
                    createNonSyntheticValue(condition, MagicKind.UNRESOLVED_CALL, rangeExpression)
                }",,f886
fun visitWhenConditionIsPattern(condition: KtWhenConditionIsPattern),"{
                mark(condition)
                createNonSyntheticValue(condition, MagicKind.IS, getSubjectExpression(condition))
            }",,33d2
fun visitWhenConditionWithExpression(condition: KtWhenConditionWithExpression),"{
                mark(condition)

                val expression = condition.expression
                generateInstructions(expression)

                val subjectExpression = getSubjectExpression(condition)
                if (subjectExpression != null) {
                    // todo: this can be replaced by equals() invocation (when corresponding resolved call is recorded)
                    createNonSyntheticValue(condition, MagicKind.EQUALS_IN_WHEN_CONDITION, subjectExpression, expression)
                }",,a82a
fun visitKtElement(element: KtElement),"{
                throw UnsupportedOperationException(""[ControlFlowProcessor] $element"")
            }",,ecd7
fun mark(element: KtElement),"{
            builder.mark(element)
        }",,5302
No signature found,"fun generateInstructions(element: KtElement?) {
            if (element == null) return
            element.accept(this)
            checkNothingType(element)
        }",,6e1f
fun checkNothingType(element: KtElement),"{
            if (element !is KtExpression) return

            val expression = KtPsiUtil.deparenthesize(element) ?: return

            if (expression is KtStatementExpression || expression is KtTryExpression
                || expression is KtIfExpression || expression is KtWhenExpression
            ) {
                return
            }",,0d02
"fun createSyntheticValue(instructionElement: KtElement, kind: MagicKind, vararg from: KtElement)",": PseudoValue =
            b",,53d0
No signature found,"fun createNonSyntheticValue(to: KtElement, from: List<KtElement?>, kind: MagicKind): PseudoValue =
            b",,6e1f
No signature found,"fun createNonSyntheticValue(to: KtElement, kind: MagicKind, vararg from: KtElement?): PseudoValue =
            c",,6e1f
"fun mergeValues(from: List<KtExpression>, to: KtExpression)","{
            builder.merge(to, elementsToValues(from))
        }",,7aa1
No signature found,"fun copyValue(from: KtElement?, to: KtElement) {
            getBoundOrUnreachableValue(from)?.let { builder.bindValue(it, to) }",,6e1f
No signature found,"fun getBoundOrUnreachableValue(element: KtElement?): PseudoValue? {
            if (element == null) return null

            val value = builder.getBoundValue(element)
            return if (value != null || element is KtDeclaration) value else builder.newValue(element)
        }",,6e1f
No signature found,"fun elementsToValues(from: List<KtElement?>): List<PseudoValue> =
            f",,6e1f
"fun generateInitializer(declaration: KtDeclaration, initValue: PseudoValue)","{
            builder.write(declaration, declaration, initValue, getDeclarationAccessTarget(declaration), emptyMap())
        }",,f565
No signature found,"fun getResolvedCallAccessTarget(element: KtElement?): AccessTarget =
            e",,6e1f
fun getDeclarationAccessTarget(element: KtElement),": AccessTarget {
            val descriptor = trace.get(BindingContext.DECLARATION_TO_DESCRIPTOR, element)
            return if (descriptor is VariableDescriptor)
                AccessTarget.Declaration(descriptor)
            else
                AccessTarget.BlackBox
        }",,3b03
fun visitParenthesizedExpression(expression: KtParenthesizedExpression),"{
            mark(expression)
            val innerExpression = expression.expression
            if (innerExpression != null) {
                generateInstructions(innerExpression)
                copyValue(innerExpression, expression)
            }",,96e8
fun visitAnnotatedExpression(expression: KtAnnotatedExpression),"{
            val baseExpression = expression.baseExpression
            if (baseExpression != null) {
                generateInstructions(baseExpression)
                copyValue(baseExpression, expression)
            }",,b186
fun visitThisExpression(expression: KtThisExpression),"{
            val resolvedCall = expression.getResolvedCall(trace.bindingContext)
            if (resolvedCall == null) {
                createNonSyntheticValue(expression, MagicKind.UNRESOLVED_CALL)
                return
            }",,7012
fun visitConstantExpression(expression: KtConstantExpression),"{
            val constant = ConstantExpressionEvaluator.getConstant(expression, trace.bindingContext)
            builder.loadConstant(expression, constant)
        }",,8072
fun visitSimpleNameExpression(expression: KtSimpleNameExpression),"{
            val resolvedCall = expression.getResolvedCall(trace.bindingContext)
            if (resolvedCall is VariableAsFunctionResolvedCall) {
                generateCall(resolvedCall.variableCall)
            }",,ccf7
fun visitLabeledExpression(expression: KtLabeledExpression),"{
            mark(expression)
            val baseExpression = expression.baseExpression
            if (baseExpression != null) {
                generateInstructions(baseExpression)
                copyValue(baseExpression, expression)
            }",,0c13
fun visitBinaryExpression(expression: KtBinaryExpression),"{
            val operationReference = expression.operationReference
            val operationType = operationReference.getReferencedNameElementType()

            val left = expression.left
            val right = expression.right
            if (operationType === ANDAND || operationType === OROR) {
                generateBooleanOperation(expression)
            }",,4f90
fun generateBooleanOperation(expression: KtBinaryExpression),"{
            val operationType = expression.operationReference.getReferencedNameElementType()
            val left = expression.left
            val right = expression.right

            val resultLabel = builder.createUnboundLabel(""result of boolean operation"")
            generateInstructions(left)
            if (operationType === ANDAND) {
                builder.jumpOnFalse(resultLabel, expression, builder.getBoundValue(left))
            }",,b18b
No signature found,fun getValueAsFunction(value: PseudoValue?): () -> PseudoValue? = {,,6e1f
No signature found,fun getDeferredValue(expression: KtExpression?): () -> PseudoValue? = {,,6e1f
fun generateBothArgumentsAndMark(expression: KtBinaryExpression),"{
            val left = KtPsiUtil.deparenthesize(expression.left)
            if (left != null) {
                generateInstructions(left)
            }",,a699
No signature found,"fun visitAssignment(
            lhs: KtExpression?,
            rhsDeferredValue: () -> PseudoValue?,
            parentExpression: KtExpression
        ) {
            val left = KtPsiUtil.deparenthesize(lhs)
            if (left == null) {
                val arguments = rhsDeferredValue()?.let { listOf(it) }",,6e1f
No signature found,"fun generateArrayAssignment(
            lhs: KtArrayAccessExpression,
            rhsDeferredValue: () -> PseudoValue?,
            parentExpression: KtExpression
        ) {
            val setResolvedCall = trace.get(BindingContext.INDEXED_LVALUE_SET, lhs)

            if (setResolvedCall == null) {
                generateArrayAccess(lhs, null)

                val arguments = listOfNotNull(getBoundOrUnreachableValue(lhs), rhsDeferredValue.invoke())
                builder.magic(parentExpression, parentExpression, arguments, MagicKind.UNRESOLVED_CALL)

                return
            }",,6e1f
No signature found,"fun getArraySetterArguments(
            rhsDeferredValue: () -> PseudoValue?,
            setResolvedCall: ResolvedCall<FunctionDescriptor>
        ): SmartFMap<PseudoValue, ValueParameterDescriptor> {
            val valueArguments = setResolvedCall.resultingDescriptor.valueParameters.flatMapTo(
                ArrayList()
            ) { descriptor -> setResolvedCall.valueArguments[descriptor]?.arguments ?: emptyList() }","// In case of simple ('=') array assignment mark instruction is not generated yet, so we put it before generating ""set"" call",6e1f
No signature found,"fun generateArrayAccess(arrayAccessExpression: KtArrayAccessExpression, resolvedCall: ResolvedCall<*>?) {
            if (builder.getBoundValue(arrayAccessExpression) != null) return
            mark(arrayAccessExpression)
            if (!checkAndGenerateCall(resolvedCall)) {
                generateArrayAccessWithoutCall(arrayAccessExpression)
            }",,6e1f
fun generateArrayAccessWithoutCall(arrayAccessExpression: KtArrayAccessExpression),"{
            createNonSyntheticValue(arrayAccessExpression, generateArrayAccessArguments(arrayAccessExpression), MagicKind.UNRESOLVED_CALL)
        }",,7bf0
fun generateArrayAccessArguments(arrayAccessExpression: KtArrayAccessExpression),": List<KtExpression> {
            val inputExpressions = ArrayList<KtExpression>()

            val arrayExpression = arrayAccessExpression.arrayExpression
            if (arrayExpression != null) {
                inputExpressions.add(arrayExpression)
            }",,0109
fun visitUnaryExpression(expression: KtUnaryExpression),"{
            val operationSign = expression.operationReference
            val operationType = operationSign.getReferencedNameElementType()
            val baseExpression = expression.baseExpression ?: return
            if (EXCLEXCL === operationType) {
                generateInstructions(baseExpression)
                builder.predefinedOperation(expression, NOT_NULL_ASSERTION, elementsToValues(listOf(baseExpression)))
                return
            }",,ca19
fun isIncrementOrDecrement(operationType: IElementType),": Boolean =
            o",,ad97
fun visitIfExpression(expression: KtIfExpression),"{
            mark(expression)
            val branches = ArrayList<KtExpression>(2)
            val condition = expression.condition
            generateInstructions(condition)
            val elseLabel = builder.createUnboundLabel(""else branch"")
            builder.jumpOnFalse(elseLabel, expression, builder.getBoundValue(condition))
            val thenBranch = expression.then
            if (thenBranch != null) {
                branches.add(thenBranch)
                generateInstructions(thenBranch)
            }",,a401
fun generate(),"{
                val finalExpression = finallyBlock?.finalExpression ?: return
                catchFinallyStack.push(CatchFinallyLabels(null, null, null))
                startFinally?.let {
                    assert(finishFinally != null) { ""startFinally label is set to $startFinally but finishFinally label is not set"" }",,3be5
fun visitTryExpression(expression: KtTryExpression),"{
            mark(expression)

            val finallyBlock = expression.finallyBlock
            val finallyBlockGenerator = FinallyBlockGenerator(finallyBlock)
            val hasFinally = finallyBlock != null
            if (hasFinally) {
                builder.enterTryFinally(object : GenerationTrigger {
                    private var working = false

                    override fun generate() {
                        // This checks are needed for the case of having e.g. return inside finally: 'try {return}",,dc4e
fun generateTryAndCatches(expression: KtTryExpression),": Label? {
            val catchClauses = expression.catchClauses
            val hasCatches = catchClauses.isNotEmpty()

            var onException: Label? = null
            if (hasCatches) {
                onException = builder.createUnboundLabel(""onException"")
                builder.nondeterministicJump(onException, expression, null)
            }",,37d3
fun visitWhileExpression(expression: KtWhileExpression),"{
            val loopInfo = builder.enterLoop(expression)

            builder.bindLabel(loopInfo.conditionEntryPoint)
            val condition = expression.condition
            generateInstructions(condition)
            mark(expression)
            if (!CompileTimeConstantUtils.canBeReducedToBooleanConstant(condition, trace.bindingContext, true)) {
                builder.jumpOnFalse(loopInfo.exitPoint, expression, builder.getBoundValue(condition))
            }",,c461
fun visitDoWhileExpression(expression: KtDoWhileExpression),"{
            builder.enterBlockScope(expression)
            mark(expression)
            val loopInfo = builder.enterLoop(expression)

            builder.enterLoopBody(expression)
            generateInstructions(expression.body)
            builder.exitLoopBody(expression)
            builder.bindLabel(loopInfo.conditionEntryPoint)
            val condition = expression.condition
            generateInstructions(condition)
            builder.exitBlockScope(expression)
            if (!CompileTimeConstantUtils.canBeReducedToBooleanConstant(condition, trace.bindingContext, true)) {
                builder.jumpOnTrue(loopInfo.entryPoint, expression, builder.getBoundValue(expression.condition))
            }",,af10
fun visitForExpression(expression: KtForExpression),"{
            builder.enterBlockScope(expression)

            val loopRange = expression.loopRange
            generateInstructions(loopRange)
            generateLoopConventionCall(loopRange, BindingContext.LOOP_RANGE_ITERATOR_RESOLVED_CALL)
            declareLoopParameter(expression)

            // TODO : primitive cases
            val loopInfo = builder.enterLoop(expression)

            builder.bindLabel(loopInfo.conditionEntryPoint)
            generateLoopConventionCall(loopRange, BindingContext.LOOP_RANGE_HAS_NEXT_RESOLVED_CALL)
            builder.nondeterministicJump(loopInfo.exitPoint, expression, null)
            generateLoopConventionCall(loopRange, BindingContext.LOOP_RANGE_NEXT_RESOLVED_CALL)

            writeLoopParameterAssignment(expression)

            mark(expression)
            builder.enterLoopBody(expression)
            generateInstructions(expression.body)
            builder.jump(loopInfo.entryPoint, expression)

            builder.exitLoopBody(expression)
            builder.bindLabel(loopInfo.exitPoint)
            builder.loadUnit(expression)
            builder.exitBlockScope(expression)
        }",,b296
No signature found,"fun generateLoopConventionCall(
            loopRange: KtExpression?,
            callSlice: ReadOnlySlice<KtExpression, ResolvedCall<FunctionDescriptor>>
        ) {
            if (loopRange == null) return
            val resolvedCall = trace.bindingContext[callSlice, loopRange] ?: return
            generateCall(resolvedCall)
        }",,6e1f
fun declareLoopParameter(expression: KtForExpression),"{
            val loopParameter = expression.loopParameter
            if (loopParameter != null) {
                val destructuringDeclaration = loopParameter.destructuringDeclaration
                if (destructuringDeclaration != null) {
                    visitDestructuringDeclaration(destructuringDeclaration, false)
                }",,19b1
fun writeLoopParameterAssignment(expression: KtForExpression),"{
            val loopParameter = expression.loopParameter
            val loopRange = expression.loopRange

            val value = builder.magic(
                loopRange ?: expression,
                null,
                ContainerUtil.createMaybeSingletonList(builder.getBoundValue(loopRange)),
                MagicKind.LOOP_RANGE_ITERATION
            ).outputValue

            if (loopParameter != null) {
                val destructuringDeclaration = loopParameter.destructuringDeclaration
                if (destructuringDeclaration != null) {
                    for (entry in destructuringDeclaration.entries) {
                        generateInitializer(entry, value)
                    }",,538d
fun visitBreakExpression(expression: KtBreakExpression),"{
            val loop = getCorrespondingLoop(expression)
            if (loop != null) {
                if (jumpCrossesTryCatchBoundary(expression, loop)) {
                    generateJumpsToCatchAndFinally()
                }",,407f
fun visitContinueExpression(expression: KtContinueExpression),"{
            val loop = getCorrespondingLoop(expression)
            if (loop != null) {
                if (jumpCrossesTryCatchBoundary(expression, loop)) {
                    generateJumpsToCatchAndFinally()
                }",,2488
fun getNearestLoopExpression(expression: KtExpression),= e,,be21
fun getCorrespondingLoopWithoutLabel(expression: KtExpression),": KtLoopExpression? {
            val parentLoop = getNearestLoopExpression(expression) ?: return null
            val parentBody = parentLoop.body
            return if (parentBody != null && parentBody.textRange.contains(expression.textRange)) {
                parentLoop
            }",,6d2a
fun getCorrespondingLoop(expression: KtExpressionWithLabel),": KtLoopExpression? {
            val labelName = expression.getLabelName()
            val loop: KtLoopExpression?
            if (labelName != null) {
                val targetLabel = expression.getTargetLabel()!!
                val labeledElement = trace.get(BindingContext.LABEL_TARGET, targetLabel)
                loop = if (labeledElement is KtLoopExpression) {
                    labeledElement
                }",,c476
fun returnCrossesTryCatchBoundary(returnExpression: KtReturnExpression),": Boolean {
            val targetLabel = returnExpression.getTargetLabel() ?: return true
            val labeledElement = trace.get(BindingContext.LABEL_TARGET, targetLabel) ?: return true
            return jumpCrossesTryCatchBoundary(returnExpression, labeledElement)
        }",,7d88
"fun jumpCrossesTryCatchBoundary(jumpExpression: KtExpressionWithLabel, jumpTarget: PsiElement)",": Boolean {
            var current = jumpExpression.parent
            while (true) {
                when (current) {
                    jumpTarget -> return false
                    is KtTryExpression -> return true
                    else -> current = current.parent
                }",,1d33
"fun jumpDoesNotCrossFunctionBoundary(jumpExpression: KtExpressionWithLabel, jumpTarget: KtLoopExpression)",": Boolean {
            val bindingContext = trace.bindingContext
            val skipInlineFunctions = languageVersionSettings.supportsFeature(BreakContinueInInlineLambdas)
            val labelExprEnclosingFunc = getEnclosingFunctionDescriptor(bindingContext, jumpExpression, skipInlineFunctions)
            val labelTargetEnclosingFunc = getEnclosingFunctionDescriptor(bindingContext, jumpTarget, skipInlineFunctions)
            return if (labelExprEnclosingFunc !== labelTargetEnclosingFunc) {
                // Check to report only once
                if (builder.getLoopExitPoint(jumpTarget) != null ||
                    // Local class secondary constructors are handled differently
                    // They are the only local class element NOT included in owner pseudocode
                    // See generateInitializersForClassOrObject && generateDeclarationForLocalClassOrObjectIfNeeded
                    labelExprEnclosingFunc is ConstructorDescriptor && !labelExprEnclosingFunc.isPrimary
                ) {
                    val dependsOnInlineLambdas = !skipInlineFunctions &&
                            getEnclosingFunctionDescriptor(bindingContext, jumpExpression, true) == getEnclosingFunctionDescriptor(bindingContext, jumpTarget, true)
                    if (dependsOnInlineLambdas) {
                        trace.report(UNSUPPORTED_FEATURE.on(jumpExpression, BreakContinueInInlineLambdas to languageVersionSettings))
                    }",,6921
fun visitReturnExpression(expression: KtReturnExpression),"{
            if (returnCrossesTryCatchBoundary(expression)) {
                generateJumpsToCatchAndFinally()
            }",,6a41
"fun checkReturnLabelTarget(returnExpression: KtReturnExpression, labeledElement: KtElement)","{
            if (labeledElement !is KtFunctionLiteral && labeledElement !is KtNamedFunction) {
                if (languageVersionSettings.supportsFeature(LanguageFeature.RestrictReturnStatementTarget)) {
                    trace.report(NOT_A_FUNCTION_LABEL.on(returnExpression))
                }",,11c7
fun visitParameter(parameter: KtParameter),"{
            builder.declareParameter(parameter)
            val defaultValue = parameter.defaultValue
            if (defaultValue != null) {
                val skipDefaultValue = builder.createUnboundLabel(""after default value for parameter ${parameter.name ?: ""<anonymous>""}",,b7d2
fun computePseudoValueForParameter(parameter: KtParameter),": PseudoValue {
            val syntheticValue = createSyntheticValue(parameter, MagicKind.FAKE_INITIALIZER)
            val defaultValue = builder.getBoundValue(parameter.defaultValue) ?: return syntheticValue
            return builder.merge(parameter, arrayListOf(defaultValue, syntheticValue)).outputValue
        }",,e2bb
fun visitBlockExpression(expression: KtBlockExpression),"{
            val declareBlockScope = !isBlockInDoWhile(expression)
            if (declareBlockScope) {
                builder.enterBlockScope(expression)
            }",,642f
fun isBlockInDoWhile(expression: KtBlockExpression),": Boolean {
            val parent = expression.parent
            return parent.parent is KtDoWhileExpression
        }",,dd85
No signature found,"fun visitFunction(function: KtFunction, eventOccurrencesRange: EventOccurrencesRange? = n",,6e1f
"fun visitInlinedFunction(lambdaFunctionLiteral: KtFunction, eventOccurrencesRange: EventOccurrencesRange)","{
            // Defer emitting of inlined declaration
            deferredGeneratorsStack.peek().add { builder ->
                val beforeDeclaration = builder.createUnboundLabel(""before inlined declaration"")
                val afterDeclaration = builder.createUnboundLabel(""after inlined declaration"")

                builder.bindLabel(beforeDeclaration)

                if (!eventOccurrencesRange.isDefinitelyVisited()) {
                    builder.nondeterministicJump(afterDeclaration, lambdaFunctionLiteral, null)
                }",,6eb4
fun visitNamedFunction(function: KtNamedFunction),"{
            visitFunction(function)
        }",,b4eb
fun visitLambdaExpression(lambdaExpression: KtLambdaExpression),"{
            mark(lambdaExpression)
            val functionLiteral = lambdaExpression.functionLiteral

            // NB. Behaviour here is implicitly controlled by the LanguageFeature 'UseCallsInPlaceEffect'
            // If this feature is turned off, then slice LAMBDA_INVOCATIONS is never written and invocationKind
            // in all subsequent calls always 'null', resulting in falling back to old behaviour
            visitFunction(functionLiteral, trace[BindingContext.LAMBDA_INVOCATIONS, lambdaExpression])
            copyValue(functionLiteral, lambdaExpression)
        }",,f3f0
fun visitQualifiedExpression(expression: KtQualifiedExpression),"{
            mark(expression)
            val selectorExpression = expression.selectorExpression
            val receiverExpression = expression.receiverExpression
            val safe = expression is KtSafeQualifiedExpression

            // todo: replace with selectorExpresion != null after parser is fixed
            if (selectorExpression is KtCallExpression || selectorExpression is KtSimpleNameExpression) {
                if (!safe) {
                    generateInstructions(selectorExpression)
                }",,dd3f
fun visitCallExpression(expression: KtCallExpression),"{
            if (!generateCall(expression)) {
                val inputExpressions = ArrayList<KtExpression>()
                for (argument in expression.valueArguments) {
                    val argumentExpression = argument.getArgumentExpression()
                    if (argumentExpression != null) {
                        generateInstructions(argumentExpression)
                        inputExpressions.add(argumentExpression)
                    }",,35cb
fun generateAndGetReceiverIfAny(expression: KtExpression),": KtExpression? {
            val parent = expression.parent as? KtQualifiedExpression ?: return null

            if (parent.selectorExpression !== expression) return null

            val receiverExpression = parent.receiverExpression
            generateInstructions(receiverExpression)

            return receiverExpression
        }",,9217
fun visitProperty(property: KtProperty),"{
            builder.declareVariable(property)
            val initializer = property.initializer
            if (initializer != null) {
                visitAssignment(property, getDeferredValue(initializer), property)
            }",,23b3
fun visitDestructuringDeclaration(declaration: KtDestructuringDeclaration),"{
            visitDestructuringDeclaration(declaration, true)
        }",,a898
"fun visitDestructuringDeclaration(declaration: KtDestructuringDeclaration, generateWriteForEntries: Boolean)","{
            val initializer = declaration.initializer
            generateInstructions(initializer)
            for (entry in declaration.entries) {
                builder.declareVariable(entry)

                val resolvedCall = trace.get(BindingContext.COMPONENT_RESOLVED_CALL, entry)

                val writtenValue = if (resolvedCall != null) {
                    builder.call(
                        entry,
                        resolvedCall,
                        getReceiverValues(resolvedCall),
                        emptyMap()
                    ).outputValue
                }",,c1bf
fun visitPropertyAccessor(accessor: KtPropertyAccessor),"{
            processLocalDeclaration(accessor)
        }",,bfa6
fun visitBinaryWithTypeRHSExpression(expression: KtBinaryExpressionWithTypeRHS),"{
            mark(expression)

            val operationType = expression.operationReference.getReferencedNameElementType()
            val left = expression.left
            if (operationType === AS_KEYWORD || operationType === `AS_SAFE`) {
                generateInstructions(left)
                if (getBoundOrUnreachableValue(left) != null) {
                    createNonSyntheticValue(expression, MagicKind.CAST, left)
                }",,e752
fun generateJumpsToCatchAndFinally(),"{
            if (catchFinallyStack.isNotEmpty()) {
                with(catchFinallyStack.peek()) {
                    if (tryExpression != null) {
                        onException?.let {
                            builder.nondeterministicJump(it, tryExpression, null)
                        }",,baf9
fun visitThrowExpression(expression: KtThrowExpression),"{
            mark(expression)

            generateJumpsToCatchAndFinally()

            val thrownExpression = expression.thrownExpression ?: return
            generateInstructions(thrownExpression)

            val thrownValue = builder.getBoundValue(thrownExpression) ?: return
            builder.throwException(expression, thrownValue)
        }",,43c7
fun visitArrayAccessExpression(expression: KtArrayAccessExpression),"{
            generateArrayAccess(expression, trace.get(BindingContext.INDEXED_LVALUE_GET, expression))
        }",,4c7b
fun visitIsExpression(expression: KtIsExpression),"{
            mark(expression)
            val left = expression.leftHandSide
            generateInstructions(left)
            createNonSyntheticValue(expression, MagicKind.IS, left)
        }",,70a3
fun visitWhenExpression(expression: KtWhenExpression),"{
            mark(expression)

            val subjectExpression = expression.subjectExpression
            if (subjectExpression != null) {
                generateInstructions(subjectExpression)
            }",,ee8b
fun visitObjectLiteralExpression(expression: KtObjectLiteralExpression),"{
            mark(expression)
            val declaration = expression.objectDeclaration
            generateInstructions(declaration)

            builder.createAnonymousObject(expression)
        }",,fe93
fun visitObjectDeclaration(objectDeclaration: KtObjectDeclaration),"{
            generateHeaderDelegationSpecifiers(objectDeclaration)
            generateInitializersForClassOrObject(objectDeclaration)
            generateDeclarationForLocalClassOrObjectIfNeeded(objectDeclaration)
        }",,ce1b
fun visitStringTemplateExpression(expression: KtStringTemplateExpression),"{
            mark(expression)

            val inputExpressions = ArrayList<KtExpression>()
            for (entry in expression.entries) {
                if (entry is KtStringTemplateEntryWithExpression) {
                    val entryExpression = entry.getExpression()
                    generateInstructions(entryExpression)
                    if (entryExpression != null) {
                        inputExpressions.add(entryExpression)
                    }",,caeb
fun visitTypeProjection(typeProjection: KtTypeProjection),"{
            // TODO : Support Type Arguments. Companion object may be initialized at this point"");
        }",,98b3
fun visitAnonymousInitializer(classInitializer: KtAnonymousInitializer),"{
            generateInstructions(classInitializer.body)
        }",,452a
fun generateHeaderDelegationSpecifiers(classOrObject: KtClassOrObject),"{
            for (specifier in classOrObject.superTypeListEntries) {
                generateInstructions(specifier)
            }",,0338
fun generateInitializersForClassOrObject(classOrObject: KtDeclarationContainer),"{
            for (declaration in classOrObject.declarations) {
                if (declaration is KtProperty || declaration is KtAnonymousInitializer) {
                    generateInstructions(declaration)
                }",,a8a3
fun processEntryOrObject(entryOrObject: KtClassOrObject),"{
            val classDescriptor = trace[BindingContext.DECLARATION_TO_DESCRIPTOR, entryOrObject]
            if (classDescriptor is ClassDescriptor) {
                builder.declareEntryOrObject(entryOrObject)
                builder.write(
                    entryOrObject, entryOrObject, createSyntheticValue(entryOrObject, MagicKind.FAKE_INITIALIZER),
                    AccessTarget.Declaration(FakeCallableDescriptorForObject(classDescriptor)), emptyMap()
                )
                generateInstructions(entryOrObject)
            }",,3c7c
fun visitClass(klass: KtClass),"{
            if (klass.hasPrimaryConstructor()) {
                processParameters(klass.primaryConstructorParameters)

                // delegation specifiers of primary constructor, anonymous class and property initializers
                generateHeaderDelegationSpecifiers(klass)
                generateInitializersForClassOrObject(klass)
            }",,4022
fun visitScript(script: KtScript),"{

            // the same logic is implemented in the LazyScriptDescriptor
            // TODO: consider extracting last expression type logic to a common place
            val lastInitializer = script
                .getChildOfType<KtBlockExpression>()
                ?.getChildrenOfType<KtScriptInitializer>()?.lastOrNull()
            val resultExpression = lastInitializer?.getChildOfType<KtExpression>()

            val resultType = resultExpression?.let {
                trace.bindingContext.getType(it)
            }",,4f55
fun generateDeclarationForLocalClassOrObjectIfNeeded(classOrObject: KtClassOrObject),"{
            if (classOrObject.isLocal) {
                for (declaration in classOrObject.declarations) {
                    if (declaration is KtSecondaryConstructor ||
                        declaration is KtProperty ||
                        declaration is KtAnonymousInitializer
                    ) {
                        continue
                    }",,a6ab
fun processParameters(parameters: List<KtParameter>),"{
            for (parameter in parameters) {
                generateInstructions(parameter)
            }",,9d91
fun visitSecondaryConstructor(constructor: KtSecondaryConstructor),"{
            val classOrObject =
                PsiTreeUtil.getParentOfType(constructor, KtClassOrObject::class.java) ?: error(""Guaranteed by parsing contract"")

            processParameters(constructor.valueParameters)
            generateCallOrMarkUnresolved(constructor.getDelegationCall())

            if (!constructor.getDelegationCall().isCallToThis) {
                generateInitializersForClassOrObject(classOrObject)
            }",,197d
fun visitSuperTypeCallEntry(call: KtSuperTypeCallEntry),"{
            generateCallOrMarkUnresolved(call)
        }",,bfc5
fun visitInitializerList(list: KtInitializerList),"{
            list.acceptChildren(this)
        }",,f291
fun generateCallOrMarkUnresolved(call: KtCallElement),"{
            if (!generateCall(call)) {
                val arguments = call.valueArguments.mapNotNull(ValueArgument::getArgumentExpression)

                for (argument in arguments) {
                    generateInstructions(argument)
                }",,5924
fun visitDelegatedSuperTypeEntry(specifier: KtDelegatedSuperTypeEntry),"{
            val delegateExpression = specifier.delegateExpression
            generateInstructions(delegateExpression)
            if (delegateExpression != null) {
                createSyntheticValue(specifier, MagicKind.VALUE_CONSUMER, delegateExpression)
            }",,6942
fun visitSuperTypeEntry(specifier: KtSuperTypeEntry),"{
            // Do not generate UNSUPPORTED_ELEMENT here
        }",,fcfb
fun visitSuperTypeList(list: KtSuperTypeList),"{
            list.acceptChildren(this)
        }",,0dbd
fun visitKtFile(file: KtFile),"{
            for (declaration in file.declarations) {
                if (declaration is KtProperty) {
                    generateInstructions(declaration)
                }",,94d6
fun visitDoubleColonExpression(expression: KtDoubleColonExpression),"{
            mark(expression)
            val receiverExpression = expression.receiverExpression
            if (receiverExpression != null &&
                trace.bindingContext.get(BindingContext.DOUBLE_COLON_LHS, receiverExpression) is DoubleColonLHS.Expression
            ) {
                generateInstructions(receiverExpression)
                createNonSyntheticValue(expression, MagicKind.BOUND_CALLABLE_REFERENCE, receiverExpression)
            }",,0af5
fun visitKtElement(element: KtElement),"{
            createNonSyntheticValue(element, MagicKind.UNSUPPORTED_ELEMENT)
        }",,ecd7
"fun generateQualifier(expression: KtExpression, qualifier: Qualifier)",": Boolean {
            val qualifierDescriptor = qualifier.descriptor
            if (qualifierDescriptor is ClassDescriptor) {
                getFakeDescriptorForObject(qualifierDescriptor)?.let {
                    mark(expression)
                    builder.read(expression, AccessTarget.Declaration(it), emptyMap())
                    return true
                }",,86c7
fun generateCall(callElement: KtElement),": Boolean {
            val resolvedCall = callElement.getResolvedCall(trace.bindingContext)
            val callElementFromResolvedCall = resolvedCall?.call?.callElement ?: return false
            if (callElement.isAncestor(callElementFromResolvedCall, true)) return false
            return checkAndGenerateCall(resolvedCall)
        }",,6310
No signature found,"fun checkAndGenerateCall(resolvedCall: ResolvedCall<*>?): Boolean {
            if (resolvedCall == null) return false
            generateCall(resolvedCall)
            return true
        }",,6e1f
No signature found,"fun generateCall(resolvedCall: ResolvedCall<*>): InstructionWithValue {
            val callElement = resolvedCall.call.callElement

            val receivers = getReceiverValues(resolvedCall)

            deferredGeneratorsStack.push(mutableListOf())

            var parameterValues = SmartFMap.emptyMap<PseudoValue, ValueParameterDescriptor>()
            for (argument in resolvedCall.call.valueArguments) {
                val argumentMapping = resolvedCall.getArgumentMapping(argument)
                val argumentExpression = argument.getArgumentExpression()
                if (argumentMapping is ArgumentMatch) {
                    parameterValues = generateValueArgument(argument, argumentMapping.valueParameter, parameterValues)
                }",,6e1f
No signature found,"fun getReceiverValues(resolvedCall: ResolvedCall<*>): Map<PseudoValue, ReceiverValue> {
            var varCallResult: PseudoValue? = null
            var explicitReceiver: ReceiverValue? = null
            if (resolvedCall is VariableAsFunctionResolvedCall) {
                varCallResult = generateCall(resolvedCall.variableCall).outputValue

                //noinspection EnumSwitchStatementWhichMissesCases
                when (resolvedCall.explicitReceiverKind) {
                    ExplicitReceiverKind.DISPATCH_RECEIVER -> explicitReceiver = resolvedCall.dispatchReceiver
                    ExplicitReceiverKind.EXTENSION_RECEIVER, ExplicitReceiverKind.BOTH_RECEIVERS -> explicitReceiver =
                        resolvedCall.extensionReceiver
                    ExplicitReceiverKind.NO_EXPLICIT_RECEIVER -> {
                    }",,6e1f
No signature found,"fun getReceiverValues(
            callElement: KtElement,
            receiver: ReceiverValue?,
            receiverValuesArg: SmartFMap<PseudoValue, ReceiverValue>
        ): SmartFMap<PseudoValue, ReceiverValue> {
            var receiverValues = receiverValuesArg
            if (receiver == null || receiverValues.containsValue(receiver)) return receiverValues

            when (receiver) {
                is ImplicitReceiver -> {
                    if (callElement is KtCallExpression) {
                        val declaration = receiver.declarationDescriptor
                        if (declaration is ClassDescriptor) {
                            val fakeDescriptor = getFakeDescriptorForObject(declaration)
                            val calleeExpression = callElement.calleeExpression
                            if (fakeDescriptor != null && calleeExpression != null) {
                                builder.read(calleeExpression, AccessTarget.Declaration(fakeDescriptor), emptyMap())
                            }",,6e1f
"fun generateValueArgument(
            valueArgument: ValueArgument,
            parameterDescriptor: ValueParameterDescriptor,
            parameterValuesArg: SmartFMap<PseudoValue, ValueParameterDescriptor>
        )",": SmartFMap<PseudoValue, ValueParameterDescriptor> {
            var parameterValues = parameterValuesArg
            val expression = valueArgument.getArgumentExpression()
            if (expression != null) {
                if (!valueArgument.isExternal()) {
                    generateInstructions(expression)
                }",,286c
fun main(a: A),"{
    a.foo(<!JAVA_TYPE_MISMATCH!>a.bar()<!>)
}","// FIR_IDENTICAL
// !DIAGNOSTICS: -UNUSED_VARIABLE
// FILE: A.java",c1f5
No signature found,"fun Name.render(): String {
    return if (this.shouldBeEscaped()) '`' + asString() + '`' else asString()
}",,6e1f
No signature found,"fun Name.shouldBeEscaped(): Boolean {
    val string = asString()
    return string in KeywordStringsGenerated.KEYWORDS ||
            string.any { !Character.isLetterOrDigit(it) && it != '_' }",,6e1f
No signature found,"fun FqNameUnsafe.render(): String {
    return renderFqName(pathSegments())
}",,6e1f
No signature found,"fun FqName.render(): String {
    return renderFqName(pathSegments())
}",,6e1f
fun renderFqName(pathSegments: List<Name>),": String {
    return buildString {
        for (element in pathSegments) {
            if (length > 0) {
                append(""."")
            }",,d1f6
"fun replacePrefixesInTypeRepresentations(
    lowerRendered: String,
    lowerPrefix: String,
    upperRendered: String,
    upperPrefix: String,
    foldedPrefix: String
)",": String? {
    if (lowerRendered.startsWith(lowerPrefix) && upperRendered.startsWith(upperPrefix)) {
        val lowerWithoutPrefix = lowerRendered.substring(lowerPrefix.length)
        val upperWithoutPrefix = upperRendered.substring(upperPrefix.length)
        val flexibleCollectionName = foldedPrefix + lowerWithoutPrefix

        if (lowerWithoutPrefix == upperWithoutPrefix) return flexibleCollectionName

        if (typeStringsDifferOnlyInNullability(lowerWithoutPrefix, upperWithoutPrefix)) {
            return ""$flexibleCollectionName!""
        }",,ea2f
"fun typeStringsDifferOnlyInNullability(lower: String, upper: String)","=
    l",,557b
fun box(),= e,,4f27
No signature found,"fun defaultHostPreset(
    subproject: Project,
    whitelist: List<KotlinTargetPreset<*>> = l",,6e1f
"fun targetHostPreset(
        subproject: Project,
        crossTarget: String
)",": KotlinTargetPreset<*> {
    return when(crossTarget) {
        ""linuxArm64"" -> subproject.kotlin.presets.linuxArm64
        ""linuxX64"" -> subproject.kotlin.presets.linuxX64
        else -> throw Exception(""Running becnhmarks on target $crossTarget isn't supported yet."")
    }",,72e9
fun getNativeProgramExtension(),: String = w,,bd7d
fun getFileSize(filePath: String),": Long? {
    val file = File(filePath)
    return if (file.exists()) file.length() else null
}",,2025
"fun getCodeSizeBenchmark(programName: String, filePath: String)",": BenchmarkResult {
    val codeSize = getFileSize(filePath)
    return BenchmarkResult(programName,
            codeSize?. let { BenchmarkResult.Status.PASSED }",,6ce8
"fun toCodeSizeBenchmark(metricDescription: String, status: String, programName: String)",": BenchmarkResult {
    if (!metricDescription.startsWith(""CODE_SIZE"")) {
        error(""Wrong metric is used as code size."")
    }",,d1b2
"fun createJsonReport(projectProperties: Map<String, Any>)",": String {
    fun getValue(key: String): String = projectProperties[key] as? String ?: ""unknown""
    val machine = Environment.Machine(getValue(""cpu""), getValue(""os""))
    val jdk = Environment.JDKInstance(getValue(""jdkVersion""), getValue(""jdkVendor""))
    val env = Environment(machine, jdk)
    val flags: List<String> = (projectProperties[""flags""] as? List<*>)?.filterIsInstance<String>() ?: emptyList()
    val backend = Compiler.Backend(Compiler.backendTypeFromString(getValue(""type""))!! ,
                                    getValue(""compilerVersion""), flags)
    val kotlin = Compiler(backend, getValue(""kotlinVersion""))
    val benchDesc = getValue(""benchmarks"")
    val benchmarksArray = JsonTreeParser.parse(benchDesc)
    val benchmarks = parseBenchmarksArray(benchmarksArray)
            .union((projectProperties[""compileTime""] as? List<*>)?.filterIsInstance<BenchmarkResult>() ?: emptyList()).union(
                    listOf(projectProperties[""codeSize""] as? BenchmarkResult).filterNotNull()).toList()
    val report = BenchmarksReport(env, benchmarks, kotlin)
    return report.toJson()
}",,790a
fun mergeReports(reports: List<File>),": String {
    val reportsToMerge = reports.filter { it.exists() }",,25ee
"fun getCompileOnlyBenchmarksOpts(project: Project, defaultCompilerOpts: List<String>)",": List<String> {
    val dist = project.file(project.findProperty(""kotlin.native.home"") ?: ""dist"")
    val useCache = !project.hasProperty(""disableCompilerCaches"")
    val cacheOption = ""-Xcache-directory=$dist/klib/cache/${HostManager.host.name}",,f656
"fun findFile(fileName: String, directory: String)",": String? =
        F",,c423
"fun uploadFileToArtifactory(url: String, project: String, artifactoryFilePath: String,
                        filePath: String, password: String)","{
    val uploadUrl = ""$url/$project/$artifactoryFilePath""
    sendUploadRequest(uploadUrl, filePath, extraHeaders = listOf(Pair(""X-JFrog-Art-Api"", password)))
}",,bbd0
No signature found,"fun sendUploadRequest(url: String, fileName: String, username: String? = n",,6e1f
"fun createRunTask(
        subproject: Project,
        name: String,
        linkTask: Task,
        executable: String,
        outputFileName: String
)",": Task {
    return subproject.tasks.create(name, RunKotlinNativeTask::class.java, linkTask, executable, outputFileName)
}",,f8d8
"fun getJvmCompileTime(subproject: Project,programName: String)",": BenchmarkResult =
        T",,0817
No signature found,"fun getNativeCompileTime(subproject: Project, programName: String,
                         tasks: List<String> = l",,6e1f
"fun getCompileBenchmarkTime(subproject: Project,
                            programName: String, tasksNames: Iterable<String>,
                            repeats: Int, exitCodes: Map<String, Int>)","=
    (",,52b8
"fun toCompileBenchmark(metricDescription: String, status: String, programName: String)",": BenchmarkResult {
    if (!metricDescription.startsWith(""COMPILE_TIME"")) {
        error(""Wrong metric is used as compile time."")
    }",,a7aa
fun getTimerListenerOfSubproject(subproject: Project),"=
                t",,10af
"fun getBenchmarkResult(programName: String, tasksNames: List<String>)",": BenchmarkResult {
        val time = tasksNames.map { tasksTimes[it] ?: 0.0 }",,1430
fun getTime(taskName: String),= t,,b91b
fun beforeExecute(task: Task),"{
        startTime = System.nanoTime()
    }",,4bd3
"fun afterExecute(task: Task, taskState: TaskState)","{
         tasksTimes[task.name] = (System.nanoTime() - startTime) / 1000.0
     }",,c72d
fun addTimeListener(subproject: Project),"{
    val listener = TaskTimerListener()
    TaskTimerListener.timerListeners.put(subproject.name, listener)
    subproject.gradle.addListener(listener)
}",,9c74
fun <T> logged(value: T),": T =
    v",,275c
No signature found,"fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = """"
    val actual = test()
    if (actual != expected) throw AssertionError(""$id expected: $expected, actual: $actual"")
    if (log != expectedLog) throw AssertionError(""$id expectedLog: $expectedLog, actual: $log"")
}",,6e1f
fun getA(),= A,,05da
"fun get(i1: Int, i2: Int, i3: Int)",: Int = x,,0126
"fun set(i1: Int, i2: Int, i3: Int, value: Int)","{
        log += ""set-B($i1, $i2, $i3, $value);""
        x = value
    }",,9e55
fun getB(),= B,,b143
fun box(),": String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest(""++getA().x"", 1, ""getA();get-A.x;set-A.x;get-A.x;"") { ++getA().x }",,4f27
No signature found,fun parse(parser: (serializedValue: String) -> KotlinType?): Unit = T,"// FIR_DUMP
// ISSUE: KT-64823 (K2/PCLA difference)",6e1f
No signature found,fun serialize(parser: (value: KotlinType) -> Any?): Unit = T,,6e1f
No signature found,fun <KotlinType : Any> defineType(definition: TypeDefinition<KotlinType>.() -> Unit): Unit = T,,6e1f
fun main(),"{
    defineType {
        parse { it.toInt() }",,d987
fun <T> consumeLongAndMaterialize(x: Long),: T = n,"// FIR_IDENTICAL
// !DIAGNOSTICS: -UNUSED_PARAMETER -UNCHECKED_CAST -UNUSED_EXPRESSION",28ab
fun consumeAny(x: Any),= x,,596a
fun main(),"{
    consumeAny(consumeLongAndMaterialize(3L * 1000))

    if (true) {
        consumeLongAndMaterialize(3L * 1000)
    }",,d987
fun f(),"* }
 *
 * class C : I {
 *     override  {}",,f6fb
No signature found,"fun KtCallableSymbol.isObjCBaseCallable(): Boolean {
    return getAllOverriddenSymbols().none { overriddenSymbol ->
        overriddenSymbol.isVisibleInObjC()
    }",,6e1f
fun foo(t: String),{},"// SKIP_KT_DUMP
// FIR_IDENTICAL
// TARGET_BACKEND: JVM

// FILE: Java1.java",2230
fun bar(),": String {
        return """"
    }",,66c3
"fun test(b: B, c: C)","{
    val k: String = b.bar()
    b.foo("""")
    b.foo(null)
    val k2: String = c.bar()
    c.foo("""")
}",,c35c
fun successfullyParsed(),= a,,1e20
fun unexpectedEmptyLine1(),= a,,2e57
fun unexpectedEmptyLine2(),= a,,eac0
fun unexpectedEmptyLine3(),= a,,e3dc
fun unexpectedEmptyLine4(),= a,,fb02
fun testNameBeforeTestSuiteName(),= a,,bc5d
fun unexpectedTestSuiteName(),= a,,17d5
fun noTestNameAfterTestSuiteName(),= a,,1e0e
"fun assertCorrectParseError(expectedMessage: String, lineNumber: Int, listing: String)","{
            try {
                GTestListing.parse(listing)
                fail { ""Listing parsed without errors"" }",,6d4c
No signature found,fun <R> build(block: TestInterface<R>.() -> Unit): R = T,"// !LANGUAGE: +UnrestrictedBuilderInference
// !DIAGNOSTICS: -UNUSED_PARAMETER -OPT_IN_IS_NOT_ENABLED -UNUSED_VARIABLE
// WITH_STDLIB

// FILE: Test.java",6e1f
No signature found,fun <R> build2(block: TestInterface<R>.() -> Unit): R = T,,6e1f
fun emit(r: R),"fun get(): R
    fun getInv(): Inv<R>
}

fun <U> id(x: U) = x",,cdd5
fun <E> select(vararg x: E),= x,,4e55
fun test(),"{
    val ret = build {
        emit(""1"")
        <!DEBUG_INFO_EXPRESSION_TYPE(""(TypeVariable(R)..TypeVariable(R)?)"")!>Test.foo(get())<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""(Inv<TypeVariable(R)>..Inv<TypeVariable(R)>?)"")!>Test.foo(getInv())<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.String"")!>id(get())<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.String"")!>select(get(), get())<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""(kotlin.String..kotlin.String?)"")!>select(Test.foo(get()), Test.foo(get()))<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""(kotlin.String..kotlin.String?)"")!>select(Test.foo(get()), get())<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""Inv<kotlin.String>"")!>select(getInv(), getInv())<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""(Inv<kotlin.String>..Inv<kotlin.String>?)"")!>select(Test.foo(getInv()), Test.foo(getInv()))<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""(Inv<kotlin.String>..Inv<kotlin.String>?)"")!>select(Test.foo(getInv()), getInv())<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""(Inv<kotlin.String>..Inv<kotlin.String>?)"")!>select(getInv(), Test.foo(getInv()))<!>
        <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.String"")!>select(id(get()), id(get()))<!>
        <!INFERRED_INTO_DECLARED_UPPER_BOUNDS!>build2<!> {
            emit(1)
            <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Any?"")!>select(this@build.get(), get())<!>
            <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Any?"")!>select(Test.foo(this@build.get()), Test.foo(get()))<!>
            <!DEBUG_INFO_EXPRESSION_TYPE(""Inv<out kotlin.Any?>"")!>select(this@build.getInv(), getInv())<!>
            <!DEBUG_INFO_EXPRESSION_TYPE(""(Inv<out kotlin.Any?>..Inv<out kotlin.Any?>?)"")!>select(Test.foo(this@build.getInv()), Test.foo(getInv()))<!>
            <!DEBUG_INFO_EXPRESSION_TYPE(""(Inv<out kotlin.Any?>..Inv<out kotlin.Any?>?)"")!>select(Test.foo(this@build.getInv()), getInv())<!>
            <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Any?"")!>select(id(this@build.get()), id(get()))<!>
            """"
        }",,fe98
fun asString(),: String = r,,4527
fun asString(codeMetaInfo: CodeMetaInfo),": String {
            codeMetaInfo as IrInterpreterCodeMetaInfo
            return ""${super.asString(codeMetaInfo)}",,9cab
fun foo(),{},// WITH_REFLECT,519f
fun bar(),"= """,,66c3
No signature found,fun Int.baz() = t,,6e1f
fun box(),": String {
    assertEquals(""foo"", ::foo.name)
    assertEquals(""bar"", A::bar.name)
    assertEquals(""baz"", Int::baz.name)
    return ""OK""
}",,4f27
fun test(),": Int {
        return x
    }",// FILE: Base.kt,fe98
No signature found,"fun @receiver:ObjCName(""objCReceiver"") Int.kotlinFunction(
        @ObjCName(""objCParam"") kotlinParam: Int
    ): Int = t",// FILE: kotlin.kt,6e1f
No signature found,"fun <!INAPPLICABLE_OBJC_NAME!>@receiver:ObjCName(""objCReceiver"")<!> Int.kotlinFunction(
        <!INAPPLICABLE_OBJC_NAME!>@ObjCName(""objCParam"")<!> kotlinParam: Int
    ): Int = t",,6e1f
No signature found,"fun @receiver:ObjCName(""objCReceiver"", ""swiftReceiver"") Int.kotlinFunctionA(
        @ObjCName(""objCParam"", ""swiftParam"") kotlinParam: Int
    ): Int
    @ObjCName(""objCFunctionB"", ""swiftFunctionB"")
    fun @receiver:ObjCName(""objCReceiver"", ""swiftReceiver"") Int.kotlinFunctionB(
        @ObjCName(""objCParam"", ""swiftParam"") kotlinParam: Int
    ): Int
    @ObjCName(""objCFunctionC"", ""swiftFunctionC"")
    fun @receiver:ObjCName(""objCReceiver"", ""swiftReceiver"") Int.kotlinFunctionC(
        @ObjCName(""objCParam"", ""swiftParam"") kotlinParam: Int
    ): Int
    @ObjCName(""objCFunctionD"", ""swiftFunctionD"")
    fun @receiver:ObjCName(""objCReceiver"", ""swiftReceiver"") Int.kotlinFunctionD(
        @ObjCName(""objCParam"", ""swiftParam"") kotlinParam: Int
    ): Int
    @ObjCName(""objCFunctionE"", ""swiftFunctionE"")
    fun Int.kotlinFunctionE(@ObjCName(""objCParam"", ""swiftParam"") kotlinParam: Int): Int
}

interface KotlinInterfaceB {
    @ObjCName(""objCPropertyA"", ""swiftPropertyA"")
    var kotlinPropertyA: Int
    @ObjCName(""objCPropertyBB"", ""swiftPropertyB"")
    var kotlinPropertyB: Int
    @ObjCName(swiftName =""swiftPropertyC"")
    var kotlinPropertyC: Int
    @ObjCName(""objCPropertyD"")
    var kotlinPropertyD: Int
    @ObjCName(""objCPropertyE"")
    var kotlinPropertyE: Int
    var kotlinPropertyF: Int

    @ObjCName(""objCFunctionA"", ""swiftFunctionA"")
    fun @receiver:ObjCName(""objCReceiver"", ""swiftReceiver"") Int.kotlinFunctionA(
        @ObjCName(""objCParam"", ""swiftParam"") kotlinParam: Int
    ): Int
    @ObjCName(""objCFunctionBB"", ""swiftFunctionB"")
    fun @receiver:ObjCName(""objCReceiver"", ""swiftReceiver"") Int.kotlinFunctionB(
        @ObjCName(""objCParam"", ""swiftParam"") kotlinParam: Int
    ): Int
    @ObjCName(""objCFunctionC"", ""swiftFunctionC"")
    fun @receiver:ObjCName(""objCReceiverC"", ""swiftReceiver"") Int.kotlinFunctionC(
        @ObjCName(""objCParam"", ""swiftParam"") kotlinParam: Int
    ): Int
    @ObjCName(""objCFunctionD"", ""swiftFunctionD"")
    fun @receiver:ObjCName(""objCReceiver"", ""swiftReceiver"") Int.kotlinFunctionD(
        @ObjCName(""objCParamD"", ""swiftParam"") kotlinParam: Int
    ): Int
    fun @receiver:ObjCName(""objCFunctionE"", ""swiftFunctionE"") Int.kotlinFunctionE(
        @ObjCName(""objCParam"", ""swiftParam"") kotlinParam: Int
    ): Int
}",,6e1f
No signature found,fun Int.kotlinFunctionA(kotlinParam: Int): Int = t,,6e1f
No signature found,fun Int.kotlinFunctionB(kotlinParam: Int): Int = t,,6e1f
No signature found,fun Int.kotlinFunctionC(kotlinParam: Int): Int = t,,6e1f
No signature found,fun Int.kotlinFunctionD(kotlinParam: Int): Int = t,,6e1f
No signature found,fun Int.kotlinFunctionE(kotlinParam: Int): Int = t,,6e1f
No signature found,"fun <!INAPPLICABLE_EXACT_OBJC_NAME!>@receiver:ObjCName(""objCReceiver"", exact = t",,6e1f
fun foo(),{},,519f
fun foo(),"}

<!INCOMPATIBLE_OBJC_NAME_OVERRIDE!>open class Derived : Base(), I<!>

open class Derived2 : Derived() {
    override  {}",,519f
fun foo(),"}

interface DerivedI1 : I1 {
    override 
}",,519f
No signature found,fun <E : Out<T>> foo1(x: E) = 1,"// !CHECK_TYPE
// !DIAGNOSTICS: -UNUSED_PARAMETER",6e1f
No signature found,fun <F : Inv<T>> foo2(x: F) = 1,,6e1f
No signature found,fun <G : In<T>>  foo3(x: G) = 1,,6e1f
"fun foo2(a: A<out CharSequence>, b: A<in CharSequence>)","{
    a.foo1(<!TYPE_MISMATCH!>Out<CharSequence>()<!>)
    a.foo1<<!UPPER_BOUND_VIOLATED!>Out<CharSequence><!>>(Out())

    a.foo1(Out())
    a.foo1(Out<Nothing>())

    a.foo2(Inv())
    a.foo2(<!TYPE_MISMATCH!>Inv<CharSequence>()<!>)
    a.foo2<<!UPPER_BOUND_VIOLATED!>Inv<CharSequence><!>>(<!TYPE_MISMATCH, TYPE_MISMATCH, TYPE_MISMATCH!>Inv()<!>)

    a.foo3(In())
    a.foo3(In<CharSequence>())
    a.foo3<In<CharSequence>>(In())

    b.foo1(Out())
    b.foo1(Out<CharSequence>())
    b.foo1<Out<CharSequence>>(Out())

    b.foo2(Inv())
    b.foo2(<!TYPE_MISMATCH!>Inv<CharSequence>()<!>)
    b.foo2<<!UPPER_BOUND_VIOLATED!>Inv<CharSequence><!>>(<!TYPE_MISMATCH, TYPE_MISMATCH, TYPE_MISMATCH!>Inv()<!>)


    b.foo3(<!TYPE_MISMATCH!>In<CharSequence>()<!>)
    b.foo3<<!UPPER_BOUND_VIOLATED!>In<CharSequence><!>>(In())

    b.foo3(In<Any?>())
    b.foo3(In())
}",,fe15
fun test(),"{
    val t = X.E.t
    <!DEBUG_INFO_EXPRESSION_TYPE(""(X<(I<(kotlin.Any..kotlin.Any?)>..I<(kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?), (I<(kotlin.Any..kotlin.Any?)>..I<(kotlin.Any..kotlin.Any?)>?)>..X<out (I<*>..I<*>?), *, out (I<*>..I<*>?)>?)"")!>t<!>
    t.id // should be OK
}","// WITH_STDLIB
// FULL_JDK

// FILE: X.java",fe98
No signature found,fun <K> FlowCollector<K>.bar(): K = n,"// !LANGUAGE: +UnrestrictedBuilderInference
// WITH_STDLIB
// SKIP_TXT
// !DIAGNOSTICS: -CAST_NEVER_SUCCEEDS -UNCHECKED_CAST -UNUSED_PARAMETER -UNUSED_VARIABLE -OPT_IN_USAGE_ERROR -UNUSED_EXPRESSION",6e1f
No signature found,fun <K> FlowCollector<K>.foo(): K = n,,6e1f
No signature found,fun <K> K.bar3(): K = n,,6e1f
No signature found,fun <K> K.foo3(): K = n,,6e1f
fun bar2(),: Int = 1,,3846
fun foo2(),: Float = 1,,7e7a
fun foo7(),= n,,bc0d
No signature found,fun <L> flow(block: suspend FlowCollector<L>.() -> Unit) = F,,6e1f
fun poll7(),": Flow<String> {
    return flow {
        val inv = ::bar<!NOT_NULL_ASSERTION_ON_CALLABLE_REFERENCE!>!!<!>
        inv()
    }",,73bf
fun poll71(),": Flow<String> {
    return flow {
        val inv = ::bar2<!NOT_NULL_ASSERTION_ON_CALLABLE_REFERENCE!>!!<!>
        inv()
    }",,0f20
fun poll72(),": Flow<String> {
    return flow {
        val inv = ::bar3<!NOT_NULL_ASSERTION_ON_CALLABLE_REFERENCE!>!!<!>
        inv()
    }",,f8b0
fun poll73(),": Flow<String> {
    return flow {
        val inv = ::bar4<!NOT_NULL_ASSERTION_ON_CALLABLE_REFERENCE!>!!<!>
        inv
    }",,4b1e
fun poll74(),": Flow<String> {
    return flow {
        val inv = ::bar5<!NOT_NULL_ASSERTION_ON_CALLABLE_REFERENCE!>!!<!>
        inv
    }",,cb52
fun poll75(),": Flow<String> {
    return flow {
        val inv = ::Foo6<!NOT_NULL_ASSERTION_ON_CALLABLE_REFERENCE!>!!<!>
        inv
    }",,0596
fun poll76(),": Flow<String> {
    return flow {
        val inv = <!NEW_INFERENCE_NO_INFORMATION_FOR_PARAMETER!>::Foo7<!><!NOT_NULL_ASSERTION_ON_CALLABLE_REFERENCE!>!!<!>
        <!DEBUG_INFO_ELEMENT_WITH_ERROR_TYPE!>inv<!>
    }",,18a0
fun box(),= e,// FUNCTION: infix.dispatch.Wrapper.mustEqual,4f27
fun bar1(x : BigEnum),": String {
    when (x) {
        BigEnum.ITEM1 -> return ""123""
        BigEnum.ITEM2-> return ""456""
    }",,27a7
"fun <T> assertEquals(a: T, b: T)","{ if (a != b) throw AssertionError(""$a != $b"") }",,0b51
No signature found,fun Double.Companion.MAX() = M,,6e1f
No signature found,fun Double.Companion.MIN() = M,,6e1f
fun <T> test(o: T),"{ assertEquals(o === Double.Companion, true) }",,114c
fun box(),": String {

    assertEquals(1.7976931348623157E308, Double.MAX_VALUE)

    assertEquals(Double.MIN_VALUE, Double.MIN())
    assertEquals(Double.MAX_VALUE, Double.Companion.MAX())

    test(Double)
    test(Double.Companion)

    return ""OK""
}",,4f27
fun test(x: A),"{
    if (x !is C) return
    if (x is B) {
        x.<!OVERLOAD_RESOLUTION_AMBIGUITY!>foo<!>.<!DEBUG_INFO_MISSING_UNRESOLVED!>foo<!>
        x.getFoo().foo
    }","// ISSUE: KT-10879
// FILE: A.java",1cb3
No signature found,fun nullToNull(a: Any?) = a,// EXPECTED_REACHABLE_NODES: 1417,6e1f
fun notNullToNull(a: Any),= a,,0cd1
No signature found,fun nullToNotNull(a: Any?) = a,,6e1f
fun notNullToNotNull(a: Any),= a,,4c2f
No signature found,fun NBtoNB(b: B?) = b,,6e1f
fun dtoNB(d: dynamic),= d,,c080
fun testClassCastN2N(),": String { // ? is ?
    assertEquals(true, nullToNull(null), ""null is B?"")
    assertEquals(false, nullToNull(A()), ""A? is B?"")
    assertEquals(true, NBtoNB(B()), ""B()? is B?"")
    assertEquals(true, NBtoNB(null), ""null() is B?"")
    assertEquals(true, nullToNull(B()), ""B? is B?"")
    assertEquals(false, nullToNull(C()), ""C? is B?"")
    assertEquals(true, nullToNull(D()), ""D? is B?"")
    assertEquals(true, nullToNull(E()), ""E? is B?"")
    assertEquals(false, nullToNull(F()), ""F? is B?"")
    assertEquals(false, nullToNull(Any()), ""Any? is B?"")
    assertEquals(true, dtoNB(null), ""null dynamic is B?"")

    assertEquals(false, nullToNull({}",,6634
No signature found,fun NBtoB(b: B?) = b,,6e1f
fun testClassCastNN2N(),": String { // ! is ?
    assertEquals(false, notNullToNull(A()), ""A is B?"")
    assertEquals(true, NBtoB(B()), ""B() is B?"")
    assertEquals(false, NBtoB(null), ""null() is B?"")
    assertEquals(true, notNullToNull(B()), ""B is B?"")
    assertEquals(false, notNullToNull(C()), ""C is B?"")
    assertEquals(true, notNullToNull(D()), ""D is B?"")
    assertEquals(true, notNullToNull(E()), ""E is B?"")
    assertEquals(false, notNullToNull(F()), ""F is B?"")
    assertEquals(false, notNullToNull(Any()), ""Any is B?"")
    assertEquals(false, dtoNB(dyn), ""dynamic is B?"")

    assertEquals(false, notNullToNull({}",,68bd
fun BtoNB(b: B),= b,,e8c9
No signature found,fun anyNToAnyNN(a: Any?) = a,,6e1f
fun dtoB(d: dynamic),= d,,e583
fun testClassCastN2NN(),": String { // ? is !
    assertEquals(false, nullToNotNull(null), ""null is B"")
    assertEquals(false, nullToNotNull(A()), ""A? is B"")
    assertEquals(true, BtoNB(B()), ""B() is B?"")
    assertEquals(true, nullToNotNull(B()), ""B? is B"")
    assertEquals(false, nullToNotNull(C()), ""C? is B"")
    assertEquals(true, nullToNotNull(D()), ""D? is B"")
    assertEquals(true, nullToNotNull(E()), ""E? is B"")
    assertEquals(false, nullToNotNull(F()), ""F? is B"")
    assertEquals(false, nullToNotNull(Any()), ""Any? is B"")
    assertEquals(false, dtoB(null), ""null dynamic is B"")
    assertEquals(true, anyNToAnyNN(Any()), ""Any? is Any"")
    assertEquals(false, anyNToAnyNN(null), ""null any is Any"")

    assertEquals(false, nullToNotNull({}",,ed6f
fun testClassCastNN2NN(),": String { // ! is !
    assertEquals(false, notNullToNotNull(A()), ""A is B"")
    assertEquals(true, notNullToNotNull(B()), ""B is B"")
    assertEquals(false, notNullToNotNull(C()), ""C is B"")
    assertEquals(true, notNullToNotNull(D()), ""D is B"")
    assertEquals(true, notNullToNotNull(E()), ""E is B"")
    assertEquals(false, notNullToNotNull(F()), ""F is B"")
    assertEquals(false, notNullToNotNull(Any()), ""Any is B"")
    assertEquals(false, dtoB(dyn), ""dynamic is B"")

    assertEquals(false, notNullToNotNull({}",,8a63
fun testClassCast(),"{
    assertEquals(""OK"", testClassCastN2N())
    assertEquals(""OK"", testClassCastN2NN())
    assertEquals(""OK"", testClassCastNN2N())
    assertEquals(""OK"", testClassCastNN2NN())
}",,0858
fun box(),": String {
    testClassCast()
    return ""OK""
}",,4f27
No signature found,"fun foo(x: Int, y: Int = 2","// TARGET_BACKEND: JVM
// WITH_REFLECT",6e1f
fun box(),": String {
    try {
        ::foo.callBy(mapOf())
        return ""Fail: IllegalArgumentException must have been thrown""
    }",,4f27
"fun findLongestExistingPackage(symbolProvider: FirSymbolProvider, fqName: FqName)",": PackageAndClass {
    var currentPackage = fqName

    val pathSegments = fqName.pathSegments()
    var prefixSize = pathSegments.size
    while (!currentPackage.isRoot && prefixSize > 0) {
        if (symbolProvider.getPackage(currentPackage) != null) {
            break
        }",,5a98
"fun resolveToPackageOrClass(symbolProvider: FirSymbolProvider, fqName: FqName)",": PackageResolutionResult {
    val (currentPackage, relativeClassFqName) = findLongestExistingPackage(symbolProvider, fqName)
    if (relativeClassFqName == null) return PackageResolutionResult.PackageOrClass(currentPackage, null, null)

    val classId = ClassId(currentPackage, relativeClassFqName, isLocal = false)

    return resolveToPackageOrClass(symbolProvider, classId)
}",,03f0
"fun resolveToPackageOrClass(symbolProvider: FirSymbolProvider, classId: ClassId)",": PackageResolutionResult {
    val symbol = symbolProvider.getClassLikeSymbolByClassId(classId) ?: return PackageResolutionResult.Error(
        ConeUnresolvedParentInImport(classId)
    )

    return PackageResolutionResult.PackageOrClass(classId.packageFqName, classId.relativeClassName, symbol)
}",,fbd2
No signature found,fun <reified T> Any?.castTo(): T? = t,// EXPECTED_REACHABLE_NODES: 1286,6e1f
fun box(),": String {
    val a: Any? = A()
    val nil: Any? = null
    val b: Any? = B()

    assertEquals(a, a.castTo<A>(), ""a"")
    assertEquals(null, nil.castTo<A>(), ""nil"")
    assertEquals(null, b.castTo<A>(), ""b"")

    return ""OK""
}",,4f27
"fun main(default: PolicyFromDefault, nickname: PolicyFromNickname)","{
    default.foo(<!NULLABILITY_MISMATCH_BASED_ON_JAVA_ANNOTATIONS!>null<!>).length
    default.foo(""hello"").length

    nickname.foo(<!NULL_FOR_NONNULL_TYPE!>null<!>).length
    nickname.foo(""hello"").length
}","// FIR_IDENTICAL
// !DIAGNOSTICS: -UNUSED_VARIABLE -UNUSED_PARAMETER
// JSR305_GLOBAL_REPORT: warn

// FILE: NonNullApi.java",f197
"fun commonFunctionWithActualization(commonActualization: MyCommonClassWithActualization, common: MyCommonClass)","expect var commonVariableWithActualization: MyCommonClassWithActualization

fun commonFunction1(commonActualization: MyCommonClassWithActualization, common: MyCommonClass) {

}","// mypack.MyFacadeKt
// SKIP_IDE_TEST
// MODULE: main-common
// FILE: commonFile1.kt",37f5
"fun commonFunction2(commonActualization: MyCommonClassWithActualization, common: MyCommonClass)","{

}",,4d64
"fun intermediateFunctionWithActualization(
    commonActualization: MyCommonClassWithActualization,
    intermediateActualization: IntermediateClassWithActualization,
    common: MyCommonClass,
    intermediate: MyIntermediateClass,
)","expect var intermediateVariableWithActualization: IntermediateClassWithActualization

fun intermediateFunction1(
    commonActualization: MyCommonClassWithActualization,
    intermediateActualization: IntermediateClassWithActualization,
    common: MyCommonClass,
    intermediate: MyIntermediateClass,
) {

}",,ecc3
"fun intermediateFunction2(
    commonActualization: MyCommonClassWithActualization,
    intermediateActualization: IntermediateClassWithActualization,
    common: MyCommonClass,
    intermediate: MyIntermediateClass,
)","{

}",,0ac5
"fun jvmFunction1(
    commonActualization: MyCommonClassWithActualization,
    intermediateActualization: IntermediateClassWithActualization,
    common: MyCommonClass,
    intermediate: MyIntermediateClass,
    jvm: MyJvmClass,
)","{

}",,b32a
"fun intermediateFunctionWithActualization(
    commonActualization: MyCommonClassWithActualization,
    intermediateActualization: IntermediateClassWithActualization,
    common: MyCommonClass,
    intermediate: MyIntermediateClass,
)","{

}",,ecc3
"fun commonFunctionWithActualization(
    commonActualization: MyCommonClassWithActualization,
    intermediateActualization: IntermediateClassWithActualization,
    common: MyCommonClass,
    intermediate: MyIntermediateClass,
)","{

}",,27a0
"fun jvmFunction2(
    commonActualization: MyCommonClassWithActualization,
    intermediateActualization: IntermediateClassWithActualization,
    common: MyCommonClass,
    intermediate: MyIntermediateClass,
    jvm: MyJvmClass,
)","{

}",,ec5f
fun run(),"fun interface KRunnable {
    
}","// TARGET_BACKEND: JVM
// JVM_TARGET: 1.8
// SAM_CONVERSIONS: INDY

// CHECK_BYTECODE_TEXT
// JVM_IR_TEMPLATES
// 1 java/lang/invoke/LambdaMetafactory",354f
fun box(),": String {
    KRunnable { test = ""OK"" }",,4f27
"fun check(declaration: FirDeclaration, context: CheckerContext, reporter: DiagnosticReporter)","{
        val closestNonLocal = context.closestNonLocalWith(declaration)?.symbol ?: return

        if (closestNonLocal.isNativeObject(context) || !context.isTopLevel) {
            return
        }",,ee93
fun main(),"{
    <!NEW_INFERENCE_NO_INFORMATION_FOR_PARAMETER!>test<!> {

    }","// !DIAGNOSTICS: -UNREACHABLE_CODE
//KT-2445 Calling method with function with generic parameter causes compile-time exception",d987
No signature found,fun <R> test(callback: (R) -> Unit):Unit = c,,6e1f
No signature found,"fun test(e: Int.() -> String) {
    val s = 3.e()
    val ss = 3.(e)()
}",,6e1f
fun f(q: Any),= q,// FIR_IDENTICAL,9cac
fun lower(irClass: IrClass),"{
        if (irClass.isNonCompanionObject) {
            irClass.handle()
        }",,38ae
No signature found,"fun IrClass.handle() {
        val newDeclarations = declarations.map {
            when (it) {
                is IrProperty -> context.cachedDeclarations.getStaticBackingField(it)?.also { newField ->
                    it.backingField = newField
                    newField.correspondingPropertySymbol = it.symbol
                }",,6e1f
"fun makeAnonymousInitializerStatic(oldInitializer: IrAnonymousInitializer, newParent: IrClass)",": IrAnonymousInitializer =
        w",,04fd
"fun copyConstProperty(oldProperty: IrProperty, newParent: IrClass)",": IrField {
        val oldField = oldProperty.backingField!!
        return newParent.addField {
            updateFrom(oldField)
            name = oldField.name
            isStatic = true
        }",,d8be
fun lower(irFile: IrFile),= i,,a3a5
No signature found,"fun IrField.remap(): IrField? =
        c",,6e1f
fun visitGetField(expression: IrGetField),": IrExpression =
        e",,5d2a
fun visitSetField(expression: IrSetField),": IrExpression =
        e",,72c7
"fun serializePackageFragment(fqName: FqName, module: ModuleDescriptor)",": List<ProtoBuf.PackageFragment> {

        val fragments = if (includeOnlyModuleContent) {
            module.packageFragmentProviderForModuleContentWithoutDependencies.packageFragments(fqName)
        }",,727d
fun serializeModule(moduleDescriptor: ModuleDescriptor),": SerializedMetadata {

        val fragments = mutableListOf<List<ByteArray>>()
        val fragmentNames = mutableListOf<String>()
        val emptyPackages = mutableListOf<String>()

        for (packageFqName in getPackagesFqNames(moduleDescriptor)) {
            val packageProtos =
                serializePackageFragment(packageFqName, moduleDescriptor)
            if (packageProtos.isEmpty()) continue

            val packageFqNameStr = packageFqName.asString()

            if (packageProtos.all { it.getExtension(KlibMetadataProtoBuf.isEmpty) }",,3fee
fun main(args: Array<String>),"{
    var nextUnnamedLibraryIndex = 1
    val originalName = ""${<expr>nextUnnamedLibraryIndex++</expr>}",,5b61
fun run(ktFiles: Collection<KtFile>),"{
        for (ktFile in ktFiles.toSet()) {
            for (ktDeclaration in ktFile.declarations) {
                processDeclaration(ktDeclaration)
            }",,b0cf
fun processDeclaration(ktDeclaration: KtDeclaration),"{
        when (ktDeclaration) {
            is KtClassOrObject ->
                processClassOrObject(ktDeclaration)
        }",,e3df
fun processClassOrObject(ktClassOrObject: KtClassOrObject),"{
        val classDescriptor = ktClassOrObject.findClassDescriptor(context.bindingContext)
        if (DescriptorUtils.isEnumEntry(classDescriptor)) return
        context.symbolTable.descriptorExtension.referenceClass(classDescriptor)
        ktClassOrObject.body?.let { ktClassBody ->
            ktClassBody.declarations.forEach { processDeclaration(it) }",,68b6
fun configure(builder: TestConfigurationBuilder),"{
        super.configure(builder)
        builder.configureForKotlinxJsPlainObjects()
    }",,f283
fun fifth(arg: Color),= w,,26a5
No signature found,fun inlineFoo(f: () -> Int) = f,,6e1f
fun <T> parseAs(dataClass : MyClass<T>),": T {
        throw Exception()
    }","// FIR_IDENTICAL
// !CHECK_TYPE

//KT-2505 Type mismatch: inferred type is T but T was expected",3530
fun parseAs(dataType : MyType),": Any? {
        return null
    }",,c9e6
"fun <R> test (httpResponse: HttpResponse, rtype: MyClass<R>)","{
    val res = httpResponse.parseAs( rtype )
    checkSubtype<R>(res) //type mismatch: required R, found T
}",,c058
No signature found,"fun createTypeAliasStub(
    parent: StubElement<out PsiElement>,
    typeAliasProto: ProtoBuf.TypeAlias,
    protoContainer: ProtoContainer,
    outerContext: ClsStubBuilderContext
) {
    val c = outerContext.child(typeAliasProto.typeParameterList)
    val shortName = c.nameResolver.getName(typeAliasProto.name)

    val classId = when (protoContainer) {
        is ProtoContainer.Class -> protoContainer.classId.createNestedClassId(shortName)
        is ProtoContainer.Package -> ClassId.topLevel(protoContainer.fqName.child(shortName))
    }",// Copyright 2000-2021 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.,6e1f
fun isGeneratorSuspendStep(value: dynamic),": Boolean {
    return value != null && value.constructor === GeneratorFunction
}",,5b87
No signature found,fun next(value: Any? = d,,6e1f
No signature found,fun throws(exception: Throwable = d,,6e1f
fun dropLastIterator(),"{
        jsIterators.asDynamic().pop()
    }",,a933
No signature found,"fun addNewIterator(iterator: JsIterator<Any?>) {
        jsIterators.asDynamic().push(iterator)
    }",,6e1f
fun getLastIterator(),: JsIterator<Any?> = j,,9fdc
fun shouldResumeImmediately(),: Boolean = u,,4a5b
No signature found,"fun resumeWith(result: Result<Any?>) {
        if (unknown.value === savedResult.value) savedResult = result
        if (isRunning) return

        var currentResult: Any? = savedResult.getOrNull()
        var currentException: Throwable? = savedResult.exceptionOrNull()

        savedResult = unknown

        var current = this

        while (true) {
            while (!current.isCompleted) {
                val jsIterator = current.getLastIterator()
                val exception = currentException.also { currentException = null }",,6e1f
fun bytesToStrings(bytes: ByteArray),": Array<String> {
    val result = ArrayList<String>(1)
    val buffer = StringBuilder()
    var bytesInBuffer = 0

    buffer.append(UTF8_MODE_MARKER)
    // Zeros effectively occupy two bytes because each 0x0 is converted to 0x80 0xc0 in Modified UTF-8, see JVMS7 4.4.7
    bytesInBuffer += 2

    for (b in bytes) {
        val c = b.toInt() and 0xFF // 0 <= c <= 255
        buffer.append(c.toChar())
        if (b in 1..127) {
            bytesInBuffer++
        }",,e5c3
fun stringsToBytes(strings: Array<String>),": ByteArray {
    val resultLength = strings.sumOf { it.length }",,756d
"fun test(a: Char, b: Char)",": String {
    var s = """"
    for (i in a..<b) {
        s += i
    }","// !OPT_IN: kotlin.ExperimentalStdlibApi
// IGNORE_BACKEND: JVM

// IMPORTANT!
// Please, when your changes cause failures in bytecodeText tests for 'for' loops,
// examine the resulting bytecode shape carefully.
// Range and progression-based loops generated with Kotlin compiler should be
// as close as possible to Java counter loops ('for (int i = a; i < b; ++i) { ... }').
// Otherwise it may result in performance regression due to missing HotSpot optimizations.
// Run Kotlin compiler benchmarks (https://github.com/Kotlin/kotlin-benchmarks)
// with compiler built from your changes if you are not sure.",1436
fun f(),{},// TARGET_BACKEND: JVM_IR,f6fb
fun g(),= :,,4958
fun box(),": String {
    val list1 = ArrayList<Int>()
    val range1 = 1..<5
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }","// DONT_TARGET_EXACT_BACKEND: JVM
// Auto-generated by org.jetbrains.kotlin.generators.tests.GenerateRangesCodegenTestData. DO NOT EDIT!
// !LANGUAGE: +RangeUntilOperator
// WITH_STDLIB",4f27
fun box(),": String {
    val ax: Long? = 0L
    return if (ax != x) ""Fail"" else ""OK""
}",,4f27
fun printMessages(),"{
    Message.HELLO.text!!
    <!DEBUG_INFO_SMARTCAST!>Message.HELLO.text<!>.length

    <!DEBUG_INFO_SMARTCAST!>Message.NOTHING.text<!>.length

    Message.NOTHING.text<!UNNECESSARY_NOT_NULL_ASSERTION!>!!<!>
    <!DEBUG_INFO_SMARTCAST!>Message.NOTHING.text<!>.length
}","// !LANGUAGE: -SoundSmartcastForEnumEntries
// !DIAGNOSTICS: -UNUSED_VARIABLE
// SKIP_TXT",6a16
fun call(),"{
    val a = <expr>A()</expr>
}",// FILE: call.kt,f930
No signature found,fun IrBuilderWithScope.irConstantString(string: String) = i,,6e1f
No signature found,fun IrBuilderWithScope.irConstantInt(int: Int) = i,,6e1f
No signature found,fun IrBuilderWithScope.irConstantBoolean(boolean: Boolean) = i,,6e1f
No signature found,"fun IrBuilderWithScope.irKType(type: IrType, leaveReifiedForLater: Boolean = f",,6e1f
No signature found,"fun IrBuilderWithScope.irKType(
            type: IrType,
            leaveReifiedForLater: Boolean,
            seenTypeParameters: MutableSet<IrTypeParameter>
    ): IrConstantValue {
        if (type !is IrSimpleType) {
            // Represent as non-denotable type:
            return irKTypeImpl(
                kClassifier = irConstantPrimitive(irNull()),
                irTypeArguments = emptyList(),
                isMarkedNullable = false,
                leaveReifiedForLater = leaveReifiedForLater,
                seenTypeParameters = seenTypeParameters,
                type = type,
            )
        }",,6e1f
No signature found,"fun IrBuilderWithScope.irKTypeImpl(
        kClassifier: IrConstantValue,
        irTypeArguments: List<IrTypeArgument>,
        isMarkedNullable: Boolean,
        leaveReifiedForLater: Boolean,
        seenTypeParameters: MutableSet<IrTypeParameter>,
        type: IrType,
    ): IrConstantValue = i",,6e1f
No signature found,fun IrBuilderWithScope.irKClass(symbol: IrClassSymbol) = i,,6e1f
No signature found,"fun IrBuilderWithScope.irKTypeParameter(
            typeParameter: IrTypeParameter,
            leaveReifiedForLater: Boolean,
            seenTypeParameters: MutableSet<IrTypeParameter>
    ): IrConstantValue {
        if (!seenTypeParameters.add(typeParameter))
            throw RecursiveBoundsException(""Non-reified type parameters with recursive bounds are not supported yet: ${typeParameter.render()}",,6e1f
No signature found,"fun IrBuilderWithScope.irKTypeArray(
            types: List<IrType>,
            leaveReifiedForLater: Boolean,
            seenTypeParameters: MutableSet<IrTypeParameter>
    ): IrConstantValue {
        val itemType = symbols.kType.defaultType
        return irConstantArray(symbols.array.typeWith(itemType),
                types.map { irKType(it, leaveReifiedForLater, seenTypeParameters) }",,6e1f
fun mapVariance(variance: Variance),= w,,1337
No signature found,"fun IrBuilderWithScope.irKTypeProjectionsList(
            irTypeArguments: List<IrTypeArgument>,
            leaveReifiedForLater: Boolean,
            seenTypeParameters: MutableSet<IrTypeParameter>
    ): IrConstantValue {
        val variance = irConstantArray(
                symbols.intArrayType,
                irTypeArguments.map { argument ->
                    when (argument) {
                        is IrStarProjection -> irConstantInt(-1)
                        is IrTypeProjection -> irConstantInt(mapVariance(argument.variance))
                    }",,6e1f
No signature found,"fun IrBuilderWithScope.irKClass(context: KonanBackendContext, symbol: IrClassSymbol): IrConstantValue {
    val symbols = context.ir.symbols

    fun IrClass.isNativePointedChild() : Boolean =
            this.symbol == context.ir.symbols.nativePointed || getSuperClassNotAny()?.isNativePointedChild() == true

    return when {
        symbol.owner.isObjCClass() ->
            irKClassUnsupported(context, ""KClass for Objective-C classes is not supported yet"")

        symbol.owner.isNativePointedChild() ->
            irKClassUnsupported(context, ""KClass for interop types is not supported yet"")

        else -> irConstantObject(symbols.kClassImplIntrinsicConstructor, emptyList(), listOf(symbol.starProjectedType))
    }",,6e1f
No signature found,"fun IrBuilderWithScope.irKClassUnsupported(context: KonanBackendContext, message: String) =
        i",,6e1f
fun publicMemberK(),{},"// TARGET_BACKEND: JVM

// WITH_REFLECT
// FILE: J.java",010f
fun privateMemberK(),{},,7d68
No signature found,fun Any.publicMemberExtensionK() {},,6e1f
No signature found,fun Any.privateMemberExtensionK() {},,6e1f
No signature found,"fun Collection<KFunction<*>>.names(): Set<String> =
        t",,6e1f
No signature found,"fun check(c: Collection<KFunction<*>>, names: Set<String>) {
    assertEquals(names, c.names())
}",,6e1f
fun box(),": String {
    val any = setOf(""equals"", ""hashCode"", ""toString"")

    val j = J::class

    check(j.staticFunctions,
          setOf(""publicStaticJ"", ""privateStaticJ""))
    check(j.declaredFunctions,
          setOf(""publicMemberJ"", ""privateMemberJ"", ""publicStaticJ"", ""privateStaticJ""))
    check(j.declaredMemberFunctions,
          setOf(""publicMemberJ"", ""privateMemberJ""))
    check(j.declaredMemberExtensionFunctions,
          emptySet())

    check(j.functions, any + j.declaredFunctions.names())
    check(j.memberFunctions, any + j.declaredMemberFunctions.names())
    check(j.memberExtensionFunctions, emptySet())

    val k = K::class

    check(k.staticFunctions,
          emptySet())
    check(k.declaredFunctions,
          setOf(""publicMemberK"", ""privateMemberK"", ""publicMemberExtensionK"", ""privateMemberExtensionK""))
    check(k.declaredMemberFunctions,
          setOf(""publicMemberK"", ""privateMemberK""))
    check(k.declaredMemberExtensionFunctions,
          setOf(""publicMemberExtensionK"", ""privateMemberExtensionK""))

    check(k.memberFunctions, any + setOf(""publicMemberJ"") + k.declaredMemberFunctions.names())
    check(k.memberExtensionFunctions, k.declaredMemberExtensionFunctions.names())
    check(k.functions, any + (k.memberFunctions + k.memberExtensionFunctions).names())


    val l = L::class

    check(l.staticFunctions, emptySet())
    check(l.declaredFunctions, emptySet())
    check(l.declaredMemberFunctions, emptySet())
    check(l.declaredMemberExtensionFunctions, emptySet())
    check(l.memberFunctions, any + setOf(""publicMemberJ"", ""publicMemberK""))
    check(l.memberExtensionFunctions, setOf(""publicMemberExtensionK""))
    check(l.functions, any + (l.memberFunctions + l.memberExtensionFunctions).names())

    return ""OK""
}",,4f27
fun foo(a: Any),= t,,e406
fun test(),= t,,fe98
fun get(index: Int),= t,,60cf
fun i(),= 0,,bb6d
fun bar(),= T,,66c3
fun test(),"{
    val t = Test()
    val s = t

    /*false*/t.test()
    /*false*/t.test()!!
    /*false*/t.test()?.test
    /*false*/t.test()[0]
    /*false*/t.test[0]
    /*false*/t.test[t.i()]!!

    /*false*/t.test
    /*false*/t!!.test
    /*false*/t?.test

    t[/*false*/s.i()]
    t[/*false*/s!!.i()]
    t[/*false*/s?.i()]
    t[/*false*/s[0]?.i()]

    /*false*/t[0].test
    /*false*/t[0]!!.test
    /*false*/t[0]?.test

    bar()./*true*/test
    bar()!!./*true*/test
    bar()?./*true*/test

    t[0]./*true*/test()
    t[0]!!./*true*/test()
    t[0]?./*true*/test()

    t.foo(/*false*/t.test)
    t.foo(/*false*/t!!.test)
    t.foo(/*false*/t?.test)
    t.foo(/*false*/t[0].test)

    t.foo(t./*true*/test())
    t.foo(t!!./*true*/test)
    t.foo(t?./*true*/test())
    t.foo(t[0]./*true*/test)

    /*false*/t.i++
    /*false*/t!!.i++
    /*false*/t?.i++
    /*false*/t[0].i++
    /*false*/t.test.i++

    t./*true*/i++
    t!!./*true*/i++
    t?./*true*/i++
    t[0]./*true*/i++
    t.test./*true*/i++

    val t1 = 1
    val t2 = /*false*/t1

    /*false*/t1 + /*false*/t2
}",,fe98
"fun foo(x: T, y: U)","{
        sb.appendLine(x.toString())
        sb.appendLine(y.toString())
    }",,8ff9
"fun foo(x: Int, y: T)","}

interface I2<T> {
    fun foo(x: T, y: Int)
}",,1b72
"fun foo(x: Int, y: Int)","{
        z = x
        q = y
    }",,fe3a
"fun zzz(a: A<Int, Int>)","{
    a.foo(42, 56)
}",,c7be
fun box(),": String {
    val b = B()
    zzz(b)
    val a = A<Int, Int>()
    zzz(a)
    sb.appendLine(b.z.toString())
    sb.appendLine(b.q.toString())
    val i1: I1<Int> = b
    i1.foo(56, 42)
    sb.appendLine(b.z.toString())
    sb.appendLine(b.q.toString())
    val i2: I2<Int> = b
    i2.foo(156, 142)
    sb.appendLine(b.z.toString())
    sb.appendLine(b.q.toString())

    assertEquals(""""""
        42
        56
        42
        56
        56
        42
        156
        142

    """""".trimIndent(), sb.toString())
    return ""OK""
}",,4f27
fun foo(),= 2,// FIR_IDENTICAL,519f
fun baz(),= 2,,b22f
No signature found,fun T.bar() = 2,,6e1f
fun test(foo: Foo),"{
    <caret_context>foo.call()
}","// !LANGUAGE: +MultiPlatformProjects

// MODULE: common
// TARGET_PLATFORM: Common

// FILE: Common.kt",741b
fun call(),"}


// MODULE: main
// MODULE_KIND: CodeFragment
// CONTEXT_MODULE: common

// FILE: fragment.kt
// CODE_FRAGMENT_KIND: EXPRESSION
foo.call()


// MODULE: jvm()()(common)
// TARGET_PLATFORM: JVM

// FILE: Jvm.kt
package test

actual class Foo {
     {}",,f930
No signature found,"fun IrSetValueImpl(
    startOffset: Int,
    endOffset: Int,
    type: IrType,
    symbol: IrValueSymbol,
    value: IrExpression,
    origin: IrStatementOrigin?,
): IrSetValueImpl {
    if (symbol.isBound) {
        assert(symbol.owner.isAssignable) { ""Only assignable IrValues can be set"" }",,6e1f
fun test(e : Any),"{
    if (e is C) {
        (e.f)()
    }",,cffc
No signature found,fun foo1(f: suspend () -> String) {},"// !LANGUAGE: +SuspendConversion
// !DIAGNOSTICS: -UNUSED_PARAMETER",6e1f
No signature found,fun foo2(f: suspend (Int) -> String) {},,6e1f
No signature found,fun foo3(f: suspend () -> Unit) {},,6e1f
No signature found,"fun test(
    f0: suspend () -> String,
    f1: () -> String,
    f2: (Int) -> String,
    f3: () -> Unit,
) {
    foo1 { ""str"" }",,6e1f
fun main(),"{
    val derivedList: List<Base> = <!UNRESOLVED_REFERENCE!>listOf<!>(Derived(), Derived(), Derived())

    for (derived: <!INITIALIZER_TYPE_MISMATCH!>Derived<!> in derivedList) {
    }",,d987
fun contains(key: KEY),": Boolean

    operator fun get(key: KEY): VALUE?

    operator fun set(key: KEY, value: VALUE)

    fun remove(key: KEY)

    /** Writes any remaining in-memory changes to [storageFile]. */
    fun flush()

    /** Writes any remaining in-memory changes to [storageFile] ([flush]) and closes this map. */
    override fun close()
}

/** [PersistentStorage] where a map entry's value is a [Collection] of elements of type [E]. */
interface AppendablePersistentStorage<KEY, E> : PersistentStorage<KEY, Collection<E>> {

    /** Adds the given [elements] to the collection corresponding to the given [key]. */
    fun append(key: KEY, elements: Collection<E>)

    /** Adds the given [element] to the collection corresponding to the given [key]. */
    fun append(key: KEY, element: E) {
        append(key, listOf(element))
    }",,4524
fun contains(key: KEY),": Boolean =
        s",,4524
fun get(key: KEY),": VALUE? =
        s",,ff18
"fun set(key: KEY, value: VALUE)","{
        storage[key] = value
    }",,0103
fun remove(key: KEY),"{
        storage.remove(key)
    }",,cd3a
fun flush(),"{
        storage.flush()
    }",,3748
fun close(),"{
        storage.close()
    }",,7e58
"fun append(key: KEY, elements: Collection<E>)","{
        appendableStorage.append(key, elements)
    }",,5775
fun getText(),": String
    fun getParent(): PsiElement
}

interface JetExpression : PsiElement

fun foo1(e: PsiElement) {
    var current: PsiElement? = e
    var first = true
    while (current != null) {
        if (current is JetExpression && first) {
            // Smartcast is possible here
            println(<!DEBUG_INFO_SMARTCAST!>current<!>.getText())
        }",,dac9
No signature found,fun println(any: Any?): Nothing = t,,6e1f
No signature found,fun <T> checkExactType(expr: @kotlin.internal.Exact T) {},,6e1f
No signature found,"fun <T> checkTypeEquality(reference: @kotlin.internal.Exact T, expr: @kotlin.internal.Exact T) {}",,6e1f
fun box(),": String {
    with(0) {
        Child()
    }","// !LANGUAGE: +ContextReceivers
// TARGET_BACKEND: JVM_IR",4f27
No signature found,fun foo(block: () -> String) = b,"// NO_CHECK_LAMBDA_INLINING
// IGNORE_BACKEND: JVM
// IGNORE_BACKEND_MULTI_MODULE: JVM, JVM_MULTI_MODULE_OLD_AGAINST_IR
// FILE: 1.kt",6e1f
fun box(),= f,,4f27
fun local(),= l,,cb31
No signature found,fun localInline(block: (String) -> String) = b,,6e1f
fun main(),"{
    // Generates IF_ICMPEQ and GOTO
    while (!(a == 42)) {
        ""loop""
    }",,d987
No signature found,"fun sayHello(greeting: String = ""","// JVM_TARGET: 1.8
// TARGET_BACKEND: JVM

// WITH_STDLIB
// FILE: Test.java",6e1f
No signature found,"fun sayHello(greeting: String = """,,6e1f
fun box(),": String {
    if (Test.test1() != ""OK"") return ""fail 1""

    if (Test.test2() != ""OK"") return ""fail 2""

    return ""OK""
}",,4f27
No signature found,"fun type(proto: ProtoBuf.Type): KotlinType {
        if (proto.hasFlexibleTypeCapabilitiesId()) {
            val id = c.nameResolver.getString(proto.flexibleTypeCapabilitiesId)
            val lowerBound = simpleType(proto)
            val upperBound = simpleType(proto.flexibleUpperBound(c.typeTable)!!)
            return c.components.flexibleTypeDeserializer.create(proto, id, lowerBound, upperBound)
        }",,6e1f
No signature found,"fun List<TypeAttributeTranslator>.toAttributes(
        annotations: Annotations,
        constructor: TypeConstructor,
        containingDeclaration: DeclarationDescriptor
    ): TypeAttributes {
        val translated = this.map { translator ->
            translator.toAttributes(annotations, constructor, containingDeclaration)
        }",,6e1f
No signature found,"fun simpleType(proto: ProtoBuf.Type, expandTypeAliases: Boolean = t",,6e1f
No signature found,"fun ProtoBuf.Type.collectAllArguments(): List<ProtoBuf.Type.Argument> =
            a",,6e1f
fun notFoundClass(classIdIndex: Int),"fun typeConstructor(proto: ProtoBuf.Type): TypeConstructor {
        : ClassDescriptor {
            val classId = c.nameResolver.getClassId(classIdIndex)
            val typeParametersCount = generateSequence(proto) { it.outerType(c.typeTable) }",,30ae
"fun createSuspendFunctionType(
        attributes: TypeAttributes,
        functionTypeConstructor: TypeConstructor,
        arguments: List<TypeProjection>,
        nullable: Boolean
    )",": SimpleType {
        val result = when (functionTypeConstructor.parameters.size - arguments.size) {
            0 -> createSuspendFunctionTypeForBasicCase(attributes, functionTypeConstructor, arguments, nullable)
            // This case for types written by eap compiler 1.1
            1 -> {
                val arity = arguments.size - 1
                if (arity >= 0) {
                    KotlinTypeFactory.simpleType(
                        attributes,
                        functionTypeConstructor.builtIns.getSuspendFunction(arity).typeConstructor,
                        arguments,
                        nullable
                    )
                }",,ac5e
"fun createSuspendFunctionTypeForBasicCase(
        attributes: TypeAttributes,
        functionTypeConstructor: TypeConstructor,
        arguments: List<TypeProjection>,
        nullable: Boolean
    )",": SimpleType? {
        val functionType = KotlinTypeFactory.simpleType(attributes, functionTypeConstructor, arguments, nullable)
        return if (!functionType.isFunctionType) null
        else transformRuntimeFunctionTypeToSuspendFunction(functionType)
    }",,6fc5
fun transformRuntimeFunctionTypeToSuspendFunction(funType: KotlinType),": SimpleType? {
        val continuationArgumentType = funType.getValueParameterTypesFromFunctionType().lastOrNull()?.type ?: return null
        val continuationArgumentFqName = continuationArgumentType.constructor.declarationDescriptor?.fqNameSafe
        // Before 1.6 we put experimental continuation as last parameter of suspend functional types to .kotlin_metadata files.
        // Read them as suspend functional types instead of ordinary types with experimental continuation parameter.
        if (continuationArgumentType.arguments.size != 1 ||
            !(continuationArgumentFqName == CONTINUATION_INTERFACE_FQ_NAME || continuationArgumentFqName == EXPERIMENTAL_CONTINUATION_FQ_NAME)
        ) {
            return funType as SimpleType?
        }",,358c
"fun createSimpleSuspendFunctionType(
        funType: KotlinType,
        suspendReturnType: KotlinType
    )",": SimpleType {
        return createFunctionType(
            funType.builtIns,
            funType.annotations,
            funType.getReceiverTypeFromFunctionType(),
            funType.getContextReceiverTypesFromFunctionType(),
            funType.getValueParameterTypesFromFunctionType().dropLast(1).map(TypeProjection::getType),
            // TODO: names
            null,
            suspendReturnType,
            suspendFunction = true
        ).makeNullableAsSpecified(funType.isMarkedNullable)
    }",,0835
fun loadTypeParameter(typeParameterId: Int),": TypeParameterDescriptor? =
        t",,41ab
fun computeClassifierDescriptor(fqNameIndex: Int),": ClassifierDescriptor? {
        val id = c.nameResolver.getClassId(fqNameIndex)
        if (id.isLocal) {
            // Local classes can't be found in scopes
            return c.components.deserializeClass(id)
        }",,e729
fun computeLocalClassifierReplacementType(className: Int),": SimpleType? {
        if (c.nameResolver.getClassId(className).isLocal) {
            return c.components.localClassifierTypeSettings.replacementTypeForLocalClassifiers
        }",,935a
fun computeTypeAliasDescriptor(fqNameIndex: Int),": ClassifierDescriptor? {
        val id = c.nameResolver.getClassId(fqNameIndex)
        return if (id.isLocal) {
            // TODO: support deserialization of local type aliases (see KT-13692)
            return null
        }",,f87b
No signature found,"fun typeArgument(parameter: TypeParameterDescriptor?, typeArgumentProto: ProtoBuf.Type.Argument): TypeProjection {
        if (typeArgumentProto.projection == ProtoBuf.Type.Argument.Projection.STAR) {
            return if (parameter == null)
                StarProjectionForAbsentTypeParameter(c.components.moduleDescriptor.builtIns)
            else
                StarProjectionImpl(parameter)
        }",,6e1f
fun toString(),= d,,a535
"fun <S> renderAnnotationsModifiersAndContextReceivers(
    symbol: S,
    printer: PrettyPrinter,
    keyword: KtKeywordToken,
)",": Unit where S : KtAnnotated, S : KtDeclarationSymbol = p",,f8d8
"fun <S> renderAnnotationsModifiersAndContextReceivers(
    symbol: S,
    printer: PrettyPrinter,
    keywords: List<KtKeywordToken>,
)",": Unit where S : KtAnnotated, S : KtDeclarationSymbol = p",,130d
"fun <S> renderAnnotationsModifiersAndContextReceivers(
    symbol: S,
    printer: PrettyPrinter,
)",": Unit where S : KtAnnotated, S : KtDeclarationSymbol = p",,075b
"fun renderContextReceivers(symbol: KtDeclarationSymbol, printer: PrettyPrinter)",: Unit = p,,133c
fun foo(),": Triple<S, Q, U> = T",// WITH_STDLIB,519f
fun dispose(),"{
        val originalBindingContext = bindingContext as? CleanableBindingContext
                ?: error(""BindingContext should be cleanable in K/N IR to avoid leaking memory: $bindingContext"")
        originalBindingContext.clear()
    }",,94b2
fun foo(x: Any),{},"// SKIP_TXT
// FIR_IDENTICAL",d233
fun foo(x: String),{},,f5be
fun foo(x: Any),"{
        super.foo(x)
    }",,d233
fun foo(x: String),"{
        super.foo(x)
    }",,f5be
fun bar(a: A),"{
    if (a is B) {
        a.foo("""")
    }",,02ec
No signature found,"fun getValue(thisRef: R, desc: KProperty<*>) = t",,6e1f
No signature found,"fun setValue(thisRef: R, desc: KProperty<*>, value: String?) { log += ""set""}",,6e1f
fun box(),": String {
    return ""O"".calc
}",,4f27
No signature found,"fun <M : KtModule> addModule(module: M): M {
        mainModules.add(module)
        return module
    }",,6e1f
fun build(),": KtStaticProjectStructureProvider {
        return KtStandaloneProjectStructureProvider(
            platform,
            kotlinCoreProjectEnvironment.project,
            mainModules,
        )
    }",,5bf9
No signature found,"fun buildProjectStructureProvider(
    kotlinCoreProjectEnvironment: KotlinCoreProjectEnvironment,
    init: KtModuleProviderBuilder.() -> Unit,
): KtStaticProjectStructureProvider {
    contract {
        callsInPlace(init, InvocationKind.EXACTLY_ONCE)
    }",,6e1f
fun foo(a: Any),": Int {
    if (a is IntArray) {
        a.get(0)
        a.set(0, 1)
        a.iterator()
        return a.size
    }",//KT-2997 Automatically cast error (Array),e406
fun box(),": String {
    // Only run this test if primitive array `is` checks work (KT-17137)
    if ((intArrayOf() as Any) is Array<*>) return ""OK""

    val iA = IntArray(1)
    if (foo(iA) != 1) return ""fail int[]""
    val sA = ShortArray(1)
    if (foo(sA) != 1) return ""fail short[]""
    val bA = ByteArray(1)
    if (foo(bA) != 1) return ""fail byte[]""
    val fA = FloatArray(1)
    if (foo(fA) != 1) return ""fail float[]""
    val dA = DoubleArray(1)
    if (foo(dA) != 1) return ""fail double[]""
    val boolA = BooleanArray(1)
    if (foo(boolA) != 1) return ""fail boolean[]""
    val cA = CharArray(1)
    if (foo(cA) != 1) return ""fail char[]""
    val oA = arrayOfNulls<Int>(1)
    if (foo(oA) != 1) return ""fail Any[]""

    val sArray = arrayOfNulls<String>(0)
    if (foo(sArray) != 0) return ""fail String[]""

    return ""OK""
}",,4f27
No signature found,"fun getValue(thisRef: R, desc: KProperty<*>): T {
        throw Exception(""$thisRef $desc"")
    }","// FIR_IDENTICAL
// NI_EXPECTED_FILE",6e1f
No signature found,"fun setValue(thisRef: R, desc: KProperty<*>, t: T) {
        throw Exception(""$thisRef $desc $t"")
    }",,6e1f
fun foo(),{},"// FIR_IDENTICAL
// MODULE: m1
// FILE: x.kt",519f
fun foo(),{},,519f
fun foo(),{},,519f
"fun _is_l(e: Either<C1, C2>)",": Any {
    if (e !is Left) {
        return e
    }","// FIR_IDENTICAL
// !DIAGNOSTICS: -DEBUG_INFO_SMARTCAST",b476
"fun _is_r(e: Either<C1, C2>)",": Any {
    if (e !is Right) {
        return e
    }",,b424
fun box(),": String {
    val ls = listOf(""OK"").map(::Wrapper)
    return ls[0].value
}",// WITH_STDLIB,4f27
No signature found,"fun interface KtFirDiagnostic0Creator : KtFirDiagnosticCreator {
    fun KtFirAnalysisSession.create(diagnostic: KtSimpleDiagnostic): KtFirDiagnostic<*>
}",,6e1f
No signature found,"fun interface KtFirDiagnostic1Creator<A> : KtFirDiagnosticCreator {
    fun KtFirAnalysisSession.create(diagnostic: KtDiagnosticWithParameters1<A>): KtFirDiagnostic<*>
}",,6e1f
No signature found,"fun interface KtFirDiagnostic2Creator<A, B> : KtFirDiagnosticCreator {
    fun KtFirAnalysisSession.create(diagnostic: KtDiagnosticWithParameters2<A, B>): KtFirDiagnostic<*>
}",,6e1f
No signature found,"fun interface KtFirDiagnostic3Creator<A, B, C> : KtFirDiagnosticCreator {
    fun KtFirAnalysisSession.create(diagnostic: KtDiagnosticWithParameters3<A, B, C>): KtFirDiagnostic<*>
}",,6e1f
No signature found,"fun interface KtFirDiagnostic4Creator<A, B, C, D> : KtFirDiagnosticCreator {
    fun KtFirAnalysisSession.create(diagnostic: KtDiagnosticWithParameters4<A, B, C, D>): KtFirDiagnostic<*>
}",,6e1f
"fun convert(analysisSession: KtFirAnalysisSession, diagnostic: KtDiagnostic)",": KtFirDiagnostic<*> {
        val creator = conversions[diagnostic.factory] ?: buildCreatorForPluginDiagnostic(diagnostic.factory)

        @Suppress(""UNCHECKED_CAST"")
        return with(analysisSession) {
            when (creator) {
                is KtFirDiagnostic0Creator -> with(creator) {
                    create(diagnostic as KtSimpleDiagnostic)
                }",,f4ed
fun buildCreatorForPluginDiagnostic(factory: AbstractKtDiagnosticFactory),": KtFirDiagnosticCreator {
        return when (factory) {
            is KtDiagnosticFactory0 -> KtFirDiagnostic0Creator {
                KtCompilerPluginDiagnostic0Impl(it as KtPsiSimpleDiagnostic, token)
            }",,4ab1
"fun add(diagnostic: KtDiagnosticFactory0, creator: KtFirDiagnostic0Creator)","{
        conversions[diagnostic] = creator
    }",,8b07
"fun <A> add(diagnostic: KtDiagnosticFactory1<A>, creator: KtFirDiagnostic1Creator<A>)","{
        conversions[diagnostic] = creator
    }",,d7ec
"fun <A, B> add(diagnostic: KtDiagnosticFactory2<A, B>, creator: KtFirDiagnostic2Creator<A, B>)","{
        conversions[diagnostic] = creator
    }",,5d5e
"fun <A, B, C> add(diagnostic: KtDiagnosticFactory3<A, B, C>, creator: KtFirDiagnostic3Creator<A, B, C>)","{
        conversions[diagnostic] = creator
    }",,39c8
"fun <A, B, C, D> add(diagnostic: KtDiagnosticFactory4<A, B, C, D>, creator: KtFirDiagnostic4Creator<A, B, C, D>)","{
        conversions[diagnostic] = creator
    }",,62ec
fun build(),= K,,5bf9
No signature found,"fun buildConverter(init: KtDiagnosticConverterBuilder.() -> Unit) =
            K",,6e1f
No signature found,"fun generate(resolvedCall: ResolvedCall<*>?, codegen: ExpressionCodegen, returnType: Type, receiver: StackValue): StackValue? {
        val value = getStackValue(resolvedCall ?: return null, codegen) ?: return null
        return StackValue.compareWithNull(value, Opcodes.IFNULL)
    }",,6e1f
No signature found,"fun getStackValue(resolvedCall: ResolvedCall<*>, codegen: ExpressionCodegen): StackValue? {
    val expression =
            (resolvedCall.extensionReceiver as? ExpressionReceiver)?.expression as? KtCallableReferenceExpression ?: return null
    val referenceResolvedCall = expression.callableReference.getResolvedCallWithAssert(codegen.bindingContext)
    val receiver = codegen.generateCallableReferenceReceiver(referenceResolvedCall) ?: StackValue.none()
    val target = referenceResolvedCall.resultingDescriptor as PropertyDescriptor
    return codegen.intermediateValueForProperty(target, true, false, null, false, receiver, null, true)
}",,6e1f
No signature found,fun vararg(vararg p0: String?): Unit = U,,6e1f
fun box(),": String {
    assertEquals(""kotlin.String!"", J::string.returnType.toString())
    assertEquals(""kotlin.collections.(Mutable)List<kotlin.Any!>!"", J::list.returnType.toString())

    return ""OK""
}","// TARGET_BACKEND: JVM

// WITH_REFLECT
// FILE: J.java",4f27
fun toString(),": String {
        return ""CompilationOptions("" +
               ""compilerMode=$compilerMode, "" +
               ""targetPlatform=$targetPlatform, "" +
               ""reportCategories=${Arrays.toString(reportCategories)}",,a535
fun toString(),": String {
        return ""IncrementalCompilationOptions("" +
                ""super=${super.toString()}",,a535
fun domainToASCII(domain: String),": String
        fun domainToUnicode(domain: String): String
        fun createObjectURL(mediaSource: MediaSource): String
        fun createObjectURL(blob: Blob): String
        fun createFor(blob: Blob): String
        fun revokeObjectURL(url: String)
    }
}

/**
 * Exposes the JavaScript [URLSearchParams](https://developer.mozilla.org/en/docs/Web/API/URLSearchParams) to Kotlin
 */
public external open class URLSearchParams(init: JsAny? /* String|URLSearchParams */ = d",,67d3
fun example(),"{
    val a = if (true) true else false
    val b = <!INVALID_IF_AS_EXPRESSION!>if<!> (true) else false
    val c = <!INVALID_IF_AS_EXPRESSION!>if<!> (true) true
    val d = <!INVALID_IF_AS_EXPRESSION!>if<!> (true) true else;
    val e = if (true) <!IMPLICIT_CAST_TO_ANY!>{}",// !DIAGNOSTICS: -UNUSED_VARIABLE,29b8
fun t(),": Boolean {
        return <!TYPE_MISMATCH!><!INVALID_IF_AS_EXPRESSION!>if<!> (true) true<!>
    }",,8234
fun foo(c: List<Int>),"{
    var i = 2

    return

    for (j in c) {  //strange selection of unreachable code
        i += 23
    }",//KT-1027 Strange selection of unreachable code,daeb
fun t1(),"{
    return

    while(true) {
        doSmth()
    }",,9870
fun t2(),"{
    return

    do {
        doSmth()
    }",,6b57
fun t3(),"{
    return

    try {
        doSmth()
    }",,4e19
fun t4(),"{
    return

    (43)
}",,cef9
fun doSmth(),{},,ec9e
fun box(),"{
    val a: Int? = 3
    when (a) {
        1 -> {
            1
        }",// FILE: test.kt,4f27
fun assumeCachesAreEnabled(),"{
        Assumptions.assumeFalse(testRunSettings.get<CacheMode>() == CacheMode.WithoutCache)
    }",,d5c9
fun testSimple(),= w,,5615
fun testModifiedFile(),= w,,fdbf
fun testAddedFile(),= w,,b7f1
fun testRemovedFile(),= w,,6367
fun testRenamedFile(),= w,,9ed8
fun testRenamedPackage(),= w,,c1f2
fun testChangedFileIndex(),= w,,5b01
fun testChangedExternalDependencyVersion(),= w,,c1a9
fun testChangedExternalDependency(),= w,,eece
fun testFileDependencies1(),= w,,1763
fun testFileDependencies2(),= w,,f9a3
fun addMethodToOpenClass1(),= w,,5666
fun addMethodToOpenClass2(),= w,,0903
fun addMethodToInterface1(),= w,,9f34
fun addMethodToInterface2(),= w,,a8dd
No signature found,"fun withRootDir(rootDir: File, block: RootDirHolder.() -> Unit) = R",,6e1f
No signature found,"fun compileLibrary(
            targetSrc: String,
            vararg dependencies: TestCompilationArtifact.KLIB,
            block: LibraryBuilder.() -> Unit
        ) = w",,6e1f
No signature found,"fun compileToExecutable(
            targetSrc: String,
            vararg dependencies: TestCompilationArtifact.KLIB,
            block: ExecutableBuilder.() -> Unit
        ) = w",,6e1f
"fun getLibraryFileCache(libName: String, libFileRelativePath: String, fqName: String)",": File {
        val libCacheDir = icCacheDir.resolve(cacheFlavor).resolve(""$libName-per-file-cache"")
        val fileId = cacheFileId(fqName, buildDir.resolve(libFileRelativePath).absolutePath)
        return libCacheDir.resolve(fileId)
    }",,5a57
"fun cacheFileId(fqName: String, filePath: String)","=
        """,,45fd
fun registerAssembleTask(project: Project),"}

/**
 * @suppress
 */
interface KotlinNativeArtifact : KotlinArtifact {
    val modes: Set<NativeBuildType>
    val isStatic: Boolean
    val linkerOptions: List<String>
    @Suppress(""DEPRECATION"")
    @Deprecated(
        ""Please migrate to toolOptionsConfigure DSL. More details are here: https://kotl.in/u1r8ln""
    )
    val kotlinOptionsFn: KotlinCommonToolOptions.() -> Unit
    val toolOptionsConfigure: KotlinCommonCompilerToolOptions.() -> Unit
    val binaryOptions: Map<String, String>
}",,6c36
fun setModules(vararg project: Any),"fun addModule(project: Any)
    fun createArtifact(extensions: ExtensionAware): KotlinArtifact
}

/**
 * @suppress
 */
interface KotlinNativeArtifactConfig : KotlinArtifactConfig {
    var modes: Set<NativeBuildType>
    fun modes(vararg modes: NativeBuildType)
    var isStatic: Boolean
    var linkerOptions: List<String>
    @Deprecated(
        ""Please migrate to toolOptions DSL. More details are here: https://kotl.in/u1r8ln""
    )
    fun kotlinOptions(@Suppress(""DEPRECATION"") fn: Action<KotlinCommonToolOptions>)
    fun toolOptions(configure: Action<KotlinCommonCompilerToolOptions>)
    fun binaryOption(name: String, value: String)
}","/**
 * @suppress
 */",2ce9
fun targets(vararg targets: KonanTarget),"var embedBitcode: BitcodeEmbeddingMode?
}

/**
 * @suppress
 */
interface KotlinNativeXCFrameworkConfig : KotlinNativeArtifactConfig {
    var targets: Set<KonanTarget>
    
    var embedBitcode: BitcodeEmbeddingMode?
}","/**
 * @suppress
 */",0d5e
fun foo(),= x,"// JVM_ABI_K1_K2_DIFF: KT-62714, KT-63880",519f
fun box(),= A,,4f27
fun usa<caret>ge(j: JavaDeclaration),= j,// FILE: usage.kt,b581
fun resolve(sourceSet: KotlinSourceSet),": Set<IdeaKotlinDependency> {
        if (sourceSet !is DefaultKotlinSourceSet) return emptySet()
        val project = sourceSet.project

        val cinteropFiles = project.future { createCInteropMetadataDependencyClasspathForIde(sourceSet) }",,9884
fun dependencies(project: Project),": Iterable<Any> {
        return project.multiplatformExtension.sourceSets
            .filterIsInstance<DefaultKotlinSourceSet>()
            .filter { it.commonizerTarget.getOrThrow() is SharedCommonizerTarget }",,a92a
fun <T> takeVarargs(vararg e: T),": T {
    return e[e.size - 1]
}","// WITH_STDLIB
// WORKS_WHEN_VALUE_CLASS
// LANGUAGE: +ValueClasses",ad1b
No signature found,"fun test(u1: UInt, u2: UInt, u3: UInt?): Int {
    val a = takeVarargs(u1, u2)
    val b = takeVarargs(u3) ?: UInt(-1)
    val c = takeVarargs(u1, u3) ?: UInt(-1)

    return a.value + b.value + c.value
}",,6e1f
fun box(),": String {
    val u1 = UInt(0)
    val u2 = UInt(1)
    val u3 = UInt(2)
    if (test(u1, u2, u3) != 1 + 2 + 2) return ""fail""

    return ""OK""
}",,4f27
No signature found,"fun getValue(t: T, p: KProperty<*>): R {
        return kmember.get(t)
    }",// !LANGUAGE: -ForbidUsingExtensionPropertyTypeParameterInDelegate,6e1f
fun apply(),": Boolean {
        visitor.accept(root)

        return hasChanges
    }",,e86b
"fun visit(x: JsIf, ctx: JsContext<JsNode>)",": Boolean {
            val thenStatementRaw = x.thenStatement
            val elseStatementRaw = x.elseStatement
            if (x.synthetic && elseStatementRaw != null) {
                val thenStatement = extractSingleStatement(thenStatementRaw)
                val elseStatement = extractSingleStatement(elseStatementRaw)

                if (thenStatement is JsExpressionStatement && elseStatement is JsExpressionStatement) {
                    val thenAssignment = JsAstUtils.decomposeAssignment(thenStatement.expression)
                    val elseAssignment = JsAstUtils.decomposeAssignment(elseStatement.expression)
                    if (thenAssignment != null && elseAssignment != null) {
                        val (thenTarget, thenValue) = thenAssignment
                        val (elseTarget, elseValue) = elseAssignment
                        if (lhsEqual(thenTarget, elseTarget)) {
                            hasChanges = true
                            val ternary = JsConditional(x.ifExpression, thenValue, elseValue)
                            val replacement = JsExpressionStatement(JsAstUtils.assignment(thenTarget, ternary))
                            replacement.synthetic = thenStatement.synthetic && elseStatement.synthetic
                            ctx.replaceMe(replacement)
                            accept(replacement)
                            return false
                        }",,e30c
fun extractSingleStatement(statement: JsStatement),": JsStatement {
        var result = statement
        while (result is JsBlock && result.statements.size == 1) {
            result = result.statements[0]
        }",,9109
No signature found,"fun lhsEqual(a: JsExpression?, b: JsExpression?): Boolean = w",,6e1f
No signature found,"fun decodeCDPResponse(
    message: String,
    serializerForMessageId: (Int) -> CDPMethodCallEncodingInfo
): CDPResponse {
    val jsonElement = json.parseToJsonElement(message)
    return when (val id = jsonElement.jsonObject[""id""]?.jsonPrimitive?.int) {
        null -> CDPResponse.Event(decodeCDPEvent(jsonElement))
        else -> {
            val serializer = when (val encodingInfo = serializerForMessageId(id)) {
                is CDPMethodCallEncodingInfoImpl -> encodingInfo.serializer
                is CDPMethodCallEncodingInfoPlainText -> null
            }",,6e1f
No signature found,"fun <reified Response : CDPMethodInvocationResult, reified Params : CDPRequestParams> encodeCDPMethodCall(
    messageId: Int,
    methodName: String,
    params: Params?
): Pair<String, CDPMethodCallEncodingInfo> {
    val request = CDPRequest(messageId, methodName, params)
    return json.encodeToString(request) to
            CDPMethodCallEncodingInfoImpl(json.serializersModule.serializer<Response>())
}",,6e1f
fun decodeCDPEvent(element: JsonElement),": CDPEvent {
    val method = element.jsonObject[""method""]!!.jsonPrimitive.content
    val params = element.jsonObject[""params""] ?: error(""missing params"")
    return when (method) {
        ""Debugger.breakpointResolved"" -> json.decodeFromJsonElement(Debugger.Event.BreakpointResolved.serializer(), params)
        ""Debugger.paused"" -> json.decodeFromJsonElement(Debugger.Event.Paused.serializer(), params)
        ""Debugger.resumed"" -> json.decodeFromJsonElement(Debugger.Event.Resumed.serializer(), params)
        ""Debugger.scriptFailedToParse"" -> json.decodeFromJsonElement(Debugger.Event.ScriptFailedToParse.serializer(), params)
        ""Debugger.scriptParsed"" -> json.decodeFromJsonElement(Debugger.Event.ScriptParsed.serializer(), params)
        ""Runtime.executionContextCreated"" -> json.decodeFromJsonElement(Runtime.Event.ExecutionContextCreated.serializer(), params)
        ""Runtime.executionContextDestroyed"" -> json.decodeFromJsonElement(Runtime.Event.ExecutionContextDestroyed.serializer(), params)
        else -> UnknownCDPEvent(method)
    }","/**
 * A superclass for each kind of CDP method invocation result.
 */",d288
No signature found,"fun genericEvaluateRequest(
        encodeMethodCallWithMessageId: (Int) -> Pair<String, CDPMethodCallEncodingInfo>
    ): CDPMethodInvocationResult
}

private suspend inline fun <reified T : CDPMethodInvocationResult> CDPRequestEvaluator.evaluateRequest(
    noinline body: (Int) -> Pair<String, CDPMethodCallEncodingInfo>
) = g",,6e1f
fun enable(),"{
        requestEvaluator.evaluateRequest<CDPMethodInvocationResultUnit> { messageId ->
            encodeCDPMethodCall<CDPMethodInvocationResultUnit, CDPRequestParamsUnit>(messageId, ""Runtime.enable"", null)
        }",,d02b
fun runIfWaitingForDebugger(),"{
        requestEvaluator.evaluateRequest<CDPMethodInvocationResultUnit> { messageId ->
            encodeCDPMethodCall<CDPMethodInvocationResultUnit, CDPRequestParamsUnit>(messageId, ""Runtime.runIfWaitingForDebugger"", null)
        }",,89f0
No signature found,"fun evaluate(expression: String, contextId: ExecutionContextId? = n",,6e1f
fun enable(),"{
        requestEvaluator.evaluateRequest<CDPMethodInvocationResultUnit> { messageId ->
            encodeCDPMethodCall<CDPMethodInvocationResultUnit, CDPRequestParamsUnit>(messageId, ""Debugger.enable"", null)
        }",,d02b
fun resume(),"{
        requestEvaluator.evaluateRequest<CDPMethodInvocationResultUnit> { messageId ->
            encodeCDPMethodCall<CDPMethodInvocationResultUnit, ResumeRequestParams>(messageId, ""Debugger.resume"", null)
        }",,700f
No signature found,"fun setBreakpointByUrl(
        lineNumber: Int,
        url: String,
        scriptHash: String? = n",,6e1f
No signature found,"fun setBreakpoint(
        scriptId: Runtime.ScriptId,
        lineNumber: Int,
        columnNumber: Int? = n",,6e1f
fun setSkipAllPauses(skip: Boolean),"{
        requestEvaluator.evaluateRequest<CDPMethodInvocationResultUnit> { messageId ->
            encodeCDPMethodCall<CDPMethodInvocationResultUnit, SetSkipAllPausesRequestParams>(
                messageId,
                ""Debugger.setSkipAllPauses"",
                SetSkipAllPausesRequestParams(skip)
            )
        }",,6d79
fun stepInto(),"{
        requestEvaluator.evaluateRequest<CDPMethodInvocationResultUnit> { messageId ->
            encodeCDPMethodCall<CDPMethodInvocationResultUnit, CDPRequestParamsUnit>(messageId, ""Debugger.stepInto"", null)
        }",,2b78
No signature found,"fun evaluateOnCallFrame(
        callFrameId: CallFrameId,
        expression: String,
        returnByValue: Boolean? = n",,6e1f
fun foo(),"{
    val a3: Int = <!INTEGER_OVERFLOW!><!INTEGER_OVERFLOW!>intMaxValue + 1<!> - 10<!>
    val a4: Int = <!INTEGER_OVERFLOW!>intMaxValue + 1<!> + 10
    val i2: Int = <!INTEGER_OVERFLOW!>intMaxValue - 1 + 2<!>
    val i3: Int = <!INTEGER_OVERFLOW!>intMaxValue - intMinValue<!>
    val i4: Int = <!INTEGER_OVERFLOW!>-intMinValue<!>
    val i5: Int = <!INTEGER_OVERFLOW!>intMinValue - 1<!>
    val i6: Int = <!INTEGER_OVERFLOW!>intMinValue - intMaxValue<!>
    val i7: Int = intMinValue + intMaxValue
    val i8: Int = -intMaxValue
    val i10: Int = <!INTEGER_OVERFLOW!>intMinValue * -1<!>
    val i11: Int = <!INTEGER_OVERFLOW!>intMinValue * 2<!>
    val i12: Int = <!INTEGER_OVERFLOW!>intMaxValue * -2<!>
    val i13: Int = intMaxValue * -1
    val i15: Int = <!INTEGER_OVERFLOW!>intMinValue / -1<!>
    val l20: Int = <!INTEGER_OVERFLOW!>30 * 24 * 60 * 60 * 1000<!>
    val l21: Int = intMinValue - intMinValue
    val l22: Int = <!INTEGER_OVERFLOW!>intMinValue + <!INTEGER_OVERFLOW!>-intMinValue<!><!>
    val l23: Int = intMaxValue + <!INTEGER_OVERFLOW!>-intMinValue<!>
    val l25: Int = (-1).rem(5)
    val l26: Int = (-1) % 5
}",// !DIAGNOSTICS: -UNUSED_VARIABLE,519f
fun foo(),"{
        val a3: Int = <!INTEGER_OVERFLOW!><!INTEGER_OVERFLOW!>intMaxValue + 1<!> - 10<!>
        val a4: Int = <!INTEGER_OVERFLOW!>intMaxValue + 1<!> + 10
        val i2: Int = <!INTEGER_OVERFLOW!>intMaxValue - 1 + 2<!>
        val i3: Int = <!INTEGER_OVERFLOW!>intMaxValue - intMinValue<!>
        val i4: Int = <!INTEGER_OVERFLOW!>-intMinValue<!>
        val i5: Int = <!INTEGER_OVERFLOW!>intMinValue - 1<!>
        val i6: Int = <!INTEGER_OVERFLOW!>intMinValue - intMaxValue<!>
        val i7: Int = intMinValue + intMaxValue
        val i8: Int = -intMaxValue
        val i10: Int = <!INTEGER_OVERFLOW!>intMinValue * -1<!>
        val i11: Int = <!INTEGER_OVERFLOW!>intMinValue * 2<!>
        val i12: Int = <!INTEGER_OVERFLOW!>intMaxValue * -2<!>
        val i13: Int = intMaxValue * -1
        val i15: Int = <!INTEGER_OVERFLOW!>intMinValue / -1<!>
        val l20: Int = <!INTEGER_OVERFLOW!>30 * 24 * 60 * 60 * 1000<!>
        val l21: Int = intMinValue - intMinValue
        val l22: Int = <!INTEGER_OVERFLOW!>intMinValue + <!INTEGER_OVERFLOW!>-intMinValue<!><!>
        val l23: Int = intMaxValue + <!INTEGER_OVERFLOW!>-intMinValue<!>
        val l25: Int = (-1).rem(5)
        val l26: Int = (-1) % 5
    }",,519f
No signature found,"fun call(crossinline c: () -> Unit) {
    c()
}","// NO_CHECK_LAMBDA_INLINING
// WITH_STDLIB
// TARGET_BACKEND: JVM
// ASSERTIONS_MODE: jvm
// FILE: inline.kt",6e1f
fun checkTrue(),": Boolean
    fun checkFalse(): Boolean
    fun checkTrueWithMessage(): Boolean
    fun checkFalseWithMessage(): Boolean
}

class ShouldBeDisabled : Checker {
    override : Boolean {
        var hit = false
        val l = { hit = true; true }",// FILE: inlineSite.kt,6a1b
fun checkFalse(),": Boolean {
        var hit = false
        val l = { hit = true; false }",,f255
fun checkTrueWithMessage(),": Boolean {
        var hit = false
        val l = { hit = true; true }",,ae4c
fun checkFalseWithMessage(),": Boolean {
        var hit = false
        val l = { hit = true; false }",,899c
fun checkTrue(),": Boolean {
        var hit = false
        val l = { hit = true; true }",,6a1b
fun checkFalse(),": Boolean {
        var hit = false
        val l = { hit = true; false }",,f255
fun checkTrueWithMessage(),": Boolean {
        var hit = false
        val l = { hit = true; true }",,ae4c
fun checkFalseWithMessage(),": Boolean {
        var hit = false
        val l = { hit = true; false }",,899c
fun setDesiredAssertionStatus(v: Boolean),": Checker {
    val loader = Checker::class.java.classLoader
    loader.setClassAssertionStatus(""ShouldBeEnabled"", true)
    loader.setClassAssertionStatus(""ShouldBeDisabled"", false)
    val c = loader.loadClass(if (v) ""ShouldBeEnabled"" else ""ShouldBeDisabled"")
    return c.newInstance() as Checker
}",,4900
fun box(),": String {
    var c = setDesiredAssertionStatus(false)
    if (c.checkTrue()) return ""FAIL 0""
    if (c.checkTrueWithMessage()) return ""FAIL 1""
    if (c.checkFalse()) return ""FAIL 2""
    if (c.checkFalseWithMessage()) return ""FAIL 3""
    c = setDesiredAssertionStatus(true)
    if (!c.checkTrue()) return ""FAIL 4""
    if (!c.checkTrueWithMessage()) return ""FAIL 5""
    try {
        c.checkFalse()
        return ""FAIL 6""
    }",,4f27
No signature found,"fun interface Action<E> {
    fun E.exec()
}","// FIR_IDENTICAL
// SKIP_TXT
// FILE: TaskProvider.java",6e1f
fun foo(tp: TaskProvider<out CharSequence>),"{
    tp.configure {
        length
    }",,f169
No signature found,fun foo(block: () -> String) = b,"// TARGET_BACKEND: JVM
// WITH_STDLIB",6e1f
fun box(),": String {
    val x = bar3<Any, Double, Int, String>(""OK"")

    assertEquals(""java.lang.Integer"", x.first)
    assertEquals(""java.lang.String#OK"", x.second)

    return ""OK""
}",,4f27
fun box(),": String {
    val o = ""O""

    class Local(k: String) : Base({ o + k }",,4f27
"fun check(expression: FirQualifiedAccessExpression, context: CheckerContext, reporter: DiagnosticReporter)","{
        if (expression !is FirCallableReferenceAccess) return
        if (context.languageVersionSettings.supportsFeature(LanguageFeature.KotlinFunInterfaceConstructorReference)) return

        val reference = expression.calleeReference.resolved ?: return
        val referredSymbol = reference.resolvedSymbol

        if (referredSymbol is FirNamedFunctionSymbol &&
            referredSymbol.origin == FirDeclarationOrigin.SamConstructor
        ) {
            val samClassSymbol = referredSymbol.resolvedReturnTypeRef.toRegularClassSymbol(context.session) ?: return
            if (samClassSymbol.isFun && !samClassSymbol.isJavaOrEnhancement) {
                reporter.reportOn(reference.source, FUN_INTERFACE_CONSTRUCTOR_REFERENCE, context)
            }",,478b
fun codegenPhase(generateMultifileFacade: Boolean),": SameTypeNamedCompilerPhase<JvmBackendContext, IrModuleFragment> {
    val suffix = if (generateMultifileFacade) ""MultifileFacades"" else ""Regular""
    val descriptionSuffix = if (generateMultifileFacade) "", multifile facades"" else "", regular files""
    return performByIrFile(
        name = ""CodegenByIrFile$suffix"",
        description = ""Code generation by IrFile$descriptionSuffix"",
        copyBeforeLowering = false,
        lower = listOf(
            makeIrFilePhase(
                { context -> FileCodegen(context, generateMultifileFacade) }",,96c1
fun lower(irFile: IrFile),"{
        val isMultifileFacade = irFile.fileEntry is MultifileFacadeFileEntry
        if (isMultifileFacade == generateMultifileFacade) {
            for (loweredClass in irFile.declarations) {
                if (loweredClass !is IrClass) {
                    throw AssertionError(""File-level declaration should be IrClass after JvmLower, got: "" + loweredClass.render())
                }",,a3a5
"fun invoke(
            phaseConfig: PhaseConfigurationService,
            phaserState: PhaserState<IrModuleFragment>,
            context: JvmBackendContext,
            input: IrModuleFragment,
        )",": IrModuleFragment {
            context.enumEntriesIntrinsicMappingsCache.generateMappingsClasses()
            return input
        }",,b3c9
fun getAttributes(),: Array<PsiNameValuePair> = _,,5c87
fun example(),": Single<out ClientBootResult> {
    return Single.just(true).map<ClientBootResult> { ClientBootSuccess }","// FIR_IDENTICAL
// SKIP_TXT
// FILE: main.kt",29b8
"fun encode(clazz: IrClass, languageVersionSettings: LanguageVersionSettings)",": Long {
            return clazz.run {
                val hasAnnotation = annotations.isNotEmpty()
                val visibility = ProtoEnumFlags.descriptorVisibility(visibility.normalize())
                val modality = ProtoEnumFlags.modality(modality)
                val kind = ProtoEnumFlags.classKind(kind, isCompanion)

                val hasEnumEntries = kind == ProtoBuf.Class.Kind.ENUM_CLASS &&
                        languageVersionSettings.supportsFeature(LanguageFeature.EnumEntries)
                val flags = IrFlags.getClassFlags(
                    hasAnnotation, visibility, modality, kind, isInner, isData, isExternal, isExpect, isValue, isFun, hasEnumEntries
                )

                flags.toLong()
            }",,14fd
fun decode(code: Long),= C,,b41f
fun kind(),: CallableMemberDescriptor.Kind = P,,76b5
fun encode(function: IrSimpleFunction),": Long {
            function.run {
                val hasAnnotation = annotations.isNotEmpty()
                val visibility = ProtoEnumFlags.descriptorVisibility(visibility.normalize())
                val modality = ProtoEnumFlags.modality(modality)
                val kind = if (isFakeOverride) ProtoBuf.MemberKind.FAKE_OVERRIDE else ProtoBuf.MemberKind.DECLARATION

                val flags = IrFlags.getFunctionFlags(
                    hasAnnotation, visibility, modality, kind,
                    isOperator, isInfix, isInline, isTailrec, isExternal, isSuspend, isExpect,
                    true // hasStableParameterNames does not make sense for Ir, just pass the default value
                )

                return flags.toLong()
            }",,22d0
fun encode(constructor: IrConstructor),": Long {
            constructor.run {
                val hasAnnotation = annotations.isNotEmpty()
                val visibility = ProtoEnumFlags.descriptorVisibility(visibility.normalize())
                val flags = IrFlags.getConstructorFlags(hasAnnotation, visibility, isInline, isExternal, isExpect, isPrimary)

                return flags.toLong()
            }",,a5a2
fun decode(code: Long),= F,,b41f
fun kind(),: CallableMemberDescriptor.Kind = P,,76b5
fun encode(property: IrProperty),": Long {
            return property.run {
                val hasAnnotation = annotations.isNotEmpty()
                val visibility = ProtoEnumFlags.descriptorVisibility(visibility.normalize())
                val modality = ProtoEnumFlags.modality(modality)
                val kind = if (isFakeOverride) ProtoBuf.MemberKind.FAKE_OVERRIDE else ProtoBuf.MemberKind.DECLARATION
                val hasGetter = getter != null
                val hasSetter = setter != null

                val flags = IrFlags.getPropertyFlags(
                    hasAnnotation, visibility, modality, kind,
                    isVar, hasGetter, hasSetter, false, isConst, isLateinit, isExternal, isDelegated, isExpect
                )

                flags.toLong()
            }",,d075
fun decode(code: Long),= P,,b41f
fun encode(param: IrValueParameter),": Long {
            return param.run {
                IrFlags.getValueParameterFlags(
                    annotations.isNotEmpty(),
                    defaultValue != null,
                    isCrossinline,
                    isNoinline,
                    isHidden,
                    isAssignable
                ).toLong()
            }",,f2e2
fun decode(code: Long),= V,,b41f
fun encode(typeAlias: IrTypeAlias),": Long {
            return typeAlias.run {
                val visibility = ProtoEnumFlags.descriptorVisibility(visibility.normalize())
                IrFlags.getTypeAliasFlags(annotations.isNotEmpty(), visibility, isActual).toLong()
            }",,17d2
fun decode(code: Long),= T,,b41f
fun encode(typeParameter: IrTypeParameter),": Long {
            return typeParameter.run {
                val variance = ProtoEnumFlags.variance(variance)
                IrFlags.getTypeParameterFlags(annotations.isNotEmpty(), variance, isReified).toLong()
            }",,cac6
fun decode(code: Long),= T,,b41f
fun encode(field: IrField),": Long {
            return field.run {
                val visibility = ProtoEnumFlags.descriptorVisibility(visibility.normalize())
                IrFlags.getFieldFlags(annotations.isNotEmpty(), visibility, isFinal, isExternal, isStatic).toLong()
            }",,65c5
fun decode(code: Long),= F,,b41f
fun encode(variable: IrVariable),": Long {
            return variable.run {
                IrFlags.getLocalFlags(annotations.isNotEmpty(), isVar, isConst, isLateinit).toLong()
            }",,f7c6
fun encode(delegate: IrLocalDelegatedProperty),": Long {
            return delegate.run {
                IrFlags.getLocalFlags(annotations.isNotEmpty(), isVar, false, false).toLong()
            }",,6e81
fun decode(code: Long),= L,,b41f
fun getEnumValue(flag: Boolean),": EnumClass {
	return if (flag) EnumClass.VALUE1 else EnumClass.VALUE2
}",,4f56
No signature found,fun Int?.swap(): Int = 1,// FIR_DUMP,6e1f
No signature found,fun Int.swap(): Int? = n,,6e1f
fun b(),": Boolean {
    result = !result
    return result
}",,4df1
fun test(),"{
    var x: Int? = 1
    if (x != null) {
        while (b()) {
            val tmp = x.swap()
            x = tmp
        }",,fe98
No signature found,"fun test(func: () -> String?) {
    val x = func() ?: """"
}",,6e1f
fun box(),": String {
    val sub = Sub::class

    assertEquals(listOf(""a"", ""c""), sub.memberProperties.map { it.name }","// TARGET_BACKEND: JVM

// WITH_REFLECT",4f27
No signature found,"fun f(type: KClass1<*>): KFunction1<Any>? =
    /","// FIR_IDENTICAL
// SKIP_TXT

// See KT-14453 and KT-35703",6e1f
No signature found,"fun test(f: () -> Unit) =
        t","// FIR_IDENTICAL
// IGNORE_BACKEND: JS_IR

// KT-61141: rethrows kotlin.Exception instead of java.lang.Exception
// IGNORE_BACKEND: NATIVE",6e1f
No signature found,"fun test_0(a: A, f: A.() -> Unit) {
    a.f()
}",// ISSUE: KT-39034,6e1f
No signature found,"fun test_1(a: A, ys: List<A.() -> Unit>) {
    for (y in ys) {
        a.y()
    }",,6e1f
No signature found,"fun test_2(a: A, vararg zs: A.() -> Unit) {
    for (z in zs) {
        a.z()
    }",,6e1f
fun box(),": String {
    var sum = 0
    for (x in xs) {
        sum = sum * 10 + x
        xs = IntArray(0)
    }",// WITH_STDLIB,4f27
fun foo(),: Unit<!> = d,// FIR_IDENTICAL,519f
fun doo(),<expr>{},// LOOK_UP_FOR_ELEMENT_OF_TYPE: org.jetbrains.kotlin.psi.KtBlockExpression,5012
fun mapClass(classifier: ClassifierDescriptor),": Type =
        w",,20ba
"fun mapTypeCommon(type: KotlinTypeMarker, mode: TypeMappingMode)",": Type =
        m",,4608
fun computeClassInternalNameAsString(irClass: IrClass),": String {
        context.getLocalClassType(irClass)?.internalName?.let {
            return it
        }",,f61f
"fun computeClassInternalName(irClass: IrClass, capacity: Int)",": StringBuilder {
        context.getLocalClassType(irClass)?.internalName?.let {
            return StringBuilder(it)
        }",,89bb
fun classInternalName(irClass: IrClass),": String {
        context.getLocalClassType(irClass)?.internalName?.let { return it }",,6da3
fun getClassInternalName(typeConstructor: TypeConstructorMarker),": String =
        c",,01b5
fun getScriptInternalName(typeConstructor: TypeConstructorMarker),": String {
        val script = (typeConstructor as IrScriptSymbol).owner
        val targetClass = script.targetClass ?: error(""No target class computed for script: ${script.render()}",,1619
"fun writeFormalTypeParameters(irParameters: List<IrTypeParameter>, sw: JvmSignatureWriter)","{
        if (sw.skipGenericSignature()) return
        with(KotlinTypeMapper) {
            for (typeParameter in irParameters) {
                typeSystem.writeFormalTypeParameter(typeParameter.symbol, sw) { type, mode ->
                    mapType(type as IrType, mode, sw)
                }",,438b
fun boxType(irType: IrType),": Type {
        val irClass = irType.classOrNull?.owner
        if (irClass != null && irClass.isSingleFieldValueClass) {
            return mapTypeAsDeclaration(irType)
        }",,8322
No signature found,"fun mapType(
        type: IrType,
        mode: TypeMappingMode = T",,6e1f
No signature found,"fun JvmSignatureWriter.writeGenericType(type: KotlinTypeMarker, asmType: Type, mode: TypeMappingMode) {
        if (type is IrErrorType) {
            writeAsmType(asmType)
            return
        }",,6e1f
fun hasNothingInNonContravariantPosition(irType: IrType),: Boolean = w,,4870
"fun writeInnerParts(
        innerTypesAsList: List<PossiblyInnerIrType>,
        sw: JvmSignatureWriter,
        mode: TypeMappingMode,
        index: Int
    )","{
        for (innerPart in innerTypesAsList.subList(index, innerTypesAsList.size)) {
            sw.writeInnerClass(getJvmShortName(innerPart.classifier))
            writeGenericArguments(sw, innerPart, mode)
        }",,b757
"fun writeGenericArguments(
        sw: JvmSignatureWriter,
        type: PossiblyInnerIrType,
        mode: TypeMappingMode
    )","{
        val classifier = type.classifier
        val parameters = classifier.typeParameters.map(IrTypeParameter::symbol)
        val arguments = type.arguments

        if (isBigArityFunction(classifier, arguments) || classifier.symbol.isKFunction() || classifier.symbol.isKSuspendFunction()) {
            writeGenericArguments(sw, listOf(arguments.last()), listOf(parameters.last()), mode)
            return
        }",,4091
"fun isBigArityFunction(classifier: IrClass, arguments: List<IrTypeArgument>)",": Boolean =
        a",,5b92
"fun writeGenericArguments(
        sw: JvmSignatureWriter,
        arguments: List<IrTypeArgument>,
        parameters: List<IrTypeParameterSymbol>,
        mode: TypeMappingMode,
    )","{
        with(KotlinTypeMapper) {
            typeSystem.writeGenericArguments(sw, arguments, parameters, mode) { type, sw, mode ->
                mapType(type as IrType, mode, sw)
            }",,2cf8
No signature found,"fun TypeConstructorMarker.isTypeParameter(): Boolean {
        return this is IrTypeParameterSymbol
    }",,6e1f
No signature found,"fun TypeConstructorMarker.asTypeParameter(): TypeParameterMarker {
        require(isTypeParameter())
        return this as IrTypeParameterSymbol
    }",,6e1f
No signature found,"fun TypeConstructorMarker.defaultType(): IrType {
        return when (this) {
            is IrClassSymbol -> owner.defaultType
            is IrTypeParameterSymbol -> owner.defaultType
            else -> error(""Unsupported type constructor: $this"")
        }",,6e1f
No signature found,"fun TypeConstructorMarker.isScript(): Boolean {
        return this is IrScriptSymbol
    }",,6e1f
No signature found,"fun SimpleTypeMarker.isSuspendFunction(): Boolean {
        if (this !is IrSimpleType) return false
        return isSuspendFunctionImpl()
    }",,6e1f
No signature found,"fun SimpleTypeMarker.isKClass(): Boolean {
        require(this is IrSimpleType)
        return isKClassImpl()
    }",,6e1f
No signature found,"fun KotlinTypeMarker.isRawType(): Boolean {
        require(this is IrType)
        if (this !is IrSimpleType) return false
        return isRawTypeImpl()
    }",,6e1f
No signature found,"fun TypeConstructorMarker.typeWithArguments(arguments: List<KotlinTypeMarker>): IrSimpleType {
        require(this is IrClassSymbol)
        arguments.forEach {
            require(it is IrType)
        }",,6e1f
No signature found,"fun TypeParameterMarker.representativeUpperBound(): IrType {
        require(this is IrTypeParameterSymbol)
        return owner.representativeUpperBound
    }",,6e1f
fun continuationTypeConstructor(),": IrClassSymbol {
        return backendContext.ir.symbols.continuationClass
    }",,bc5e
fun functionNTypeConstructor(n: Int),": IrClassSymbol {
        return backendContext.irBuiltIns.functionN(n).symbol
    }",,9a92
No signature found,"fun KotlinTypeMarker.getNameForErrorType(): String? {
        return null
    }",,6e1f
fun test(),= r,"// TARGET_BACKEND: JVM

// FILE: JavaClass.java",fe98
fun box(),": String {
    return A().test()
}",,4f27
"fun <R, D> acceptChildren(visitor: FirVisitor<R, D>, data: D)","{
        annotations.forEach { it.accept(visitor, data) }",,b2f8
"fun <D> transformChildren(transformer: FirTransformer<D>, data: D)",": FirIncrementDecrementExpressionImpl {
        transformAnnotations(transformer, data)
        expression = expression.transform(transformer, data)
        return this
    }",,963c
"fun <D> transformAnnotations(transformer: FirTransformer<D>, data: D)",": FirIncrementDecrementExpressionImpl {
        annotations.transformInplace(transformer, data)
        return this
    }",,31d1
No signature found,"fun replaceConeTypeOrNull(newConeTypeOrNull: ConeKotlinType?) {
        coneTypeOrNull = newConeTypeOrNull
    }",,6e1f
fun replaceAnnotations(newAnnotations: List<FirAnnotation>),"{
        annotations = newAnnotations.toMutableOrEmpty()
    }",,8a3d
"fun <T> bar(a: T, i: Int)",": T {
    global += ""$i""
    return a
}",// EXPECTED_REACHABLE_NODES: 1282,fdca
fun box(),": String {
    val x = 3
    when(if (x == 4) return bar(""fail1"", 1) else 4) {
        else -> return bar(""OK"", 2)
    }",,4f27
fun main(args: Array<Int>),"{
    ok += ""Fail Int""
}",,f0c8
fun main(args: Array<in String>),"{
    ok += ""Fail IN""
}",,56bf
fun main(args: Array<String>),": Unit? {
    ok += ""Fail return Unit?""
    return Unit
}",,5b61
No signature found,"fun Any.main(args: Array<String>) {
    ok += ""Fail Any.main(...)""
}",,6e1f
No signature found,"fun test(room : <!PLATFORM_CLASS_MAPPED_TO_KOTLIN!>Object<!>) {
  for(item: Item? in items) {
    if (item?.room === room) {
      // item?.room is not null
      System.out.println(""You see "" + item<!UNNECESSARY_SAFE_CALL!>?.<!>name)
    }","// FIR_IDENTICAL
// WITH_EXTENDED_CHECKERS
// JET-72 Type inference doesn't work when iterating over ArrayList",6e1f
No signature found,"fun buildKtModuleProvider(init: KtModuleProviderBuilder.() -> Unit) {
        projectStructureProvider = buildProjectStructureProvider(kotlinCoreProjectEnvironment, init)
    }",,6e1f
"fun buildKtModuleProviderByCompilerConfiguration(
        compilerConfiguration: CompilerConfiguration,
    )","{
        projectStructureProvider = buildKtModuleProviderByCompilerConfiguration(
            kotlinCoreProjectEnvironment,
            compilerConfiguration,
            getPsiFilesFromPaths(kotlinCoreProjectEnvironment, getSourceFilePaths(compilerConfiguration)),
        )
    }",,66bf
No signature found,"fun <T : Any> registerApplicationService(serviceInterface: Class<T>, serviceImplementation: T) {
        kotlinCoreProjectEnvironment.environment.application.apply {
            registerService(serviceInterface, serviceImplementation)
        }",,6e1f
No signature found,"fun <T : Any> registerApplicationService(serviceImplementation: Class<T>) {
        kotlinCoreProjectEnvironment.environment.application.apply {
            registerService(serviceImplementation)
        }",,6e1f
No signature found,"fun <T : Any> registerProjectExtensionPoint(extensionDescriptor: ProjectExtensionDescriptor<T>) {
        extensionDescriptor.registerExtensionPoint(project)
    }",,6e1f
No signature found,"fun registerProjectServices(
        sourceKtFiles: List<KtFile>,
        packagePartProvider: (GlobalSearchScope) -> PackagePartProvider,
    ) {
        val project = kotlinCoreProjectEnvironment.project
        project.apply {
            registerService(KotlinMessageBusProvider::class.java, KotlinProjectMessageBusProvider::class.java)

            FirStandaloneServiceRegistrar.registerProjectServices(project)
            FirStandaloneServiceRegistrar.registerProjectExtensionPoints(project)
            FirStandaloneServiceRegistrar.registerProjectModelServices(project, kotlinCoreProjectEnvironment.parentDisposable)

            registerService(KotlinModificationTrackerFactory::class.java, KotlinStaticModificationTrackerFactory::class.java)
            registerService(KotlinGlobalModificationService::class.java, KotlinStaticGlobalModificationService::class.java)

            registerService(KotlinAnnotationsResolverFactory::class.java, KotlinStaticAnnotationsResolverFactory(this, sourceKtFiles))
            registerService(KotlinResolutionScopeProvider::class.java, KotlinByModulesResolutionScopeProvider::class.java)
            val declarationProviderFactory = KotlinStaticDeclarationProviderFactory(
                this,
                sourceKtFiles,
            )
            registerService(
                KotlinDeclarationProviderFactory::class.java,
                declarationProviderFactory
            )
            registerService(KotlinDeclarationProviderMerger::class.java, KotlinStaticDeclarationProviderMerger(this))
            registerService(
                KotlinPackageProviderFactory::class.java,
                KotlinStaticPackageProviderFactory(project, sourceKtFiles + declarationProviderFactory.getAdditionalCreatedKtFiles())
            )
            registerService(KotlinPackageProviderMerger::class.java, KotlinStaticPackageProviderMerger(this))

            registerService(
                PackagePartProviderFactory::class.java,
                KotlinStaticPackagePartProviderFactory(packagePartProvider)
            )

            registerService(LLFirLibrarySymbolProviderFactory::class.java, LLFirStandaloneLibrarySymbolProviderFactory::class.java)
            registerService(LLFirElementByPsiElementChooser::class.java, LLStandaloneFirElementByPsiElementChooser::class.java)
        }",,6e1f
fun registerPsiDeclarationFromBinaryModuleProvider(),"{
        kotlinCoreProjectEnvironment.project.apply {
            registerService(
                KotlinPsiDeclarationProviderFactory::class.java,
                KotlinStaticPsiDeclarationProviderFactory::class.java
            )
        }",,9039
No signature found,"fun <T : Any> registerProjectService(serviceInterface: Class<T>, serviceImplementation: T) {
        kotlinCoreProjectEnvironment.project.apply {
            registerService(serviceInterface, serviceImplementation)
        }",,6e1f
No signature found,"fun <T : Any> registerProjectService(serviceImplementation: Class<T>) {
        kotlinCoreProjectEnvironment.project.apply {
            registerService(serviceImplementation)
        }",,6e1f
No signature found,"fun build(
        withPsiDeclarationFromBinaryModuleProvider: Boolean = f",,6e1f
No signature found,"fun buildStandaloneAnalysisAPISession(
    projectDisposable: Disposable = D",,6e1f
No signature found,"fun compute(key: String, producer: () -> String): String {
        return map.getOrPut(key, ::<!UNSUPPORTED_REFERENCES_TO_VARIABLES_AND_PARAMETERS, USAGE_IS_NOT_INLINABLE!>producer<!>)
    }",// Issue: KT-37736,6e1f
fun test(b: Boolean),": Int {
    val n: Int = <expr>(b::hashCode)</expr>()
    return n * 2
}",,69ac
fun foo(),": Int {
        return 2
    }",,519f
fun foo(),": Int {
        return 3
    }",,519f
fun foo(),": Int {
        return super<A>.foo() + super<T>.foo()
    }",,519f
fun box(),": String {
  return if (O.foo() == 5) ""OK"" else ""fail""
}",,4f27
fun <T> asList(t: T),: List<T>? {<!NO_RETURN_IN_FUNCTION_WITH_BLOCK_BODY!>},//KT-1127 Wrong type computed for Arrays.asList(),e0c4
fun main(),"{
    val list : List<String> = <!INITIALIZER_TYPE_MISMATCH, TYPE_MISMATCH!>asList("""")<!>
}",,d987
fun box(),": String {
    main(emptyArray())

    return ""OK""
}",,4f27
fun main(args: Array<String>),"{
    val b = args.size < 1
    val x = if (b) Any() else throw Error()
}",,5b61
No signature found,"fun test(a: String?, b: String?) {
    if (a == null || a == ""foo"") {
        when (b) {
            ""abc"" -> return
        }",// ISSUE: KT-53460,6e1f
fun contains(g: String),": Boolean {
        return false
    }",,4785
fun foo(u: U),"{
    val b = false
    val i = 10
    val x = -i
    val y = !b
    val z = -1.0
    val w = +i

    val g = """" !in u
    val f = <!USELESS_IS_CHECK!>"""" !is Boolean<!>
}",,d953
No signature found,"fun interface SessionConfiguration : (FirSessionConfigurator) -> Unit

    override val additionalServices: List<ServiceRegistrationData>
        get() = l",,6e1f
fun shouldRunAnalysis(module: TestModule),": Boolean {
        if (!super.shouldRunAnalysis(module)) return false

        return if (module.languageVersionSettings.supportsFeature(LanguageFeature.MultiPlatformProjects)) {
            testServices.moduleStructure
                .modules.none { testModule -> testModule.dependsOnDependencies.any { testModulesByName[it.moduleName] == module }",,9681
fun registerExtraComponents(session: FirSession),"{
        testServices.firSessionComponentRegistrar?.registerAdditionalComponent(session)
    }",,7fe6
fun analyze(module: TestModule),": FirOutputArtifact {
        val isMppSupported = module.languageVersionSettings.supportsFeature(LanguageFeature.MultiPlatformProjects)

        val sortedModules = if (isMppSupported) sortDependsOnTopologically(module) else listOf(module)

        val (moduleDataMap, moduleDataProvider) = initializeModuleData(sortedModules)

        val project = testServices.compilerConfigurationProvider.getProject(module)
        val extensionRegistrars = FirExtensionRegistrar.getInstances(project)
        val targetPlatform = module.targetPlatform
        val predefinedJavaComponents = runIf(targetPlatform.isJvm()) {
            FirSharableJavaComponents(firCachesFactoryForCliMode)
        }",,9283
fun sortDependsOnTopologically(module: TestModule),": List<TestModule> {
        return topologicalSort(listOf(module), reverseOrder = true) { item ->
            item.dependsOnDependencies.map { testServices.dependencyProvider.getTestModule(it.moduleName) }",,0c8a
fun initializeModuleData(modules: List<TestModule>),": Pair<Map<TestModule, FirModuleData>, ModuleDataProvider> {
        val mainModule = modules.last()

        val targetPlatform = mainModule.targetPlatform
        val analyzerServices = targetPlatform.getAnalyzerServices()

        // the special name is required for `KlibMetadataModuleDescriptorFactoryImpl.createDescriptorOptionalBuiltIns`
        // it doesn't seem convincingly legitimate, probably should be refactored
        val moduleName = Name.special(""<${mainModule.name}",,1fc5
No signature found,"fun createLibrarySession(
        module: TestModule,
        project: Project,
        moduleName: Name,
        sessionProvider: FirProjectSessionProvider,
        moduleDataProvider: ModuleDataProvider,
        configuration: CompilerConfiguration,
        extensionRegistrars: List<FirExtensionRegistrar>,
        predefinedJavaComponents: FirSharableJavaComponents?
    ): AbstractProjectEnvironment? {
        val compilerConfigurationProvider = testServices.compilerConfigurationProvider
        val projectEnvironment: AbstractProjectEnvironment?
        val languageVersionSettings = module.languageVersionSettings
        val isCommon = module.targetPlatform.isCommon()
        when {
            isCommon || module.targetPlatform.isJvm() -> {
                val packagePartProviderFactory = compilerConfigurationProvider.getPackagePartProviderFactory(module)
                projectEnvironment = VfsBasedProjectEnvironment(
                    project, VirtualFileManager.getInstance().getFileSystem(StandardFileSystems.FILE_PROTOCOL),
                ) { packagePartProviderFactory.invoke(it) }",,6e1f
No signature found,"fun analyze(
        module: TestModule,
        moduleData: FirModuleData,
        targetPlatform: TargetPlatform,
        projectEnvironment: AbstractProjectEnvironment?,
        extensionRegistrars: List<FirExtensionRegistrar>,
        predefinedJavaComponents: FirSharableJavaComponents?,
    ): FirOutputPartForDependsOnModule {
        val compilerConfigurationProvider = testServices.compilerConfigurationProvider
        val moduleInfoProvider = testServices.firModuleInfoProvider
        val sessionProvider = moduleInfoProvider.firSessionProvider

        val project = compilerConfigurationProvider.getProject(module)

        PsiElementFinder.EP.getPoint(project).unregisterFinders<JavaElementFinder>()

        val parser = module.directives.singleValue(FirDiagnosticsDirectives.FIR_PARSER)

        val (ktFiles, lightTreeFiles) = when (parser) {
            FirParser.LightTree -> {
                emptyMap<TestFile, KtFile>() to testServices.sourceFileProvider.getKtSourceFilesForSourceFiles(module.files)
            }",,6e1f
No signature found,"fun createModuleBasedSession(
        module: TestModule,
        moduleData: FirModuleData,
        targetPlatform: TargetPlatform,
        sessionProvider: FirProjectSessionProvider,
        projectEnvironment: AbstractProjectEnvironment?,
        extensionRegistrars: List<FirExtensionRegistrar>,
        sessionConfigurator: FirSessionConfigurator.() -> Unit,
        predefinedJavaComponents: FirSharableJavaComponents?,
        project: Project,
        ktFiles: Collection<KtFile>,
    ): FirSession {
        val languageVersionSettings = module.languageVersionSettings
        return when {
            targetPlatform.isCommon() -> {
                FirCommonSessionFactory.createModuleBasedSession(
                    moduleData = moduleData,
                    sessionProvider = sessionProvider,
                    projectEnvironment = projectEnvironment!!,
                    incrementalCompilationContext = null,
                    extensionRegistrars = extensionRegistrars,
                    languageVersionSettings = languageVersionSettings,
                    registerExtraComponents = ::registerExtraComponents,
                    init = sessionConfigurator,
                )
            }",,6e1f
"fun initializeLibraryList(
            mainModule: TestModule,
            binaryModuleData: BinaryModuleData,
            targetPlatform: TargetPlatform,
            configuration: CompilerConfiguration,
            testServices: TestServices
        )",": DependencyListForCliModule {
            return DependencyListForCliModule.build(binaryModuleData) {
                when {
                    targetPlatform.isCommon() || targetPlatform.isJvm() -> {
                        dependencies(configuration.jvmModularRoots.map { it.toPath() }",,237b
No signature found,"fun testJavaNestedClass(alignment: issue.pack.RowIcon.RClass) {
}","// MODULE: dep
// FILE: issue/pack/RowIcon.java",6e1f
fun checkIt(),"{
    testJavaNestedClass(issue.pack.RowIcon().RClass())
}",,4c4c
No signature found,fun LexicalScope.getImplicitReceiversWithInstance(excludeShadowedByDslMarkers: Boolean = f,,6e1f
No signature found,"fun createExpression(psiFactory: KtPsiFactory, shortThis: Boolean = t",,6e1f
No signature found,"fun LexicalScope.getFactoryForImplicitReceiverWithSubtypeOf(receiverType: KotlinType): ReceiverExpressionFactory? =
    g",,6e1f
No signature found,"fun LexicalScope.getImplicitReceiversWithInstanceToExpression(
    excludeShadowedByDslMarkers: Boolean = f",,6e1f
"fun createExpression(psiFactory: KtPsiFactory, shortThis: Boolean)",": KtExpression {
                    return psiFactory.createExpression(if (shortThis && isImmediateThis) ""this"" else expressionText)
                }",,4e59
fun thisQualifierName(receiver: ReceiverParameterDescriptor),": Name? {
    val descriptor = receiver.containingDeclaration
    val name = descriptor.name
    if (!name.isSpecial) return name

    val functionLiteral = DescriptorToSourceUtils.descriptorToDeclaration(descriptor) as? KtFunctionLiteral
    return functionLiteral?.findLabelAndCall()?.first
}",,9c36
No signature found,"fun List<ReceiverParameterDescriptor>.shadowedByDslMarkers(): Set<ReceiverParameterDescriptor> {
    val typesByDslScopes = mutableMapOf<FqName, MutableList<ReceiverParameterDescriptor>>()

    for (receiver in this) {
        val dslMarkers = DslMarkerUtils.extractDslMarkerFqNames(receiver.value).all()
        for (marker in dslMarkers) {
            typesByDslScopes.getOrPut(marker) { mutableListOf() }",,6e1f
fun test(),"{
    val b = MyMapEntry()
    val key = b.key
    val value = b.value
    b.setValue(null)
}",// FILE: Test.java,fe98
fun foo(a: T),"}

// MODULE: m2(m1)
// FILE: b.kt
package p

public interface C<X> : B<X> {
    override fun foo(a: X)

}","// FIR_IDENTICAL
// !DIAGNOSTICS: -UNNECESSARY_SAFE_CALL -SAFE_CALL_WILL_CHANGE_NULLABILITY

// MODULE: m1
// FILE: a.kt",9f54
fun foo(a: T),"}

// MODULE: m4(m3, m2)
// FILE: c.kt
import p.*

fun test(b: B<String>?) {
    if (b is C) {
        b?.foo("""")
    }","// MODULE: m3
// FILE: b.kt",9f54
fun throwsEmpty(),{},,57ee
fun a(),": String
}

inline fun test(crossinline z: () -> String) =
    o","// TARGET_BACKEND: JVM
// WITH_STDLIB
// FILE: 1.kt",9ea5
fun a(),= p,,9ea5
No signature found,fun <T> call(crossinline z: () -> T) = z,,6e1f
fun box(),": String {
    // This captured parameter would be added to object constructor
    val captured = ""OK""
    var z: Any = ""fail""
    val res = test {
        call {
            z = {
                captured
            }",,4f27
"fun getModulesInfo(compilation: Compilation, modules: List<String>)",": ModulesInfo {
    if (modules.isEmpty()) return ModulesInfo(emptyList(), emptySet(), emptyList())

    val areModulesEnabled = compilation.compilerArgs.contains(""-fmodules"")
    withIndex(excludeDeclarationsFromPCH = false) { index ->
        ModularCompilation(compilation).use {
            val modulesASTFiles = getModulesASTFiles(index, it, modules)
            return buildModulesInfo(index, modules, modulesASTFiles, areModulesEnabled)
        }",,1b2a
"fun buildModulesInfo(
        index: CXIndex,
        modules: List<String>,
        modulesASTFiles: List<String>,
        areModulesEnabled: Boolean
)",": ModulesInfo {
    val ownHeaders = mutableSetOf<String>()
    val topLevelHeaders = linkedSetOf<IncludeInfo>()
    modulesASTFiles.forEach {
        val moduleTranslationUnit = clang_createTranslationUnit(index, it)!!
        try {
            val modulesHeaders = getModulesHeaders(index, moduleTranslationUnit, modules.toSet(), topLevelHeaders, areModulesEnabled)
            modulesHeaders.mapTo(ownHeaders) { it.canonicalPath }",,7eee
fun dispose(),"{
        moduleCacheDirectory?.deleteRecursively()
    }",,94b2
"fun getModulesASTFiles(index: CXIndex, compilation: ModularCompilation, modules: List<String>)",": List<String> {
    val compilationWithImports = compilation.copy(
            additionalPreambleLines = modules.map { ""@import $it;"" }",,f10a
fun importedASTFile(info: CXIdxImportedASTFileInfo),"{
                result += info.file!!.canonicalPath
            }",,501c
"fun getModulesHeaders(
        index: CXIndex,
        translationUnit: CXTranslationUnit,
        modules: Set<String>,
        topLevelHeaders: LinkedHashSet<IncludeInfo>,
        areModulesEnabled: Boolean
)",": Set<CXFile> {
    val nonModularIncludes = mutableMapOf<CXFile, MutableSet<CXFile>>()
    val result = mutableSetOf<CXFile>()
    val errors = mutableListOf<Throwable>()

    indexTranslationUnit(index, translationUnit, 0, object : Indexer {
        override fun importedASTFile(info: CXIdxImportedASTFileInfo) {
            val isModuleImport = info.isImplicit == 0
            if (isModuleImport && !areModulesEnabled) {
                val name = clang_Module_getFullName(info.module).convertAndDispose()
                val headerPath = clang_indexLoc_getCXSourceLocation(info.loc.readValue()).getContainingFile()?.canonicalPath
                val message = buildString {
                    appendLine(""use of '@import' when modules are disabled"")
                    appendLine(""header: '$headerPath'"")
                    appendLine(""module name: '$name'"")
                }",,730f
fun ppIncludedFile(info: CXIdxIncludedFileInfo),"{
            val file = info.file!!
            val includer = clang_indexLoc_getCXSourceLocation(info.hashLoc.readValue()).getContainingFile()

            val module = clang_getModuleForFile(translationUnit, file)

            if (includer == null) {
                // i.e. the header is included by the module itself.
                topLevelHeaders += IncludeInfo(file.path, clang_Module_getFullName(module).convertAndDispose())
            }",,c5d6
"fun <T> findReachable(roots: Set<T>, arcs: Map<T, Set<T>>)",": Set<T> {
    val visited = mutableSetOf<T>()

    fun dfs(vertex: T) {
        if (!visited.add(vertex)) return
        arcs[vertex].orEmpty().forEach { dfs(it) }",,2f5a
No signature found,"fun test(a: MutableList<out Int?>?) {
    if (a != null) {
        val b = a[0] // no SMARTCAST diagnostic
        if (b != null) {
            b.inc()
        }",// ISSUE: KT-29767,6e1f
fun x(),"= """,// FILE: test.kt,7869
fun box(),"{
    Foo()
    Bar()
    Boo()
    Zoo()
}",,4f27
No signature found,"fun foo(x: String?): Int {
    while (true) {
        // After the check, smart cast should work
        val y = if (x == null) break else <!DEBUG_INFO_SMARTCAST!>x<!>
        // y is not null in both branches
        y.length
    }",,6e1f
fun test(),"{
    A.<!DEPRECATED_ACCESS_TO_ENUM_ENTRY_COMPANION_PROPERTY!>entries<!>

    with(A) {
        entries
    }","// !LANGUAGE: +EnumEntries +PrioritizedEnumEntries
// WITH_STDLIB
// FIR_DUMP",fe98
fun main(c: CollectionWithSize),"{
    CompressionType.ZIP.<!OVERLOAD_RESOLUTION_AMBIGUITY!>name<!> <!UNRESOLVED_REFERENCE_WRONG_RECEIVER!>checkType<!> { <!INAPPLICABLE_CANDIDATE!>_<!><<!CANNOT_INFER_PARAMETER_TYPE!>Double<!>>() }","// !LANGUAGE: -PreferJavaFieldOverload

// SKIP_TXT
// !CHECK_TYPE

// FILE: CompressionType.java",a07a
fun foo(),{},"// WITH_STDLIB
// FILE: part1.kt",519f
fun bar(),{},// FILE: part2.kt,66c3
fun box(),": String {

    var i = 0

    i = 0
    global = """"
    do {
        if (i<3) {i++; continue}",// EXPECTED_REACHABLE_NODES: 1283,4f27
fun foo(),"{
    val x: String?
    x = materialize()!! // Should be treated as non-nullable assignment
    x.length // Should be allowed
}","// FIR_DUMP
// ISSUE: KT-55804",519f
fun <E> materialize(),: E = T,,8a86
fun <F> test(f: F),= f,,c9a6
fun main(),"{
    test<String>("""").length
    test<String?>(null).length // `.length` should be allowed because return type of ""test"" should be inferred to `F & Any`
}",,d987
fun info(message: String),"{
        if (isVerbose) {
            report(""INFO"", message, infoWriter)
        }",,0d0a
fun warn(message: String),"{
        report(""WARN"", message, warnWriter)
    }",,7d11
fun error(message: String),"{
        report(""ERROR"", message, errorWriter)
    }",,4df8
fun exception(e: Throwable),"{
        errorWriter.println(""An error occurred:"")
        e.printStackTrace(errorWriter)
        errorWriter.flush()
    }",,6f48
"fun report(prefix: String, message: String, writer: PrintWriter)","{
        writer.println(""[$prefix] $message"")
        writer.flush()
    }",,dd34
fun box(),": String {
    val actualIndices = mutableListOf<Int>()
    val actualValues = mutableListOf<Int>()
    for ((index, i) in J.listOfNotNull().withIndex()) {
        actualIndices += index
        actualValues += i
    }","// !LANGUAGE: +StrictJavaNullabilityAssertions
// TARGET_BACKEND: JVM
// WITH_STDLIB
// JVM_TARGET: 1.8

// FILE: box.kt",4f27
fun box(),": String {
    return OK().foo
}","// TARGET_BACKEND: JVM
// WITH_STDLIB
// FILE: 1.kt",4f27
fun <T> getT(),: T = n,,cb11
fun annotationProcessor(fqName: String),"{
        val oldProcessors = this.processors
        this.processors = if (oldProcessors.isEmpty()) fqName else ""$oldProcessors,$fqName""
    }",,0489
fun annotationProcessors(vararg fqName: String),"{
        fqName.forEach(this::annotationProcessor)
    }",,6e50
No signature found,"fun arguments(closure: Closure<*>) {
        apOptionsActions += { apOptions ->
            apOptions.executeClosure(closure)
        }",,6e1f
No signature found,"fun arguments(action: KaptArguments.() -> Unit) {
        apOptionsActions += action
    }",,6e1f
No signature found,"fun javacOptions(closure: Closure<*>) {
        javacOptionsActions += { javacOptions ->
            javacOptions.executeClosure(closure)
        }",,6e1f
No signature found,"fun javacOptions(action: KaptJavacOption.() -> Unit) {
        javacOptionsActions += action
    }",,6e1f
fun getJavacOptions(),": Map<String, String> {
        val result = KaptJavacOptionsDelegate()
        javacOptionsActions.forEach { it(result) }",,204c
No signature found,"fun getAdditionalArguments(project: Project, variantData: Any?, androidExtension: Any?): Map<String, String> {
        val result = KaptAnnotationProcessorOptions(project, variantData, androidExtension)
        apOptionsActions.forEach { it(result) }",,6e1f
No signature found,"fun getAdditionalArgumentsForJavac(project: Project, variantData: Any?, androidExtension: Any?): List<String> {
        val javacArgs = mutableListOf<String>()
        for ((key, value) in getAdditionalArguments(project, variantData, androidExtension)) {
            javacArgs += ""-A"" + key + (if (value.isNotEmpty()) ""=$value"" else """")
        }",,6e1f
"fun arg(name: Any, vararg values: Any)","{
        options.put(name.toString(), values.joinToString("" ""))
    }",,0cab
No signature found,fun execute(closure: Closure<*>) = e,,6e1f
"fun option(name: Any, value: Any)","{
        options.put(name.toString(), value.toString())
    }",,88bb
fun option(name: Any),"{
        options.put(name.toString(), """")
    }",,eb47
No signature found,fun execute(closure: Closure<*>) = e,,6e1f
No signature found,"fun Any?.executeClosure(closure: Closure<*>) {
    closure.resolveStrategy = Closure.DELEGATE_FIRST
    closure.delegate = this
    closure.call()
}",,6e1f
fun test(),": UInt {
    var c: UInt
    run {
        c = 1u
    }",,fe98
No signature found,"fun Collection<String>.guavaPackage(): Set<String> {
        return mapTo(mutableSetOf()) { it.guavaPackage() }",,6e1f
No signature found,"fun String.guavaPackage(): String {
        val prefix = listOf(""com"", ""google"", ""common"", ""collect"").joinToString(""."")
        return ""$prefix.$this""
    }",,6e1f
fun test(),= c,"// FIR_IDENTICAL
// SKIP_TXT
// ISSUE: KT-52691",fe98
fun invoke(),= C,,0a26
fun invoke(),{},,0a26
fun compose(funInterfaces: FunInterface),"fun interface FunInterface : () -> Unit

 = f",,f9b4
fun <T> materialize(),: T = n,// !DIAGNOSTICS: -UNUSED_PARAMETER -UNUSED_EXPRESSION -CAST_NEVER_SUCCEEDS -UNUSED_VARIABLE -UNCHECKED_CAST,6522
No signature found,fun <K> foo0(x: K?): Bar<K> = m,,6e1f
No signature found,fun <K> foo1(x: K?): Foo<Bar<K>> = m,,6e1f
No signature found,"fun <K, T: K> foo2(x: K?): Foo<Bar<T>> = m",,6e1f
No signature found,"fun <T, K: T> foo3(x: K?): Foo<Bar<T>> = m",,6e1f
No signature found,fun <K> foo4(x: K?): Foo<Bar<out K>> = m,,6e1f
No signature found,fun <K> foo5(x: K?): Bar<in K> = m,,6e1f
No signature found,fun <K> foo6(x: K?): OutBar<K> = m,,6e1f
No signature found,fun <K> foo7(x: K?): InBar<K> = m,,6e1f
No signature found,"fun <T, K: T, S: K, M: S> foo8(x: T?): Foo<Bar<M>> = m",,6e1f
No signature found,"fun <T, K: T, S: K, M: S> foo9(x: M?): Foo<Bar<T>> = m",,6e1f
No signature found,"fun <T: J, K: T, S: K, M: S, J: L, L> foo10(x: L?, y: Foo<Bar<T>>): Bar<M> = m",,6e1f
No signature found,"fun <T: J, K: T, S: K, M: S, J: L, L> foo11(x: M?, y: Foo<Bar<T>>): Bar<L> = m",,6e1f
No signature found,fun <K: Any> foo12(x: K?): Bar<K> = m,,6e1f
No signature found,fun <K: T> foo1(x: K?): Bar<T> = m,,6e1f
No signature found,"fun <K> foo14(x: K?): Bar<K> where K: Comparable<K>, K: CharSequence = m",,6e1f
No signature found,"fun <K: T?, T> foo15(x: T): Bar<K> = m",,6e1f
No signature found,"fun <K: T?, T> foo16(x: K): Bar<T> = m",,6e1f
No signature found,"fun <K: T?, T> foo17(x: K): Bar<T> = n",,6e1f
fun <K> foo19(x: Bar<K>),: K = n,,390e
No signature found,fun <K> Bar<K>.foo20(): K = n,,6e1f
No signature found,fun <K> foo21(x: K?): Foo<Foo<OutBar<K>>> = m,,6e1f
No signature found,fun <K> foo22(x: K?): Foo<Foo<InBar<K>>> = m,,6e1f
No signature found,fun <K> foo23(x: K?): Foo<Foo<Bar<out K>>> = m,,6e1f
No signature found,fun <K> foo24(x: K?): Foo<Foo<Bar<in K>>> = m,,6e1f
No signature found,fun <K> foo25(x: K?): Bar<out K> = m,,6e1f
No signature found,fun <K> foo26(x: K?): Foo<out Foo<out Bar<out K>>> = m,,6e1f
No signature found,fun <K> foo27(x: K?): Foo<out Foo<Bar<out K>>> = m,,6e1f
No signature found,fun <K> foo28(x: K?): OutBar<OutBar<OutBar<K>>> = m,,6e1f
No signature found,fun <K> foo29(x: K?): OutBar<Bar<OutBar<K>>> = m,,6e1f
No signature found,fun <K> foo30(x: K?): OutBar<Bar<out OutBar<K>>> = m,,6e1f
No signature found,fun <K> foo31(x: K?): OutBarAliasUseSite<K> = m,,6e1f
No signature found,fun <K> foo32(x: K?): OutBarAliasDecSite<K> = m,,6e1f
No signature found,fun <K> foo33(x: K?): OutBar<InBar<OutBar<K>>> = m,,6e1f
No signature found,fun <K> foo34(x: K?): OutBar<Bar<in OutBar<K>>> = m,,6e1f
No signature found,fun <K> foo35(x: K?): InBar<K> = m,,6e1f
No signature found,fun <K> foo36(x: K?): Bar<in K> = m,,6e1f
No signature found,"fun <K, T: Bar<K>> foo37(x: K?): T = m",,6e1f
No signature found,"fun <K, T: Bar<S>, S: Bar<K>> foo38(x: K?): T = m",,6e1f
No signature found,"fun <K, T: Bar<S>, S: Bar<K>> foo39(x: K?): Bar<T> = m",,6e1f
No signature found,"fun <K, T: Bar<K>> foo40(x: K?): Bar<T> = m",,6e1f
No signature found,"fun <K, T: Bar<K>> foo41(x: K?): T = m",,6e1f
No signature found,"fun <K, S: K, T> foo42(x: K?): T where T: IFoo<S> = m",,6e1f
No signature found,"fun <K, S: K, T> foo43(x: K?): T where T: IBar<S>, T: IFoo<S> = m",,6e1f
No signature found,"fun <K, S, T: S> foo44(x: K?): T where S: IFoo<String>, S: IBar<K> = m",,6e1f
No signature found,"fun <K, T: OutBar<S>, S: Bar<K>> foo45(x: K?): OutBar<T> = m",,6e1f
No signature found,"fun <K, T: OutBar<S>, S: OutBar<K>> foo46(x: K?): Bar<T> = m",,6e1f
No signature found,"fun <K, T: OutBar<S>, S: OutBar<K>> foo47(x: K?): OutBar<T> = m",,6e1f
No signature found,fun <U: Any> foo48(fn: Function0<U?>): Bar<U> = m,,6e1f
No signature found,fun <R> takeLambda(block: () -> R): R = m,,6e1f
No signature found,fun <T : Comparable<T>> nullsLast() = n,,6e1f
"fun <K> take(x: Foo<K>, comparator: Foo<K>)",: Foo<K> {<!NO_RETURN_IN_FUNCTION_WITH_BLOCK_BODY!>},,2c30
fun <L> test(),"{
    take(null as Foo<String?>, nullsLast())
}",,29fd
No signature found,fun <K : Comparable<K>> Inv1<K>.assertStableSorted() {},,6e1f
No signature found,fun <K : Comparable<K>> Inv2<K>.assertStableSorted() = I,,6e1f
No signature found,"fun Throwable.check(expectedMessage: String, expectedCauseMessage: String?) {
    assertEquals(expectedMessage, message)
    assertEquals(expectedCauseMessage, cause?.message)
}",// EXPECTED_REACHABLE_NODES: 1315,6e1f
fun box(),": String {

    Ex1().check(""A"", ""B"")
    Ex2().check(""D"", ""C"")

    Ex3().check(""O"", ""K"")
    Ex4().check(""O"", ""K"")
    Ex5().check(""!"", ""K"")

    A().check(""AM"", ""AC"")
    B().check(""BM"", ""BC"")
    C().check(""BM"", ""BC"")

    return ""OK""
}",,4f27
No signature found,fun <reified T : Comparable<T>> recursionInReified() = t,,6e1f
fun box(),": String {
    val l = recursionInReified<Int>()
    assertEquals(List::class, l.classifier)
    assertEquals(Int::class, l.arguments.single().type!!.classifier)

    return ""OK""
}",,4f27
fun getContainingDeclaration(),": ModuleDescriptor {
        return moduleDescriptor
    }",,839a
fun getMemberScope(),": MemberScope {
        return MemberScope.Empty
    }",,d431
fun getOriginal(),": DeclarationDescriptorWithSource {
        return this
    }",,67dc
fun getName(),": Name {
        return fqName.shortName()
    }",,4692
No signature found,"fun <R : Any?, D : Any?> accept(visitor: DeclarationDescriptorVisitor<R, D>?, data: D): R {
        return visitor?.visitPackageFragmentDescriptor(this, data) as R
    }",,6e1f
fun getSource(),": SourceElement {
        TODO(""not implemented"")
    }",,7215
No signature found,"fun acceptVoid(visitor: DeclarationDescriptorVisitor<Void, Void>?) {
        visitor?.visitPackageFragmentDescriptor(this, null)
    }",,6e1f
fun setNewStr(newString: String),"{
        this.str = newString
    }",,e135
fun <T> echo(value: T),: T = v,,135a
fun bar(),"fun <T : Collection<S>, S : List<<!WRONG_MODIFIER_TARGET!>out<!> *>> foo(x: T)
     {
        val s = ArrayList<ArrayList<Int>>()
        foo(s)
    }","// FIR_IDENTICAL
// Reproduces exception in TypeResolver.kt: EA-66870",66c3
fun method(),{},"// TARGET_BACKEND: JVM
// FULL_JDK
// WITH_REFLECT",f9b6
fun box(),": String {
    val baos = ByteArrayOutputStream()
    val oos = ObjectOutputStream(baos)
    oos.writeObject(Foo::prop)
    oos.writeObject(Foo::method)
    oos.writeObject(::Foo)
    oos.close()

    val bais = ByteArrayInputStream(baos.toByteArray())
    val ois = ObjectInputStream(bais)
    assertEquals(Foo::prop, ois.readObject())
    assertEquals(Foo::method, ois.readObject())
    assertEquals(::Foo, ois.readObject())
    ois.close()

    return ""OK""
}",,4f27
No signature found,"fun test(x: Any?): Any {
    val z = x ?: x!!
    // x is not null in both branches
    x.hashCode()
    return z
}",,6e1f
No signature found,fun Status.delete() = T,,6e1f
No signature found,"fun Status.validate() {
    try {
        if (!isOk) {
            throw Error(""Status is not ok: $errorMessage"")
        }",,6e1f
No signature found,"fun <T> statusValidated(block: (Status) -> T): T {
    val status = TF_NewStatus()!!
    val result = block(status)
    status.validate()
    return result
}",,6e1f
fun scalarTensor(value: Int),": Tensor {
    val data = nativeHeap.allocArray<IntVar>(1)
    data[0] = value

    return TF_NewTensor(
            TF_INT32,
            /* dims = */ null,
            /* num_dims = */ 0,
            /* data = */ data,
            /* len = */ IntVar.size.convert(),
            /* deallocator = */ staticCFunction { dataToFree, _, _ -> nativeHeap.free(dataToFree!!.reinterpret<IntVar>()) }",,922b
No signature found,"fun operation(type: String, name: String, initDescription: (CPointer<TF_OperationDescription>) -> Unit): Operation {
        val description = TF_NewOperation(tensorflowGraph, type, name)!!
        initDescription(description)
        return statusValidated { TF_FinishOperation(description, it)!! }",,6e1f
No signature found,"fun constant(value: Int, name: String = """,,6e1f
No signature found,"fun intInput(name: String = """,,6e1f
No signature found,"fun add(left: Operation, right: Operation, name: String = """,,6e1f
No signature found,fun Operation.plus(right: Operation) = a,,6e1f
No signature found,"fun <T> withSession(block: Session.() -> T): T {
        val session = Session(this)
        try {
            return session.block()
        }",,6e1f
fun createNewSession(),": CPointer<TF_Session> {
        val options = TF_NewSessionOptions()
        val session = statusValidated { TF_NewSession(graph.tensorflowGraph, options, it)!! }",,ca94
fun clearInputValues(),"{
        for (inputValue in inputValues) {
            TF_DeleteTensor(inputValue)
        }",,6294
fun clearOutputValues(),"{
        for (outputValue in outputValues) {
            if (outputValue != null)
                TF_DeleteTensor(outputValue)
        }",,e709
fun dispose(),"{
        clearInputValues()
        clearOutputValues()
        clearInputs()
        clearOutputs()

        if (tensorflowSession != null) {
            statusValidated { TF_CloseSession(tensorflowSession, it) }",,94b2
"fun setInputsWithValues(inputsWithValues: List<Pair<Operation, Tensor>>)","{
        clearInputValues()
        clearInputs()
        for ((input, inputValue) in inputsWithValues) {
            this.inputs.add(nativeHeap.alloc<TF_Output>().apply { oper = input; index = 0 }",,547f
fun setOutputs(outputs: List<Operation>),"{
        clearOutputValues()
        clearOutputs()
        this.outputs = outputs.map { nativeHeap.alloc<TF_Output>().apply { oper = it; index = 0 }",,bb17
fun clearOutputs(),"{
        this.outputs.forEach { nativeHeap.free(it) }",,392a
fun clearInputs(),"{
        this.inputs.forEach { nativeHeap.free(it) }",,ff7b
No signature found,"fun invoke(outputs: List<Operation>, inputsWithValues: List<Pair<Operation, Tensor>> = l",,6e1f
No signature found,"fun invoke(output: Operation, inputsWithValues: List<Pair<Operation, Tensor>> = l",,6e1f
fun invoke(),": List<Tensor?> {
        if (inputs.size != inputValues.size) {
            throw Error(""Call SetInputs() before Run()"")
        }",,0a26
fun main(),"{
    println(""Hello, TensorFlow ${TF_Version()!!.toKString()}",,d987
fun box(),": String {
    val c = A(1, ""1"")
    c.b = 2
    c.a = ""2""
    return if (c.b == 2 && c.a == ""2"") ""OK"" else ""fail""
}",// EXPECTED_REACHABLE_NODES: 1282,4f27
fun success(),"{
        var isClosed = false
        val resource = AutoCloseable(closeAction = { isClosed = true }",,3fc6
fun closeFails(),"{
        assertFailsWith<ResourceCloseException> {
            AutoCloseable { throw ResourceCloseException() }",,e6f4
fun multipleCloseInvocations(),"{
        var counter = 0
        val resource = AutoCloseable { counter++ }",,5681
fun <R> foo(),: Inner<R>? = n,"// SKIP_JDK6
// TARGET_BACKEND: JVM
// WITH_REFLECT",85df
fun box(),": String {
    kotlin.test.assertEquals(
        ""Outer<S>\$Inner<R>"",
        Outer::class.java.declaredMethods.single().genericReturnType.toString()
    )

    return ""OK""
}",,4f27
fun <reified M> parse(),: M? = T,// !DIAGNOSTICS: -UNUSED_PARAMETER -UNUSED_VARIABLE,2df5
No signature found,"fun test(s: String?, silent: Boolean) {
    val result: ExpectedType =
        if (s != null) {
            parse() ?: TODO()
        }",,6e1f
No signature found,"fun foo(a: A<*>, b: B<*>): Boolean = a",// ISSUE: KT-47884,6e1f
No signature found,"fun bar(a: A<*>, b: B<*>): Boolean = a",,6e1f
No signature found,"fun <T> withFunctionSymbol(crossinline action: KtAnalysisSession.(FType) -> T): T =
        f",,6e1f
fun isVarArgs(),: Boolean = _,,b8ca
fun isDeprecated(),: Boolean = _,,b4f8
fun getNameIdentifier(),: PsiIdentifier = K,,0a93
fun getParameterList(),: PsiParameterList = _,,5ccf
fun computeThrowsList(builder: LightReferenceListBuilder),"{
        withFunctionSymbol { functionSymbol ->
            functionSymbol.computeThrowsList(
                builder,
                this@SymbolLightMethod,
                containingClass,
            )
        }",,620b
fun isValid(),: Boolean = s,,a2fc
No signature found,"fun isEquivalentTo(another: PsiElement?): Boolean {
        return super.isEquivalentTo(another) || isOriginEquivalentTo(another)
    }",,6e1f
No signature found,"fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (other !is SymbolLightMethod<*> ||
            other.methodIndex != methodIndex ||
            other.ktModule != ktModule ||
            other.argumentsSkipMask != argumentsSkipMask
        ) return false

        if (functionDeclaration != null || other.functionDeclaration != null) {
            return functionDeclaration == other.functionDeclaration
        }",,6e1f
fun hashCode(),: Int = k,,6874
fun suppressWildcards(),": Boolean? =
        w",,3679
No signature found,"fun <T> withCapturedTypeParameters(block: () -> T): T {
        return block()
    }","// FIR_IDENTICAL
// IGNORE_BACKEND_K1: JS_IR

// MODULE: m1
// FILE: BaseFirBuilder.kt",6e1f
fun run(),"fun interface SAM {
    
}",// SAM_CONVERSIONS: CLASS,354f
fun box(),": String {
    val f = { }",,4f27
fun hasNext(),: Boolean = i,"// WITH_STDLIB
// WORKS_WHEN_VALUE_CLASS
// LANGUAGE: +ValueClasses, +GenericInlineClassParameter",2c39
fun next(),": Map.Entry<Z<Int>, Z<Int>> = M",,cb14
fun iterator(),": Iterator<Map.Entry<Z<Int>, Z<Int>>> = M",,c20a
fun containsKey(key: Z<Int>),: Boolean = k,,6107
fun containsValue(value: Z<Int>),: Boolean = s,,a991
fun get(key: Z<Int>),= s,,cd8c
fun isEmpty(),: Boolean = s,,464e
fun box(),": String {
    val zm = ZArrayMap(IntArray(5))

    zm.containsKey(Z(0))
    zm.containsValue(Z(0))
    zm[Z(0)]

    zm.containsKey(object {}",,4f27
